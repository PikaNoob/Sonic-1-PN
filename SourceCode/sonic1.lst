00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            ; Vladikcomper:     Remember, that this ASM code and some files were heavy 
00000000                            ;                   modificated, so replacing them may cause compile errors.  
00000000                                                include "sound/_smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG PN             ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG PN             ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332                            		;movea.l	#Checksum,a1	; read the checksum
00000332                            		;cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000332                            		;bne.w	CheckSumError	; if they don't match, branch
00000332 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000336 7E00                       		moveq	#0,d7
00000338 3C3C 007F                  		move.w	#$7F,d6
0000033C                            
0000033C                            loc_348:
0000033C 2CC7                       		move.l	d7,(a6)+
0000033E 51CE FFFC                  		dbf	d6,loc_348
00000342 1039 00A1 0001             		move.b	($A10001).l,d0
00000348 0200 00C0                  		andi.b	#$C0,d0
0000034C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000350 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000358                            
00000358                            GameInit:
00000358 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000035E 7E00                       		moveq	#0,d7
00000360 3C3C 3F7F                  		move.w	#$3F7F,d6
00000364                            
00000364                            GameClrRAM:
00000364 2CC7                       		move.l	d7,(a6)+
00000366 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000036A 6100 0000                  		bsr.w	VDPSetupGame
0000036E 6100 0000                  		bsr.w	SoundDriverLoad
00000372 6100 0000                  		bsr.w	JoypadInit
00000376 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000037C                            
0000037C                            MainGameLoop:
0000037C 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000380 0240 001C                  		andi.w	#$1C,d0
00000384 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000388 60F2                       		bra.s	MainGameLoop
0000038A                            ; ===========================================================================
0000038A                            ; ---------------------------------------------------------------------------
0000038A                            ; Main game mode array
0000038A                            ; ---------------------------------------------------------------------------
0000038A                            
0000038A                            GameModeArray:
0000038A 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000038E                            ; ===========================================================================
0000038E 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000392                            ; ===========================================================================
00000392 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000396                            ; ===========================================================================
00000396 6000 0000                  		bra.w	Level		; Normal Level ($0C)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003AA                            ; ===========================================================================
000003AA 4E75                       		rts	
000003AC                            ; ===========================================================================
000003AC                            
000003AC                            ; Vladikcomper: Red Screen was commented ;) 
000003AC                            
000003AC                            ;CheckSumError:
000003AC                            ;		bsr.w	VDPSetupGame
000003AC                            ;		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003AC                            ;		moveq	#$3F,d7
000003AC                            ;
000003AC                            ;CheckSum_Red:
000003AC                            ;		move.w	#$E,($C00000).l	; fill screen with colour red
000003AC                            ;		dbf	d7,CheckSum_Red	; repeat $3F more times
000003AC                            ;
000003AC                            ;CheckSum_Loop:
000003AC                            ;		bra.s	CheckSum_Loop
000003AC                            ; ===========================================================================
000003AC                            
000003AC                            BusError:
000003AC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003B2 6000                       		bra.s	loc_43A
000003B4                            ; ===========================================================================
000003B4                            
000003B4                            AddressError:
000003B4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003BA 6000                       		bra.s	loc_43A
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            IllegalInstr:
000003BC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003C2 54AF 0002                  		addq.l	#2,2(sp)
000003C6 6000                       		bra.s	loc_462
000003C8                            ; ===========================================================================
000003C8                            
000003C8                            ZeroDivide:
000003C8 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003CE 6000                       		bra.s	loc_462
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            ChkInstr:
000003D0 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_462
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            TrapvInstr:
000003D8 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003DE 6000                       		bra.s	loc_462
000003E0                            ; ===========================================================================
000003E0                            
000003E0                            PrivilegeViol:
000003E0 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
000003E6 6000                       		bra.s	loc_462
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            Trace:
000003E8 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
000003EE 6000                       		bra.s	loc_462
000003F0                            ; ===========================================================================
000003F0                            
000003F0                            Line1010Emu:
000003F0 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
000003F6 54AF 0002                  		addq.l	#2,2(sp)
000003FA 6000                       		bra.s	loc_462
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            Line1111Emu:
000003FC 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ErrorExcept:
00000408 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_43A:
00000410 46FC 2700                  		move	#$2700,sr
00000414 544F                       		addq.w	#2,sp
00000416 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000041A 544F                       		addq.w	#2,sp
0000041C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000422 6100 0000                  		bsr.w	ShowErrorMsg
00000426 202F 0002                  		move.l	2(sp),d0
0000042A 6100 0000                  		bsr.w	sub_5BA
0000042E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000432 6100 0000                  		bsr.w	sub_5BA
00000436 6000                       		bra.s	loc_478
00000438                            ; ===========================================================================
00000438                            
00000438                            loc_462:
00000438 46FC 2700                  		move	#$2700,sr
0000043C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000442 6100 0000                  		bsr.w	ShowErrorMsg
00000446 202F 0002                  		move.l	2(sp),d0
0000044A 6100 0000                  		bsr.w	sub_5BA
0000044E                            
0000044E                            loc_478:
0000044E 6100 0000                  		bsr.w	ErrorWaitForC
00000452 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000458 46FC 2300                  		move	#$2300,sr
0000045C 4E73                       		rte	
0000045E                            
0000045E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000045E                            
0000045E                            
0000045E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000045E 4DF9 00C0 0000             		lea	($C00000).l,a6
00000464 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000046E 41F9 0000 0000             		lea	(Art_Text).l,a0
00000474 323C 027F                  		move.w	#$27F,d1
00000478                            
00000478                            Error_LoadGfx:
00000478 3C98                       		move.w	(a0)+,(a6)
0000047A 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000047E 7000                       		moveq	#0,d0		; clear	d0
00000480 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
00000484 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000488 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000048C 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
00000496 7212                       		moveq	#$12,d1		; number of characters
00000498                            
00000498                            Error_LoopChars:
00000498 7000                       		moveq	#0,d0
0000049A 1018                       		move.b	(a0)+,d0
0000049C 0640 0790                  		addi.w	#$790,d0
000004A0 3C80                       		move.w	d0,(a6)
000004A2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004A6 4E75                       		rts	
000004A8                            ; End of function ShowErrorMsg
000004A8                            
000004A8                            ; ===========================================================================
000004A8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004AC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004B0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004B4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004B8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004BC 0000                       		dc.w asc_5A6-ErrorText
000004BE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004D1 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004E4 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004F7 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000050A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000051D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000530 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000543 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000556 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000569 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
0000057C 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000590 00                         		even
00000590                            
00000590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000590                            
00000590                            
00000590                            sub_5BA:				; XREF: loc_43A; loc_462
00000590 3CBC 07CA                  		move.w	#$7CA,(a6)
00000594 7407                       		moveq	#7,d2
00000596                            
00000596                            loc_5C0:
00000596 E998                       		rol.l	#4,d0
00000598 6100                       		bsr.s	sub_5CA
0000059A 51CA FFFA                  		dbf	d2,loc_5C0
0000059E 4E75                       		rts	
000005A0                            ; End of function sub_5BA
000005A0                            
000005A0                            
000005A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005A0                            
000005A0                            
000005A0                            sub_5CA:				; XREF: sub_5BA
000005A0 3200                       		move.w	d0,d1
000005A2 0241 000F                  		andi.w	#$F,d1
000005A6 0C41 000A                  		cmpi.w	#$A,d1
000005AA 6500                       		bcs.s	loc_5D8
000005AC 5E41                       		addq.w	#7,d1
000005AE                            
000005AE                            loc_5D8:
000005AE 0641 07C0                  		addi.w	#$7C0,d1
000005B2 3C81                       		move.w	d1,(a6)
000005B4 4E75                       		rts	
000005B6                            ; End of function sub_5CA
000005B6                            
000005B6                            
000005B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005B6                            
000005B6                            
000005B6                            ErrorWaitForC:				; XREF: loc_478
000005B6 6100 0000                  		bsr.w	ReadJoypads
000005BA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005C0 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005C4 4E75                       		rts	
000005C6                            ; End of function ErrorWaitForC
000005C6                            
000005C6                            ; ===========================================================================
000005C6                            
000005C6                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AE6                            		even
00000AE6                            
00000AE6                            ; ===========================================================================
00000AE6                            
00000AE6                            loc_B10:				; XREF: Vectors
00000AE6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AEA 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AEE 6700                       		beq.s	loc_B88
00000AF0 3039 00C0 0004             		move.w	($C00004).l,d0
00000AF6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B00 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B08 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B0E 6700                       		beq.s	loc_B42
00000B10 303C 0700                  		move.w	#$700,d0
00000B14                            
00000B14                            loc_B3E:
00000B14 51C8 FFFE                  		dbf	d0,loc_B3E
00000B18                            
00000B18                            loc_B42:
00000B18 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B1C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B22 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B28 0240 003E                  		andi.w	#$3E,d0
00000B2C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B30 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B34                            
00000B34                            loc_B5E:				; XREF: loc_B88
00000B34 4EB9 0000 0000             		jsr	sub_71B4C
00000B3A                            
00000B3A                            loc_B64:				; XREF: loc_D50
00000B3A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B3E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B42 4E73                       		rte	
00000B44                            ; ===========================================================================
00000B44 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B48 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B4C 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B50 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B54 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B58 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B5C 0000                       		dc.w loc_E72-off_B6E
00000B5E                            ; ===========================================================================
00000B5E                            
00000B5E                            loc_B88:				; XREF: loc_B10; off_B6E
00000B5E 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B64 6700                       		beq.s	loc_B9A
00000B66 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B6C 6600 FFC6                  		bne.w	loc_B5E
00000B70                            
00000B70                            loc_B9A:
00000B70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B76 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B7A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B80 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B86 6700                       		beq.s	loc_BBA
00000B88 303C 0700                  		move.w	#$700,d0
00000B8C                            
00000B8C                            loc_BB6:
00000B8C 51C8 FFFE                  		dbf	d0,loc_BB6
00000B90                            
00000B90                            loc_BBA:
00000B90 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B96 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000B9E                            
00000B9E                            loc_BC8:
00000B9E 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BA6 66F6                       		bne.s	loc_BC8
00000BA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BAC 6600                       		bne.s	loc_BFE
00000BAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BC0 3ABC 977F                  		move.w	#$977F,(a5)
00000BC4 3ABC C000                  		move.w	#$C000,(a5)
00000BC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BD2 6000                       		bra.s	loc_C22
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            loc_BFE:				; XREF: loc_BC8
00000BD4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BE6 3ABC 977F                  		move.w	#$977F,(a5)
00000BEA 3ABC C000                  		move.w	#$C000,(a5)
00000BEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BF8                            
00000BF8                            loc_C22:				; XREF: loc_BC8
00000BF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BFC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C04 6000 FF2E                  		bra.w	loc_B5E
00000C08                            ; ===========================================================================
00000C08                            
00000C08                            loc_C32:				; XREF: off_B6E
00000C08 6100 0000                  		bsr.w	sub_106E
00000C0C                            
00000C0C                            loc_C36:				; XREF: off_B6E
00000C0C 4A78 F614                  		tst.w	($FFFFF614).w
00000C10 6700 0000                  		beq.w	locret_C42
00000C14 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C18                            
00000C18                            locret_C42:
00000C18 4E75                       		rts	
00000C1A                            ; ===========================================================================
00000C1A                            
00000C1A                            loc_C44:				; XREF: off_B6E
00000C1A 6100 0000                  		bsr.w	sub_106E
00000C1E 6100 0000                  		bsr.w	sub_6886
00000C22 6100 0000                  		bsr.w	sub_1642
00000C26 4A78 F614                  		tst.w	($FFFFF614).w
00000C2A 6700 0000                  		beq.w	locret_C5C
00000C2E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C32                            
00000C32                            locret_C5C:
00000C32 4E75                       		rts	
00000C34                            ; ===========================================================================
00000C34                            
00000C34                            loc_C5E:				; XREF: off_B6E
00000C34 6100 0000                  		bsr.w	sub_106E
00000C38 4E75                       		rts	
00000C3A                            ; ===========================================================================
00000C3A                            
00000C3A                            loc_C64:				; XREF: off_B6E
00000C3A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C40 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C44                            
00000C44                            loc_C6E:				; XREF: off_B6E
00000C44 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C4C                            
00000C4C                            loc_C76:
00000C4C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C54 66F6                       		bne.s	loc_C76		; if not, branch
00000C56 6100 0000                  		bsr.w	ReadJoypads
00000C5A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C5E 6600                       		bne.s	loc_CB0
00000C60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C66 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C6C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C72 3ABC 977F                  		move.w	#$977F,(a5)
00000C76 3ABC C000                  		move.w	#$C000,(a5)
00000C7A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C84 6000                       		bra.s	loc_CD4
00000C86                            ; ===========================================================================
00000C86                            
00000C86                            loc_CB0:				; XREF: loc_C76
00000C86 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C8C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C92 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C98 3ABC 977F                  		move.w	#$977F,(a5)
00000C9C 3ABC C000                  		move.w	#$C000,(a5)
00000CA0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CA6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAA                            
00000CAA                            loc_CD4:				; XREF: loc_C76
00000CAA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CBA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CC0 3ABC 977F                  		move.w	#$977F,(a5)
00000CC4 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CC8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CDE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000CE4 3ABC 977F                  		move.w	#$977F,(a5)
00000CE8 3ABC 7800                  		move.w	#$7800,(a5)
00000CEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF6 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CFC                            
00000CFC                            loc_D50:
00000CFC                            		;move	#$83,($FFFFF640).w ;add
00000CFC                            		;jsr	Process_DMA
00000CFC 33FC 0000 00A1 1100                        move.w	#0,($A11100).l
00000D04 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D0A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D10 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D16 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D1C 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D22 6400                       		bcc.s	Demo_Time
00000D24 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D2A 588F                       		addq.l	#4,sp
00000D2C 6000 FE0C                  		bra.w	loc_B64
00000D30                            
00000D30                            ; ---------------------------------------------------------------------------
00000D30                            ; Subroutine to	run a demo for an amount of time
00000D30                            ; ---------------------------------------------------------------------------
00000D30                            
00000D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D30                            
00000D30                            
00000D30                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D30 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D34 4EB9 0000 0000             		jsr	AniArt_Load
00000D3A 4EB9 0000 0000             		jsr	HudUpdate
00000D40 6100 0000                  		bsr.w	sub_165E
00000D44 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D48 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D4C 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D50                            
00000D50                            Demo_TimeEnd:
00000D50 4E75                       		rts	
00000D52                            ; End of function Demo_Time
00000D52                            
00000D52                            ; ===========================================================================
00000D52                            
00000D52                            loc_DA6:				; XREF: off_B6E
00000D52 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D5A                            
00000D5A                            loc_DAE:
00000D5A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000D62 66F6                       		bne.s	loc_DAE		; if not, branch
00000D64 6100 0000                  		bsr.w	ReadJoypads
00000D68 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D6E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000D74 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000D7A 3ABC 977F                  		move.w	#$977F,(a5)
00000D7E 3ABC C000                  		move.w	#$C000,(a5)
00000D82 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000D88 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D92 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D98 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D9E 3ABC 977F                  		move.w	#$977F,(a5)
00000DA2 3ABC 7800                  		move.w	#$7800,(a5)
00000DA6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DAC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DB6 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DBC 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000DC2 3ABC 977F                  		move.w	#$977F,(a5)
00000DC6 3ABC 7C00                  		move.w	#$7C00,(a5)
00000DCA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DD4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000DDC 6100 0000                  		bsr.w	PalCycle_SS
00000DE0                            		;tst.b	($FFFFF767).w
00000DE0                            		;beq.s	loc_E64
00000DE0                            		;lea	($C00004).l,a5
00000DE0                            		;move.l	#$94019370,(a5)
00000DE0                            		;move.l	#$96E49500,(a5)
00000DE0                            		;move.w	#$977F,(a5)
00000DE0                            		;move.w	#$7000,(a5)
00000DE0                            		;move.w	#$83,($FFFFF640).w
00000DE0                            		;move.w	($FFFFF640).w,(a5)
00000DE0                            		;move.b	#0,($FFFFF767).w
00000DE0 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DE6                            
00000DE6                            loc_E64:
00000DE6 4A78 F614                  		tst.w	($FFFFF614).w
00000DEA 6700 0000                  		beq.w	locret_E70
00000DEE 5378 F614                  		subq.w	#1,($FFFFF614).w
00000DF2                            
00000DF2                            locret_E70:
00000DF2 4E75                       		rts	
00000DF4                            ; ===========================================================================
00000DF4                            
00000DF4                            loc_E72:				; XREF: off_B6E
00000DF4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DFC                            
00000DFC                            loc_E7A:
00000DFC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E04 66F6                       		bne.s	loc_E7A		; if not, branch
00000E06 6100 0000                  		bsr.w	ReadJoypads
00000E0A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0E 6600                       		bne.s	loc_EB4
00000E10 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E16 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E22 3ABC 977F                  		move.w	#$977F,(a5)
00000E26 3ABC C000                  		move.w	#$C000,(a5)
00000E2A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E30 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E34 6000                       		bra.s	loc_ED8
00000E36                            ; ===========================================================================
00000E36                            
00000E36                            loc_EB4:				; XREF: loc_E7A
00000E36 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E42 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E48 3ABC 977F                  		move.w	#$977F,(a5)
00000E4C 3ABC C000                  		move.w	#$C000,(a5)
00000E50 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5A                            
00000E5A                            loc_ED8:				; XREF: loc_E7A
00000E5A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E64 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E6A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E70                            
00000E70                            loc_EEE:
00000E70 3ABC 977F                  		move.w	#$977F,(a5)
00000E74 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E78 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E7E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E82 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E88 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000E8E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000E94 3ABC 977F                  		move.w	#$977F,(a5)
00000E98 3ABC 7800                  		move.w	#$7800,(a5)
00000E9C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EA2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA6 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EAC                            
00000EAC                            loc_F54:
00000EAC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000EB4 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000EBA 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000EC0 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000EC6 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000ECC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000ED0 4EB9 0000 0000             		jsr	AniArt_Load
00000ED6 4EB9 0000 0000             		jsr	HudUpdate
00000EDC 6100 0000                  		bsr.w	sub_1642
00000EE0 4E75                       		rts	
00000EE2                            ; ===========================================================================
00000EE2                            
00000EE2                            loc_F8A:				; XREF: off_B6E
00000EE2 6100 0000                  		bsr.w	sub_106E
00000EE6 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EEA 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000EF0 4E75                       		rts	
00000EF2                            ; ===========================================================================
00000EF2                            
00000EF2                            loc_F9A:				; XREF: off_B6E
00000EF2 6100 0000                  		bsr.w	sub_106E
00000EF6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFA 6000 0000                  		bra.w	sub_1642
00000EFE                            ; ===========================================================================
00000EFE                            
00000EFE                            loc_FA6:				; XREF: off_B6E
00000EFE 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F06                            
00000F06                            loc_FAE:
00000F06 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F0E 66F6                       		bne.s	loc_FAE		; if not, branch
00000F10 6100 0000                  		bsr.w	ReadJoypads
00000F14 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F20 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F26 3ABC 977F                  		move.w	#$977F,(a5)
00000F2A 3ABC C000                  		move.w	#$C000,(a5)
00000F2E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F34 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F38 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3E 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F44 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F4A 3ABC 977F                  		move.w	#$977F,(a5)
00000F4E 3ABC 7800                  		move.w	#$7800,(a5)
00000F52 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F58 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F68 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F88 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F8E                            
00000F8E                            loc_1060:
00000F8E 4A78 F614                  		tst.w	($FFFFF614).w
00000F92 6700 0000                  		beq.w	locret_106C
00000F96 5378 F614                  		subq.w	#1,($FFFFF614).w
00000F9A                            
00000F9A                            locret_106C:
00000F9A 4E75                       		rts	
00000F9C                            
00000F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F9C                            
00000F9C                            
00000F9C                            sub_106E:				; XREF: loc_C32; et al
00000F9C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA4                            
00000FA4                            loc_1076:
00000FA4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FAC 66F6                       		bne.s	loc_1076	; if not, branch
00000FAE 6100 0000                  		bsr.w	ReadJoypads
00000FB2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000FB6 6600                       		bne.s	loc_10B0
00000FB8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FBE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCA 3ABC 977F                  		move.w	#$977F,(a5)
00000FCE 3ABC C000                  		move.w	#$C000,(a5)
00000FD2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FD8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FDC 6000                       		bra.s	loc_10D4
00000FDE                            ; ===========================================================================
00000FDE                            
00000FDE                            loc_10B0:				; XREF: sub_106E
00000FDE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000FF0 3ABC 977F                  		move.w	#$977F,(a5)
00000FF4 3ABC C000                  		move.w	#$C000,(a5)
00000FF8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001002                            
00001002                            loc_10D4:				; XREF: sub_106E
00001002 4BF9 00C0 0004             		lea	($C00004).l,a5
00001008 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001014 3ABC 977F                  		move.w	#$977F,(a5)
00001018 3ABC 7800                  		move.w	#$7800,(a5)
0000101C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001022 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001026 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001032 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001038 3ABC 977F                  		move.w	#$977F,(a5)
0000103C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001040 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001046 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001052 4E75                       		rts	
00001054                            ; End of function sub_106E
00001054                            
00001054                            ; ---------------------------------------------------------------------------
00001054                            ; Subroutine to	move pallets from the RAM to CRAM
00001054                            ; ---------------------------------------------------------------------------
00001054                            
00001054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001054                            
00001054                            
00001054                            PalToCRAM:
00001054 46FC 2700                  		move	#$2700,sr
00001058 4A78 F644                  		tst.w	($FFFFF644).w
0000105C 6700                       		beq.s	locret_119C
0000105E 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001064 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001068 43F9 00C0 0000             		lea	($C00000).l,a1
0000106E 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001072 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000107A 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 2298                       		move.l	(a0)+,(a1)
0000109A 2298                       		move.l	(a0)+,(a1)
0000109C 2298                       		move.l	(a0)+,(a1)
0000109E 2298                       		move.l	(a0)+,(a1)
000010A0 2298                       		move.l	(a0)+,(a1)
000010A2 2298                       		move.l	(a0)+,(a1)
000010A4 2298                       		move.l	(a0)+,(a1)
000010A6 2298                       		move.l	(a0)+,(a1)
000010A8 2298                       		move.l	(a0)+,(a1)
000010AA 2298                       		move.l	(a0)+,(a1)
000010AC 2298                       		move.l	(a0)+,(a1)
000010AE 2298                       		move.l	(a0)+,(a1)
000010B0 2298                       		move.l	(a0)+,(a1)
000010B2 2298                       		move.l	(a0)+,(a1)
000010B4 2298                       		move.l	(a0)+,(a1)
000010B6 2298                       		move.l	(a0)+,(a1)
000010B8 2298                       		move.l	(a0)+,(a1)
000010BA 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000010C0 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010C4 4A38 F64F                  		tst.b	($FFFFF64F).w
000010C8 6600                       		bne.s	loc_119E
000010CA                            
000010CA                            locret_119C:
000010CA 4E73                       		rte	
000010CC                            ; ===========================================================================
000010CC                            
000010CC                            loc_119E:				; XREF: PalToCRAM
000010CC 4238 F64F                  		clr.b	($FFFFF64F).w
000010D0 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010D4 6100 FC5A                  		bsr.w	Demo_Time
000010D8 4EB9 0000 0000             		jsr	sub_71B4C
000010DE 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010E2 4E73                       		rte	
000010E4                            ; End of function PalToCRAM
000010E4                            
000010E4                            ; ---------------------------------------------------------------------------
000010E4                            ; Subroutine to	initialise joypads
000010E4                            ; ---------------------------------------------------------------------------
000010E4                            
000010E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E4                            
000010E4                            
000010E4                            JoypadInit:				; XREF: GameClrRAM
000010E4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010EC                            
000010EC                            Joypad_WaitZ80:
000010EC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000010F4 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000010F6 7040                       		moveq	#$40,d0
000010F8 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010FE 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001104 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
0000110A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001112 4E75                       		rts	
00001114                            ; End of function JoypadInit
00001114                            
00001114                            ; ---------------------------------------------------------------------------
00001114                            ; Subroutine to	read joypad input, and send it to the RAM
00001114                            ; ---------------------------------------------------------------------------
00001114                            
00001114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001114                            
00001114                            
00001114                            ReadJoypads:
00001114 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001118 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000111E 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001120 5449                       		addq.w	#2,a1		; do the second	joypad
00001122                            
00001122                            Joypad_Read:
00001122 12BC 0000                  		move.b	#0,(a1)
00001126 4E71                       		nop	
00001128 4E71                       		nop	
0000112A 1011                       		move.b	(a1),d0
0000112C E508                       		lsl.b	#2,d0
0000112E 0200 00C0                  		andi.b	#$C0,d0
00001132 12BC 0040                  		move.b	#$40,(a1)
00001136 4E71                       		nop	
00001138 4E71                       		nop	
0000113A 1211                       		move.b	(a1),d1
0000113C 0201 003F                  		andi.b	#$3F,d1
00001140 8001                       		or.b	d1,d0
00001142 4600                       		not.b	d0
00001144 1210                       		move.b	(a0),d1
00001146 B101                       		eor.b	d0,d1
00001148 10C0                       		move.b	d0,(a0)+
0000114A C200                       		and.b	d0,d1
0000114C 10C1                       		move.b	d1,(a0)+
0000114E 4E75                       		rts	
00001150                            ; End of function ReadJoypads
00001150                            
00001150                            
00001150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001150                            
00001150                            
00001150                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001150 41F9 00C0 0004             		lea	($C00004).l,a0
00001156 43F9 00C0 0000             		lea	($C00000).l,a1
0000115C 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001162 7E12                       		moveq	#$12,d7
00001164                            
00001164                            VDP_Loop:
00001164 309A                       		move.w	(a2)+,(a0)
00001166 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000116A                            
0000116A 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001170 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001174 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000117A 7000                       		moveq	#0,d0
0000117C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001186 3E3C 003F                  		move.w	#$3F,d7
0000118A                            
0000118A                            VDP_ClrCRAM:
0000118A 3280                       		move.w	d0,(a1)
0000118C 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001190                            
00001190 42B8 F616                  		clr.l	($FFFFF616).w
00001194 42B8 F61A                  		clr.l	($FFFFF61A).w
00001198 2F01                       		move.l	d1,-(sp)
0000119A 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A0 3ABC 8F01                  		move.w	#$8F01,(a5)
000011A4 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000011AA 3ABC 9780                  		move.w	#$9780,(a5)
000011AE 2ABC 4000 0080             		move.l	#$40000080,(a5)
000011B4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000011BC                            
000011BC                            loc_128E:
000011BC 3215                       		move.w	(a5),d1
000011BE 0801 0001                  		btst	#1,d1
000011C2 66F8                       		bne.s	loc_128E
000011C4                            
000011C4 3ABC 8F02                  		move.w	#$8F02,(a5)
000011C8 221F                       		move.l	(sp)+,d1
000011CA 4E75                       		rts	
000011CC                            ; End of function VDPSetupGame
000011CC                            
000011CC                            ; ===========================================================================
000011CC 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000011D4 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000011DC 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000011E4 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000011EC 9001 9100 9200             		dc.w $9001, $9100, $9200
000011F2                            
000011F2                            ; ---------------------------------------------------------------------------
000011F2                            ; Subroutine to	clear the screen
000011F2                            ; ---------------------------------------------------------------------------
000011F2                            
000011F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F2                            
000011F2                            
000011F2                            ClearScreen:
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000011FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001202 3ABC 9780                  		move.w	#$9780,(a5)
00001206 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000120C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001214                            
00001214                            loc_12E6:
00001214 3215                       		move.w	(a5),d1
00001216 0801 0001                  		btst	#1,d1
0000121A 66F8                       		bne.s	loc_12E6
0000121C                            
0000121C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001220 4BF9 00C0 0004             		lea	($C00004).l,a5
00001226 3ABC 8F01                  		move.w	#$8F01,(a5)
0000122A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001230 3ABC 9780                  		move.w	#$9780,(a5)
00001234 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000123A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001242                            
00001242                            loc_1314:
00001242 3215                       		move.w	(a5),d1
00001244 0801 0001                  		btst	#1,d1
00001248 66F8                       		bne.s	loc_1314
0000124A                            
0000124A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000124E 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001256 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000125E 43F8 F800                  		lea	($FFFFF800).w,a1
00001262 7000                       		moveq	#0,d0
00001264 323C 00A0                  		move.w	#$A0,d1
00001268                            
00001268                            loc_133A:
00001268 22C0                       		move.l	d0,(a1)+
0000126A 51C9 FFFC                  		dbf	d1,loc_133A
0000126E                            
0000126E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001272 7000                       		moveq	#0,d0
00001274 323C 0100                  		move.w	#$100,d1
00001278                            
00001278                            loc_134A:
00001278 22C0                       		move.l	d0,(a1)+
0000127A 51C9 FFFC                  		dbf	d1,loc_134A
0000127E 4E75                       		rts	
00001280                            ; End of function ClearScreen
00001280                            
00001280                            ; ---------------------------------------------------------------------------
00001280                            ; Subroutine to	load the sound driver
00001280                            ; ---------------------------------------------------------------------------
00001280                            
00001280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001280                            
00001280                            
00001280                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001280 4E71                       		 nop
00001282 303C 0100                          move.w    #$100,d0
00001286 33C0 00A1 1100                     move.w    d0,($A11100).l
0000128C 33C0 00A1 1200                     move.w    d0,($A11200).l
00001292 41F9 0000 0000                     lea    (MegaPCM).l,a0
00001298 43F9 00A0 0000                     lea    ($A00000).l,a1
0000129E 323C 0000                          move.w    #(MegaPCM_End-MegaPCM)-1,d1
000012A2                             
000012A2 12D8                           @Load:    move.b    (a0)+,(a1)+
000012A4 51C9 FFFC                          dbf    d1,@Load
000012A8 7200                               moveq    #0,d1
000012AA 33C1 00A1 1200                     move.w    d1,($A11200).l
000012B0 4E71                               nop
000012B2 4E71                               nop
000012B4 4E71                               nop
000012B6 4E71                               nop
000012B8 33C0 00A1 1200                     move.w    d0,($A11200).l
000012BE 33C1 00A1 1100                     move.w    d1,($A11100).l
000012C4 4E75                               rts
000012C6                            ; End of function SoundDriverLoad
000012C6                            
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            ; Subroutine to	play a sound or	music track
000012C6                            ; ---------------------------------------------------------------------------
000012C6                            
000012C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C6                            
000012C6                            
000012C6                            PlaySound:
000012C6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000012CA 4E75                       		rts	
000012CC                            ; End of function PlaySound
000012CC                            
000012CC                            ; ---------------------------------------------------------------------------
000012CC                            ; Subroutine to	play a special sound/music (E0-E4)
000012CC                            ;
000012CC                            ; E0 - Fade out
000012CC                            ; E1 - Sega
000012CC                            ; E2 - Speed up
000012CC                            ; E3 - Normal speed
000012CC                            ; E4 - Stop
000012CC                            ; ---------------------------------------------------------------------------
000012CC                            
000012CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012CC                            
000012CC                            
000012CC                            PlaySound_Special:
000012CC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000012D0 4E75                       		rts	
000012D2                            ; End of function PlaySound_Special
000012D2                            
000012D2                            ; ===========================================================================
000012D2                            ; ---------------------------------------------------------------------------
000012D2                            ; Unused sound/music subroutine
000012D2                            ; ---------------------------------------------------------------------------
000012D2                            
000012D2                            PlaySound_Unk:
000012D2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000012D6 4E75                       		rts	
000012D8                            
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            ; Subroutine to	pause the game
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            
000012D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D8                            
000012D8                            
000012D8                            PauseGame:				; XREF: Level_MainLoop; et al
000012D8 4E71                       		nop	
000012DA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000012DE 6700                       		beq.s	Unpause		; if not, branch
000012E0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000012E4 6600                       		bne.s	loc_13BE	; if yes, branch
000012E6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000012EC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012EE                            
000012EE                            loc_13BE:
000012EE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000012F4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000012FA                            
000012FA                            loc_13CA:
000012FA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001300 6100 0000                  		bsr.w	DelayProgram
00001304 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001308 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000130A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001310 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001312 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001318 4E71                       		nop	
0000131A 6000                       		bra.s	loc_1404
0000131C                            ; ===========================================================================
0000131C                            
0000131C                            Pause_ChkBC:				; XREF: PauseGame
0000131C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001322 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001324 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000132A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000132C                            
0000132C                            Pause_ChkStart:				; XREF: PauseGame
0000132C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001332 67C6                       		beq.s	loc_13CA	; if not, branch
00001334                            
00001334                            loc_1404:				; XREF: PauseGame
00001334 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000133A                            
0000133A                            Unpause:				; XREF: PauseGame
0000133A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001340                            
00001340                            Pause_DoNothing:			; XREF: PauseGame
00001340 4E75                       		rts	
00001342                            ; ===========================================================================
00001342                            
00001342                            Pause_SlowMo:				; XREF: PauseGame
00001342 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001348 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000134E 4E75                       		rts	
00001350                            ; End of function PauseGame
00001350                            
00001350                            ; ---------------------------------------------------------------------------
00001350                            ; Subroutine to	display	patterns via the VDP
00001350                            ; ---------------------------------------------------------------------------
00001350                            
00001350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001350                            
00001350                            
00001350                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001350 4DF9 00C0 0000             		lea	($C00000).l,a6
00001356 283C 0080 0000             		move.l	#$800000,d4
0000135C                            
0000135C                            loc_142C:
0000135C 2D40 0004                  		move.l	d0,4(a6)
00001360 3601                       		move.w	d1,d3
00001362                            
00001362                            loc_1432:
00001362 3C99                       		move.w	(a1)+,(a6)
00001364 51CB FFFC                  		dbf	d3,loc_1432
00001368 D084                       		add.l	d4,d0
0000136A 51CA FFF0                  		dbf	d2,loc_142C
0000136E 4E75                       		rts	
00001370                            ; End of function ShowVDPGraphics
00001370                            
00001370                            ; ---------------------------------------------------------------------------
00001370                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00001370                            ; to be issued the next time ProcessDMAQueue is called.
00001370                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00001370                            ; by issuing the commands (this subroutine DOES check for overflow)
00001370                            ; ---------------------------------------------------------------------------
00001370                             
00001370                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001370                             
00001370                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00001370                            QueueDMATransfer:
00001370 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
00001374 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001378 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000137A                             
0000137A                            		; piece together some VDP commands and store them for later...
0000137A 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
0000137E 1003                       		move.b	d3,d0
00001380 32C0                       		move.w	d0,(a1)+ ; store command
00001382                             
00001382 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001386 E04B                       		lsr.w	#8,d3
00001388 1003                       		move.b	d3,d0
0000138A 32C0                       		move.w	d0,(a1)+ ; store command
0000138C                             
0000138C 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00001390 E289                       		lsr.l	#1,d1
00001392 1001                       		move.b	d1,d0
00001394 32C0                       		move.w	d0,(a1)+ ; store command
00001396                             
00001396 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
0000139A E089                       		lsr.l	#8,d1
0000139C 1001                       		move.b	d1,d0
0000139E 32C0                       		move.w	d0,(a1)+ ; store command
000013A0                             
000013A0 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
000013A4 E089                       		lsr.l	#8,d1
000013A6 1001                       		move.b	d1,d0
000013A8 32C0                       		move.w	d0,(a1)+ ; store command
000013AA                             
000013AA 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
000013B0 E58A                       		lsl.l	#2,d2
000013B2 E44A                       		lsr.w	#2,d2
000013B4 4842                       		swap	d2
000013B6 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
000013BC 22C2                       		move.l	d2,(a1)+ ; store command
000013BE                             
000013BE 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
000013C2 B2FC C8FC                  		cmpa.w	#$C8FC,a1
000013C6 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
000013C8 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
000013CC                            ; return_14AA:
000013CC                            QueueDMATransfer_Done:
000013CC 4E75                       		rts
000013CE                            ; End of function QueueDMATransfer
000013CE                             
000013CE                             
000013CE                            ; ---------------------------------------------------------------------------
000013CE                            ; Subroutine for issuing all VDP commands that were queued
000013CE                            ; (by earlier calls to QueueDMATransfer)
000013CE                            ; Resets the queue when it's done
000013CE                            ; ---------------------------------------------------------------------------
000013CE                             
000013CE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000013CE                             
000013CE                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
000013CE                            ProcessDMAQueue:
000013CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000013D4 43F8 C800                  		lea	($FFFFC800).w,a1
000013D8                            ; loc_14B6:
000013D8                            ProcessDMAQueue_Loop:
000013D8 3019                       		move.w	(a1)+,d0
000013DA 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
000013DC                            		; issue a set of VDP commands...
000013DC 3A80                       		move.w	d0,(a5)		; transfer length
000013DE 3A99                       		move.w	(a1)+,(a5)	; transfer length
000013E0 3A99                       		move.w	(a1)+,(a5)	; source address
000013E2 3A99                       		move.w	(a1)+,(a5)	; source address
000013E4 3A99                       		move.w	(a1)+,(a5)	; source address
000013E6 3A99                       		move.w	(a1)+,(a5)	; destination
000013E8 3A99                       		move.w	(a1)+,(a5)	; destination
000013EA B2FC C8FC                  		cmpa.w	#$C8FC,a1
000013EE 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000013F0                            ; loc_14CE:
000013F0                            ProcessDMAQueue_Done:
000013F0 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000013F6 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000013FE 4E75                       		rts
00001400                            ; End of function ProcessDMAQueue
00001400                            
00001400                            
00001400                            ; ---------------------------------------------------------------------------
00001400                            ; Nemesis decompression	algorithm
00001400                            ; ---------------------------------------------------------------------------
00001400                            
00001400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001400                            
00001400                            
00001400                            NemDec:
00001400 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001404 47F9 0000 0000             		lea	(loc_1502).l,a3
0000140A 49F9 00C0 0000             		lea	($C00000).l,a4
00001410 6000                       		bra.s	loc_145C
00001412                            ; ===========================================================================
00001412 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001416 47F9 0000 0000             		lea	(loc_1518).l,a3
0000141C                            
0000141C                            loc_145C:				; XREF: NemDec
0000141C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001420 3418                       		move.w	(a0)+,d2
00001422 E34A                       		lsl.w	#1,d2
00001424 6400                       		bcc.s	loc_146A
00001426 D6FC 000A                  		adda.w	#$A,a3
0000142A                            
0000142A                            loc_146A:
0000142A E54A                       		lsl.w	#2,d2
0000142C 3A42                       		movea.w	d2,a5
0000142E 7608                       		moveq	#8,d3
00001430 7400                       		moveq	#0,d2
00001432 7800                       		moveq	#0,d4
00001434 6100 0000                  		bsr.w	NemDec4
00001438 1A18                       		move.b	(a0)+,d5
0000143A E145                       		asl.w	#8,d5
0000143C 1A18                       		move.b	(a0)+,d5
0000143E 3C3C 0010                  		move.w	#$10,d6
00001442 6100                       		bsr.s	NemDec2
00001444 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001448 4E75                       		rts	
0000144A                            ; End of function NemDec
0000144A                            
0000144A                            
0000144A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000144A                            
0000144A                            
0000144A                            NemDec2:				; XREF: NemDec
0000144A 3E06                       		move.w	d6,d7
0000144C 5147                       		subq.w	#8,d7
0000144E 3205                       		move.w	d5,d1
00001450 EE69                       		lsr.w	d7,d1
00001452 0C01 00FC                  		cmpi.b	#-4,d1
00001456 6400                       		bcc.s	loc_14D6
00001458 0241 00FF                  		andi.w	#$FF,d1
0000145C D241                       		add.w	d1,d1
0000145E 1031 1000                  		move.b	(a1,d1.w),d0
00001462 4880                       		ext.w	d0
00001464 9C40                       		sub.w	d0,d6
00001466 0C46 0009                  		cmpi.w	#9,d6
0000146A 6400                       		bcc.s	loc_14B2
0000146C 5046                       		addq.w	#8,d6
0000146E E145                       		asl.w	#8,d5
00001470 1A18                       		move.b	(a0)+,d5
00001472                            
00001472                            loc_14B2:
00001472 1231 1001                  		move.b	1(a1,d1.w),d1
00001476 3001                       		move.w	d1,d0
00001478 0241 000F                  		andi.w	#$F,d1
0000147C 0240 00F0                  		andi.w	#$F0,d0
00001480                            
00001480                            loc_14C0:				; XREF: NemDec3
00001480 E848                       		lsr.w	#4,d0
00001482                            
00001482                            loc_14C2:				; XREF: NemDec3
00001482 E98C                       		lsl.l	#4,d4
00001484 8801                       		or.b	d1,d4
00001486 5343                       		subq.w	#1,d3
00001488 6600                       		bne.s	loc_14D0
0000148A 4ED3                       		jmp	(a3)
0000148C                            ; End of function NemDec2
0000148C                            
0000148C                            
0000148C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148C                            
0000148C                            
0000148C                            NemDec3:				; XREF: loc_1502
0000148C 7800                       		moveq	#0,d4
0000148E 7608                       		moveq	#8,d3
00001490                            
00001490                            loc_14D0:				; XREF: NemDec2
00001490 51C8 FFF0                  		dbf	d0,loc_14C2
00001494 60B4                       		bra.s	NemDec2
00001496                            ; ===========================================================================
00001496                            
00001496                            loc_14D6:				; XREF: NemDec2
00001496 5D46                       		subq.w	#6,d6
00001498 0C46 0009                  		cmpi.w	#9,d6
0000149C 6400                       		bcc.s	loc_14E4
0000149E 5046                       		addq.w	#8,d6
000014A0 E145                       		asl.w	#8,d5
000014A2 1A18                       		move.b	(a0)+,d5
000014A4                            
000014A4                            loc_14E4:				; XREF: NemDec3
000014A4 5F46                       		subq.w	#7,d6
000014A6 3205                       		move.w	d5,d1
000014A8 EC69                       		lsr.w	d6,d1
000014AA 3001                       		move.w	d1,d0
000014AC 0241 000F                  		andi.w	#$F,d1
000014B0 0240 0070                  		andi.w	#$70,d0
000014B4 0C46 0009                  		cmpi.w	#9,d6
000014B8 64C6                       		bcc.s	loc_14C0
000014BA 5046                       		addq.w	#8,d6
000014BC E145                       		asl.w	#8,d5
000014BE 1A18                       		move.b	(a0)+,d5
000014C0 60BE                       		bra.s	loc_14C0
000014C2                            ; End of function NemDec3
000014C2                            
000014C2                            ; ===========================================================================
000014C2                            
000014C2                            loc_1502:				; XREF: NemDec
000014C2 2884                       		move.l	d4,(a4)
000014C4 534D                       		subq.w	#1,a5
000014C6 380D                       		move.w	a5,d4
000014C8 66C2                       		bne.s	NemDec3
000014CA 4E75                       		rts	
000014CC                            ; ===========================================================================
000014CC B982                       		eor.l	d4,d2
000014CE 2882                       		move.l	d2,(a4)
000014D0 534D                       		subq.w	#1,a5
000014D2 380D                       		move.w	a5,d4
000014D4 66B6                       		bne.s	NemDec3
000014D6 4E75                       		rts	
000014D8                            ; ===========================================================================
000014D8                            
000014D8                            loc_1518:				; XREF: NemDec
000014D8 28C4                       		move.l	d4,(a4)+
000014DA 534D                       		subq.w	#1,a5
000014DC 380D                       		move.w	a5,d4
000014DE 66AC                       		bne.s	NemDec3
000014E0 4E75                       		rts	
000014E2                            ; ===========================================================================
000014E2 B982                       		eor.l	d4,d2
000014E4 28C2                       		move.l	d2,(a4)+
000014E6 534D                       		subq.w	#1,a5
000014E8 380D                       		move.w	a5,d4
000014EA 66A0                       		bne.s	NemDec3
000014EC 4E75                       		rts	
000014EE                            
000014EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014EE                            
000014EE                            
000014EE                            NemDec4:				; XREF: NemDec
000014EE 1018                       		move.b	(a0)+,d0
000014F0                            
000014F0                            loc_1530:
000014F0 0C00 00FF                  		cmpi.b	#-1,d0
000014F4 6600                       		bne.s	loc_1538
000014F6 4E75                       		rts	
000014F8                            ; ===========================================================================
000014F8                            
000014F8                            loc_1538:				; XREF: NemDec4
000014F8 3E00                       		move.w	d0,d7
000014FA                            
000014FA                            loc_153A:
000014FA 1018                       		move.b	(a0)+,d0
000014FC 0C00 0080                  		cmpi.b	#$80,d0
00001500 64EE                       		bcc.s	loc_1530
00001502 1200                       		move.b	d0,d1
00001504 0247 000F                  		andi.w	#$F,d7
00001508 0241 0070                  		andi.w	#$70,d1
0000150C 8E41                       		or.w	d1,d7
0000150E 0240 000F                  		andi.w	#$F,d0
00001512 1200                       		move.b	d0,d1
00001514 E149                       		lsl.w	#8,d1
00001516 8E41                       		or.w	d1,d7
00001518 7208                       		moveq	#8,d1
0000151A 9240                       		sub.w	d0,d1
0000151C 6600                       		bne.s	loc_1568
0000151E 1018                       		move.b	(a0)+,d0
00001520 D040                       		add.w	d0,d0
00001522 3387 0000                  		move.w	d7,(a1,d0.w)
00001526 60D2                       		bra.s	loc_153A
00001528                            ; ===========================================================================
00001528                            
00001528                            loc_1568:				; XREF: NemDec4
00001528 1018                       		move.b	(a0)+,d0
0000152A E368                       		lsl.w	d1,d0
0000152C D040                       		add.w	d0,d0
0000152E 7A01                       		moveq	#1,d5
00001530 E36D                       		lsl.w	d1,d5
00001532 5345                       		subq.w	#1,d5
00001534                            
00001534                            loc_1574:
00001534 3387 0000                  		move.w	d7,(a1,d0.w)
00001538 5440                       		addq.w	#2,d0
0000153A 51CD FFF8                  		dbf	d5,loc_1574
0000153E 60BA                       		bra.s	loc_153A
00001540                            ; End of function NemDec4
00001540                            
00001540                            ; ---------------------------------------------------------------------------
00001540                            ; Subroutine to	load pattern load cues
00001540                            ; ---------------------------------------------------------------------------
00001540                            
00001540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001540                            
00001540                            
00001540                            LoadPLC:
00001540 48E7 0060                  		movem.l	a1-a2,-(sp)
00001544 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000154A D040                       		add.w	d0,d0
0000154C 3031 0000                  		move.w	(a1,d0.w),d0
00001550 43F1 0000                  		lea	(a1,d0.w),a1
00001554 45F8 F680                  		lea	($FFFFF680).w,a2
00001558                            
00001558                            loc_1598:
00001558 4A92                       		tst.l	(a2)
0000155A 6700                       		beq.s	loc_15A0
0000155C 5C4A                       		addq.w	#6,a2
0000155E 60F8                       		bra.s	loc_1598
00001560                            ; ===========================================================================
00001560                            
00001560                            loc_15A0:				; XREF: LoadPLC
00001560 3019                       		move.w	(a1)+,d0
00001562 6B00                       		bmi.s	loc_15AC
00001564                            
00001564                            loc_15A4:
00001564 24D9                       		move.l	(a1)+,(a2)+
00001566 34D9                       		move.w	(a1)+,(a2)+
00001568 51C8 FFFA                  		dbf	d0,loc_15A4
0000156C                            
0000156C                            loc_15AC:
0000156C 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001570 4E75                       		rts	
00001572                            ; End of function LoadPLC
00001572                            
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            LoadPLC2:
00001572 48E7 0060                  		movem.l	a1-a2,-(sp)
00001576 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000157C D040                       		add.w	d0,d0
0000157E 3031 0000                  		move.w	(a1,d0.w),d0
00001582 43F1 0000                  		lea	(a1,d0.w),a1
00001586 6100                       		bsr.s	ClearPLC
00001588 45F8 F680                  		lea	($FFFFF680).w,a2
0000158C 3019                       		move.w	(a1)+,d0
0000158E 6B00                       		bmi.s	loc_15D8
00001590                            
00001590                            loc_15D0:
00001590 24D9                       		move.l	(a1)+,(a2)+
00001592 34D9                       		move.w	(a1)+,(a2)+
00001594 51C8 FFFA                  		dbf	d0,loc_15D0
00001598                            
00001598                            loc_15D8:
00001598 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000159C 4E75                       		rts	
0000159E                            ; End of function LoadPLC2
0000159E                            
0000159E                            ; ---------------------------------------------------------------------------
0000159E                            ; Subroutine to	clear the pattern load cues
0000159E                            ; ---------------------------------------------------------------------------
0000159E                            
0000159E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159E                            
0000159E                            
0000159E                            ClearPLC:				; XREF: LoadPLC2
0000159E 45F8 F680                  		lea	($FFFFF680).w,a2
000015A2 701F                       		moveq	#$1F,d0
000015A4                            
000015A4                            ClearPLC_Loop:
000015A4 429A                       		clr.l	(a2)+
000015A6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015AA 4E75                       		rts	
000015AC                            ; End of function ClearPLC
000015AC                            
000015AC                            ; ---------------------------------------------------------------------------
000015AC                            ; Subroutine to	use graphics listed in a pattern load cue
000015AC                            ; ---------------------------------------------------------------------------
000015AC                            
000015AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AC                            
000015AC                            
000015AC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015AC 4AB8 F680                  		tst.l	($FFFFF680).w
000015B0 6700                       		beq.s	locret_1640
000015B2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015B6 6600                       		bne.s	locret_1640
000015B8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015BC 47F9 0000 14C2             		lea	(loc_1502).l,a3
000015C2 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015C6 3418                       		move.w	(a0)+,d2
000015C8 6A00                       		bpl.s	loc_160E
000015CA D6FC 000A                  		adda.w	#$A,a3
000015CE                            
000015CE                            loc_160E:
000015CE 0242 7FFF                  		andi.w	#$7FFF,d2
000015D2 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000015D6 6100 FF16                  		bsr.w	NemDec4
000015DA 1A18                       		move.b	(a0)+,d5
000015DC E145                       		asl.w	#8,d5
000015DE 1A18                       		move.b	(a0)+,d5
000015E0 7C10                       		moveq	#$10,d6
000015E2 7000                       		moveq	#0,d0
000015E4 21C8 F680                  		move.l	a0,($FFFFF680).w
000015E8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015EC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015F0 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000015F4 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000015F8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015FC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001600                            
00001600                            locret_1640:
00001600 4E75                       		rts	
00001602                            ; End of function RunPLC_RAM
00001602                            
00001602                            
00001602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001602                            
00001602                            
00001602                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001602 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001606 6700 0000                  		beq.w	locret_16DA
0000160A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001610 7000                       		moveq	#0,d0
00001612 3038 F684                  		move.w	($FFFFF684).w,d0
00001616 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000161C 6000                       		bra.s	loc_1676
0000161E                            ; End of function sub_1642
0000161E                            
0000161E                            
0000161E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000161E                            
0000161E                            
0000161E                            sub_165E:				; XREF: Demo_Time
0000161E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001622 6700                       		beq.s	locret_16DA
00001624 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000162A 7000                       		moveq	#0,d0
0000162C 3038 F684                  		move.w	($FFFFF684).w,d0
00001630 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001636                            
00001636                            loc_1676:				; XREF: sub_1642
00001636 49F9 00C0 0004             		lea	($C00004).l,a4
0000163C E588                       		lsl.l	#2,d0
0000163E E448                       		lsr.w	#2,d0
00001640 0040 4000                  		ori.w	#$4000,d0
00001644 4840                       		swap	d0
00001646 2880                       		move.l	d0,(a4)
00001648 594C                       		subq.w	#4,a4
0000164A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000164E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001652 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001656 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000165A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000165E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001662 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001666 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000166A                            
0000166A                            loc_16AA:				; XREF: sub_165E
0000166A 3A7C 0008                  		movea.w	#8,a5
0000166E 6100 FE1C                  		bsr.w	NemDec3
00001672 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001676 6700                       		beq.s	loc_16DC
00001678 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000167C 66EC                       		bne.s	loc_16AA
0000167E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001682 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001686 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000168A 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000168E 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001692 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001696 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000169A                            
0000169A                            locret_16DA:				; XREF: sub_1642
0000169A 4E75                       		rts	
0000169C                            ; ===========================================================================
0000169C                            
0000169C                            loc_16DC:				; XREF: sub_165E
0000169C 41F8 F680                  		lea	($FFFFF680).w,a0
000016A0 7015                       		moveq	#$15,d0
000016A2                            
000016A2                            loc_16E2:				; XREF: sub_165E
000016A2 20E8 0006                  		move.l	6(a0),(a0)+
000016A6 51C8 FFFA                  		dbf	d0,loc_16E2
000016AA 4E75                       		rts	
000016AC                            ; End of function sub_165E
000016AC                            
000016AC                            ; ---------------------------------------------------------------------------
000016AC                            ; Subroutine to	execute	the pattern load cue
000016AC                            ; ---------------------------------------------------------------------------
000016AC                            
000016AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AC                            
000016AC                            
000016AC                            RunPLC_ROM:
000016AC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016B2 D040                       		add.w	d0,d0
000016B4 3031 0000                  		move.w	(a1,d0.w),d0
000016B8 43F1 0000                  		lea	(a1,d0.w),a1
000016BC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016BE                            
000016BE                            RunPLC_Loop:
000016BE 2059                       		movea.l	(a1)+,a0	; get art pointer
000016C0 7000                       		moveq	#0,d0
000016C2 3019                       		move.w	(a1)+,d0	; get VRAM address
000016C4 E588                       		lsl.l	#2,d0		; divide address by $20
000016C6 E448                       		lsr.w	#2,d0
000016C8 0040 4000                  		ori.w	#$4000,d0
000016CC 4840                       		swap	d0
000016CE 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000016D4 6100 FD2A                  		bsr.w	NemDec		; decompress
000016D8 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000016DC 4E75                       		rts	
000016DE                            ; End of function RunPLC_ROM
000016DE                            
000016DE                            ; ---------------------------------------------------------------------------
000016DE                            ; Enigma decompression algorithm
000016DE                            ; ---------------------------------------------------------------------------
000016DE                            
000016DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016DE                            
000016DE                            
000016DE                            EniDec:
000016DE 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000016E2 3640                       		movea.w	d0,a3
000016E4 1018                       		move.b	(a0)+,d0
000016E6 4880                       		ext.w	d0
000016E8 3A40                       		movea.w	d0,a5
000016EA 1818                       		move.b	(a0)+,d4
000016EC E70C                       		lsl.b	#3,d4
000016EE 3458                       		movea.w	(a0)+,a2
000016F0 D4CB                       		adda.w	a3,a2
000016F2 3858                       		movea.w	(a0)+,a4
000016F4 D8CB                       		adda.w	a3,a4
000016F6 1A18                       		move.b	(a0)+,d5
000016F8 E145                       		asl.w	#8,d5
000016FA 1A18                       		move.b	(a0)+,d5
000016FC 7C10                       		moveq	#$10,d6
000016FE                            
000016FE                            loc_173E:				; XREF: loc_1768
000016FE 7007                       		moveq	#7,d0
00001700 3E06                       		move.w	d6,d7
00001702 9E40                       		sub.w	d0,d7
00001704 3205                       		move.w	d5,d1
00001706 EE69                       		lsr.w	d7,d1
00001708 0241 007F                  		andi.w	#$7F,d1
0000170C 3401                       		move.w	d1,d2
0000170E 0C41 0040                  		cmpi.w	#$40,d1
00001712 6400                       		bcc.s	loc_1758
00001714 7006                       		moveq	#6,d0
00001716 E24A                       		lsr.w	#1,d2
00001718                            
00001718                            loc_1758:
00001718 6100 0000                  		bsr.w	sub_188C
0000171C 0242 000F                  		andi.w	#$F,d2
00001720 E849                       		lsr.w	#4,d1
00001722 D241                       		add.w	d1,d1
00001724 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001728                            ; End of function EniDec
00001728                            
00001728                            ; ===========================================================================
00001728                            
00001728                            loc_1768:				; XREF: loc_17B4
00001728 32CA                       		move.w	a2,(a1)+
0000172A 524A                       		addq.w	#1,a2
0000172C 51CA FFFA                  		dbf	d2,loc_1768
00001730 60CC                       		bra.s	loc_173E
00001732                            ; ===========================================================================
00001732                            
00001732                            loc_1772:				; XREF: loc_17B4
00001732 32CC                       		move.w	a4,(a1)+
00001734 51CA FFFC                  		dbf	d2,loc_1772
00001738 60C4                       		bra.s	loc_173E
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            loc_177A:				; XREF: loc_17B4
0000173A 6100 0000                  		bsr.w	loc_17DC
0000173E                            
0000173E                            loc_177E:
0000173E 32C1                       		move.w	d1,(a1)+
00001740 51CA FFFC                  		dbf	d2,loc_177E
00001744 60B8                       		bra.s	loc_173E
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1786:				; XREF: loc_17B4
00001746 6100 0000                  		bsr.w	loc_17DC
0000174A                            
0000174A                            loc_178A:
0000174A 32C1                       		move.w	d1,(a1)+
0000174C 5241                       		addq.w	#1,d1
0000174E 51CA FFFA                  		dbf	d2,loc_178A
00001752 60AA                       		bra.s	loc_173E
00001754                            ; ===========================================================================
00001754                            
00001754                            loc_1794:				; XREF: loc_17B4
00001754 6100 0000                  		bsr.w	loc_17DC
00001758                            
00001758                            loc_1798:
00001758 32C1                       		move.w	d1,(a1)+
0000175A 5341                       		subq.w	#1,d1
0000175C 51CA FFFA                  		dbf	d2,loc_1798
00001760 609C                       		bra.s	loc_173E
00001762                            ; ===========================================================================
00001762                            
00001762                            loc_17A2:				; XREF: loc_17B4
00001762 0C42 000F                  		cmpi.w	#$F,d2
00001766 6700                       		beq.s	loc_17C4
00001768                            
00001768                            loc_17A8:
00001768 6100 0000                  		bsr.w	loc_17DC
0000176C 32C1                       		move.w	d1,(a1)+
0000176E 51CA FFF8                  		dbf	d2,loc_17A8
00001772 608A                       		bra.s	loc_173E
00001774                            ; ===========================================================================
00001774                            
00001774                            loc_17B4:				; XREF: EniDec
00001774 60B2                       		bra.s	loc_1768
00001776                            ; ===========================================================================
00001776 60B0                       		bra.s	loc_1768
00001778                            ; ===========================================================================
00001778 60B8                       		bra.s	loc_1772
0000177A                            ; ===========================================================================
0000177A 60B6                       		bra.s	loc_1772
0000177C                            ; ===========================================================================
0000177C 60BC                       		bra.s	loc_177A
0000177E                            ; ===========================================================================
0000177E 60C6                       		bra.s	loc_1786
00001780                            ; ===========================================================================
00001780 60D2                       		bra.s	loc_1794
00001782                            ; ===========================================================================
00001782 60DE                       		bra.s	loc_17A2
00001784                            ; ===========================================================================
00001784                            
00001784                            loc_17C4:				; XREF: loc_17A2
00001784 5348                       		subq.w	#1,a0
00001786 0C46 0010                  		cmpi.w	#$10,d6
0000178A 6600                       		bne.s	loc_17CE
0000178C 5348                       		subq.w	#1,a0
0000178E                            
0000178E                            loc_17CE:
0000178E 3008                       		move.w	a0,d0
00001790 E248                       		lsr.w	#1,d0
00001792 6400                       		bcc.s	loc_17D6
00001794 5248                       		addq.w	#1,a0
00001796                            
00001796                            loc_17D6:
00001796 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000179A 4E75                       		rts	
0000179C                            ; ===========================================================================
0000179C                            
0000179C                            loc_17DC:				; XREF: loc_17A2
0000179C 360B                       		move.w	a3,d3
0000179E 1204                       		move.b	d4,d1
000017A0 D201                       		add.b	d1,d1
000017A2 6400                       		bcc.s	loc_17EE
000017A4 5346                       		subq.w	#1,d6
000017A6 0D05                       		btst	d6,d5
000017A8 6700                       		beq.s	loc_17EE
000017AA 0043 8000                  		ori.w	#-$8000,d3
000017AE                            
000017AE                            loc_17EE:
000017AE D201                       		add.b	d1,d1
000017B0 6400                       		bcc.s	loc_17FC
000017B2 5346                       		subq.w	#1,d6
000017B4 0D05                       		btst	d6,d5
000017B6 6700                       		beq.s	loc_17FC
000017B8 0643 4000                  		addi.w	#$4000,d3
000017BC                            
000017BC                            loc_17FC:
000017BC D201                       		add.b	d1,d1
000017BE 6400                       		bcc.s	loc_180A
000017C0 5346                       		subq.w	#1,d6
000017C2 0D05                       		btst	d6,d5
000017C4 6700                       		beq.s	loc_180A
000017C6 0643 2000                  		addi.w	#$2000,d3
000017CA                            
000017CA                            loc_180A:
000017CA D201                       		add.b	d1,d1
000017CC 6400                       		bcc.s	loc_1818
000017CE 5346                       		subq.w	#1,d6
000017D0 0D05                       		btst	d6,d5
000017D2 6700                       		beq.s	loc_1818
000017D4 0043 1000                  		ori.w	#$1000,d3
000017D8                            
000017D8                            loc_1818:
000017D8 D201                       		add.b	d1,d1
000017DA 6400                       		bcc.s	loc_1826
000017DC 5346                       		subq.w	#1,d6
000017DE 0D05                       		btst	d6,d5
000017E0 6700                       		beq.s	loc_1826
000017E2 0043 0800                  		ori.w	#$800,d3
000017E6                            
000017E6                            loc_1826:
000017E6 3205                       		move.w	d5,d1
000017E8 3E06                       		move.w	d6,d7
000017EA 9E4D                       		sub.w	a5,d7
000017EC 6400                       		bcc.s	loc_1856
000017EE 3C07                       		move.w	d7,d6
000017F0 0646 0010                  		addi.w	#$10,d6
000017F4 4447                       		neg.w	d7
000017F6 EF69                       		lsl.w	d7,d1
000017F8 1A10                       		move.b	(a0),d5
000017FA EF3D                       		rol.b	d7,d5
000017FC DE47                       		add.w	d7,d7
000017FE CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001802 D245                       		add.w	d5,d1
00001804                            
00001804                            loc_1844:				; XREF: loc_1868
00001804 300D                       		move.w	a5,d0
00001806 D040                       		add.w	d0,d0
00001808 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000180C D243                       		add.w	d3,d1
0000180E 1A18                       		move.b	(a0)+,d5
00001810 E14D                       		lsl.w	#8,d5
00001812 1A18                       		move.b	(a0)+,d5
00001814 4E75                       		rts	
00001816                            ; ===========================================================================
00001816                            
00001816                            loc_1856:				; XREF: loc_1826
00001816 6700                       		beq.s	loc_1868
00001818 EE69                       		lsr.w	d7,d1
0000181A 300D                       		move.w	a5,d0
0000181C D040                       		add.w	d0,d0
0000181E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001822 D243                       		add.w	d3,d1
00001824 300D                       		move.w	a5,d0
00001826 6000                       		bra.s	sub_188C
00001828                            ; ===========================================================================
00001828                            
00001828                            loc_1868:				; XREF: loc_1856
00001828 7C10                       		moveq	#$10,d6
0000182A                            
0000182A                            loc_186A:
0000182A 60D8                       		bra.s	loc_1844
0000182C                            ; ===========================================================================
0000182C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001842 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000184C                            
0000184C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000184C                            
0000184C                            
0000184C                            sub_188C:				; XREF: EniDec
0000184C 9C40                       		sub.w	d0,d6
0000184E 0C46 0009                  		cmpi.w	#9,d6
00001852 6400                       		bcc.s	locret_189A
00001854 5046                       		addq.w	#8,d6
00001856 E145                       		asl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5
0000185A                            
0000185A                            locret_189A:
0000185A 4E75                       		rts	
0000185C                            ; End of function sub_188C
0000185C                            
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            ; Kosinski decompression algorithm
0000185C                            ; ---------------------------------------------------------------------------
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            KosDec:
0000185C                            
0000185C =FFFFFFFE                  var_2		= -2
0000185C =FFFFFFFF                  var_1		= -1
0000185C                            
0000185C 558F                       		subq.l	#2,sp
0000185E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001862 1E98                       		move.b	(a0)+,(sp)
00001864 3A17                       		move.w	(sp),d5
00001866 780F                       		moveq	#$F,d4
00001868                            
00001868                            loc_18A8:
00001868 E24D                       		lsr.w	#1,d5
0000186A 40C6                       		move	sr,d6
0000186C 51CC 0000                  		dbf	d4,loc_18BA
00001870 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001874 1E98                       		move.b	(a0)+,(sp)
00001876 3A17                       		move.w	(sp),d5
00001878 780F                       		moveq	#$F,d4
0000187A                            
0000187A                            loc_18BA:
0000187A 44C6                       		move	d6,ccr
0000187C 6400                       		bcc.s	loc_18C2
0000187E 12D8                       		move.b	(a0)+,(a1)+
00001880 60E6                       		bra.s	loc_18A8
00001882                            ; ===========================================================================
00001882                            
00001882                            loc_18C2:				; XREF: KosDec
00001882 7600                       		moveq	#0,d3
00001884 E24D                       		lsr.w	#1,d5
00001886 40C6                       		move	sr,d6
00001888 51CC 0000                  		dbf	d4,loc_18D6
0000188C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001890 1E98                       		move.b	(a0)+,(sp)
00001892 3A17                       		move.w	(sp),d5
00001894 780F                       		moveq	#$F,d4
00001896                            
00001896                            loc_18D6:
00001896 44C6                       		move	d6,ccr
00001898 6500                       		bcs.s	loc_1906
0000189A E24D                       		lsr.w	#1,d5
0000189C 51CC 0000                  		dbf	d4,loc_18EA
000018A0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A4 1E98                       		move.b	(a0)+,(sp)
000018A6 3A17                       		move.w	(sp),d5
000018A8 780F                       		moveq	#$F,d4
000018AA                            
000018AA                            loc_18EA:
000018AA E353                       		roxl.w	#1,d3
000018AC E24D                       		lsr.w	#1,d5
000018AE 51CC 0000                  		dbf	d4,loc_18FC
000018B2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B6 1E98                       		move.b	(a0)+,(sp)
000018B8 3A17                       		move.w	(sp),d5
000018BA 780F                       		moveq	#$F,d4
000018BC                            
000018BC                            loc_18FC:
000018BC E353                       		roxl.w	#1,d3
000018BE 5243                       		addq.w	#1,d3
000018C0 74FF                       		moveq	#-1,d2
000018C2 1418                       		move.b	(a0)+,d2
000018C4 6000                       		bra.s	loc_191C
000018C6                            ; ===========================================================================
000018C6                            
000018C6                            loc_1906:				; XREF: loc_18C2
000018C6 1018                       		move.b	(a0)+,d0
000018C8 1218                       		move.b	(a0)+,d1
000018CA 74FF                       		moveq	#-1,d2
000018CC 1401                       		move.b	d1,d2
000018CE EB4A                       		lsl.w	#5,d2
000018D0 1400                       		move.b	d0,d2
000018D2 0241 0007                  		andi.w	#7,d1
000018D6 6700                       		beq.s	loc_1928
000018D8 1601                       		move.b	d1,d3
000018DA 5243                       		addq.w	#1,d3
000018DC                            
000018DC                            loc_191C:
000018DC 1031 2000                  		move.b	(a1,d2.w),d0
000018E0 12C0                       		move.b	d0,(a1)+
000018E2 51CB FFF8                  		dbf	d3,loc_191C
000018E6 6080                       		bra.s	loc_18A8
000018E8                            ; ===========================================================================
000018E8                            
000018E8                            loc_1928:				; XREF: loc_1906
000018E8 1218                       		move.b	(a0)+,d1
000018EA 6700                       		beq.s	loc_1938
000018EC 0C01 0001                  		cmpi.b	#1,d1
000018F0 6700 FF76                  		beq.w	loc_18A8
000018F4 1601                       		move.b	d1,d3
000018F6 60E4                       		bra.s	loc_191C
000018F8                            ; ===========================================================================
000018F8                            
000018F8                            loc_1938:				; XREF: loc_1928
000018F8 548F                       		addq.l	#2,sp
000018FA 4E75                       		rts	
000018FC                            ; End of function KosDec
000018FC                            
000018FC                            ; ---------------------------------------------------------------------------
000018FC                            ; Pallet cycling routine loading subroutine
000018FC                            ; ---------------------------------------------------------------------------
000018FC                            
000018FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018FC                            
000018FC                            
000018FC                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
000018FC 7400                       		moveq	#0,d2
000018FE 7000                       		moveq	#0,d0
00001900 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001904 D040                       		add.w	d0,d0		; multiply by 2
00001906 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000190A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000190E                            ; End of function PalCycle_Load
0000190E                            
0000190E                            ; ===========================================================================
0000190E                            ; ---------------------------------------------------------------------------
0000190E                            ; Pallet cycling routines
0000190E                            ; ---------------------------------------------------------------------------
0000190E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001910 0000                       		dc.w PalCycle_LZ-PalCycle
00001912 0000                       		dc.w PalCycle_MZ-PalCycle
00001914 0000                       		dc.w PalCycle_SLZ-PalCycle
00001916 0000                       		dc.w PalCycle_SYZ-PalCycle
00001918 0000                       		dc.w PalCycle_SBZ-PalCycle
0000191A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000191C                            
0000191C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191C                            
0000191C                            
0000191C                            PalCycle_Title:				; XREF: TitleScreen
0000191C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001922 6000                       		bra.s	loc_196A
00001924                            ; ===========================================================================
00001924                            
00001924                            PalCycle_GHZ:				; XREF: PalCycle
00001924 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000192A                            
0000192A                            loc_196A:				; XREF: PalCycle_Title
0000192A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000192E 6A00                       		bpl.s	locret_1990
00001930 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001936 3038 F632                  		move.w	($FFFFF632).w,d0
0000193A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000193E 0240 0003                  		andi.w	#3,d0
00001942 E748                       		lsl.w	#3,d0
00001944 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001948 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000194C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001950                            
00001950                            locret_1990:
00001950 4E75                       		rts	
00001952                            ; End of function PalCycle_Title
00001952                            
00001952                            
00001952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001952                            
00001952                            
00001952                            PalCycle_LZ:				; XREF: PalCycle
00001952 5378 F634                  		subq.w	#1,($FFFFF634).w
00001956 6A00                       		bpl.s	loc_19D8
00001958 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000195E 3038 F632                  		move.w	($FFFFF632).w,d0
00001962 5278 F632                  		addq.w	#1,($FFFFF632).w
00001966 0240 0003                  		andi.w	#3,d0
0000196A E748                       		lsl.w	#3,d0
0000196C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001972 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001978 6600                       		bne.s	loc_19C0
0000197A 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001980                            
00001980                            loc_19C0:
00001980 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001984 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001988 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000198C 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001990 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001994 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001998                            
00001998                            loc_19D8:
00001998 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000199C 0240 0007                  		andi.w	#7,d0
000019A0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019A4 6700                       		beq.s	locret_1A3A
000019A6 7201                       		moveq	#1,d1
000019A8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019AC 6700                       		beq.s	loc_19F0
000019AE 4441                       		neg.w	d1
000019B0                            
000019B0                            loc_19F0:
000019B0 3038 F650                  		move.w	($FFFFF650).w,d0
000019B4 0240 0003                  		andi.w	#3,d0
000019B8 D041                       		add.w	d1,d0
000019BA 0C40 0003                  		cmpi.w	#3,d0
000019BE 6500                       		bcs.s	loc_1A0A
000019C0 3200                       		move.w	d0,d1
000019C2 7000                       		moveq	#0,d0
000019C4 4A41                       		tst.w	d1
000019C6 6A00                       		bpl.s	loc_1A0A
000019C8 7002                       		moveq	#2,d0
000019CA                            
000019CA                            loc_1A0A:
000019CA 31C0 F650                  		move.w	d0,($FFFFF650).w
000019CE D040                       		add.w	d0,d0
000019D0 3200                       		move.w	d0,d1
000019D2 D040                       		add.w	d0,d0
000019D4 D041                       		add.w	d1,d0
000019D6 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000019DC 43F8 FB76                  		lea	($FFFFFB76).w,a1
000019E0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019E4 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019E8 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
000019EE 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
000019F2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019F6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
000019FA                            
000019FA                            locret_1A3A:
000019FA 4E75                       		rts	
000019FC                            ; End of function PalCycle_LZ
000019FC                            
000019FC                            ; ===========================================================================
000019FC 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A04                            ; ===========================================================================
00001A04                            
00001A04                            PalCycle_MZ:				; XREF: PalCycle
00001A04 4E75                       		rts	
00001A06                            
00001A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            
00001A06                            
00001A06                            PalCycle_SLZ:				; XREF: PalCycle
00001A06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A0A 6A00                       		bpl.s	locret_1A80
00001A0C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A12 3038 F632                  		move.w	($FFFFF632).w,d0
00001A16 5240                       		addq.w	#1,d0
00001A18 0C40 0006                  		cmpi.w	#6,d0
00001A1C 6500                       		bcs.s	loc_1A60
00001A1E 7000                       		moveq	#0,d0
00001A20                            
00001A20                            loc_1A60:
00001A20 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A24 3200                       		move.w	d0,d1
00001A26 D241                       		add.w	d1,d1
00001A28 D041                       		add.w	d1,d0
00001A2A D040                       		add.w	d0,d0
00001A2C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A32 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A36 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A3A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A40                            
00001A40                            locret_1A80:
00001A40 4E75                       		rts	
00001A42                            ; End of function PalCycle_SLZ
00001A42                            
00001A42                            
00001A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A42                            
00001A42                            
00001A42                            PalCycle_SYZ:				; XREF: PalCycle
00001A42 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A46 6A00                       		bpl.s	locret_1AC6
00001A48 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A4E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A52 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A56 0240 0003                  		andi.w	#3,d0
00001A5A E548                       		lsl.w	#2,d0
00001A5C 3200                       		move.w	d0,d1
00001A5E D040                       		add.w	d0,d0
00001A60 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001A66 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001A6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001A72 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001A78 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A7C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001A80 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001A86                            
00001A86                            locret_1AC6:
00001A86 4E75                       		rts	
00001A88                            ; End of function PalCycle_SYZ
00001A88                            
00001A88                            
00001A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A88                            
00001A88                            
00001A88                            PalCycle_SBZ:				; XREF: PalCycle
00001A88 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001A8E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001A92 6700                       		beq.s	loc_1ADA
00001A94 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001A9A                            
00001A9A                            loc_1ADA:
00001A9A 43F8 F650                  		lea	($FFFFF650).w,a1
00001A9E 321A                       		move.w	(a2)+,d1
00001AA0                            
00001AA0                            loc_1AE0:
00001AA0 5311                       		subq.b	#1,(a1)
00001AA2 6B00                       		bmi.s	loc_1AEA
00001AA4 5489                       		addq.l	#2,a1
00001AA6 5C8A                       		addq.l	#6,a2
00001AA8 6000                       		bra.s	loc_1B06
00001AAA                            ; ===========================================================================
00001AAA                            
00001AAA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AAA 12DA                       		move.b	(a2)+,(a1)+
00001AAC 1011                       		move.b	(a1),d0
00001AAE 5200                       		addq.b	#1,d0
00001AB0 B01A                       		cmp.b	(a2)+,d0
00001AB2 6500                       		bcs.s	loc_1AF6
00001AB4 7000                       		moveq	#0,d0
00001AB6                            
00001AB6                            loc_1AF6:
00001AB6 12C0                       		move.b	d0,(a1)+
00001AB8 0240 000F                  		andi.w	#$F,d0
00001ABC D040                       		add.w	d0,d0
00001ABE 305A                       		movea.w	(a2)+,a0
00001AC0 365A                       		movea.w	(a2)+,a3
00001AC2 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001AC6                            
00001AC6                            loc_1B06:				; XREF: PalCycle_SBZ
00001AC6 51C9 FFD8                  		dbf	d1,loc_1AE0
00001ACA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ACE 6A00                       		bpl.s	locret_1B64
00001AD0 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001AD6 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001ADC 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AE0 6700                       		beq.s	loc_1B2E
00001AE2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001AE8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001AEE                            
00001AEE                            loc_1B2E:
00001AEE 72FF                       		moveq	#-1,d1
00001AF0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001AF4 6700                       		beq.s	loc_1B38
00001AF6 4441                       		neg.w	d1
00001AF8                            
00001AF8                            loc_1B38:
00001AF8 3038 F632                  		move.w	($FFFFF632).w,d0
00001AFC 0240 0003                  		andi.w	#3,d0
00001B00 D041                       		add.w	d1,d0
00001B02 0C40 0003                  		cmpi.w	#3,d0
00001B06 6500                       		bcs.s	loc_1B52
00001B08 3200                       		move.w	d0,d1
00001B0A 7000                       		moveq	#0,d0
00001B0C 4A41                       		tst.w	d1
00001B0E 6A00                       		bpl.s	loc_1B52
00001B10 7002                       		moveq	#2,d0
00001B12                            
00001B12                            loc_1B52:
00001B12 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B16 D040                       		add.w	d0,d0
00001B18 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B1C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B20 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B24                            
00001B24                            locret_1B64:
00001B24 4E75                       		rts	
00001B26                            ; End of function PalCycle_SBZ
00001B26                            
00001B26                            ; ===========================================================================
00001B26                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B46                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001B66                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001B86                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001B98                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BAA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C12                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C36                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C56                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001C66                            
00001C66                            Pal_SBZCycList:
00001C66                            	include "_inc\SBZ pallet script 1.asm"
00001C66                            ; ---------------------------------------------------------------------------
00001C66                            ; Scrap Brain Zone 1 pallet cycling script
00001C66                            ; ---------------------------------------------------------------------------
00001C66 0008                       	dc.w 8			; number of entries - 1
00001C68 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001C6A 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001C6C FB50                       	dc.w $FB50		; RAM address
00001C6E 0D08                       	dc.b $D, 8
00001C70 0000                       	dc.w Pal_SBZCyc2
00001C72 FB52                       	dc.w $FB52
00001C74 0E08                       	dc.b $E, 8
00001C76 0000                       	dc.w Pal_SBZCyc3
00001C78 FB6E                       	dc.w $FB6E
00001C7A 0B08                       	dc.b $B, 8
00001C7C 0000                       	dc.w Pal_SBZCyc5
00001C7E FB70                       	dc.w $FB70
00001C80 0708                       	dc.b 7,	8
00001C82 0000                       	dc.w Pal_SBZCyc6
00001C84 FB72                       	dc.w $FB72
00001C86 1C10                       	dc.b $1C, $10
00001C88 0000                       	dc.w Pal_SBZCyc7
00001C8A FB7E                       	dc.w $FB7E
00001C8C 0303                       	dc.b 3,	3
00001C8E 0000                       	dc.w Pal_SBZCyc8
00001C90 FB78                       	dc.w $FB78
00001C92 0303                       	dc.b 3,	3
00001C94 0000                       	dc.w Pal_SBZCyc8+2
00001C96 FB7A                       	dc.w $FB7A
00001C98 0303                       	dc.b 3,	3
00001C9A 0000                       	dc.w Pal_SBZCyc8+4
00001C9C FB7C                       	dc.w $FB7C
00001C9E                            	even
00001C9E                            	even
00001C9E                            
00001C9E                            Pal_SBZCycList2:
00001C9E                            	include "_inc\SBZ pallet script 2.asm"
00001C9E                            ; ---------------------------------------------------------------------------
00001C9E                            ; Scrap Brain Zone 2 pallet cycling script
00001C9E                            ; ---------------------------------------------------------------------------
00001C9E 0006                       	dc.w 6
00001CA0 0708                       	dc.b 7,	8
00001CA2 0000                       	dc.w Pal_SBZCyc1
00001CA4 FB50                       	dc.w $FB50
00001CA6 0D08                       	dc.b $D, 8
00001CA8 0000                       	dc.w Pal_SBZCyc2
00001CAA FB52                       	dc.w $FB52
00001CAC 0908                       	dc.b 9,	8
00001CAE 0000                       	dc.w Pal_SBZCyc9
00001CB0 FB70                       	dc.w $FB70
00001CB2 0708                       	dc.b 7,	8
00001CB4 0000                       	dc.w Pal_SBZCyc6
00001CB6 FB72                       	dc.w $FB72
00001CB8 0303                       	dc.b 3,	3
00001CBA 0000                       	dc.w Pal_SBZCyc8
00001CBC FB78                       	dc.w $FB78
00001CBE 0303                       	dc.b 3,	3
00001CC0 0000                       	dc.w Pal_SBZCyc8+2
00001CC2 FB7A                       	dc.w $FB7A
00001CC4 0303                       	dc.b 3,	3
00001CC6 0000                       	dc.w Pal_SBZCyc8+4
00001CC8 FB7C                       	dc.w $FB7C
00001CCA                            	even
00001CCA                            	even
00001CCA                            
00001CCA                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001CDA                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001CEA                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001CFA                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D06                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D16                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D26                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D46                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D50                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001D60                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001D6C                            ; ---------------------------------------------------------------------------
00001D6C                            ; Subroutine to	fade out and fade in
00001D6C                            ; ---------------------------------------------------------------------------
00001D6C                            
00001D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D6C                            
00001D6C                            
00001D6C                            Pal_FadeTo:
00001D6C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001D72                            
00001D72                            Pal_FadeTo2:
00001D72 7000                       		moveq	#0,d0
00001D74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001D78 1038 F626                  		move.b	($FFFFF626).w,d0
00001D7C D0C0                       		adda.w	d0,a0
00001D7E 7200                       		moveq	#0,d1
00001D80 1038 F627                  		move.b	($FFFFF627).w,d0
00001D84                            
00001D84                            Pal_ToBlack:
00001D84 30C1                       		move.w	d1,(a0)+
00001D86 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001D8A                            
00001D8A 383C 0015                  		move.w	#$15,d4
00001D8E                            
00001D8E                            loc_1DCE:
00001D8E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001D94 6100 0000                  		bsr.w	DelayProgram
00001D98 6100                       		bsr.s	Pal_FadeIn
00001D9A 6100 F810                  		bsr.w	RunPLC_RAM
00001D9E 51CC FFEE                  		dbf	d4,loc_1DCE
00001DA2 4E75                       		rts	
00001DA4                            ; End of function Pal_FadeTo
00001DA4                            
00001DA4                            ; ---------------------------------------------------------------------------
00001DA4                            ; Pallet fade-in subroutine
00001DA4                            ; ---------------------------------------------------------------------------
00001DA4                            
00001DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA4                            
00001DA4                            
00001DA4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DA4 7000                       		moveq	#0,d0
00001DA6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DAA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DAE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DB2 D0C0                       		adda.w	d0,a0
00001DB4 D2C0                       		adda.w	d0,a1
00001DB6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DBA                            
00001DBA                            loc_1DFA:
00001DBA 6100                       		bsr.s	Pal_AddColor
00001DBC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001DC0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001DC6 6600                       		bne.s	locret_1E24
00001DC8 7000                       		moveq	#0,d0
00001DCA 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001DCE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001DD2 1038 F626                  		move.b	($FFFFF626).w,d0
00001DD6 D0C0                       		adda.w	d0,a0
00001DD8 D2C0                       		adda.w	d0,a1
00001DDA 1038 F627                  		move.b	($FFFFF627).w,d0
00001DDE                            
00001DDE                            loc_1E1E:
00001DDE 6100                       		bsr.s	Pal_AddColor
00001DE0 51C8 FFFC                  		dbf	d0,loc_1E1E
00001DE4                            
00001DE4                            locret_1E24:
00001DE4 4E75                       		rts	
00001DE6                            ; End of function Pal_FadeIn
00001DE6                            
00001DE6                            
00001DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE6                            
00001DE6                            
00001DE6                            Pal_AddColor:				; XREF: Pal_FadeIn
00001DE6 3419                       		move.w	(a1)+,d2
00001DE8 3610                       		move.w	(a0),d3
00001DEA B642                       		cmp.w	d2,d3
00001DEC 6700                       		beq.s	loc_1E4E
00001DEE 3203                       		move.w	d3,d1
00001DF0 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001DF4 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001DF6 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001DF8 30C1                       		move.w	d1,(a0)+	; update pallet
00001DFA 4E75                       		rts	
00001DFC                            ; ===========================================================================
00001DFC                            
00001DFC                            Pal_AddGreen:				; XREF: Pal_AddColor
00001DFC 3203                       		move.w	d3,d1
00001DFE 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E02 B242                       		cmp.w	d2,d1
00001E04 6200                       		bhi.s	Pal_AddRed
00001E06 30C1                       		move.w	d1,(a0)+	; update pallet
00001E08 4E75                       		rts	
00001E0A                            ; ===========================================================================
00001E0A                            
00001E0A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E0A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E0C 4E75                       		rts	
00001E0E                            ; ===========================================================================
00001E0E                            
00001E0E                            loc_1E4E:				; XREF: Pal_AddColor
00001E0E 5448                       		addq.w	#2,a0
00001E10 4E75                       		rts	
00001E12                            ; End of function Pal_AddColor
00001E12                            
00001E12                            
00001E12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E12                            
00001E12                            
00001E12                            Pal_FadeFrom:
00001E12 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E18 383C 0015                  		move.w	#$15,d4
00001E1C                            
00001E1C                            loc_1E5C:
00001E1C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E22 6100 0000                  		bsr.w	DelayProgram
00001E26 6100                       		bsr.s	Pal_FadeOut
00001E28 6100 F782                  		bsr.w	RunPLC_RAM
00001E2C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E30 4E75                       		rts	
00001E32                            ; End of function Pal_FadeFrom
00001E32                            
00001E32                            ; ---------------------------------------------------------------------------
00001E32                            ; Pallet fade-out subroutine
00001E32                            ; ---------------------------------------------------------------------------
00001E32                            
00001E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E32                            
00001E32                            
00001E32                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E32 7000                       		moveq	#0,d0
00001E34 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E38 1038 F626                  		move.b	($FFFFF626).w,d0
00001E3C D0C0                       		adda.w	d0,a0
00001E3E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E42                            
00001E42                            loc_1E82:
00001E42 6100                       		bsr.s	Pal_DecColor
00001E44 51C8 FFFC                  		dbf	d0,loc_1E82
00001E48                            
00001E48 7000                       		moveq	#0,d0
00001E4A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E4E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E52 D0C0                       		adda.w	d0,a0
00001E54 1038 F627                  		move.b	($FFFFF627).w,d0
00001E58                            
00001E58                            loc_1E98:
00001E58 6100                       		bsr.s	Pal_DecColor
00001E5A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E5E 4E75                       		rts	
00001E60                            ; End of function Pal_FadeOut
00001E60                            
00001E60                            
00001E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E60                            
00001E60                            
00001E60                            Pal_DecColor:				; XREF: Pal_FadeOut
00001E60 3410                       		move.w	(a0),d2
00001E62 6700                       		beq.s	loc_1ECC
00001E64 3202                       		move.w	d2,d1
00001E66 0241 000E                  		andi.w	#$E,d1
00001E6A 6700                       		beq.s	Pal_DecGreen
00001E6C 5558                       		subq.w	#2,(a0)+	; decrease red value
00001E6E 4E75                       		rts	
00001E70                            ; ===========================================================================
00001E70                            
00001E70                            Pal_DecGreen:				; XREF: Pal_DecColor
00001E70 3202                       		move.w	d2,d1
00001E72 0241 00E0                  		andi.w	#$E0,d1
00001E76 6700                       		beq.s	Pal_DecBlue
00001E78 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001E7C 4E75                       		rts	
00001E7E                            ; ===========================================================================
00001E7E                            
00001E7E                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001E7E 3202                       		move.w	d2,d1
00001E80 0241 0E00                  		andi.w	#$E00,d1
00001E84 6700                       		beq.s	loc_1ECC
00001E86 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001E8A 4E75                       		rts	
00001E8C                            ; ===========================================================================
00001E8C                            
00001E8C                            loc_1ECC:				; XREF: Pal_DecColor
00001E8C 5448                       		addq.w	#2,a0
00001E8E 4E75                       		rts	
00001E90                            ; End of function Pal_DecColor
00001E90                            
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Subroutine to	fill the pallet	with white (special stage)
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            
00001E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E90                            
00001E90                            
00001E90                            Pal_MakeWhite:				; XREF: SpecialStage
00001E90 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E96 7000                       		moveq	#0,d0
00001E98 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E9C 1038 F626                  		move.b	($FFFFF626).w,d0
00001EA0 D0C0                       		adda.w	d0,a0
00001EA2 323C 0EEE                  		move.w	#$EEE,d1
00001EA6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EAA                            
00001EAA                            PalWhite_Loop:
00001EAA 30C1                       		move.w	d1,(a0)+
00001EAC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EB0 383C 0015                  		move.w	#$15,d4
00001EB4                            
00001EB4                            loc_1EF4:
00001EB4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EBA 6100 0000                  		bsr.w	DelayProgram
00001EBE 6100                       		bsr.s	Pal_WhiteToBlack
00001EC0 6100 F6EA                  		bsr.w	RunPLC_RAM
00001EC4 51CC FFEE                  		dbf	d4,loc_1EF4
00001EC8 4E75                       		rts	
00001ECA                            ; End of function Pal_MakeWhite
00001ECA                            
00001ECA                            
00001ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ECA                            
00001ECA                            
00001ECA                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001ECA 7000                       		moveq	#0,d0
00001ECC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001ED0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001ED4 1038 F626                  		move.b	($FFFFF626).w,d0
00001ED8 D0C0                       		adda.w	d0,a0
00001EDA D2C0                       		adda.w	d0,a1
00001EDC 1038 F627                  		move.b	($FFFFF627).w,d0
00001EE0                            
00001EE0                            loc_1F20:
00001EE0 6100                       		bsr.s	Pal_DecColor2
00001EE2 51C8 FFFC                  		dbf	d0,loc_1F20
00001EE6                            
00001EE6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001EEC 6600                       		bne.s	locret_1F4A
00001EEE 7000                       		moveq	#0,d0
00001EF0 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001EF4 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001EF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001EFC D0C0                       		adda.w	d0,a0
00001EFE D2C0                       		adda.w	d0,a1
00001F00 1038 F627                  		move.b	($FFFFF627).w,d0
00001F04                            
00001F04                            loc_1F44:
00001F04 6100                       		bsr.s	Pal_DecColor2
00001F06 51C8 FFFC                  		dbf	d0,loc_1F44
00001F0A                            
00001F0A                            locret_1F4A:
00001F0A 4E75                       		rts	
00001F0C                            ; End of function Pal_WhiteToBlack
00001F0C                            
00001F0C                            
00001F0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0C                            
00001F0C                            
00001F0C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F0C 3419                       		move.w	(a1)+,d2
00001F0E 3610                       		move.w	(a0),d3
00001F10 B642                       		cmp.w	d2,d3
00001F12 6700                       		beq.s	loc_1F78
00001F14 3203                       		move.w	d3,d1
00001F16 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F1A 6500                       		bcs.s	loc_1F64
00001F1C B242                       		cmp.w	d2,d1
00001F1E 6500                       		bcs.s	loc_1F64
00001F20 30C1                       		move.w	d1,(a0)+
00001F22 4E75                       		rts	
00001F24                            ; ===========================================================================
00001F24                            
00001F24                            loc_1F64:				; XREF: Pal_DecColor2
00001F24 3203                       		move.w	d3,d1
00001F26 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F2A 6500                       		bcs.s	loc_1F74
00001F2C B242                       		cmp.w	d2,d1
00001F2E 6500                       		bcs.s	loc_1F74
00001F30 30C1                       		move.w	d1,(a0)+
00001F32 4E75                       		rts	
00001F34                            ; ===========================================================================
00001F34                            
00001F34                            loc_1F74:				; XREF: loc_1F64
00001F34 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F36 4E75                       		rts	
00001F38                            ; ===========================================================================
00001F38                            
00001F38                            loc_1F78:				; XREF: Pal_DecColor2
00001F38 5448                       		addq.w	#2,a0
00001F3A 4E75                       		rts	
00001F3C                            ; End of function Pal_DecColor2
00001F3C                            
00001F3C                            ; ---------------------------------------------------------------------------
00001F3C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F3C                            ; ---------------------------------------------------------------------------
00001F3C                            
00001F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F3C                            
00001F3C                            
00001F3C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F3C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F42 383C 0015                  		move.w	#$15,d4
00001F46                            
00001F46                            loc_1F86:
00001F46 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F4C 6100 0000                  		bsr.w	DelayProgram
00001F50 6100                       		bsr.s	Pal_ToWhite
00001F52 6100 F658                  		bsr.w	RunPLC_RAM
00001F56 51CC FFEE                  		dbf	d4,loc_1F86
00001F5A 4E75                       		rts	
00001F5C                            ; End of function Pal_MakeFlash
00001F5C                            
00001F5C                            
00001F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F5C                            
00001F5C                            
00001F5C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F5C 7000                       		moveq	#0,d0
00001F5E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F62 1038 F626                  		move.b	($FFFFF626).w,d0
00001F66 D0C0                       		adda.w	d0,a0
00001F68 1038 F627                  		move.b	($FFFFF627).w,d0
00001F6C                            
00001F6C                            loc_1FAC:
00001F6C 6100                       		bsr.s	Pal_AddColor2
00001F6E 51C8 FFFC                  		dbf	d0,loc_1FAC
00001F72 7000                       		moveq	#0,d0
00001F74 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F78 1038 F626                  		move.b	($FFFFF626).w,d0
00001F7C D0C0                       		adda.w	d0,a0
00001F7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001F82                            
00001F82                            loc_1FC2:
00001F82 6100                       		bsr.s	Pal_AddColor2
00001F84 51C8 FFFC                  		dbf	d0,loc_1FC2
00001F88 4E75                       		rts	
00001F8A                            ; End of function Pal_ToWhite
00001F8A                            
00001F8A                            
00001F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F8A                            
00001F8A                            
00001F8A                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001F8A 3410                       		move.w	(a0),d2
00001F8C 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001F90 6700                       		beq.s	loc_2006
00001F92 3202                       		move.w	d2,d1
00001F94 0241 000E                  		andi.w	#$E,d1
00001F98 0C41 000E                  		cmpi.w	#$E,d1
00001F9C 6700                       		beq.s	loc_1FE2
00001F9E 5458                       		addq.w	#2,(a0)+	; increase red value
00001FA0 4E75                       		rts	
00001FA2                            ; ===========================================================================
00001FA2                            
00001FA2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FA2 3202                       		move.w	d2,d1
00001FA4 0241 00E0                  		andi.w	#$E0,d1
00001FA8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FAC 6700                       		beq.s	loc_1FF4
00001FAE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FB2 4E75                       		rts	
00001FB4                            ; ===========================================================================
00001FB4                            
00001FB4                            loc_1FF4:				; XREF: loc_1FE2
00001FB4 3202                       		move.w	d2,d1
00001FB6 0241 0E00                  		andi.w	#$E00,d1
00001FBA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FBE 6700                       		beq.s	loc_2006
00001FC0 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00001FC4 4E75                       		rts	
00001FC6                            ; ===========================================================================
00001FC6                            
00001FC6                            loc_2006:				; XREF: Pal_AddColor2
00001FC6 5448                       		addq.w	#2,a0
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_AddColor2
00001FCA                            
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            ; Pallet cycling routine - Sega	logo
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            PalCycle_Sega:				; XREF: SegaScreen
00001FCA 4A38 F635                  		tst.b	($FFFFF635).w
00001FCE 6600                       		bne.s	loc_206A
00001FD0 43F8 FB20                  		lea	($FFFFFB20).w,a1
00001FD4 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00001FDA 7205                       		moveq	#5,d1
00001FDC 3038 F632                  		move.w	($FFFFF632).w,d0
00001FE0                            
00001FE0                            loc_2020:
00001FE0 6A00                       		bpl.s	loc_202A
00001FE2 5448                       		addq.w	#2,a0
00001FE4 5341                       		subq.w	#1,d1
00001FE6 5440                       		addq.w	#2,d0
00001FE8 60F6                       		bra.s	loc_2020
00001FEA                            ; ===========================================================================
00001FEA                            
00001FEA                            loc_202A:				; XREF: PalCycle_Sega
00001FEA 3400                       		move.w	d0,d2
00001FEC 0242 001E                  		andi.w	#$1E,d2
00001FF0 6600                       		bne.s	loc_2034
00001FF2 5440                       		addq.w	#2,d0
00001FF4                            
00001FF4                            loc_2034:
00001FF4 0C40 0060                  		cmpi.w	#$60,d0
00001FF8 6400                       		bcc.s	loc_203E
00001FFA 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00001FFE                            
00001FFE                            loc_203E:
00001FFE 5440                       		addq.w	#2,d0
00002000 51C9 FFE8                  		dbf	d1,loc_202A
00002004 3038 F632                  		move.w	($FFFFF632).w,d0
00002008 5440                       		addq.w	#2,d0
0000200A 3400                       		move.w	d0,d2
0000200C 0242 001E                  		andi.w	#$1E,d2
00002010 6600                       		bne.s	loc_2054
00002012 5440                       		addq.w	#2,d0
00002014                            
00002014                            loc_2054:
00002014 0C40 0064                  		cmpi.w	#$64,d0
00002018 6D00                       		blt.s	loc_2062
0000201A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002020 70F4                       		moveq	#-$C,d0
00002022                            
00002022                            loc_2062:
00002022 31C0 F632                  		move.w	d0,($FFFFF632).w
00002026 7001                       		moveq	#1,d0
00002028 4E75                       		rts	
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_206A:				; XREF: loc_202A
0000202A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000202E 6A00                       		bpl.s	loc_20BC
00002030 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002036 3038 F632                  		move.w	($FFFFF632).w,d0
0000203A 0640 000C                  		addi.w	#$C,d0
0000203E 0C40 0030                  		cmpi.w	#$30,d0
00002042 6500                       		bcs.s	loc_2088
00002044 7000                       		moveq	#0,d0
00002046 4E75                       		rts	
00002048                            ; ===========================================================================
00002048                            
00002048                            loc_2088:				; XREF: loc_206A
00002048 31C0 F632                  		move.w	d0,($FFFFF632).w
0000204C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002052 41F0 0000                  		lea	(a0,d0.w),a0
00002056 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000205A 22D8                       		move.l	(a0)+,(a1)+
0000205C 22D8                       		move.l	(a0)+,(a1)+
0000205E 3298                       		move.w	(a0)+,(a1)
00002060 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002064 7000                       		moveq	#0,d0
00002066 722C                       		moveq	#$2C,d1
00002068                            
00002068                            loc_20A8:
00002068 3400                       		move.w	d0,d2
0000206A 0242 001E                  		andi.w	#$1E,d2
0000206E 6600                       		bne.s	loc_20B2
00002070 5440                       		addq.w	#2,d0
00002072                            
00002072                            loc_20B2:
00002072 3390 0000                  		move.w	(a0),(a1,d0.w)
00002076 5440                       		addq.w	#2,d0
00002078 51C9 FFEE                  		dbf	d1,loc_20A8
0000207C                            
0000207C                            loc_20BC:
0000207C 7001                       		moveq	#1,d0
0000207E 4E75                       		rts	
00002080                            ; End of function PalCycle_Sega
00002080                            
00002080                            ; ===========================================================================
00002080                            
00002080                            Pal_Sega1:	incbin	pallet\sega1.bin
0000208C                            Pal_Sega2:	incbin	pallet\sega2.bin
000020BC                            
000020BC                            ; ---------------------------------------------------------------------------
000020BC                            ; Subroutines to load pallets
000020BC                            ; ---------------------------------------------------------------------------
000020BC                            
000020BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BC                            
000020BC                            
000020BC                            PalLoad1:
000020BC 43F9 0000 0000             		lea	(PalPointers).l,a1
000020C2 E748                       		lsl.w	#3,d0
000020C4 D2C0                       		adda.w	d0,a1
000020C6 2459                       		movea.l	(a1)+,a2
000020C8 3659                       		movea.w	(a1)+,a3
000020CA D6FC 0080                  		adda.w	#$80,a3
000020CE 3E19                       		move.w	(a1)+,d7
000020D0                            
000020D0                            loc_2110:
000020D0 26DA                       		move.l	(a2)+,(a3)+
000020D2 51CF FFFC                  		dbf	d7,loc_2110
000020D6 4E75                       		rts	
000020D8                            ; End of function PalLoad1
000020D8                            
000020D8                            
000020D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D8                            
000020D8                            
000020D8                            PalLoad2:
000020D8 43F9 0000 0000             		lea	(PalPointers).l,a1
000020DE E748                       		lsl.w	#3,d0
000020E0 D2C0                       		adda.w	d0,a1
000020E2 2459                       		movea.l	(a1)+,a2
000020E4 3659                       		movea.w	(a1)+,a3
000020E6 3E19                       		move.w	(a1)+,d7
000020E8                            
000020E8                            loc_2128:
000020E8 26DA                       		move.l	(a2)+,(a3)+
000020EA 51CF FFFC                  		dbf	d7,loc_2128
000020EE 4E75                       		rts	
000020F0                            ; End of function PalLoad2
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Underwater pallet loading subroutine
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            PalLoad3_Water:
000020F0 43F9 0000 0000             		lea	(PalPointers).l,a1
000020F6 E748                       		lsl.w	#3,d0
000020F8 D2C0                       		adda.w	d0,a1
000020FA 2459                       		movea.l	(a1)+,a2
000020FC 3659                       		movea.w	(a1)+,a3
000020FE 96FC 0080                  		suba.w	#$80,a3
00002102 3E19                       		move.w	(a1)+,d7
00002104                            
00002104                            loc_2144:
00002104 26DA                       		move.l	(a2)+,(a3)+
00002106 51CF FFFC                  		dbf	d7,loc_2144
0000210A 4E75                       		rts	
0000210C                            ; End of function PalLoad3_Water
0000210C                            
0000210C                            
0000210C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210C                            
0000210C                            
0000210C                            PalLoad4_Water:
0000210C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002112 E748                       		lsl.w	#3,d0
00002114 D2C0                       		adda.w	d0,a1
00002116 2459                       		movea.l	(a1)+,a2
00002118 3659                       		movea.w	(a1)+,a3
0000211A 96FC 0100                  		suba.w	#$100,a3
0000211E 3E19                       		move.w	(a1)+,d7
00002120                            
00002120                            loc_2160:
00002120 26DA                       		move.l	(a2)+,(a3)+
00002122 51CF FFFC                  		dbf	d7,loc_2160
00002126 4E75                       		rts	
00002128                            ; End of function PalLoad4_Water
00002128                            
00002128                            ; ===========================================================================
00002128                            ; ---------------------------------------------------------------------------
00002128                            ; Pallet pointers
00002128                            ; ---------------------------------------------------------------------------
00002128                            PalPointers:
00002128                            	include "_inc\Pallet pointers.asm"
00002128                            ; ---------------------------------------------------------------------------
00002128                            ; Pallet pointers
00002128                            ; ---------------------------------------------------------------------------
00002128 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000212C FB00                       	dc.w $FB00		; RAM address
0000212E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002130 0000 0000                  	dc.l Pal_Title
00002134 FB00                       	dc.w $FB00
00002136 001F                       	dc.w $1F
00002138 0000 0000                  	dc.l Pal_LevelSel
0000213C FB00                       	dc.w $FB00
0000213E 001F                       	dc.w $1F
00002140 0000 0000                  	dc.l Pal_Sonic
00002144 FB00                       	dc.w $FB00
00002146 0007                       	dc.w 7
00002148 0000 0000                  	dc.l Pal_GHZ
0000214C FB20                       	dc.w $FB20
0000214E 0017                       	dc.w $17
00002150 0000 0000                  	dc.l Pal_LZ
00002154 FB20                       	dc.w $FB20
00002156 0017                       	dc.w $17
00002158 0000 0000                  	dc.l Pal_MZ
0000215C FB20                       	dc.w $FB20
0000215E 0017                       	dc.w $17
00002160 0000 0000                  	dc.l Pal_SLZ
00002164 FB20                       	dc.w $FB20
00002166 0017                       	dc.w $17
00002168 0000 0000                  	dc.l Pal_SYZ
0000216C FB20                       	dc.w $FB20
0000216E 0017                       	dc.w $17
00002170 0000 0000                  	dc.l Pal_SBZ1
00002174 FB20                       	dc.w $FB20
00002176 0017                       	dc.w $17
00002178 0000 0000                  	dc.l Pal_Special
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_LZWater
00002184 FB00                       	dc.w $FB00
00002186 001F                       	dc.w $1F
00002188 0000 0000                  	dc.l Pal_SBZ3
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_SBZ3Water
00002194 FB00                       	dc.w $FB00
00002196 001F                       	dc.w $1F
00002198 0000 0000                  	dc.l Pal_SBZ2
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_LZSonWater
000021A4 FB00                       	dc.w $FB00
000021A6 0007                       	dc.w 7
000021A8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021AC FB00                       	dc.w $FB00
000021AE 0007                       	dc.w 7
000021B0 0000 0000                  	dc.l Pal_SpeResult
000021B4 FB00                       	dc.w $FB00
000021B6 001F                       	dc.w $1F
000021B8 0000 0000                  	dc.l Pal_SpeContinue
000021BC FB00                       	dc.w $FB00
000021BE 000F                       	dc.w $F
000021C0 0000 0000                  	dc.l Pal_Ending
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C6 001F                       	dc.w $1F
000021C8                            
000021C8                            ; ---------------------------------------------------------------------------
000021C8                            ; Pallet data
000021C8                            ; ---------------------------------------------------------------------------
000021C8                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002248                            Pal_Title:	incbin	pallet\title.bin
000022C8                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002348                            Pal_Sonic:	incbin	pallet\sonic.bin
00002368                            Pal_GHZ:	incbin	pallet\ghz.bin
000023E8                            Pal_LZ:		incbin	pallet\lz.bin
00002448                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024C8                            Pal_MZ:		incbin	pallet\mz.bin
00002528                            Pal_SLZ:	incbin	pallet\slz.bin
00002588                            Pal_SYZ:	incbin	pallet\syz.bin
000025E8                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002648                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026A8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002728                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002788                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002808                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002828                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002848                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028C8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002908                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002988                            
00002988                            ; ---------------------------------------------------------------------------
00002988                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002988                            ; ---------------------------------------------------------------------------
00002988                            
00002988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002988                            
00002988                            
00002988                            DelayProgram:				; XREF: PauseGame
00002988 46FC 2300                  		move	#$2300,sr
0000298C                            
0000298C                            loc_29AC:
0000298C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002990 66FA                       		bne.s	loc_29AC
00002992 4E75                       		rts	
00002994                            ; End of function DelayProgram
00002994                            
00002994                            ; ---------------------------------------------------------------------------
00002994                            ; Subroutine to	generate a pseudo-random number	in d0
00002994                            ; ---------------------------------------------------------------------------
00002994                            
00002994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002994                            
00002994                            
00002994                            RandomNumber:
00002994 2238 F636                  		move.l	($FFFFF636).w,d1
00002998 6600                       		bne.s	loc_29C0
0000299A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029A0                            
000029A0                            loc_29C0:
000029A0 2001                       		move.l	d1,d0
000029A2 E581                       		asl.l	#2,d1
000029A4 D280                       		add.l	d0,d1
000029A6 E781                       		asl.l	#3,d1
000029A8 D280                       		add.l	d0,d1
000029AA 3001                       		move.w	d1,d0
000029AC 4841                       		swap	d1
000029AE D041                       		add.w	d1,d0
000029B0 3200                       		move.w	d0,d1
000029B2 4841                       		swap	d1
000029B4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029B8 4E75                       		rts	
000029BA                            ; End of function RandomNumber
000029BA                            
000029BA                            
000029BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029BA                            
000029BA                            
000029BA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029BA 0240 00FF                  		andi.w	#$FF,d0
000029BE D040                       		add.w	d0,d0
000029C0 0640 0080                  		addi.w	#$80,d0
000029C4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029C8 0440 0080                  		subi.w	#$80,d0
000029CC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029D0 4E75                       		rts	
000029D2                            ; End of function CalcSine
000029D2                            
000029D2                            ; ===========================================================================
000029D2                            
000029D2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
00002C52                            
00002C52                            ; ===========================================================================
00002C52 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C56 3200                       		move.w	d0,d1
00002C58 4841                       		swap	d1
00002C5A 7000                       		moveq	#0,d0
00002C5C 3200                       		move.w	d0,d1
00002C5E 7407                       		moveq	#7,d2
00002C60                            
00002C60                            loc_2C80:
00002C60 E599                       		rol.l	#2,d1
00002C62 D040                       		add.w	d0,d0
00002C64 5240                       		addq.w	#1,d0
00002C66 9240                       		sub.w	d0,d1
00002C68 6400                       		bcc.s	loc_2C9A
00002C6A D240                       		add.w	d0,d1
00002C6C 5340                       		subq.w	#1,d0
00002C6E 51CA FFF0                  		dbf	d2,loc_2C80
00002C72 E248                       		lsr.w	#1,d0
00002C74 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C78 4E75                       		rts	
00002C7A                            ; ===========================================================================
00002C7A                            
00002C7A                            loc_2C9A:
00002C7A 5240                       		addq.w	#1,d0
00002C7C 51CA FFE2                  		dbf	d2,loc_2C80
00002C80 E248                       		lsr.w	#1,d0
00002C82 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C86 4E75                       		rts	
00002C88                            
00002C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C88                            
00002C88                            
00002C88                            CalcAngle:
00002C88 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C8C 7600                       		moveq	#0,d3
00002C8E 7800                       		moveq	#0,d4
00002C90 3601                       		move.w	d1,d3
00002C92 3802                       		move.w	d2,d4
00002C94 8843                       		or.w	d3,d4
00002C96 6700                       		beq.s	loc_2D04
00002C98 3802                       		move.w	d2,d4
00002C9A 4A43                       		tst.w	d3
00002C9C 6A00 0000                  		bpl.w	loc_2CC2
00002CA0 4443                       		neg.w	d3
00002CA2                            
00002CA2                            loc_2CC2:
00002CA2 4A44                       		tst.w	d4
00002CA4 6A00 0000                  		bpl.w	loc_2CCA
00002CA8 4444                       		neg.w	d4
00002CAA                            
00002CAA                            loc_2CCA:
00002CAA B843                       		cmp.w	d3,d4
00002CAC 6400 0000                  		bcc.w	loc_2CDC
00002CB0 E18C                       		lsl.l	#8,d4
00002CB2 88C3                       		divu.w	d3,d4
00002CB4 7000                       		moveq	#0,d0
00002CB6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CBA 6000                       		bra.s	loc_2CE6
00002CBC                            ; ===========================================================================
00002CBC                            
00002CBC                            loc_2CDC:				; XREF: CalcAngle
00002CBC E18B                       		lsl.l	#8,d3
00002CBE 86C4                       		divu.w	d4,d3
00002CC0 7040                       		moveq	#$40,d0
00002CC2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CC6                            
00002CC6                            loc_2CE6:
00002CC6 4A41                       		tst.w	d1
00002CC8 6A00 0000                  		bpl.w	loc_2CF2
00002CCC 4440                       		neg.w	d0
00002CCE 0640 0080                  		addi.w	#$80,d0
00002CD2                            
00002CD2                            loc_2CF2:
00002CD2 4A42                       		tst.w	d2
00002CD4 6A00 0000                  		bpl.w	loc_2CFE
00002CD8 4440                       		neg.w	d0
00002CDA 0640 0100                  		addi.w	#$100,d0
00002CDE                            
00002CDE                            loc_2CFE:
00002CDE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CE2 4E75                       		rts	
00002CE4                            ; ===========================================================================
00002CE4                            
00002CE4                            loc_2D04:				; XREF: CalcAngle
00002CE4 303C 0040                  		move.w	#$40,d0
00002CE8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CEC 4E75                       		rts	
00002CEE                            ; End of function CalcAngle
00002CEE                            
00002CEE                            ; ===========================================================================
00002CEE                            
00002CEE                            Angle_Data:	incbin	misc\angles.bin
00002DF0                            
00002DF0                            ; ===========================================================================
00002DF0                            
00002DF0                            ; ---------------------------------------------------------------------------
00002DF0                            ; Sega screen
00002DF0                            ; ---------------------------------------------------------------------------
00002DF0                            
00002DF0                            SegaScreen:				; XREF: GameModeArray
00002DF0 103C 00E4                  		move.b	#$E4,d0
00002DF4 6100 E4D6                  		bsr.w	PlaySound_Special ; stop music
00002DF8 6100 E7A4                  		bsr.w	ClearPLC
00002DFC 6100 F014                  		bsr.w	Pal_FadeFrom
00002E00 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E06 3CBC 8004                  		move.w	#$8004,(a6)
00002E0A 3CBC 8230                  		move.w	#$8230,(a6)
00002E0E 3CBC 8407                  		move.w	#$8407,(a6)
00002E12 3CBC 8700                  		move.w	#$8700,(a6)
00002E16 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E1A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E1E 46FC 2700                  		move	#$2700,sr
00002E22 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E26 0200 00BF                  		andi.b	#$BF,d0
00002E2A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E30 6100 E3C0                  		bsr.w	ClearScreen
00002E34 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E3E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E44 6100 E5BA                  		bsr.w	NemDec
00002E48 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E4E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E54 303C 0000                  		move.w	#0,d0
00002E58 6100 E884                  		bsr.w	EniDec
00002E5C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E62 203C 6510 0003             		move.l	#$65100003,d0
00002E68 7217                       		moveq	#$17,d1
00002E6A 7407                       		moveq	#7,d2
00002E6C 6100 E4E2                  		bsr.w	ShowVDPGraphics
00002E70 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E76 203C 4000 0003             		move.l	#$40000003,d0
00002E7C 7227                       		moveq	#$27,d1
00002E7E 741B                       		moveq	#$1B,d2
00002E80 6100 E4CE                  		bsr.w	ShowVDPGraphics
00002E84 7000                       		moveq	#0,d0
00002E86 6100 F250                  		bsr.w	PalLoad2	; load Sega logo pallet
00002E8A 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002E90 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002E96 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002E9C 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EA2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EA6 0000 0040                  		ori.b	#$40,d0
00002EAA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002EB0                            
00002EB0                            Sega_WaitPallet:
00002EB0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EB6 6100 FAD0                  		bsr.w	DelayProgram
00002EBA 6100 F10E                  		bsr.w	PalCycle_Sega
00002EBE 66F0                       		bne.s	Sega_WaitPallet
00002EC0                            
00002EC0 103C 00E1                  		move.b	#$E1,d0
00002EC4 6100 E406                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EC8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002ECE 6100 FAB8                  		bsr.w	DelayProgram
00002ED2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002ED8                            
00002ED8                            Sega_WaitEnd:
00002ED8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EDE 6100 FAA8                  		bsr.w	DelayProgram
00002EE2 4A78 F614                  		tst.w	($FFFFF614).w
00002EE6 6700                       		beq.s	Sega_GotoTitle
00002EE8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002EEE 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002EF0                            
00002EF0                            Sega_GotoTitle:
00002EF0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002EF6 4E75                       		rts	
00002EF8                            ; ===========================================================================
00002EF8                            
00002EF8                            ; ---------------------------------------------------------------------------
00002EF8                            ; Title	screen
00002EF8                            ; ---------------------------------------------------------------------------
00002EF8                            
00002EF8                            TitleScreen:				; XREF: GameModeArray
00002EF8 103C 00E4                  		move.b	#$E4,d0
00002EFC 6100 E3CE                  		bsr.w	PlaySound_Special ; stop music
00002F00 6100 E69C                  		bsr.w	ClearPLC
00002F04 6100 EF0C                  		bsr.w	Pal_FadeFrom
00002F08 46FC 2700                  		move	#$2700,sr
00002F0C 6100 E372                  		bsr.w	SoundDriverLoad
00002F10 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F16 3CBC 8004                  		move.w	#$8004,(a6)
00002F1A 3CBC 8230                  		move.w	#$8230,(a6)
00002F1E 3CBC 8407                  		move.w	#$8407,(a6)
00002F22 3CBC 9001                  		move.w	#$9001,(a6)
00002F26 3CBC 9200                  		move.w	#$9200,(a6)
00002F2A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F2E 3CBC 8720                  		move.w	#$8720,(a6)
00002F32 4238 F64E                  		clr.b	($FFFFF64E).w
00002F36 6100 E2BA                  		bsr.w	ClearScreen
00002F3A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F3E 7000                       		moveq	#0,d0
00002F40 323C 07FF                  		move.w	#$7FF,d1
00002F44                            
00002F44                            Title_ClrObjRam:
00002F44 22C0                       		move.l	d0,(a1)+
00002F46 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F4A                            
00002F4A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F54 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F5A 6100 E4A4                  		bsr.w	NemDec
00002F5E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F68 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F6E 6100 E490                  		bsr.w	NemDec
00002F72 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F78 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F7E 303C 0000                  		move.w	#0,d0
00002F82 6100 E75A                  		bsr.w	EniDec
00002F86 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F8C 203C 4000 0003             		move.l	#$40000003,d0
00002F92 7227                       		moveq	#$27,d1
00002F94 741B                       		moveq	#$1B,d2
00002F96 6100 E3B8                  		bsr.w	ShowVDPGraphics
00002F9A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002F9E 7000                       		moveq	#0,d0
00002FA0 323C 001F                  		move.w	#$1F,d1
00002FA4                            
00002FA4                            Title_ClrPallet:
00002FA4 22C0                       		move.l	d0,(a1)+
00002FA6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FAA                            
00002FAA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FAC 6100 F10E                  		bsr.w	PalLoad1
00002FB0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FB6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FBC 4EB9 0000 0000             		jsr	BuildSprites
00002FC2 6100 EDA8                  		bsr.w	Pal_FadeTo
00002FC6 46FC 2700                  		move	#$2700,sr
00002FCA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FD4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FDA 6100 E424                  		bsr.w	NemDec
00002FDE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00002FE8 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00002FEE 6100 E410                  		bsr.w	NemDec
00002FF2 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00002FFC 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003002 6100 E3FC                  		bsr.w	NemDec
00003006 4DF9 00C0 0000             		lea	($C00000).l,a6
0000300C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003014 4BF9 0000 05C6             		lea	(Art_Text).l,a5
0000301A 323C 028F                  		move.w	#$28F,d1
0000301E                            
0000301E                            Title_LoadText:
0000301E 3C9D                       		move.w	(a5)+,(a6)
00003020 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003024                            
00003024 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000302A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003030 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003036 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000303C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003042 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003048 6100 0000                  		bsr.w	LevelSizeLoad
0000304C 6100 0000                  		bsr.w	DeformBgLayer
00003050 43F8 B000                  		lea	($FFFFB000).w,a1
00003054 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000305A 303C 0000                  		move.w	#0,d0
0000305E 6100 E67E                  		bsr.w	EniDec
00003062 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003068 43F9 00FF 0000             		lea	($FF0000).l,a1
0000306E 6100 E7EC                  		bsr.w	KosDec
00003072 6100 0000                  		bsr.w	LevelLayoutLoad
00003076 6100 ED9A                  		bsr.w	Pal_FadeFrom
0000307A 46FC 2700                  		move	#$2700,sr
0000307E 6100 E172                  		bsr.w	ClearScreen
00003082 4BF9 00C0 0004             		lea	($C00004).l,a5
00003088 4DF9 00C0 0000             		lea	($C00000).l,a6
0000308E 47F8 F708                  		lea	($FFFFF708).w,a3
00003092 49F8 A440                  		lea	($FFFFA440).w,a4
00003096 343C 6000                  		move.w	#$6000,d2
0000309A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000309E 43F9 00FF 0000             		lea	($FF0000).l,a1
000030A4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030AA 303C 0000                  		move.w	#0,d0
000030AE 6100 E62E                  		bsr.w	EniDec
000030B2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B8 203C 4206 0003             		move.l	#$42060003,d0
000030BE 7221                       		moveq	#$21,d1
000030C0 7415                       		moveq	#$15,d2
000030C2 6100 E28C                  		bsr.w	ShowVDPGraphics
000030C6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030D0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030D6 6100 E328                  		bsr.w	NemDec
000030DA 7001                       		moveq	#1,d0		; load title screen pallet
000030DC 6100 EFDE                  		bsr.w	PalLoad1
000030E0 103C 009B                  		move.b	#$9B,d0		; play title screen music
000030E4 6100 E1E6                  		bsr.w	PlaySound_Special
000030E8 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000030EE 31FC 0200 F614             		move.w	#$200,($FFFFF614).w ; run title	screen for $200	frames
000030F4 43F8 D080                  		lea	($FFFFD080).w,a1
000030F8 7000                       		moveq	#0,d0
000030FA 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
000030FE                            
000030FE                            Title_ClrObjRam2:
000030FE 22C0                       		move.l	d0,(a1)+
00003100 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003104                            
00003104 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000310A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003110 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003116 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000311C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003122 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003128 4EB9 0000 0000             		jsr	ObjectsLoad
0000312E 6100 0000                  		bsr.w	DeformBgLayer
00003132 4EB9 0000 0000             		jsr	BuildSprites
00003138 7000                       		moveq	#0,d0
0000313A 6100 E436                  		bsr.w	LoadPLC2
0000313E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003144 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000314A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000314E 0000 0040                  		ori.b	#$40,d0
00003152 33C0 00C0 0004             		move.w	d0,($C00004).l
00003158 6100 EC12                  		bsr.w	Pal_FadeTo
0000315C                            
0000315C                            loc_317C:
0000315C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003162 6100 F824                  		bsr.w	DelayProgram
00003166 4EB9 0000 0000             		jsr	ObjectsLoad
0000316C 6100 0000                  		bsr.w	DeformBgLayer
00003170 4EB9 0000 0000             		jsr	BuildSprites
00003176 6100 E7A4                  		bsr.w	PalCycle_Title
0000317A 6100 E430                  		bsr.w	RunPLC_RAM
0000317E 3038 D008                  		move.w	($FFFFD008).w,d0
00003182 5440                       		addq.w	#2,d0
00003184 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003188 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000318C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000318E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003194 4E75                       		rts	
00003196                            ; ===========================================================================
00003196                            
00003196                            Title_ChkRegion:
00003196 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000319A 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000319C 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031A2 6000                       		bra.s	Title_EnterCheat
000031A4                            ; ===========================================================================
000031A4                            
000031A4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031A4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031AA                            
000031AA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031AA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031AE D0C0                       		adda.w	d0,a0
000031B0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031B4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031B8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031BA 6600                       		bne.s	loc_3210	; if not, branch
000031BC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031C0 4A00                       		tst.b	d0
000031C2 6600                       		bne.s	Title_CountC
000031C4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031C8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031CC E249                       		lsr.w	#1,d1
000031CE 0241 0003                  		andi.w	#3,d1
000031D2 6700                       		beq.s	Title_PlayRing
000031D4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031D8 6A00                       		bpl.s	Title_PlayRing
000031DA 7201                       		moveq	#1,d1
000031DC 1181 1001                  		move.b	d1,1(a0,d1.w)
000031E0                            
000031E0                            Title_PlayRing:
000031E0 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000031E6 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000031EA 6100 E0E0                  		bsr.w	PlaySound_Special
000031EE 6000                       		bra.s	Title_CountC
000031F0                            ; ===========================================================================
000031F0                            
000031F0                            loc_3210:				; XREF: Title_EnterCheat
000031F0 4A00                       		tst.b	d0
000031F2 6700                       		beq.s	Title_CountC
000031F4 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000031FA 6700                       		beq.s	Title_CountC
000031FC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003202                            
00003202                            Title_CountC:
00003202 1038 F605                  		move.b	($FFFFF605).w,d0
00003206 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000320A 6700                       		beq.s	loc_3230	; if not, branch
0000320C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003210                            
00003210                            loc_3230:
00003210 4A78 F614                  		tst.w	($FFFFF614).w
00003214 6700 0000                  		beq.w	Demo
00003218 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000321E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003222                            
00003222                            Title_ChkLevSel:
00003222 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003226 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000322A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003230 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003234 7002                       		moveq	#2,d0
00003236 6100 EEA0                  		bsr.w	PalLoad2	; load level select pallet
0000323A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000323E 7000                       		moveq	#0,d0
00003240 323C 00DF                  		move.w	#$DF,d1
00003244                            
00003244                            Title_ClrScroll:
00003244 22C0                       		move.l	d0,(a1)+
00003246 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000324A                            
0000324A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000324E 46FC 2700                  		move	#$2700,sr
00003252 4DF9 00C0 0000             		lea	($C00000).l,a6
00003258 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003262 323C 03FF                  		move.w	#$3FF,d1
00003266                            
00003266                            Title_ClrVram:
00003266 2C80                       		move.l	d0,(a6)
00003268 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000326C                            
0000326C 6100 0000                  		bsr.w	LevSelTextLoad
00003270                            
00003270                            ; ---------------------------------------------------------------------------
00003270                            ; Level	Select
00003270                            ; ---------------------------------------------------------------------------
00003270                            
00003270                            LevelSelect:
00003270 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003276 6100 F710                  		bsr.w	DelayProgram
0000327A 6100 0000                  		bsr.w	LevSelControls
0000327E 6100 E32C                  		bsr.w	RunPLC_RAM
00003282 4AB8 F680                  		tst.l	($FFFFF680).w
00003286 66E8                       		bne.s	LevelSelect
00003288 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000328E 67E0                       		beq.s	LevelSelect	; if not, branch
00003290 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003294 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003298 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000329A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000329E 0640 0080                  		addi.w	#$80,d0
000032A2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032A6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032A8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032AC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032AE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032B2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032B4                            
000032B4                            LevSel_NoCheat:
000032B4 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $80-$94 being played?
000032B8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032BA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032BE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032C0                            
000032C0                            LevSel_PlaySnd:
000032C0 6100 E00A                  		bsr.w	PlaySound_Special
000032C4 60AA                       		bra.s	LevelSelect
000032C6                            ; ===========================================================================
000032C6                            
000032C6                            LevSel_Ending:				; XREF: LevelSelect
000032C6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032CC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032D2 4E75                       		rts	
000032D4                            ; ===========================================================================
000032D4                            
000032D4                            LevSel_Credits:				; XREF: LevelSelect
000032D4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032DA 103C 009D                  		move.b	#$9D,d0
000032DE 6100 DFEC                  		bsr.w	PlaySound_Special ; play credits music
000032E2 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000032E8 4E75                       		rts	
000032EA                            ; ===========================================================================
000032EA                            
000032EA                            LevSel_Level_SS:			; XREF: LevelSelect
000032EA D040                       		add.w	d0,d0
000032EC 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000032F0 6B00 FF7E                  		bmi.w	LevelSelect
000032F4 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000032F8 6600                       		bne.s	LevSel_Level	; if not, branch
000032FA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003300 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003304 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000330A 7000                       		moveq	#0,d0
0000330C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003310 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003314 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003318 4E75                       		rts	
0000331A                            ; ===========================================================================
0000331A                            
0000331A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000331A 0240 3FFF                  		andi.w	#$3FFF,d0
0000331E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003322                            
00003322                            PlayLevel:				; XREF: ROM:00003246j ...
00003322 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003328 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332E 7000                       		moveq	#0,d0
00003330 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003334 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003338 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000333C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003340 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003344 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003348 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000334C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003350 103C 00E0                  		move.b	#$E0,d0
00003354 6100 DF76                  		bsr.w	PlaySound_Special ; fade out music
00003358 4E75                       		rts	
0000335A                            ; ===========================================================================
0000335A                            ; ---------------------------------------------------------------------------
0000335A                            ; Level	select - level pointers
0000335A                            ; ---------------------------------------------------------------------------
0000335A                            LSelectPointers:
0000335A                            		incbin	misc\ls_point.bin
00003384                            		even
00003384                            ; ---------------------------------------------------------------------------
00003384                            ; Level	select codes
00003384                            ; ---------------------------------------------------------------------------
00003384                            LevelSelectCode_J:
00003384                            		incbin	misc\ls_jcode.bin
0000338A                            		even
0000338A                            
0000338A                            LevelSelectCode_US:
0000338A                            		incbin	misc\ls_ucode.bin
00003390                            		even
00003390                            ; ===========================================================================
00003390                            
00003390                            ; ---------------------------------------------------------------------------
00003390                            ; Demo mode
00003390                            ; ---------------------------------------------------------------------------
00003390                            
00003390                            Demo:					; XREF: TitleScreen
00003390 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003396                            
00003396                            loc_33B6:				; XREF: loc_33E4
00003396 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000339C 6100 F5EA                  		bsr.w	DelayProgram
000033A0 6100 0000                  		bsr.w	DeformBgLayer
000033A4 6100 E556                  		bsr.w	PalCycle_Load
000033A8 6100 E202                  		bsr.w	RunPLC_RAM
000033AC 3038 D008                  		move.w	($FFFFD008).w,d0
000033B0 5440                       		addq.w	#2,d0
000033B2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033B6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033BA 6500                       		bcs.s	loc_33E4
000033BC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033C2 4E75                       		rts	
000033C4                            ; ===========================================================================
000033C4                            
000033C4                            loc_33E4:				; XREF: Demo
000033C4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033CA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033CE 4A78 F614                  		tst.w	($FFFFF614).w
000033D2 6600 FFC2                  		bne.w	loc_33B6
000033D6 103C 00E0                  		move.b	#$E0,d0
000033DA 6100 DEF0                  		bsr.w	PlaySound_Special ; fade out music
000033DE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000033E2 0240 0007                  		andi.w	#7,d0
000033E6 D040                       		add.w	d0,d0
000033E8 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000033EC 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000033F0 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000033F4 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000033FA 6500                       		bcs.s	loc_3422	; if yes, branch
000033FC 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003402                            
00003402                            loc_3422:
00003402 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003408 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000340E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003412 6600                       		bne.s	Demo_Level	; if not, branch
00003414 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000341A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000341E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003422                            
00003422                            Demo_Level:
00003422 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003428 7000                       		moveq	#0,d0
0000342A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000342E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003432 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003436 4E75                       		rts	
00003438                            ; ===========================================================================
00003438                            ; ---------------------------------------------------------------------------
00003438                            ; Levels used in demos
00003438                            ; ---------------------------------------------------------------------------
00003438                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003440                            		even
00003440                            
00003440                            ; ---------------------------------------------------------------------------
00003440                            ; Subroutine to	change what you're selecting in the level select
00003440                            ; ---------------------------------------------------------------------------
00003440                            
00003440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003440                            
00003440                            
00003440                            LevSelControls:				; XREF: LevelSelect
00003440 1238 F605                  		move.b	($FFFFF605).w,d1
00003444 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003448 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000344A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000344E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003450                            
00003450                            LevSel_UpDown:
00003450 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003456 1238 F604                  		move.b	($FFFFF604).w,d1
0000345A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000345E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003460 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003464 0801 0000                  		btst	#0,d1		; is up	pressed?
00003468 6700                       		beq.s	LevSel_Down	; if not, branch
0000346A 5340                       		subq.w	#1,d0		; move up 1 selection
0000346C 6400                       		bcc.s	LevSel_Down
0000346E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003470                            
00003470                            LevSel_Down:
00003470 0801 0001                  		btst	#1,d1		; is down pressed?
00003474 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003476 5240                       		addq.w	#1,d0		; move down 1 selection
00003478 0C40 0015                  		cmpi.w	#$15,d0
0000347C 6500                       		bcs.s	LevSel_Refresh
0000347E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003480                            
00003480                            LevSel_Refresh:
00003480 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003484 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003488 4E75                       		rts	
0000348A                            ; ===========================================================================
0000348A                            
0000348A                            LevSel_SndTest:				; XREF: LevSelControls
0000348A 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003490 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003492 1238 F605                  		move.b	($FFFFF605).w,d1
00003496 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
0000349A 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000349C 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034A0 0801 0002                  		btst	#2,d1		; is left pressed?
000034A4 6700                       		beq.s	LevSel_Right	; if not, branch
000034A6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034A8 6400                       		bcc.s	LevSel_Right
000034AA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034AC                            
000034AC                            LevSel_Right:
000034AC 0801 0003                  		btst	#3,d1		; is right pressed?
000034B0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034B2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034B4 0C40 0050                  		cmpi.w	#$50,d0
000034B8 6500                       		bcs.s	LevSel_Refresh2
000034BA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034BC                            
000034BC                            LevSel_Refresh2:
000034BC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034C0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034C4                            
000034C4                            LevSel_NoMove:
000034C4 4E75                       		rts	
000034C6                            ; End of function LevSelControls
000034C6                            
000034C6                            ; ---------------------------------------------------------------------------
000034C6                            ; Subroutine to load level select text
000034C6                            ; ---------------------------------------------------------------------------
000034C6                            
000034C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034C6                            
000034C6                            
000034C6                            LevSelTextLoad:				; XREF: TitleScreen
000034C6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034CC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034D2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034D8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034DC 7214                       		moveq	#$14,d1		; number of lines of text
000034DE                            
000034DE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034DE 2D44 0004                  		move.l	d4,4(a6)
000034E2 6100 0000                  		bsr.w	LevSel_ChgLine
000034E6 0684 0080 0000             		addi.l	#$800000,d4
000034EC 51C9 FFF0                  		dbf	d1,loc_34FE
000034F0 7000                       		moveq	#0,d0
000034F2 3038 FF82                  		move.w	($FFFFFF82).w,d0
000034F6 3200                       		move.w	d0,d1
000034F8 283C 6210 0003             		move.l	#$62100003,d4
000034FE EF48                       		lsl.w	#7,d0
00003500 4840                       		swap	d0
00003502 D880                       		add.l	d0,d4
00003504 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000350A E749                       		lsl.w	#3,d1
0000350C 3001                       		move.w	d1,d0
0000350E D241                       		add.w	d1,d1
00003510 D240                       		add.w	d0,d1
00003512 D2C1                       		adda.w	d1,a1
00003514 363C C680                  		move.w	#$C680,d3
00003518 2D44 0004                  		move.l	d4,4(a6)
0000351C 6100 0000                  		bsr.w	LevSel_ChgLine
00003520 363C E680                  		move.w	#$E680,d3
00003524 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000352A 6600                       		bne.s	loc_3550
0000352C 363C C680                  		move.w	#$C680,d3
00003530                            
00003530                            loc_3550:
00003530 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000353A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000353E 0640 0080                  		addi.w	#$80,d0
00003542 1400                       		move.b	d0,d2
00003544 E808                       		lsr.b	#4,d0
00003546 6100 0000                  		bsr.w	LevSel_ChgSnd
0000354A 1002                       		move.b	d2,d0
0000354C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003550 4E75                       		rts	
00003552                            ; End of function LevSelTextLoad
00003552                            
00003552                            
00003552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003552                            
00003552                            
00003552                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003552 0240 000F                  		andi.w	#$F,d0
00003556 0C00 000A                  		cmpi.b	#$A,d0
0000355A 6500                       		bcs.s	loc_3580
0000355C 5E00                       		addi.b	#7,d0
0000355E                            
0000355E                            loc_3580:
0000355E D043                       		add.w	d3,d0
00003560 3C80                       		move.w	d0,(a6)
00003562 4E75                       		rts	
00003564                            ; End of function LevSel_ChgSnd
00003564                            
00003564                            
00003564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003564                            
00003564                            
00003564                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003564 7417                       		moveq	#$17,d2		; number of characters per line
00003566                            
00003566                            loc_3588:
00003566 7000                       		moveq	#0,d0
00003568 1019                       		move.b	(a1)+,d0
0000356A 6A00                       		bpl.s	loc_3598
0000356C 3CBC 0000                  		move.w	#0,(a6)
00003570 51CA FFF4                  		dbf	d2,loc_3588
00003574 4E75                       		rts	
00003576                            ; ===========================================================================
00003576                            
00003576                            loc_3598:				; XREF: LevSel_ChgLine
00003576 D043                       		add.w	d3,d0
00003578 3C80                       		move.w	d0,(a6)
0000357A 51CA FFEA                  		dbf	d2,loc_3588
0000357E 4E75                       		rts	
00003580                            ; End of function LevSel_ChgLine
00003580                            
00003580                            ; ===========================================================================
00003580                            ; ---------------------------------------------------------------------------
00003580                            ; Level	select menu text
00003580                            ; ---------------------------------------------------------------------------
00003580                            LevelMenuText:	incbin	misc\menutext.bin
00003778                            		even
00003778                            ; ---------------------------------------------------------------------------
00003778                            ; Music	playlist
00003778                            ; ---------------------------------------------------------------------------
00003778                            MusicList:	incbin	misc\muslist1.bin
00003780                            		even
00003780                            ; ===========================================================================
00003780                            
00003780                            ; ---------------------------------------------------------------------------
00003780                            ; Level
00003780                            ; ---------------------------------------------------------------------------
00003780                            
00003780                            Level:					; XREF: GameModeArray
00003780 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003786 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000378A 6B00                       		bmi.s	loc_37B6
0000378C 103C 00E0                  		move.b	#$E0,d0
00003790 6100 DB3A                  		bsr.w	PlaySound_Special ; fade out music
00003794                            
00003794                            loc_37B6:
00003794 6100 DE08                  		bsr.w	ClearPLC
00003798 6100 E678                  		bsr.w	Pal_FadeFrom
0000379C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037A0 6B00                       		bmi.s	Level_ClrRam
000037A2 46FC 2700                  		move	#$2700,sr
000037A6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037B0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037B6 6100 DC48                  		bsr.w	NemDec
000037BA 46FC 2300                  		move	#$2300,sr
000037BE 7000                       		moveq	#0,d0
000037C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037C4 E948                       		lsl.w	#4,d0
000037C6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037CC 45F2 0000                  		lea	(a2,d0.w),a2
000037D0 7000                       		moveq	#0,d0
000037D2 1012                       		move.b	(a2),d0
000037D4 6700                       		beq.s	loc_37FC
000037D6 6100 DD68                  		bsr.w	LoadPLC		; load level patterns
000037DA                            
000037DA                            loc_37FC:
000037DA 7001                       		moveq	#1,d0
000037DC 6100 DD62                  		bsr.w	LoadPLC		; load standard	patterns
000037E0                            
000037E0                            Level_ClrRam:
000037E0 43F8 D000                  		lea	($FFFFD000).w,a1
000037E4 7000                       		moveq	#0,d0
000037E6 323C 07FF                  		move.w	#$7FF,d1
000037EA                            
000037EA                            Level_ClrObjRam:
000037EA 22C0                       		move.l	d0,(a1)+
000037EC 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000037F0                            
000037F0 43F8 F628                  		lea	($FFFFF628).w,a1
000037F4 7000                       		moveq	#0,d0
000037F6 323C 0015                  		move.w	#$15,d1
000037FA                            
000037FA                            Level_ClrVars:
000037FA 22C0                       		move.l	d0,(a1)+
000037FC 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003800                            
00003800 43F8 F700                  		lea	($FFFFF700).w,a1
00003804 7000                       		moveq	#0,d0
00003806 323C 003F                  		move.w	#$3F,d1
0000380A                            
0000380A                            Level_ClrVars2:
0000380A 22C0                       		move.l	d0,(a1)+
0000380C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003810                            
00003810 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003814 7000                       		moveq	#0,d0
00003816 323C 0047                  		move.w	#$47,d1
0000381A                            
0000381A                            Level_ClrVars3:
0000381A 22C0                       		move.l	d0,(a1)+
0000381C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003820                            
00003820 46FC 2700                  		move	#$2700,sr
00003824 6100 D9CC                  		bsr.w	ClearScreen
00003828 4DF9 00C0 0004             		lea	($C00004).l,a6
0000382E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003832 3CBC 8230                  		move.w	#$8230,(a6)
00003836 3CBC 8407                  		move.w	#$8407,(a6)
0000383A 3CBC 857C                  		move.w	#$857C,(a6)
0000383E 3CBC 9001                  		move.w	#$9001,(a6)
00003842 3CBC 8004                  		move.w	#$8004,(a6)
00003846 3CBC 8720                  		move.w	#$8720,(a6)
0000384A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003850 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003854 4278 C800                  		clr.w	($FFFFC800).w
00003858 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00003860 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003866 6600                       		bne.s	Level_LoadPal	; if not, branch
00003868 3CBC 8014                  		move.w	#$8014,(a6)
0000386C 7000                       		moveq	#0,d0
0000386E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003872 D040                       		add.w	d0,d0
00003874 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000387A 3031 0000                  		move.w	(a1,d0.w),d0
0000387E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003882 31C0 F648                  		move.w	d0,($FFFFF648).w
00003886 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000388A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000388E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003892 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003898                            
00003898                            Level_LoadPal:
00003898 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000389E 46FC 2300                  		move	#$2300,sr
000038A2 7003                       		moveq	#3,d0
000038A4 6100 E832                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038AE 6600                       		bne.s	Level_GetBgm	; if not, branch
000038B0 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038B8 6600                       		bne.s	Level_WaterPal	; if not, branch
000038BA 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038BC                            
000038BC                            Level_WaterPal:
000038BC 6100 E832                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038C0 4A38 FE30                  		tst.b	($FFFFFE30).w
000038C4 6700                       		beq.s	Level_GetBgm
000038C6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038CC                            
000038CC                            Level_GetBgm:
000038CC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038D0 6B00                       		bmi.s	loc_3946
000038D2 7000                       		moveq	#0,d0
000038D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038D8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038DE 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038E0 7005                       		moveq	#5,d0		; move 5 to d0
000038E2                            
000038E2                            Level_BgmNotLZ4:
000038E2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038E8 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038EA 303C 0093                  		move.w  #$93,d0
000038EE 6000                       		bra.s   Level_PlayBgm3
000038F0                            
000038F0                            Level_PlayBgm:
000038F0 43F9 0000 3778             		lea	(MusicList).l,a1 ; load	music playlist
000038F6 1031 0000                  		move.b	(a1,d0.w),d0	 ; add d0 to a1
000038FA 1238 FE11                  		move.b  ($FFFFFE11).w,d1 ; Super-Puper row by Vladikcomper
000038FE 0C01 0003                  		cmpi.b  #3,d1
00003902 6600                       		bne.s   Level_PlayBgm2
00003904 5301                       	        subi.b  #1,d1
00003906                                            	
00003906                            Level_PlayBgm2:
00003906 D001                                       add.b   d1,d0            ; Another Super-Puper row by Vladikcomper
00003908                            		
00003908                            Level_PlayBgm3:                
00003908 6100 D9BC                                  bsr.w	PlaySound	 ; play music
0000390C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003912                            
00003912                            Level_TtlCard:
00003912 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003918 6100 F06E                  		bsr.w	DelayProgram
0000391C 4EB9 0000 0000             		jsr	ObjectsLoad
00003922 4EB9 0000 0000             		jsr	BuildSprites
00003928 6100 DC82                  		bsr.w	RunPLC_RAM
0000392C 3038 D108                  		move.w	($FFFFD108).w,d0
00003930 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003934 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003936 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000393A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000393C 4EB9 0000 0000             		jsr	Hud_Base
00003942                            
00003942                            loc_3946:
00003942 7003                       		moveq	#3,d0
00003944 6100 E776                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003948 6100 0000                  		bsr.w	LevelSizeLoad
0000394C 6100 0000                  		bsr.w	DeformBgLayer
00003950 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003956 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000395A 6100 0000                  		bsr.w	LoadTilesFromStart
0000395E 4EB9 0000 0000             		jsr	FloorLog_Unk
00003964 6100 0000                  		bsr.w	ColIndexLoad
00003968 6100 0000                  		bsr.w	LZWaterEffects
0000396C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003972 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003976 6B00                       		bmi.s	Level_ChkDebug
00003978 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000397E                            
0000397E                            Level_ChkDebug:
0000397E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003982 6700                       		beq.s	Level_ChkWater	; if not, branch
00003984 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000398A 6700                       		beq.s	Level_ChkWater	; if not, branch
0000398C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003992                            
00003992                            Level_ChkWater:
00003992 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003998 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000399E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A4 6600                       		bne.s	Level_LoadObj	; if not, branch
000039A6 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039AC 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039B2 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039B8 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039BE                            
000039BE                            Level_LoadObj:
000039BE 4EB9 0000 0000             		jsr	ObjPosLoad
000039C4 4EB9 0000 0000             		jsr	ObjectsLoad
000039CA 4EB9 0000 0000             		jsr	BuildSprites
000039D0 7000                       		moveq	#0,d0
000039D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039D6 6600                       		bne.s	loc_39E8	; if yes, branch
000039D8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039DC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039E0 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039E4                            
000039E4                            loc_39E8:
000039E4 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039E8 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039EC 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039F0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039F4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000039F8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000039FC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A00 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A04 6100 0000                  		bsr.w	OscillateNumInit
00003A08 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A0E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A14 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A1A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A20 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A26 7000                       		moveq	#0,d0
00003A28 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A2C E548                       		lsl.w	#2,d0
00003A2E 2271 0000                  		movea.l	(a1,d0.w),a1
00003A32 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A36 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A38 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A3E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A42 5340                       		subq.w	#1,d0
00003A44 E548                       		lsl.w	#2,d0
00003A46 2271 0000                  		movea.l	(a1,d0.w),a1
00003A4A                            
00003A4A                            Level_Demo:
00003A4A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A50 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A54 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A5E 6A00                       		bpl.s	Level_ChkWaterPal
00003A60 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A66 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A6C 6600                       		bne.s	Level_ChkWaterPal
00003A6E 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A74                            
00003A74                            Level_ChkWaterPal:
00003A74 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A7A 6600                       		bne.s	Level_Delay	; if not, branch
00003A7C 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A7E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A84 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A86 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A88                            
00003A88                            Level_WaterPal2:
00003A88 6100 E682                  		bsr.w	PalLoad4_Water
00003A8C                            
00003A8C                            Level_Delay:
00003A8C 323C 0003                  		move.w	#3,d1
00003A90                            
00003A90                            Level_DelayLoop:
00003A90 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A96 6100 EEF0                  		bsr.w	DelayProgram
00003A9A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003A9E                            
00003A9E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AA4 6100 E2CC                  		bsr.w	Pal_FadeTo2
00003AA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AAC 6B00                       		bmi.s	Level_ClrCardArt
00003AAE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AB2 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003AB6 5838 D124                  		addq.b	#4,($FFFFD124).w
00003ABA 5838 D164                  		addq.b	#4,($FFFFD164).w
00003ABE 6000                       		bra.s	Level_StartGame
00003AC0                            ; ===========================================================================
00003AC0                            
00003AC0                            Level_ClrCardArt:
00003AC0 7002                       		moveq	#2,d0
00003AC2 4EB9 0000 1540             		jsr	(LoadPLC).l	; load explosion patterns
00003AC8 7000                       		moveq	#0,d0
00003ACA 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003ACE 0640 0015                  		addi.w	#$15,d0
00003AD2 4EB9 0000 1540             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003AD8                            
00003AD8                            Level_StartGame:
00003AD8 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003ADE                            
00003ADE                            ; ---------------------------------------------------------------------------
00003ADE                            ; Main level loop (when	all title card and loading sequences are finished)
00003ADE                            ; ---------------------------------------------------------------------------
00003ADE                            
00003ADE                            Level_MainLoop:
00003ADE 6100 D7F8                  		bsr.w	PauseGame
00003AE2 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AE8 6100 EE9E                  		bsr.w	DelayProgram
00003AEC 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AF0 6100 0000                  		bsr.w	MoveSonicInDemo
00003AF4 6100 0000                  		bsr.w	LZWaterEffects
00003AF8 4EB9 0000 0000             		jsr	ObjectsLoad
00003AFE 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B02 6600                       		bne.s	loc_3B10
00003B04 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B0A 6400                       		bcc.s	loc_3B14
00003B0C                            
00003B0C                            loc_3B10:
00003B0C 6100 0000                  		bsr.w	DeformBgLayer
00003B10                            
00003B10                            loc_3B14:
00003B10 4EB9 0000 0000             		jsr	BuildSprites
00003B16 4EB9 0000 0000             		jsr	ObjPosLoad
00003B1C 6100 DDDE                  		bsr.w	PalCycle_Load
00003B20 6100 DA8A                  		bsr.w	RunPLC_RAM
00003B24 6100 0000                  		bsr.w	OscillateNumDo
00003B28 6100 0000                  		bsr.w	ChangeRingFrame
00003B2C 6100 0000                  		bsr.w	SignpostArtLoad
00003B30 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B36 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B38 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B3C 6600 FC42                  		bne.w	Level		; if yes, branch
00003B40 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B46 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B4A 4E75                       		rts	
00003B4C                            ; ===========================================================================
00003B4C                            
00003B4C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B4C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B50 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B52 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B56 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B58 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B5E 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B62 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B68 4E75                       		rts	
00003B6A                            ; ===========================================================================
00003B6A                            
00003B6A                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B6A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B70 6600                       		bne.s	loc_3B88	; if not, branch
00003B72 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B78 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B7C 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B7E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B84                            
00003B84                            loc_3B88:
00003B84 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B8A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B90 4278 F794                  		clr.w	($FFFFF794).w
00003B94                            
00003B94                            loc_3B98:
00003B94 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B9A 6100 EDEC                  		bsr.w	DelayProgram
00003B9E 6100 0000                  		bsr.w	MoveSonicInDemo
00003BA2 4EB9 0000 0000             		jsr	ObjectsLoad
00003BA8 4EB9 0000 0000             		jsr	BuildSprites
00003BAE 4EB9 0000 0000             		jsr	ObjPosLoad
00003BB4 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BB8 6A00                       		bpl.s	loc_3BC8
00003BBA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BC0 6100 E270                  		bsr.w	Pal_FadeOut
00003BC4                            
00003BC4                            loc_3BC8:
00003BC4 4A78 F614                  		tst.w	($FFFFF614).w
00003BC8 66CA                       		bne.s	loc_3B98
00003BCA 4E75                       		rts	
00003BCC                            ; ===========================================================================
00003BCC                            ; ---------------------------------------------------------------------------
00003BCC                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BCC                            ; ---------------------------------------------------------------------------
00003BCC                            
00003BCC                            LZWaterEffects:				; XREF: Level
00003BCC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BD2 6600                       		bne.s	locret_3C28	; if not, branch
00003BD4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BDA 6400                       		bcc.s	LZMoveWater
00003BDC 6100 0000                  		bsr.w	LZWindTunnels
00003BE0 6100 0000                  		bsr.w	LZWaterSlides
00003BE4 6100 0000                  		bsr.w	LZDynamicWater
00003BE8                            
00003BE8                            LZMoveWater:
00003BE8 4238 F64E                  		clr.b	($FFFFF64E).w
00003BEC 7000                       		moveq	#0,d0
00003BEE 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BF2 E248                       		lsr.w	#1,d0
00003BF4 D078 F648                  		add.w	($FFFFF648).w,d0
00003BF8 31C0 F646                  		move.w	d0,($FFFFF646).w
00003BFC 3038 F646                  		move.w	($FFFFF646).w,d0
00003C00 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C04 6400                       		bcc.s	loc_3C1A
00003C06 4A40                       		tst.w	d0
00003C08 6A00                       		bpl.s	loc_3C1A
00003C0A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C10 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C16                            
00003C16                            loc_3C1A:
00003C16 0C40 00DF                  		cmpi.w	#$DF,d0
00003C1A 6500                       		bcs.s	loc_3C24
00003C1C 303C 00DF                  		move.w	#$DF,d0
00003C20                            
00003C20                            loc_3C24:
00003C20 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C24                            
00003C24                            locret_3C28:
00003C24 4E75                       		rts	
00003C26                            ; ===========================================================================
00003C26                            ; ---------------------------------------------------------------------------
00003C26                            ; Labyrinth default water heights
00003C26                            ; ---------------------------------------------------------------------------
00003C26                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C2E                            		even
00003C2E                            ; ===========================================================================
00003C2E                            
00003C2E                            ; ---------------------------------------------------------------------------
00003C2E                            ; Labyrinth dynamic water routines
00003C2E                            ; ---------------------------------------------------------------------------
00003C2E                            
00003C2E                            LZDynamicWater:				; XREF: LZWaterEffects
00003C2E 7000                       		moveq	#0,d0
00003C30 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C34 D040                       		add.w	d0,d0
00003C36 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C3A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C3E 7200                       		moveq	#0,d1
00003C40 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C44 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C48 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C4C 6700                       		beq.s	locret_3C5A
00003C4E 6400                       		bcc.s	loc_3C56
00003C50 4441                       		neg.w	d1
00003C52                            
00003C52                            loc_3C56:
00003C52 D378 F648                  		add.w	d1,($FFFFF648).w
00003C56                            
00003C56                            locret_3C5A:
00003C56 4E75                       		rts	
00003C58                            ; ===========================================================================
00003C58 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C5A 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C5C 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C5E 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C60                            ; ===========================================================================
00003C60                            
00003C60                            DynWater_LZ1:				; XREF: DynWater_Index
00003C60 3038 F700                  		move.w	($FFFFF700).w,d0
00003C64 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C68 6600                       		bne.s	loc_3CD0
00003C6A 323C 00B8                  		move.w	#$B8,d1
00003C6E 0C40 0600                  		cmpi.w	#$600,d0
00003C72 6500                       		bcs.s	loc_3CB4
00003C74 323C 0108                  		move.w	#$108,d1
00003C78 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C7E 6500                       		bcs.s	loc_3CBA
00003C80 0C40 0C00                  		cmpi.w	#$C00,d0
00003C84 6500                       		bcs.s	loc_3CB4
00003C86 323C 0318                  		move.w	#$318,d1
00003C8A 0C40 1080                  		cmpi.w	#$1080,d0
00003C8E 6500                       		bcs.s	loc_3CB4
00003C90 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C96 323C 05C8                  		move.w	#$5C8,d1
00003C9A 0C40 1380                  		cmpi.w	#$1380,d0
00003C9E 6500                       		bcs.s	loc_3CB4
00003CA0 323C 03A8                  		move.w	#$3A8,d1
00003CA4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CA8 6600                       		bne.s	loc_3CB4
00003CAA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CB0                            
00003CB0                            loc_3CB4:
00003CB0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CB4 4E75                       		rts	
00003CB6                            ; ===========================================================================
00003CB6                            
00003CB6                            loc_3CBA:				; XREF: DynWater_LZ1
00003CB6 0C40 0C80                  		cmpi.w	#$C80,d0
00003CBA 65F4                       		bcs.s	loc_3CB4
00003CBC 323C 00E8                  		move.w	#$E8,d1
00003CC0 0C40 1500                  		cmpi.w	#$1500,d0
00003CC4 65EA                       		bcs.s	loc_3CB4
00003CC6 323C 0108                  		move.w	#$108,d1
00003CCA 60E4                       		bra.s	loc_3CB4
00003CCC                            ; ===========================================================================
00003CCC                            
00003CCC                            loc_3CD0:				; XREF: DynWater_LZ1
00003CCC 5302                       		subq.b	#1,d2
00003CCE 6600                       		bne.s	locret_3CF4
00003CD0 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CD6 6400                       		bcc.s	locret_3CF4
00003CD8 323C 03A8                  		move.w	#$3A8,d1
00003CDC 0C40 1300                  		cmpi.w	#$1300,d0
00003CE0 6500                       		bcs.s	loc_3CF0
00003CE2 323C 0108                  		move.w	#$108,d1
00003CE6 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CEC                            
00003CEC                            loc_3CF0:
00003CEC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF0                            
00003CF0                            locret_3CF4:
00003CF0 4E75                       		rts	
00003CF2                            ; ===========================================================================
00003CF2                            
00003CF2                            DynWater_LZ2:				; XREF: DynWater_Index
00003CF2 3038 F700                  		move.w	($FFFFF700).w,d0
00003CF6 323C 0328                  		move.w	#$328,d1
00003CFA 0C40 0500                  		cmpi.w	#$500,d0
00003CFE 6500                       		bcs.s	loc_3D12
00003D00 323C 03C8                  		move.w	#$3C8,d1
00003D04 0C40 0B00                  		cmpi.w	#$B00,d0
00003D08 6500                       		bcs.s	loc_3D12
00003D0A 323C 0428                  		move.w	#$428,d1
00003D0E                            
00003D0E                            loc_3D12:
00003D0E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D12 4E75                       		rts	
00003D14                            ; ===========================================================================
00003D14                            
00003D14                            DynWater_LZ3:				; XREF: DynWater_Index
00003D14 3038 F700                  		move.w	($FFFFF700).w,d0
00003D18 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D1C 6600                       		bne.s	loc_3D5E
00003D1E 323C 0900                  		move.w	#$900,d1
00003D22 0C40 0600                  		cmpi.w	#$600,d0
00003D26 6500                       		bcs.s	loc_3D54
00003D28 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D2E 6500                       		bcs.s	loc_3D54
00003D30 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D36 6400                       		bcc.s	loc_3D54
00003D38 323C 04C8                  		move.w	#$4C8,d1
00003D3C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D42 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D48 303C 00B7                  		move.w	#$B7,d0
00003D4C 6100 D57E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D50                            
00003D50                            loc_3D54:
00003D50 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D54 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D58 4E75                       		rts	
00003D5A                            ; ===========================================================================
00003D5A                            
00003D5A                            loc_3D5E:				; XREF: DynWater_LZ3
00003D5A 5302                       		subq.b	#1,d2
00003D5C 6600                       		bne.s	loc_3DA8
00003D5E 323C 04C8                  		move.w	#$4C8,d1
00003D62 0C40 0770                  		cmpi.w	#$770,d0
00003D66 6500                       		bcs.s	loc_3DA2
00003D68 323C 0308                  		move.w	#$308,d1
00003D6C 0C40 1400                  		cmpi.w	#$1400,d0
00003D70 6500                       		bcs.s	loc_3DA2
00003D72 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D78 6700                       		beq.s	loc_3D8E
00003D7A 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D80 6400                       		bcc.s	loc_3D8E
00003D82 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D88 6400                       		bcc.s	loc_3DA2
00003D8A                            
00003D8A                            loc_3D8E:
00003D8A 323C 0508                  		move.w	#$508,d1
00003D8E 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D92 0C40 1770                  		cmpi.w	#$1770,d0
00003D96 6500                       		bcs.s	loc_3DA2
00003D98 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003D9E                            
00003D9E                            loc_3DA2:
00003D9E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DA2 4E75                       		rts	
00003DA4                            ; ===========================================================================
00003DA4                            
00003DA4                            loc_3DA8:
00003DA4 5302                       		subq.b	#1,d2
00003DA6 6600                       		bne.s	loc_3DD2
00003DA8 323C 0508                  		move.w	#$508,d1
00003DAC 0C40 1860                  		cmpi.w	#$1860,d0
00003DB0 6500                       		bcs.s	loc_3DCC
00003DB2 323C 0188                  		move.w	#$188,d1
00003DB6 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBA 6400                       		bcc.s	loc_3DC6
00003DBC B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC0 6600                       		bne.s	loc_3DCC
00003DC2                            
00003DC2                            loc_3DC6:
00003DC2 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DC8                            
00003DC8                            loc_3DCC:
00003DC8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DCC 4E75                       		rts	
00003DCE                            ; ===========================================================================
00003DCE                            
00003DCE                            loc_3DD2:
00003DCE 5302                       		subq.b	#1,d2
00003DD0 6600                       		bne.s	loc_3E0E
00003DD2 323C 0188                  		move.w	#$188,d1
00003DD6 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DDA 6500                       		bcs.s	loc_3E04
00003DDC 323C 0900                  		move.w	#$900,d1
00003DE0 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DE4 6500                       		bcs.s	loc_3E04
00003DE6 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DEC 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DF2 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DF8 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003DFE 4E75                       		rts	
00003E00                            ; ===========================================================================
00003E00                            
00003E00                            loc_3E04:
00003E00 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E04 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E08 4E75                       		rts	
00003E0A                            ; ===========================================================================
00003E0A                            
00003E0A                            loc_3E0E:
00003E0A 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E0E 6500                       		bcs.s	locret_3E1A
00003E10 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E16                            
00003E16                            locret_3E1A:
00003E16 4E75                       		rts	
00003E18                            ; ===========================================================================
00003E18                            
00003E18                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E18 323C 0228                  		move.w	#$228,d1
00003E1C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E22 6500                       		bcs.s	loc_3E2C
00003E24 323C 04C8                  		move.w	#$4C8,d1
00003E28                            
00003E28                            loc_3E2C:
00003E28 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E2C 4E75                       		rts
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E2E                            
00003E2E                            
00003E2E                            LZWindTunnels:				; XREF: LZWaterEffects
00003E2E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E32 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E36 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E3C 7000                       		moveq	#0,d0
00003E3E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E42 E748                       		lsl.w	#3,d0
00003E44 D4C0                       		adda.w	d0,a2
00003E46 7200                       		moveq	#0,d1
00003E48 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E4C 6600                       		bne.s	loc_3E56
00003E4E 7201                       		moveq	#1,d1
00003E50 514A                       		subq.w	#8,a2
00003E52                            
00003E52                            loc_3E56:
00003E52 43F8 D000                  		lea	($FFFFD000).w,a1
00003E56                            
00003E56                            LZWind_Loop:
00003E56 3029 0008                  		move.w	8(a1),d0
00003E5A B052                       		cmp.w	(a2),d0
00003E5C 6500 0000                  		bcs.w	loc_3EF4
00003E60 B06A 0004                  		cmp.w	4(a2),d0
00003E64 6400 0000                  		bcc.w	loc_3EF4
00003E68 3429 000C                  		move.w	$C(a1),d2
00003E6C B46A 0002                  		cmp.w	2(a2),d2
00003E70 6500                       		bcs.s	loc_3EF4
00003E72 B46A 0006                  		cmp.w	6(a2),d2
00003E76 6400                       		bcc.s	loc_3EF4
00003E78 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E7C 0200 003F                  		andi.b	#$3F,d0
00003E80 6600                       		bne.s	loc_3E90
00003E82 303C 00D0                  		move.w	#$D0,d0
00003E86 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E8C                            
00003E8C                            loc_3E90:
00003E8C 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E90 6600 0000                  		bne.w	locret_3F0A
00003E94 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E9A 6400                       		bcc.s	loc_3F06
00003E9C 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EA2 0440 0080                  		subi.w	#$80,d0
00003EA6 B052                       		cmp.w	(a2),d0
00003EA8 6400                       		bcc.s	LZWind_Move
00003EAA 7002                       		moveq	#2,d0
00003EAC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EB2 6600                       		bne.s	loc_3EBA
00003EB4 4440                       		neg.w	d0
00003EB6                            
00003EB6                            loc_3EBA:
00003EB6 D169 000C                  		add.w	d0,$C(a1)
00003EBA                            
00003EBA                            LZWind_Move:
00003EBA 5869 0008                  		addq.w	#4,8(a1)
00003EBE 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EC4 337C 0000 0012             		move.w	#0,$12(a1)
00003ECA 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003ED0 08E9 0001 0022             		bset	#1,$22(a1)
00003ED6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EDC 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EDE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EE2                            
00003EE2                            LZWind_MoveDown:
00003EE2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EE8 6700                       		beq.s	locret_3EF2	; if not, branch
00003EEA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003EEE                            
00003EEE                            locret_3EF2:
00003EEE 4E75                       		rts	
00003EF0                            ; ===========================================================================
00003EF0                            
00003EF0                            loc_3EF4:				; XREF: LZWindTunnels
00003EF0 504A                       		addq.w	#8,a2
00003EF2 51C9 FF62                  		dbf	d1,LZWind_Loop
00003EF6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EFA 6700                       		beq.s	locret_3F0A
00003EFC 137C 0000 001C             		move.b	#0,$1C(a1)
00003F02                            
00003F02                            loc_3F06:
00003F02 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F06                            
00003F06                            locret_3F0A:
00003F06 4E75                       		rts	
00003F08                            ; End of function LZWindTunnels
00003F08                            
00003F08                            ; ===========================================================================
00003F08 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F10 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F22 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F30                            					; XREF: LZWindTunnels
00003F30                            		even
00003F30                            
00003F30                            ; ---------------------------------------------------------------------------
00003F30                            ; Labyrinth Zone water slide subroutine
00003F30                            ; ---------------------------------------------------------------------------
00003F30                            
00003F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F30                            
00003F30                            
00003F30                            LZWaterSlides:				; XREF: LZWaterEffects
00003F30 43F8 D000                  		lea	($FFFFD000).w,a1
00003F34 0829 0001 0022             		btst	#1,$22(a1)
00003F3A 6600                       		bne.s	loc_3F6A
00003F3C 3029 000C                  		move.w	$C(a1),d0
00003F40 E248                       		lsr.w	#1,d0
00003F42 0240 0380                  		andi.w	#$380,d0
00003F46 1229 0008                  		move.b	8(a1),d1
00003F4A 0241 007F                  		andi.w	#$7F,d1
00003F4E D041                       		add.w	d1,d0
00003F50 45F8 A400                  		lea	($FFFFA400).w,a2
00003F54 1032 0000                  		move.b	(a2,d0.w),d0
00003F58 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F5C 7206                       		moveq	#6,d1
00003F5E                            
00003F5E                            loc_3F62:
00003F5E B022                       		cmp.b	-(a2),d0
00003F60 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F64 6700                       		beq.s	LZSlide_Move
00003F66                            
00003F66                            loc_3F6A:
00003F66 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F6A 6700                       		beq.s	locret_3F7A
00003F6C 337C 0005 003E             		move.w	#5,$3E(a1)
00003F72 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F76                            
00003F76                            locret_3F7A:
00003F76 4E75                       		rts	
00003F78                            ; ===========================================================================
00003F78                            
00003F78                            LZSlide_Move:				; XREF: LZWaterSlides
00003F78 0C41 0003                  		cmpi.w	#3,d1
00003F7C 6400                       		bcc.s	loc_3F84
00003F7E 4E71                       		nop	
00003F80                            
00003F80                            loc_3F84:
00003F80 08A9 0000 0022             		bclr	#0,$22(a1)
00003F86 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F8A 1340 0014                  		move.b	d0,$14(a1)
00003F8E 6A00                       		bpl.s	loc_3F9A
00003F90 08E9 0000 0022             		bset	#0,$22(a1)
00003F96                            
00003F96                            loc_3F9A:
00003F96 4229 0015                  		clr.b	$15(a1)
00003F9A 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FA0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FA6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FAA 0200 001F                  		andi.b	#$1F,d0
00003FAE 6600                       		bne.s	locret_3FBE
00003FB0 303C 00D0                  		move.w	#$D0,d0
00003FB4 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play water sound
00003FBA                            
00003FBA                            locret_3FBE:
00003FBA 4E75                       		rts	
00003FBC                            ; End of function LZWaterSlides
00003FBC                            
00003FBC                            ; ===========================================================================
00003FBC 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FCB 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FCC                            		even
00003FCC                            
00003FCC                            ; ---------------------------------------------------------------------------
00003FCC                            ; Subroutine to	move Sonic in demo mode
00003FCC                            ; ---------------------------------------------------------------------------
00003FCC                            
00003FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FCC                            
00003FCC                            
00003FCC                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FCC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FD0 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FD2 4E75                       		rts	
00003FD4                            ; ===========================================================================
00003FD4                            
00003FD4                            ; This is an unused subroutine for recording a demo
00003FD4                            
00003FD4                            MoveDemo_Record:
00003FD4 43F9 0008 0000             		lea	($80000).l,a1
00003FDA 3038 F790                  		move.w	($FFFFF790).w,d0
00003FDE D2C0                       		adda.w	d0,a1
00003FE0 1038 F604                  		move.b	($FFFFF604).w,d0
00003FE4 B011                       		cmp.b	(a1),d0
00003FE6 6600                       		bne.s	loc_3FFA
00003FE8 5229 0001                  		addq.b	#1,1(a1)
00003FEC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FF2 6700                       		beq.s	loc_3FFA
00003FF4 4E75                       		rts	
00003FF6                            ; ===========================================================================
00003FF6                            
00003FF6                            loc_3FFA:				; XREF: MoveDemo_Record
00003FF6 1340 0002                  		move.b	d0,2(a1)
00003FFA 137C 0000 0003             		move.b	#0,3(a1)
00004000 5478 F790                  		addq.w	#2,($FFFFF790).w
00004004 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000400A 4E75                       		rts	
0000400C                            ; ===========================================================================
0000400C                            
0000400C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000400C 4A38 F604                  		tst.b	($FFFFF604).w
00004010 6A00                       		bpl.s	loc_4022
00004012 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004016 6B00                       		bmi.s	loc_4022
00004018 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000401E                            
0000401E                            loc_4022:
0000401E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004024 7000                       		moveq	#0,d0
00004026 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000402A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004030 6600                       		bne.s	loc_4038
00004032 7006                       		moveq	#6,d0
00004034                            
00004034                            loc_4038:
00004034 E548                       		lsl.w	#2,d0
00004036 2271 0000                  		movea.l	(a1,d0.w),a1
0000403A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000403E 6A00                       		bpl.s	loc_4056
00004040 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004046 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000404A 5340                       		subq.w	#1,d0
0000404C E548                       		lsl.w	#2,d0
0000404E 2271 0000                  		movea.l	(a1,d0.w),a1
00004052                            
00004052                            loc_4056:
00004052 3038 F790                  		move.w	($FFFFF790).w,d0
00004056 D2C0                       		adda.w	d0,a1
00004058 1011                       		move.b	(a1),d0
0000405A 41F8 F604                  		lea	($FFFFF604).w,a0
0000405E 1200                       		move.b	d0,d1
00004060 1410                       		move.b	(a0),d2
00004062 B500                       		eor.b	d2,d0
00004064 10C1                       		move.b	d1,(a0)+
00004066 C001                       		and.b	d1,d0
00004068 10C0                       		move.b	d0,(a0)+
0000406A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000406E 6400                       		bcc.s	locret_407E
00004070 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004076 5478 F790                  		addq.w	#2,($FFFFF790).w
0000407A                            
0000407A                            locret_407E:
0000407A 4E75                       		rts	
0000407C                            ; End of function MoveSonicInDemo
0000407C                            
0000407C                            ; ===========================================================================
0000407C                            ; ---------------------------------------------------------------------------
0000407C                            ; Demo sequence	pointers
0000407C                            ; ---------------------------------------------------------------------------
0000407C                            Demo_Index:
0000407C                            	include "_inc\Demo pointers for intro.asm"
0000407C                            ; ---------------------------------------------------------------------------
0000407C                            ; Demo sequence	pointers
0000407C                            ; ---------------------------------------------------------------------------
0000407C 0000 0000                  	dc.l Demo_GHZ
00004080 0000 0000                  	dc.l Demo_GHZ
00004084 0000 0000                  	dc.l Demo_MZ
00004088 0000 0000                  	dc.l Demo_MZ
0000408C 0000 0000                  	dc.l Demo_SYZ
00004090 0000 0000                  	dc.l Demo_SYZ
00004094 0000 0000                  	dc.l Demo_SS
00004098 0000 0000                  	dc.l Demo_SS
00004098 0000 0000                  	dc.l Demo_SS
0000409C                            
0000409C                            Demo_EndIndex:
0000409C                            	include "_inc\Demo pointers for ending.asm"
0000409C                            ; ---------------------------------------------------------------------------
0000409C                            ; Demo (ending) sequence pointers
0000409C                            ; ---------------------------------------------------------------------------
0000409C 0000 0000                  	dc.l Demo_EndGHZ1
000040A0 0000 0000                  	dc.l Demo_EndMZ
000040A4 0000 0000                  	dc.l Demo_EndSYZ
000040A8 0000 0000                  	dc.l Demo_EndLZ
000040AC 0000 0000                  	dc.l Demo_EndSLZ
000040B0 0000 0000                  	dc.l Demo_EndSBZ1
000040B4 0000 0000                  	dc.l Demo_EndSBZ2
000040B8 0000 0000                  	dc.l Demo_EndGHZ2
000040B8 0000 0000                  	dc.l Demo_EndGHZ2
000040BC                            
000040BC 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040CC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040DC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040EC                            		even
000040EC                            
000040EC                            ; ---------------------------------------------------------------------------
000040EC                            ; Collision index loading subroutine
000040EC                            ; ---------------------------------------------------------------------------
000040EC                            
000040EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040EC                            
000040EC                            
000040EC                            ColIndexLoad:				; XREF: Level
000040EC 7000                       		moveq	#0,d0
000040EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F2 E548                       		lsl.w	#2,d0
000040F4 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040FA 4E75                       		rts	
000040FC                            ; End of function ColIndexLoad
000040FC                            
000040FC                            ; ===========================================================================
000040FC                            ; ---------------------------------------------------------------------------
000040FC                            ; Collision index pointers
000040FC                            ; ---------------------------------------------------------------------------
000040FC                            ColPointers:
000040FC                            	include "_inc\Collision index pointers.asm"
000040FC                            ; ---------------------------------------------------------------------------
000040FC                            ; Collision index pointers
000040FC                            ; ---------------------------------------------------------------------------
000040FC 0000 0000                  	dc.l Col_GHZ
00004100 0000 0000                  	dc.l Col_LZ
00004104 0000 0000                  	dc.l Col_MZ
00004108 0000 0000                  	dc.l Col_SLZ
0000410C 0000 0000                  	dc.l Col_SYZ
00004110 0000 0000                  	dc.l Col_SBZ
00004110 0000 0000                  	dc.l Col_SBZ
00004114                            
00004114                            ; ---------------------------------------------------------------------------
00004114                            ; Oscillating number subroutine
00004114                            ; ---------------------------------------------------------------------------
00004114                            
00004114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004114                            
00004114                            
00004114                            OscillateNumInit:			; XREF: Level
00004114 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004118 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000411E 7220                       		moveq	#$20,d1
00004120                            
00004120                            Osc_Loop:
00004120 32DA                       		move.w	(a2)+,(a1)+
00004122 51C9 FFFC                  		dbf	d1,Osc_Loop
00004126 4E75                       		rts	
00004128                            ; End of function OscillateNumInit
00004128                            
00004128                            ; ===========================================================================
00004128 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000412C 0000 0080                  		dc.w 0,	$80
00004130 0000 0080                  		dc.w 0,	$80
00004134 0000 0080                  		dc.w 0,	$80
00004138 0000 0080                  		dc.w 0,	$80
0000413C 0000 0080                  		dc.w 0,	$80
00004140 0000 0080                  		dc.w 0,	$80
00004144 0000 0080                  		dc.w 0,	$80
00004148 0000 0080                  		dc.w 0,	$80
0000414C 0000 50F0                  		dc.w 0,	$50F0
00004150 011E 2080                  		dc.w $11E, $2080
00004154 00B4 3080                  		dc.w $B4, $3080
00004158 010E 5080                  		dc.w $10E, $5080
0000415C 01C2 7080                  		dc.w $1C2, $7080
00004160 0276 0080                  		dc.w $276, $80
00004164 0000 0080                  		dc.w 0,	$80
00004168 0000                       		dc.w 0
0000416A                            		even
0000416A                            
0000416A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000416A                            
0000416A                            
0000416A                            OscillateNumDo:				; XREF: Level
0000416A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004170 6400                       		bcc.s	locret_41C4
00004172 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004176 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000417C 3619                       		move.w	(a1)+,d3
0000417E 720F                       		moveq	#$F,d1
00004180                            
00004180                            loc_4184:
00004180 341A                       		move.w	(a2)+,d2
00004182 381A                       		move.w	(a2)+,d4
00004184 0303                       		btst	d1,d3
00004186 6600                       		bne.s	loc_41A4
00004188 3029 0002                  		move.w	2(a1),d0
0000418C D042                       		add.w	d2,d0
0000418E 3340 0002                  		move.w	d0,2(a1)
00004192 D151                       		add.w	d0,0(a1)
00004194 B811                       		cmp.b	0(a1),d4
00004196 6200                       		bhi.s	loc_41BA
00004198 03C3                       		bset	d1,d3
0000419A 6000                       		bra.s	loc_41BA
0000419C                            ; ===========================================================================
0000419C                            
0000419C                            loc_41A4:				; XREF: OscillateNumDo
0000419C 3029 0002                  		move.w	2(a1),d0
000041A0 9042                       		sub.w	d2,d0
000041A2 3340 0002                  		move.w	d0,2(a1)
000041A6 D151                       		add.w	d0,0(a1)
000041A8 B811                       		cmp.b	0(a1),d4
000041AA 6300                       		bls.s	loc_41BA
000041AC 0383                       		bclr	d1,d3
000041AE                            
000041AE                            loc_41BA:
000041AE 5849                       		addq.w	#4,a1
000041B0 51C9 FFCE                  		dbf	d1,loc_4184
000041B4 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041B8                            
000041B8                            locret_41C4:
000041B8 4E75                       		rts	
000041BA                            ; End of function OscillateNumDo
000041BA                            
000041BA                            ; ===========================================================================
000041BA 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041BE 0002 0018                  		dc.w 2,	$18
000041C2 0002 0020                  		dc.w 2,	$20
000041C6 0002 0030                  		dc.w 2,	$30
000041CA 0004 0020                  		dc.w 4,	$20
000041CE 0008 0008                  		dc.w 8,	8
000041D2 0008 0040                  		dc.w 8,	$40
000041D6 0004 0040                  		dc.w 4,	$40
000041DA 0002 0050                  		dc.w 2,	$50
000041DE 0002 0050                  		dc.w 2,	$50
000041E2 0002 0020                  		dc.w 2,	$20
000041E6 0003 0030                  		dc.w 3,	$30
000041EA 0005 0050                  		dc.w 5,	$50
000041EE 0007 0070                  		dc.w 7,	$70
000041F2 0002 0010                  		dc.w 2,	$10
000041F6 0002 0010                  		dc.w 2,	$10
000041FA                            		even
000041FA                            
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041FA                            ; ---------------------------------------------------------------------------
000041FA                            
000041FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FA                            
000041FA                            
000041FA                            ChangeRingFrame:			; XREF: Level
000041FA 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000041FE 6A00                       		bpl.s	loc_421C
00004200 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004206 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000420A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004210                            
00004210                            loc_421C:
00004210 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004214 6A00                       		bpl.s	loc_4232
00004216 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000421C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004220 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004226                            
00004226                            loc_4232:
00004226 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000422A 6A00                       		bpl.s	loc_4250
0000422C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004232 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004236 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000423C 6500                       		bcs.s	loc_4250
0000423E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004244                            
00004244                            loc_4250:
00004244 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004248 6700                       		beq.s	locret_4272
0000424A 7000                       		moveq	#0,d0
0000424C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004250 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004254 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004258 EF58                       		rol.w	#7,d0
0000425A 0240 0003                  		andi.w	#3,d0
0000425E 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004262 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004266                            
00004266                            locret_4272:
00004266 4E75                       		rts	
00004268                            ; End of function ChangeRingFrame
00004268                            
00004268                            ; ---------------------------------------------------------------------------
00004268                            ; End-of-act signpost pattern loading subroutine
00004268                            ; ---------------------------------------------------------------------------
00004268                            
00004268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004268                            
00004268                            
00004268                            SignpostArtLoad:			; XREF: Level
00004268 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000426C 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004270 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004276 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004278 3038 F700                  		move.w	($FFFFF700).w,d0
0000427C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004280 0441 0100                  		subi.w	#$100,d1
00004284 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004286 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004288 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000428C 6700                       		beq.s	Signpost_Exit
0000428E B278 F728                  		cmp.w	($FFFFF728).w,d1
00004292 6700                       		beq.s	Signpost_Exit
00004294 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004298 7012                       		moveq	#$12,d0
0000429A 6000 D2D6                  		bra.w	LoadPLC2	; load signpost	patterns
0000429E                            ; ===========================================================================
0000429E                            
0000429E                            Signpost_Exit:
0000429E 4E75                       		rts	
000042A0                            ; End of function SignpostArtLoad
000042A0                            
000042A0                            ; ===========================================================================
000042A0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004320                            Demo_MZ:	incbin	demodata\i_mz.bin
00004450                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044D0                            Demo_SS:	incbin	demodata\i_ss.bin
000045D0                            ; ===========================================================================
000045D0                            
000045D0                            ; ---------------------------------------------------------------------------
000045D0                            ; Special Stage
000045D0                            ; ---------------------------------------------------------------------------
000045D0                            
000045D0                            SpecialStage:				; XREF: GameModeArray
000045D0 303C 00CA                  		move.w	#$CA,d0
000045D4 6100 CCF6                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045D8 6100 D962                  		bsr.w	Pal_MakeFlash
000045DC 46FC 2700                  		move	#$2700,sr
000045E0 4DF9 00C0 0004             		lea	($C00004).l,a6
000045E6 3CBC 8B03                  		move.w	#$8B03,(a6)
000045EA 3CBC 8004                  		move.w	#$8004,(a6)
000045EE 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045F4 3CBC 9011                  		move.w	#$9011,(a6)
000045F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000045FC 0200 00BF                  		andi.b	#$BF,d0
00004600 33C0 00C0 0004             		move.w	d0,($C00004).l
00004606 6100 CBEA                  		bsr.w	ClearScreen
0000460A 46FC 2300                  		move	#$2300,sr
0000460E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004614 3ABC 8F01                  		move.w	#$8F01,(a5)
00004618 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000461E 3ABC 9780                  		move.w	#$9780,(a5)
00004622 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004628 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004630                            
00004630                            loc_463C:
00004630 3215                       		move.w	(a5),d1
00004632 0801 0001                  		btst	#1,d1
00004636 66F8                       		bne.s	loc_463C
00004638 3ABC 8F02                  		move.w	#$8F02,(a5)
0000463C 6100 0000                  		bsr.w	SS_BGLoad
00004640 7014                       		moveq	#$14,d0
00004642 6100 D068                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004646 43F8 D000                  		lea	($FFFFD000).w,a1
0000464A 7000                       		moveq	#0,d0
0000464C 323C 07FF                  		move.w	#$7FF,d1
00004650                            
00004650                            SS_ClrObjRam:
00004650 22C0                       		move.l	d0,(a1)+
00004652 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004656                            
00004656 43F8 F700                  		lea	($FFFFF700).w,a1
0000465A 7000                       		moveq	#0,d0
0000465C 323C 003F                  		move.w	#$3F,d1
00004660                            
00004660                            SS_ClrRam:
00004660 22C0                       		move.l	d0,(a1)+
00004662 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004666                            
00004666 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000466A 7000                       		moveq	#0,d0
0000466C 323C 0027                  		move.w	#$27,d1
00004670                            
00004670                            SS_ClrRam2:
00004670 22C0                       		move.l	d0,(a1)+
00004672 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004676                            
00004676 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000467A 7000                       		moveq	#0,d0
0000467C 323C 007F                  		move.w	#$7F,d1
00004680                            
00004680                            SS_ClrNemRam:
00004680 22C0                       		move.l	d0,(a1)+
00004682 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004686                            
00004686 4238 F64E                  		clr.b	($FFFFF64E).w
0000468A 4278 FE02                  		clr.w	($FFFFFE02).w
0000468E 700A                       		moveq	#$A,d0
00004690 6100 DA2A                  		bsr.w	PalLoad1	; load special stage pallet
00004694 4EB9 0000 0000             		jsr	SS_Load
0000469A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046A2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046AA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046B0 6100 0000                  		bsr.w	PalCycle_SS
000046B4 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046B8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046BE 303C 0095                  		move.w	#$95,d0
000046C2 6100 CC02                  		bsr.w	PlaySound	; play special stage BG	music
000046C6 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046CC 43F9 0000 407C             		lea	(Demo_Index).l,a1
000046D2 7006                       		moveq	#6,d0
000046D4 E548                       		lsl.w	#2,d0
000046D6 2271 0000                  		movea.l	(a1,d0.w),a1
000046DA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046E0 5338 F792                  		subq.b	#1,($FFFFF792).w
000046E4 4278 FE20                  		clr.w	($FFFFFE20).w
000046E8 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046EC 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046F2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046F8 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046FC 6700                       		beq.s	SS_NoDebug	; if not, branch
000046FE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004704 6700                       		beq.s	SS_NoDebug	; if not, branch
00004706 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000470C                            
0000470C                            SS_NoDebug:
0000470C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004710 0000 0040                  		ori.b	#$40,d0
00004714 33C0 00C0 0004             		move.w	d0,($C00004).l
0000471A 6100 D774                  		bsr.w	Pal_MakeWhite
0000471E                            
0000471E                            ; ---------------------------------------------------------------------------
0000471E                            ; Main Special Stage loop
0000471E                            ; ---------------------------------------------------------------------------
0000471E                            
0000471E                            SS_MainLoop:
0000471E 6100 CBB8                  		bsr.w	PauseGame
00004722 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004728 6100 E25E                  		bsr.w	DelayProgram
0000472C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004730 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004736 4EB9 0000 0000             		jsr	ObjectsLoad
0000473C 4EB9 0000 0000             		jsr	BuildSprites
00004742 4EB9 0000 0000             		jsr	SS_ShowLayout
00004748 6100 0000                  		bsr.w	SS_BGAnimate
0000474C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004750 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004752 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004756 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000475A                            
0000475A                            SS_ChkEnd:
0000475A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004760 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004764                            
00004764 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004768 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000476C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004772 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004778 6500                       		bcs.s	SS_End		; if not, branch
0000477A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
0000477E                            
0000477E                            SS_End:
0000477E 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004784 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000478A 4278 F794                  		clr.w	($FFFFF794).w
0000478E                            
0000478E                            SS_EndLoop:
0000478E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004794 6100 E1F2                  		bsr.w	DelayProgram
00004798 6100 F832                  		bsr.w	MoveSonicInDemo
0000479C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047A2 4EB9 0000 0000             		jsr	ObjectsLoad
000047A8 4EB9 0000 0000             		jsr	BuildSprites
000047AE 4EB9 0000 0000             		jsr	SS_ShowLayout
000047B4 6100 0000                  		bsr.w	SS_BGAnimate
000047B8 5378 F794                  		subq.w	#1,($FFFFF794).w
000047BC 6A00                       		bpl.s	loc_47D4
000047BE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047C4 6100 D796                  		bsr.w	Pal_ToWhite
000047C8                            
000047C8                            loc_47D4:
000047C8 4A78 F614                  		tst.w	($FFFFF614).w
000047CC 66C0                       		bne.s	SS_EndLoop
000047CE                            
000047CE 46FC 2700                  		move	#$2700,sr
000047D2 4DF9 00C0 0004             		lea	($C00004).l,a6
000047D8 3CBC 8230                  		move.w	#$8230,(a6)
000047DC 3CBC 8407                  		move.w	#$8407,(a6)
000047E0 3CBC 9001                  		move.w	#$9001,(a6)
000047E4 6100 CA0C                  		bsr.w	ClearScreen
000047E8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047F2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047F8 6100 CC06                  		bsr.w	NemDec
000047FC 4EB9 0000 0000             		jsr	Hud_Base
00004802 4278 C800                  		clr.w	($FFFFC800).w
00004806 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000480E 46FC 2300                  		move	#$2300,sr
00004812 7011                       		moveq	#$11,d0
00004814 6100 D8C2                  		bsr.w	PalLoad2	; load results screen pallet
00004818 7000                       		moveq	#0,d0
0000481A 6100 CD56                  		bsr.w	LoadPLC2
0000481E 701B                       		moveq	#$1B,d0
00004820 6100 CD1E                  		bsr.w	LoadPLC		; load results screen patterns
00004824 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000482A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004830 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004834 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004838 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000483C 303C 0099                  		move.w	#$99,d0
00004840 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004846 43F8 D000                  		lea	($FFFFD000).w,a1
0000484A 7000                       		moveq	#0,d0
0000484C 323C 07FF                  		move.w	#$7FF,d1
00004850                            
00004850                            SS_EndClrObjRam:
00004850 22C0                       		move.l	d0,(a1)+
00004852 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004856                            
00004856 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000485C                            
0000485C                            SS_NormalExit:
0000485C 6100 CA7A                  		bsr.w	PauseGame
00004860 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004866 6100 E120                  		bsr.w	DelayProgram
0000486A 4EB9 0000 0000             		jsr	ObjectsLoad
00004870 4EB9 0000 0000             		jsr	BuildSprites
00004876 6100 CD34                  		bsr.w	RunPLC_RAM
0000487A 4A78 FE02                  		tst.w	($FFFFFE02).w
0000487E 67DC                       		beq.s	SS_NormalExit
00004880 4AB8 F680                  		tst.l	($FFFFF680).w
00004884 66D6                       		bne.s	SS_NormalExit
00004886 303C 00CA                  		move.w	#$CA,d0
0000488A 6100 CA40                  		bsr.w	PlaySound_Special ; play special stage exit sound
0000488E 6100 D6AC                  		bsr.w	Pal_MakeFlash
00004892 4E75                       		rts	
00004894                            ; ===========================================================================
00004894                            
00004894                            SS_ToSegaScreen:
00004894 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000489A 4E75                       		rts
0000489C                            
0000489C                            ; ---------------------------------------------------------------------------
0000489C                            ; Special stage	background loading subroutine
0000489C                            ; ---------------------------------------------------------------------------
0000489C                            
0000489C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000489C                            
0000489C                            
0000489C                            SS_BGLoad:				; XREF: SpecialStage
0000489C 43F9 00FF 0000             		lea	($FF0000).l,a1
000048A2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000048A8 303C 4051                  		move.w	#$4051,d0
000048AC 6100 CE30                  		bsr.w	EniDec
000048B0 263C 5000 0001             		move.l	#$50000001,d3
000048B6 45F9 00FF 0080             		lea	($FF0080).l,a2
000048BC 7E06                       		moveq	#6,d7
000048BE                            
000048BE                            loc_48BE:
000048BE 2003                       		move.l	d3,d0
000048C0 7C03                       		moveq	#3,d6
000048C2 7800                       		moveq	#0,d4
000048C4 0C47 0003                  		cmpi.w	#3,d7
000048C8 6400                       		bcc.s	loc_48CC
000048CA 7801                       		moveq	#1,d4
000048CC                            
000048CC                            loc_48CC:
000048CC 7A07                       		moveq	#7,d5
000048CE                            
000048CE                            loc_48CE:
000048CE 224A                       		movea.l	a2,a1
000048D0 0A04 0001                  		eori.b	#1,d4
000048D4 6600                       		bne.s	loc_48E2
000048D6 0C47 0006                  		cmpi.w	#6,d7
000048DA 6600                       		bne.s	loc_48F2
000048DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000048E2                            
000048E2                            loc_48E2:
000048E2 48E7 F800                  		movem.l	d0-d4,-(sp)
000048E6 7207                       		moveq	#7,d1
000048E8 7407                       		moveq	#7,d2
000048EA 6100 CA64                  		bsr.w	ShowVDPGraphics
000048EE 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048F2                            
000048F2                            loc_48F2:
000048F2 0680 0010 0000             		addi.l	#$100000,d0
000048F8 51CD FFD4                  		dbf	d5,loc_48CE
000048FC 0680 0380 0000             		addi.l	#$3800000,d0
00004902 0A04 0001                  		eori.b	#1,d4
00004906 51CE FFC4                  		dbf	d6,loc_48CC
0000490A 0683 1000 0000             		addi.l	#$10000000,d3
00004910 6A00                       		bpl.s	loc_491C
00004912 4843                       		swap	d3
00004914 0683 0000 C000             		addi.l	#$C000,d3
0000491A 4843                       		swap	d3
0000491C                            
0000491C                            loc_491C:
0000491C D4FC 0080                  		adda.w	#$80,a2
00004920 51CF FF9C                  		dbf	d7,loc_48BE
00004924 43F9 00FF 0000             		lea	($FF0000).l,a1
0000492A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004930 303C 4000                  		move.w	#$4000,d0
00004934 6100 CDA8                  		bsr.w	EniDec
00004938 43F9 00FF 0000             		lea	($FF0000).l,a1
0000493E 203C 4000 0003             		move.l	#$40000003,d0
00004944 723F                       		moveq	#$3F,d1
00004946 741F                       		moveq	#$1F,d2
00004948 6100 CA06                  		bsr.w	ShowVDPGraphics
0000494C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004952 203C 5000 0003             		move.l	#$50000003,d0
00004958 723F                       		moveq	#$3F,d1
0000495A 743F                       		moveq	#$3F,d2
0000495C 6100 C9F2                  		bsr.w	ShowVDPGraphics
00004960 4E75                       		rts	
00004962                            ; End of function SS_BGLoad
00004962                            
00004962                            ; ---------------------------------------------------------------------------
00004962                            ; Pallet cycling routine - special stage
00004962                            ; ---------------------------------------------------------------------------
00004962                            
00004962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004962                            
00004962                            
00004962                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004962 4A78 F63A                  		tst.w	($FFFFF63A).w
00004966 6600                       		bne.s	locret_49E6
00004968 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000496C 6A00                       		bpl.s	locret_49E6
0000496E 4DF9 00C0 0004             		lea	($C00004).l,a6
00004974 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004978 5278 F79A                  		addq.w	#1,($FFFFF79A).w
0000497C 0240 001F                  		andi.w	#$1F,d0
00004980 E548                       		lsl.w	#2,d0
00004982 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004988 D0C0                       		adda.w	d0,a0
0000498A 1018                       		move.b	(a0)+,d0
0000498C 6A00                       		bpl.s	loc_4992
0000498E 303C 01FF                  		move.w	#$1FF,d0
00004992                            
00004992                            loc_4992:
00004992 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004996 7000                       		moveq	#0,d0
00004998 1018                       		move.b	(a0)+,d0
0000499A 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000499E 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000049A4 43F1 0000                  		lea	(a1,d0.w),a1
000049A8 303C 8200                  		move.w	#-$7E00,d0
000049AC 1019                       		move.b	(a1)+,d0
000049AE 3C80                       		move.w	d0,(a6)
000049B0 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049B4 303C 8400                  		move.w	#-$7C00,d0
000049B8 1018                       		move.b	(a0)+,d0
000049BA 3C80                       		move.w	d0,(a6)
000049BC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049C6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049CE 7000                       		moveq	#0,d0
000049D0 1018                       		move.b	(a0)+,d0
000049D2 6B00                       		bmi.s	loc_49E8
000049D4 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049DA D2C0                       		adda.w	d0,a1
000049DC 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049E0 24D9                       		move.l	(a1)+,(a2)+
000049E2 24D9                       		move.l	(a1)+,(a2)+
000049E4 24D9                       		move.l	(a1)+,(a2)+
000049E6                            
000049E6                            locret_49E6:
000049E6 4E75                       		rts	
000049E8                            ; ===========================================================================
000049E8                            
000049E8                            loc_49E8:				; XREF: PalCycle_SS
000049E8 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049EC 0C40 008A                  		cmpi.w	#$8A,d0
000049F0 6500                       		bcs.s	loc_49F4
000049F2 5241                       		addq.w	#1,d1
000049F4                            
000049F4                            loc_49F4:
000049F4 C2FC 002A                  		mulu.w	#$2A,d1
000049F8 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049FE D2C1                       		adda.w	d1,a1
00004A00 0240 007F                  		andi.w	#$7F,d0
00004A04 0880 0000                  		bclr	#0,d0
00004A08 6700                       		beq.s	loc_4A18
00004A0A 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A0E 24D1                       		move.l	(a1),(a2)+
00004A10 24E9 0004                  		move.l	4(a1),(a2)+
00004A14 24E9 0008                  		move.l	8(a1),(a2)+
00004A18                            
00004A18                            loc_4A18:
00004A18 D2FC 000C                  		adda.w	#$C,a1
00004A1C 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A20 0C40 000A                  		cmpi.w	#$A,d0
00004A24 6500                       		bcs.s	loc_4A2E
00004A26 0440 000A                  		subi.w	#$A,d0
00004A2A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A2E                            
00004A2E                            loc_4A2E:
00004A2E 3200                       		move.w	d0,d1
00004A30 D040                       		add.w	d0,d0
00004A32 D041                       		add.w	d1,d0
00004A34 D2C0                       		adda.w	d0,a1
00004A36 24D9                       		move.l	(a1)+,(a2)+
00004A38 34D9                       		move.w	(a1)+,(a2)+
00004A3A 4E75                       		rts	
00004A3C                            ; End of function PalCycle_SS
00004A3C                            
00004A3C                            ; ===========================================================================
00004A3C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A4C                            					; XREF: PalCycle_SS
00004A4C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A5C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A6C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A7C 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A8C 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A9C 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AAC FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004ABC                            		even
00004ABC 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004ACA                            					; XREF: PalCycle_SS
00004ACA                            		even
00004ACA                            
00004ACA                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B12                            		even
00004B12                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BE4                            		even
00004BE4                            
00004BE4                            ; ---------------------------------------------------------------------------
00004BE4                            ; Subroutine to	make the special stage background animated
00004BE4                            ; ---------------------------------------------------------------------------
00004BE4                            
00004BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE4                            
00004BE4                            
00004BE4                            SS_BGAnimate:				; XREF: SpecialStage
00004BE4 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BE8 6600                       		bne.s	loc_4BF6
00004BEA 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BF0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BF6                            
00004BF6                            loc_4BF6:
00004BF6 0C40 0008                  		cmpi.w	#8,d0
00004BFA 6400                       		bcc.s	loc_4C4E
00004BFC 0C40 0006                  		cmpi.w	#6,d0
00004C00 6600                       		bne.s	loc_4C10
00004C02 5278 F718                  		addq.w	#1,($FFFFF718).w
00004C06 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C0A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C10                            
00004C10                            loc_4C10:
00004C10 7000                       		moveq	#0,d0
00004C12 3038 F708                  		move.w	($FFFFF708).w,d0
00004C16 4440                       		neg.w	d0
00004C18 4840                       		swap	d0
00004C1A 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C20 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C24 7609                       		moveq	#9,d3
00004C26                            
00004C26                            loc_4C26:
00004C26 302B 0002                  		move.w	2(a3),d0
00004C2A 6100 DD8E                  		bsr.w	CalcSine
00004C2E 7400                       		moveq	#0,d2
00004C30 1419                       		move.b	(a1)+,d2
00004C32 C1C2                       		muls.w	d2,d0
00004C34 E080                       		asr.l	#8,d0
00004C36 36C0                       		move.w	d0,(a3)+
00004C38 1419                       		move.b	(a1)+,d2
00004C3A 4882                       		ext.w	d2
00004C3C D55B                       		add.w	d2,(a3)+
00004C3E 51CB FFE6                  		dbf	d3,loc_4C26
00004C42 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C46 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C4C 6000                       		bra.s	loc_4C7E
00004C4E                            ; ===========================================================================
00004C4E                            
00004C4E                            loc_4C4E:				; XREF: SS_BGAnimate
00004C4E 0C40 000C                  		cmpi.w	#$C,d0
00004C52 6600                       		bne.s	loc_4C74
00004C54 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C58 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C5C 243C 0001 8000             		move.l	#$18000,d2
00004C62 7206                       		moveq	#6,d1
00004C64                            
00004C64                            loc_4C64:
00004C64 2013                       		move.l	(a3),d0
00004C66 9082                       		sub.l	d2,d0
00004C68 26C0                       		move.l	d0,(a3)+
00004C6A 0482 0000 2000             		subi.l	#$2000,d2
00004C70 51C9 FFF2                  		dbf	d1,loc_4C64
00004C74                            
00004C74                            loc_4C74:
00004C74 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C78 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C7E                            
00004C7E                            loc_4C7E:
00004C7E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C82 3038 F718                  		move.w	($FFFFF718).w,d0
00004C86 4440                       		neg.w	d0
00004C88 4840                       		swap	d0
00004C8A 7600                       		moveq	#0,d3
00004C8C 161A                       		move.b	(a2)+,d3
00004C8E 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C92 4442                       		neg.w	d2
00004C94 0242 00FF                  		andi.w	#$FF,d2
00004C98 E54A                       		lsl.w	#2,d2
00004C9A                            
00004C9A                            loc_4C9A:
00004C9A 301B                       		move.w	(a3)+,d0
00004C9C 544B                       		addq.w	#2,a3
00004C9E 7200                       		moveq	#0,d1
00004CA0 121A                       		move.b	(a2)+,d1
00004CA2 5341                       		subq.w	#1,d1
00004CA4                            
00004CA4                            loc_4CA4:
00004CA4 2380 2000                  		move.l	d0,(a1,d2.w)
00004CA8 5842                       		addq.w	#4,d2
00004CAA 0242 03FC                  		andi.w	#$3FC,d2
00004CAE 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CB2 51CB FFE6                  		dbf	d3,loc_4C9A
00004CB6 4E75                       		rts	
00004CB8                            ; End of function SS_BGAnimate
00004CB8                            
00004CB8                            ; ===========================================================================
00004CB8 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CC4                            		even
00004CC4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CCC                            		even
00004CCC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CE0                            		even
00004CE0                            					; XREF: SS_BGAnimate
00004CE0                            ; ===========================================================================
00004CE0                            
00004CE0                            ; ---------------------------------------------------------------------------
00004CE0                            ; Continue screen
00004CE0                            ; ---------------------------------------------------------------------------
00004CE0                            
00004CE0                            ContinueScreen:				; XREF: GameModeArray
00004CE0 6100 D130                  		bsr.w	Pal_FadeFrom
00004CE4 46FC 2700                  		move	#$2700,sr
00004CE8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CEC 0200 00BF                  		andi.b	#$BF,d0
00004CF0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CF6 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CFC 3CBC 8004                  		move.w	#$8004,(a6)
00004D00 3CBC 8700                  		move.w	#$8700,(a6)
00004D04 6100 C4EC                  		bsr.w	ClearScreen
00004D08 43F8 D000                  		lea	($FFFFD000).w,a1
00004D0C 7000                       		moveq	#0,d0
00004D0E 323C 07FF                  		move.w	#$7FF,d1
00004D12                            
00004D12                            Cont_ClrObjRam:
00004D12 22C0                       		move.l	d0,(a1)+
00004D14 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D18                            
00004D18 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D22 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D28 6100 C6D6                  		bsr.w	NemDec
00004D2C 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D36 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D3C 6100 C6C2                  		bsr.w	NemDec
00004D40 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D4A 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D50 6100 C6AE                  		bsr.w	NemDec
00004D54 720A                       		moveq	#10,d1
00004D56 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D5C 7012                       		moveq	#$12,d0
00004D5E 6100 D35C                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D62 103C 0094                  		move.b	#$94,d0
00004D66 6100 C55E                  		bsr.w	PlaySound	; play continue	music
00004D6A 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D70 42B8 F700                  		clr.l	($FFFFF700).w
00004D74 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D7C 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D82 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D88 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D8E 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D94 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D9A 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004DA0 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004DA6 4EB9 0000 0000             		jsr	ObjectsLoad
00004DAC 4EB9 0000 0000             		jsr	BuildSprites
00004DB2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DB6 0000 0040                  		ori.b	#$40,d0
00004DBA 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DC0 6100 CFAA                  		bsr.w	Pal_FadeTo
00004DC4                            
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            ; Continue screen main loop
00004DC4                            ; ---------------------------------------------------------------------------
00004DC4                            
00004DC4                            Cont_MainLoop:
00004DC4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DCA 6100 DBBC                  		bsr.w	DelayProgram
00004DCE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DD4 6400                       		bcc.s	loc_4DF2
00004DD6 46FC 2700                  		move	#$2700,sr
00004DDA 3238 F614                  		move.w	($FFFFF614).w,d1
00004DDE 82FC 003C                  		divu.w	#$3C,d1
00004DE2 0281 0000 000F             		andi.l	#$F,d1
00004DE8 4EB9 0000 0000             		jsr	ContScrCounter
00004DEE 46FC 2300                  		move	#$2300,sr
00004DF2                            
00004DF2                            loc_4DF2:
00004DF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004DF8 4EB9 0000 0000             		jsr	BuildSprites
00004DFE 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004E04 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004E06 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E0C 64B6                       		bcc.s	Cont_MainLoop
00004E0E 4A78 F614                  		tst.w	($FFFFF614).w
00004E12 6600 FFB0                  		bne.w	Cont_MainLoop
00004E16 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E1C 4E75                       		rts	
00004E1E                            ; ===========================================================================
00004E1E                            
00004E1E                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E1E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E24 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E2A 7000                       		moveq	#0,d0
00004E2C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E30 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E34 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E38 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E3C 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E40 4E75                       		rts	
00004E42                            ; ===========================================================================
00004E42                            
00004E42                            ; ---------------------------------------------------------------------------
00004E42                            ; Object 80 - Continue screen elements
00004E42                            ; ---------------------------------------------------------------------------
00004E42                            
00004E42                            Obj80:					; XREF: Obj_Index
00004E42 7000                       		moveq	#0,d0
00004E44 1028 0024                  		move.b	$24(a0),d0
00004E48 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E4C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E50                            ; ===========================================================================
00004E50 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E52 0000                       		dc.w Obj80_Display-Obj80_Index
00004E54 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E56 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E58                            ; ===========================================================================
00004E58                            
00004E58                            Obj80_Main:				; XREF: Obj80_Index
00004E58 5428 0024                  		addq.b	#2,$24(a0)
00004E5C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E64 317C 8500 0002             		move.w	#$8500,2(a0)
00004E6A 117C 0000 0001             		move.b	#0,1(a0)
00004E70 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E76 317C 0120 0008             		move.w	#$120,8(a0)
00004E7C 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E82 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E88                            
00004E88                            Obj80_Display:				; XREF: Obj80_Index
00004E88 4EF9 0000 0000             		jmp	DisplaySprite
00004E8E                            ; ===========================================================================
00004E8E                            Obj80_MiniSonicPos:
00004E8E 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004EA0 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EAC                            ; ===========================================================================
00004EAC                            
00004EAC                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EAC 2248                       		movea.l	a0,a1
00004EAE 45F9 0000 4E8E             		lea	(Obj80_MiniSonicPos).l,a2
00004EB4 7200                       		moveq	#0,d1
00004EB6 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EBA 5501                       		subq.b	#2,d1
00004EBC 6400                       		bcc.s	loc_4EC4
00004EBE 4EF9 0000 0000             		jmp	DeleteObject
00004EC4                            ; ===========================================================================
00004EC4                            
00004EC4                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EC4 7601                       		moveq	#1,d3
00004EC6 0C01 000E                  		cmpi.b	#$E,d1
00004ECA 6500                       		bcs.s	loc_4ED0
00004ECC 7600                       		moveq	#0,d3
00004ECE 720E                       		moveq	#$E,d1
00004ED0                            
00004ED0                            loc_4ED0:
00004ED0 1401                       		move.b	d1,d2
00004ED2 0202 0001                  		andi.b	#1,d2
00004ED6                            
00004ED6                            Obj80_MiniSonLoop:
00004ED6 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004EDA 335A 0008                  		move.w	(a2)+,8(a1)
00004EDE 4A02                       		tst.b	d2
00004EE0 6700                       		beq.s	loc_4EEA
00004EE2 0469 000A 0008             		subi.w	#$A,8(a1)
00004EE8                            
00004EE8                            loc_4EEA:
00004EE8 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EEE 137C 0006 001A             		move.b	#6,$1A(a1)
00004EF4 137C 0006 0024             		move.b	#6,$24(a1)
00004EFA 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004F02 337C 8551 0002             		move.w	#$8551,2(a1)
00004F08 137C 0000 0001             		move.b	#0,1(a1)
00004F0E 43E9 0040                  		lea	$40(a1),a1
00004F12 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F16 43E9 FFC0                  		lea	-$40(a1),a1
00004F1A 1343 0028                  		move.b	d3,$28(a1)
00004F1E                            
00004F1E                            Obj80_ChkType:				; XREF: Obj80_Index
00004F1E 4A28 0028                  		tst.b	$28(a0)
00004F22 6700                       		beq.s	loc_4F40
00004F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F2A 6500                       		bcs.s	loc_4F40
00004F2C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F30 0200 0001                  		andi.b	#1,d0
00004F34 6600                       		bne.s	loc_4F40
00004F36 4A78 D010                  		tst.w	($FFFFD010).w
00004F3A 6600                       		bne.s	Obj80_Delete
00004F3C 4E75                       		rts	
00004F3E                            ; ===========================================================================
00004F3E                            
00004F3E                            loc_4F40:				; XREF: Obj80_ChkType
00004F3E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F42 0200 000F                  		andi.b	#$F,d0
00004F46 6600                       		bne.s	Obj80_Display2
00004F48 0868 0000 001A             		bchg	#0,$1A(a0)
00004F4E                            
00004F4E                            Obj80_Display2:
00004F4E 4EF9 0000 0000             		jmp	DisplaySprite
00004F54                            ; ===========================================================================
00004F54                            
00004F54                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F54 4EF9 0000 0000             		jmp	DeleteObject
00004F5A                            ; ===========================================================================
00004F5A                            
00004F5A                            ; ---------------------------------------------------------------------------
00004F5A                            ; Object 81 - Sonic on the continue screen
00004F5A                            ; ---------------------------------------------------------------------------
00004F5A                            
00004F5A                            Obj81:					; XREF: Obj_Index
00004F5A 7000                       		moveq	#0,d0
00004F5C 1028 0024                  		move.b	$24(a0),d0
00004F60 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F64 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F68 4EF9 0000 0000             		jmp	DisplaySprite
00004F6E                            ; ===========================================================================
00004F6E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F70 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F72 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F74 0000                       		dc.w Obj81_Run-Obj81_Index
00004F76                            ; ===========================================================================
00004F76                            
00004F76                            Obj81_Main:				; XREF: Obj81_Index
00004F76 5428 0024                  		addq.b	#2,$24(a0)
00004F7A 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F80 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F86 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F8E 317C 0780 0002             		move.w	#$780,2(a0)
00004F94 117C 0004 0001             		move.b	#4,1(a0)
00004F9A 117C 0002 0018             		move.b	#2,$18(a0)
00004FA0 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004FA6 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FAC                            
00004FAC                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FAC 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FB2 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FB4 5428 0024                  		addq.b	#2,$24(a0)
00004FB8 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FBC 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FC4 317C 8500 0002             		move.w	#$8500,2(a0)
00004FCA 117C 0000 001C             		move.b	#0,$1C(a0)
00004FD0 6000                       		bra.s	Obj81_Animate
00004FD2                            ; ===========================================================================
00004FD2                            
00004FD2                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FD2 4EB9 0000 0000             		jsr	SpeedToPos
00004FD8 4EB9 0000 0000             		jsr	Sonic_Animate
00004FDE 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FE4                            ; ===========================================================================
00004FE4                            
00004FE4                            Obj81_Animate:				; XREF: Obj81_Index
00004FE4 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FE8 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FEA 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FF0 4EF9 0000 0000             		jmp	AnimateSprite
00004FF6                            ; ===========================================================================
00004FF6                            
00004FF6                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FF6 5428 0024                  		addq.b	#2,$24(a0)
00004FFA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005002 317C 0780 0002             		move.w	#$780,2(a0)
00005008 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000500E 4268 0014                  		clr.w	$14(a0)
00005012 5168 000C                  		subq.w	#8,$C(a0)
00005016 103C 00E0                  		move.b	#$E0,d0
0000501A 6100 C2B0                  		bsr.w	PlaySound_Special ; fade out music
0000501E                            
0000501E                            Obj81_Run:				; XREF: Obj81_Index
0000501E 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005024 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005026 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000502C 6000                       		bra.s	Obj81_ShowRun
0000502E                            ; ===========================================================================
0000502E                            
0000502E                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000502E 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005034                            
00005034                            Obj81_ShowRun:				; XREF: Obj81_Run
00005034 4EB9 0000 0000             		jsr	SpeedToPos
0000503A 4EB9 0000 0000             		jsr	Sonic_Animate
00005040 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005046                            ; ===========================================================================
00005046                            Ani_obj81:
00005046                            	include "_anim\obj81.asm"
00005046                            ; ---------------------------------------------------------------------------
00005046                            ; Animation script - Sonic on the continue screen
00005046                            ; ---------------------------------------------------------------------------
00005046 0000                       		dc.w byte_504A-Ani_obj81
00005048 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005054 00                         		even
00005054 00                         		even
00005054                            
00005054                            ; ---------------------------------------------------------------------------
00005054                            ; Sprite mappings - Continue screen
00005054                            ; ---------------------------------------------------------------------------
00005054                            Map_obj80:
00005054                            	include "_maps\obj80.asm"
00005054                            ; ---------------------------------------------------------------------------
00005054                            ; Sprite mappings - Continue screen
00005054                            ; ---------------------------------------------------------------------------
00005054 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005058 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000505C 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005060 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005064 0B                         byte_5066:	dc.b $B
00005065 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000506A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000506F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005074 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005079 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000507E F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005083 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005088 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000508D 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005092 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005097 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000509C 03                         byte_509E:	dc.b 3
0000509D 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000050A2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050A7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050AC 03                         byte_50AE:	dc.b 3
000050AD 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050B2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050B7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050BC 03                         byte_50BE:	dc.b 3
000050BD 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050C2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050C7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050CC 02                         byte_50CE:	dc.b 2
000050CD 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050D2 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050D7 01                         byte_50D9:	dc.b 1
000050D8 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050DD 01                         byte_50DF:	dc.b 1
000050DE 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050E4 00                         		even
000050E4 00                         		even
000050E4                            
000050E4                            ; ===========================================================================
000050E4                            ; ---------------------------------------------------------------------------
000050E4                            ; Ending sequence in Green Hill	Zone
000050E4                            ; ---------------------------------------------------------------------------
000050E4                            
000050E4                            EndingSequence:				; XREF: GameModeArray
000050E4 103C 00E4                  		move.b	#$E4,d0
000050E8 6100 C1E2                  		bsr.w	PlaySound_Special ; stop music
000050EC 6100 CD24                  		bsr.w	Pal_FadeFrom
000050F0 43F8 D000                  		lea	($FFFFD000).w,a1
000050F4 7000                       		moveq	#0,d0
000050F6 323C 07FF                  		move.w	#$7FF,d1
000050FA                            
000050FA                            End_ClrObjRam:
000050FA 22C0                       		move.l	d0,(a1)+
000050FC 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005100                            
00005100 43F8 F628                  		lea	($FFFFF628).w,a1
00005104 7000                       		moveq	#0,d0
00005106 323C 0015                  		move.w	#$15,d1
0000510A                            
0000510A                            End_ClrRam:
0000510A 22C0                       		move.l	d0,(a1)+
0000510C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005110                            
00005110 43F8 F700                  		lea	($FFFFF700).w,a1
00005114 7000                       		moveq	#0,d0
00005116 323C 003F                  		move.w	#$3F,d1
0000511A                            
0000511A                            End_ClrRam2:
0000511A 22C0                       		move.l	d0,(a1)+
0000511C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005120                            
00005120 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005124 7000                       		moveq	#0,d0
00005126 323C 0047                  		move.w	#$47,d1
0000512A                            
0000512A                            End_ClrRam3:
0000512A 22C0                       		move.l	d0,(a1)+
0000512C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005130                            
00005130 46FC 2700                  		move	#$2700,sr
00005134 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005138 0200 00BF                  		andi.b	#$BF,d0
0000513C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005142 6100 C0AE                  		bsr.w	ClearScreen
00005146 4DF9 00C0 0004             		lea	($C00004).l,a6
0000514C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005150 3CBC 8230                  		move.w	#$8230,(a6)
00005154 3CBC 8407                  		move.w	#$8407,(a6)
00005158 3CBC 857C                  		move.w	#$857C,(a6)
0000515C 3CBC 9001                  		move.w	#$9001,(a6)
00005160 3CBC 8004                  		move.w	#$8004,(a6)
00005164 3CBC 8720                  		move.w	#$8720,(a6)
00005168 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000516E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005172 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005178 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000517E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005184 6700                       		beq.s	End_LoadData	; if yes, branch
00005186 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000518C                            
0000518C                            End_LoadData:
0000518C 701C                       		moveq	#$1C,d0
0000518E 6100 C51C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005192 4EB9 0000 0000             		jsr	Hud_Base
00005198 6100 0000                  		bsr.w	LevelSizeLoad
0000519C 6100 0000                  		bsr.w	DeformBgLayer
000051A0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000051A6 6100 0000                  		bsr.w	MainLoadBlockLoad
000051AA 6100 0000                  		bsr.w	LoadTilesFromStart
000051AE 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051B6 46FC 2300                  		move	#$2300,sr
000051BA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051C0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051C4 6100 C696                  		bsr.w	KosDec
000051C8 7003                       		moveq	#3,d0
000051CA 6100 CEF0                  		bsr.w	PalLoad1	; load Sonic's pallet
000051CE 303C 0097                  		move.w	#$97,d0
000051D2 6100 C0F2                  		bsr.w	PlaySound	; play ending sequence music
000051D6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051DC 6700                       		beq.s	End_LoadSonic	; if not, branch
000051DE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051E4                            
000051E4                            End_LoadSonic:
000051E4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051EA 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051F0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051F6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051FC 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005202 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005208 4EB9 0000 0000             		jsr	ObjPosLoad
0000520E 4EB9 0000 0000             		jsr	ObjectsLoad
00005214 4EB9 0000 0000             		jsr	BuildSprites
0000521A 7000                       		moveq	#0,d0
0000521C 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005220 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005224 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005228 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000522C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005230 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005234 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005238 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000523C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005240 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005244 6100 EECE                  		bsr.w	OscillateNumInit
00005248 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000524E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005254 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000525A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005260 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005266 6100 D720                  		bsr.w	DelayProgram
0000526A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000526E 0000 0040                  		ori.b	#$40,d0
00005272 33C0 00C0 0004             		move.w	d0,($C00004).l
00005278 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000527E 6100 CAEC                  		bsr.w	Pal_FadeTo
00005282                            
00005282                            ; ---------------------------------------------------------------------------
00005282                            ; Main ending sequence loop
00005282                            ; ---------------------------------------------------------------------------
00005282                            
00005282                            End_MainLoop:
00005282 6100 C054                  		bsr.w	PauseGame
00005286 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000528C 6100 D6FA                  		bsr.w	DelayProgram
00005290 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005294 6100 0000                  		bsr.w	End_MoveSonic
00005298 4EB9 0000 0000             		jsr	ObjectsLoad
0000529E 6100 0000                  		bsr.w	DeformBgLayer
000052A2 4EB9 0000 0000             		jsr	BuildSprites
000052A8 4EB9 0000 0000             		jsr	ObjPosLoad
000052AE 6100 C64C                  		bsr.w	PalCycle_Load
000052B2 6100 EEB6                  		bsr.w	OscillateNumDo
000052B6 6100 EF42                  		bsr.w	ChangeRingFrame
000052BA 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052C0 6700                       		beq.s	loc_52DA	; if yes, branch
000052C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052C8 103C 009D                  		move.b	#$9D,d0
000052CC 6100 BFFE                  		bsr.w	PlaySound_Special ; play credits music
000052D0 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052D6 4E75                       		rts	
000052D8                            ; ===========================================================================
000052D8                            
000052D8                            loc_52DA:
000052D8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052DC 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052E0                            
000052E0 4278 FE02                  		clr.w	($FFFFFE02).w
000052E4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052EA 4278 F794                  		clr.w	($FFFFF794).w
000052EE                            
000052EE                            End_AllEmlds:				; XREF: loc_5334
000052EE 6100 BFE8                  		bsr.w	PauseGame
000052F2 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052F8 6100 D68E                  		bsr.w	DelayProgram
000052FC 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005300 6100 0000                  		bsr.w	End_MoveSonic
00005304 4EB9 0000 0000             		jsr	ObjectsLoad
0000530A 6100 0000                  		bsr.w	DeformBgLayer
0000530E 4EB9 0000 0000             		jsr	BuildSprites
00005314 4EB9 0000 0000             		jsr	ObjPosLoad
0000531A 6100 EE4E                  		bsr.w	OscillateNumDo
0000531E 6100 EEDA                  		bsr.w	ChangeRingFrame
00005322 5378 F794                  		subq.w	#1,($FFFFF794).w
00005326 6A00                       		bpl.s	loc_5334
00005328 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000532E 6100 CC2C                  		bsr.w	Pal_ToWhite
00005332                            
00005332                            loc_5334:
00005332 4A78 FE02                  		tst.w	($FFFFFE02).w
00005336 6700 FFB6                  		beq.w	End_AllEmlds
0000533A 4278 FE02                  		clr.w	($FFFFFE02).w
0000533E 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005344 4BF9 00C0 0004             		lea	($C00004).l,a5
0000534A 4DF9 00C0 0000             		lea	($C00000).l,a6
00005350 47F8 F700                  		lea	($FFFFF700).w,a3
00005354 49F8 A400                  		lea	($FFFFA400).w,a4
00005358 343C 4000                  		move.w	#$4000,d2
0000535C 6100 0000                  		bsr.w	LoadTilesFromStart2
00005360 7013                       		moveq	#$13,d0
00005362 6100 CD58                  		bsr.w	PalLoad1	; load ending pallet
00005366 6100 CB28                  		bsr.w	Pal_MakeWhite
0000536A 6000 FF16                  		bra.w	End_MainLoop
0000536E                            
0000536E                            ; ---------------------------------------------------------------------------
0000536E                            ; Subroutine controlling Sonic on the ending sequence
0000536E                            ; ---------------------------------------------------------------------------
0000536E                            
0000536E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000536E                            
0000536E                            
0000536E                            End_MoveSonic:				; XREF: End_MainLoop
0000536E 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005372 6600                       		bne.s	End_MoveSonic2
00005374 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000537A 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000537C 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005380 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005386 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000538C 4E75                       		rts	
0000538E                            ; ===========================================================================
0000538E                            
0000538E                            End_MoveSonic2:				; XREF: End_MoveSonic
0000538E 5500                       		subq.b	#2,d0
00005390 6600                       		bne.s	End_MoveSonic3
00005392 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005398 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000539A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000539E 7000                       		moveq	#0,d0
000053A0 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000053A4 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053A8 31C0 D014                  		move.w	d0,($FFFFD014).w
000053AC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053B2 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053B8 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053BE 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053C4 4E75                       		rts	
000053C6                            ; ===========================================================================
000053C6                            
000053C6                            End_MoveSonic3:				; XREF: End_MoveSonic
000053C6 5500                       		subq.b	#2,d0
000053C8 6600                       		bne.s	End_MoveSonExit
000053CA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053CE 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053D4 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053DA 4278 D024                  		clr.w	($FFFFD024).w
000053DE                            
000053DE                            End_MoveSonExit:
000053DE 4E75                       		rts	
000053E0                            ; End of function End_MoveSonic
000053E0                            
000053E0                            ; ===========================================================================
000053E0                            ; ---------------------------------------------------------------------------
000053E0                            ; Object 87 - Sonic on ending sequence
000053E0                            ; ---------------------------------------------------------------------------
000053E0                            
000053E0                            Obj87:					; XREF: Obj_Index
000053E0 7000                       		moveq	#0,d0
000053E2 1028 0025                  		move.b	$25(a0),d0
000053E6 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053EA 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053EE 4EF9 0000 0000             		jmp	DisplaySprite
000053F4                            ; ===========================================================================
000053F4 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053F8 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053FC 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005400 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005404 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005408                            ; ===========================================================================
00005408                            
00005408                            Obj87_Main:				; XREF: Obj87_Index
00005408 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000540E 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005410 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005416 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000541C 4E75                       		rts	
0000541E                            ; ===========================================================================
0000541E                            
0000541E                            Obj87_Main2:				; XREF: Obj87_Main
0000541E 5428 0025                  		addq.b	#2,$25(a0)
00005422 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000542A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005430 117C 0004 0001             		move.b	#4,1(a0)
00005436 4228 0022                  		clr.b	$22(a0)
0000543A 117C 0002 0018             		move.b	#2,$18(a0)
00005440 117C 0000 001A             		move.b	#0,$1A(a0)
00005446 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000544C                            
0000544C                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000544C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005450 6600                       		bne.s	Obj87_Wait
00005452 5428 0025                  		addq.b	#2,$25(a0)
00005456 317C 0001 001C             		move.w	#1,$1C(a0)
0000545C 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005462                            
00005462                            Obj87_Wait:
00005462 4E75                       		rts	
00005464                            ; ===========================================================================
00005464                            
00005464                            Obj87_LookUp:				; XREF: Obj87_Index
00005464 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000546C 6600                       		bne.s	locret_5480
0000546E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005474 317C 005A 0030             		move.w	#$5A,$30(a0)
0000547A 5428 0025                  		addq.b	#2,$25(a0)
0000547E                            
0000547E                            locret_5480:
0000547E 4E75                       		rts	
00005480                            ; ===========================================================================
00005480                            
00005480                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005480 5368 0030                  		subq.w	#1,$30(a0)
00005484 6600                       		bne.s	Obj87_Wait2
00005486 43F8 D400                  		lea	($FFFFD400).w,a1
0000548A 323C 00FF                  		move.w	#$FF,d1
0000548E                            
0000548E                            Obj87_ClrLoop:
0000548E 4299                       		clr.l	(a1)+
00005490 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005494 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000549A 5428 0025                  		addq.b	#2,$25(a0)
0000549E 117C 0001 001C             		move.b	#1,$1C(a0)
000054A4 317C 003C 0030             		move.w	#$3C,$30(a0)
000054AA                            
000054AA                            Obj87_Wait2:
000054AA 4E75                       		rts	
000054AC                            ; ===========================================================================
000054AC                            
000054AC                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054AC 5368 0030                  		subq.w	#1,$30(a0)
000054B0 6600                       		bne.s	Obj87_Wait3
000054B2 5428 0025                  		addq.b	#2,$25(a0)
000054B6 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054BC 117C 0002 001C             		move.b	#2,$1C(a0)
000054C2 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054C8                            
000054C8                            Obj87_Wait3:
000054C8 4E75                       		rts	
000054CA                            ; ===========================================================================
000054CA                            
000054CA                            Obj87_Animate:				; XREF: Obj87_Index
000054CA 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054D0 4EF9 0000 0000             		jmp	AnimateSprite
000054D6                            ; ===========================================================================
000054D6                            
000054D6                            Obj87_Leap:				; XREF: Obj87_Index
000054D6 5368 0030                  		subq.w	#1,$30(a0)
000054DA 6600                       		bne.s	Obj87_Wait4
000054DC 5428 0025                  		addq.b	#2,$25(a0)
000054E0 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054E8 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054EE 117C 0004 0001             		move.b	#4,1(a0)
000054F4 4228 0022                  		clr.b	$22(a0)
000054F8 117C 0002 0018             		move.b	#2,$18(a0)
000054FE 117C 0005 001A             		move.b	#5,$1A(a0)
00005504 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000550A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005510 60B8                       		bra.s	Obj87_Animate
00005512                            ; ===========================================================================
00005512                            
00005512                            Obj87_Wait4:				; XREF: Obj87_Leap
00005512 4E75                       		rts	
00005514                            ; ===========================================================================
00005514                            Ani_obj87:
00005514                            	include "_anim\obj87.asm"
00005514                            ; ---------------------------------------------------------------------------
00005514                            ; Animation script - Sonic on the ending sequence
00005514                            ; ---------------------------------------------------------------------------
00005514 0000                       		dc.w byte_551C-Ani_obj87
00005516 0000                       		dc.w byte_552A-Ani_obj87
00005518 0000                       		dc.w byte_5534-Ani_obj87
0000551A 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005528 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005532 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000553A                            		even
0000553A                            		even
0000553A                            
0000553A                            ; ===========================================================================
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            ; Object 88 - chaos emeralds on	the ending sequence
0000553A                            ; ---------------------------------------------------------------------------
0000553A                            
0000553A                            Obj88:					; XREF: Obj_Index
0000553A 7000                       		moveq	#0,d0
0000553C 1028 0024                  		move.b	$24(a0),d0
00005540 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005544 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005548 4EF9 0000 0000             		jmp	DisplaySprite
0000554E                            ; ===========================================================================
0000554E 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005550 0000                       		dc.w Obj88_Move-Obj88_Index
00005552                            ; ===========================================================================
00005552                            
00005552                            Obj88_Main:				; XREF: Obj88_Index
00005552 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005558 6700                       		beq.s	Obj88_Main2
0000555A 588F                       		addq.l	#4,sp
0000555C 4E75                       		rts	
0000555E                            ; ===========================================================================
0000555E                            
0000555E                            Obj88_Main2:				; XREF: Obj88_Main
0000555E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005564 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000556A 2248                       		movea.l	a0,a1
0000556C 7600                       		moveq	#0,d3
0000556E 7401                       		moveq	#1,d2
00005570 7205                       		moveq	#5,d1
00005572                            
00005572                            Obj88_MainLoop:
00005572 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005576 5429 0024                  		addq.b	#2,$24(a1)
0000557A 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005582 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005588 137C 0004 0001             		move.b	#4,1(a1)
0000558E 137C 0001 0018             		move.b	#1,$18(a1)
00005594 3368 0008 0038             		move.w	8(a0),$38(a1)
0000559A 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000055A0 1342 001C                  		move.b	d2,$1C(a1)
000055A4 1342 001A                  		move.b	d2,$1A(a1)
000055A8 5202                       		addq.b	#1,d2
000055AA 1343 0026                  		move.b	d3,$26(a1)
000055AE 0603 002A                  		addi.b	#$2A,d3
000055B2 43E9 0040                  		lea	$40(a1),a1
000055B6 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055BA                            
000055BA                            Obj88_Move:				; XREF: Obj88_Index
000055BA 3028 003E                  		move.w	$3E(a0),d0
000055BE D168 0026                  		add.w	d0,$26(a0)
000055C2 1028 0026                  		move.b	$26(a0),d0
000055C6 4EB9 0000 29BA             		jsr	(CalcSine).l
000055CC 7800                       		moveq	#0,d4
000055CE 1828 003C                  		move.b	$3C(a0),d4
000055D2 C3C4                       		muls.w	d4,d1
000055D4 E081                       		asr.l	#8,d1
000055D6 C1C4                       		muls.w	d4,d0
000055D8 E080                       		asr.l	#8,d0
000055DA D268 0038                  		add.w	$38(a0),d1
000055DE D068 003A                  		add.w	$3A(a0),d0
000055E2 3141 0008                  		move.w	d1,8(a0)
000055E6 3140 000C                  		move.w	d0,$C(a0)
000055EA 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055F0 6700                       		beq.s	loc_55FA
000055F2 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055F8                            
000055F8                            loc_55FA:
000055F8 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055FE 6700                       		beq.s	loc_5608
00005600 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005606                            
00005606                            loc_5608:
00005606 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000560C 6700                       		beq.s	locret_5614
0000560E 5368 003A                  		subq.w	#1,$3A(a0)
00005612                            
00005612                            locret_5614:
00005612 4E75                       		rts	
00005614                            ; ===========================================================================
00005614                            ; ---------------------------------------------------------------------------
00005614                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005614                            ; ---------------------------------------------------------------------------
00005614                            
00005614                            Obj89:					; XREF: Obj_Index
00005614 7000                       		moveq	#0,d0
00005616 1028 0024                  		move.b	$24(a0),d0
0000561A 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000561E 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005622                            ; ===========================================================================
00005622 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005624 0000                       		dc.w Obj89_Move-Obj89_Index
00005626 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005628                            ; ===========================================================================
00005628                            
00005628                            Obj89_Main:				; XREF: Obj89_Index
00005628 5428 0024                  		addq.b	#2,$24(a0)
0000562C 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005632 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005638 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005640 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005646 117C 0000 0001             		move.b	#0,1(a0)
0000564C 117C 0000 0018             		move.b	#0,$18(a0)
00005652                            
00005652                            Obj89_Move:				; XREF: Obj89_Index
00005652 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005658 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000565A 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005660 6000 0000                  		bra.w	DisplaySprite
00005664                            ; ===========================================================================
00005664                            
00005664                            Obj89_Delay:				; XREF: Obj89_Move
00005664 5428 0024                  		addq.b	#2,$24(a0)
00005668 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000566E                            
0000566E                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000566E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005672 6A00                       		bpl.s	Obj89_Display
00005674 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000567A                            
0000567A                            Obj89_Display:
0000567A 6000 0000                  		bra.w	DisplaySprite
0000567E                            ; ===========================================================================
0000567E                            ; ---------------------------------------------------------------------------
0000567E                            ; Sprite mappings - Sonic on the ending	sequence
0000567E                            ; ---------------------------------------------------------------------------
0000567E                            Map_obj87:
0000567E                            	include "_maps\obj87.asm"
0000567E                            ; ---------------------------------------------------------------------------
0000567E                            ; Sprite mappings - Sonic on the ending	sequence
0000567E                            ; ---------------------------------------------------------------------------
0000567E 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005682 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005686 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000568A 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000568E 02                         byte_5690:	dc.b 2
0000568F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005694 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005699 03                         byte_569B:	dc.b 3
0000569A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000569F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056A4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056A9 02                         byte_56AB:	dc.b 2
000056AA EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056AF FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056B4 02                         byte_56B6:	dc.b 2
000056B5 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056BA FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056BF 02                         byte_56C1:	dc.b 2
000056C0 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056C5 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056CA 03                         byte_56CC:	dc.b 3
000056CB EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056D0 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056D5 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056DA 07                         byte_56DC:	dc.b 7
000056DB B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056E0 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056E5 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056EA CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056EF DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056F4 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056F9 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056FE 18                         byte_5700:	dc.b $18
000056FF 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005704 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005709 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000570E 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005713 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005718 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000571D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005722 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005727 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000572C B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005731 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005736 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000573B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005740 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005745 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000574A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000574F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005754 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005759 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000575E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005763 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005768 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000576D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005772 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005778 00                         		even
00005778 00                         		even
00005778                            
00005778                            ; ---------------------------------------------------------------------------
00005778                            ; Sprite mappings - chaos emeralds on the ending sequence
00005778                            ; ---------------------------------------------------------------------------
00005778                            Map_obj88:
00005778                            	include "_maps\obj88.asm"
00005778                            ; ---------------------------------------------------------------------------
00005778                            ; Sprite mappings - chaos emeralds on the ending sequence
00005778                            ; ---------------------------------------------------------------------------
00005778 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000577C 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005780 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005784 0000                       		dc.w byte_57AC-Map_obj88
00005786 01                         byte_5788:	dc.b 1
00005787 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000578C 01                         byte_578E:	dc.b 1
0000578D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005792 01                         byte_5794:	dc.b 1
00005793 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005798 01                         byte_579A:	dc.b 1
00005799 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000579E 01                         byte_57A0:	dc.b 1
0000579F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057A4 01                         byte_57A6:	dc.b 1
000057A5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057AA 01                         byte_57AC:	dc.b 1
000057AB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057B0                            		even
000057B0                            		even
000057B0                            
000057B0                            ; ---------------------------------------------------------------------------
000057B0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057B0                            ; ---------------------------------------------------------------------------
000057B0                            Map_obj89:
000057B0                            	include "_maps\obj89.asm"
000057B0                            ; ---------------------------------------------------------------------------
000057B0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057B0                            ; ---------------------------------------------------------------------------
000057B0 0000                       		dc.w byte_57B4-Map_obj89
000057B2 03                         byte_57B4:	dc.b 3
000057B3 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057B8 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057BD F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057C2                            		even
000057C2                            		even
000057C2                            
000057C2                            ; ===========================================================================
000057C2                            ; ---------------------------------------------------------------------------
000057C2                            ; Credits ending sequence
000057C2                            ; ---------------------------------------------------------------------------
000057C2                            
000057C2                            Credits:				; XREF: GameModeArray
000057C2 6100 BDDA                  		bsr.w	ClearPLC
000057C6 6100 C64A                  		bsr.w	Pal_FadeFrom
000057CA 4DF9 00C0 0004             		lea	($C00004).l,a6
000057D0 3CBC 8004                  		move.w	#$8004,(a6)
000057D4 3CBC 8230                  		move.w	#$8230,(a6)
000057D8 3CBC 8407                  		move.w	#$8407,(a6)
000057DC 3CBC 9001                  		move.w	#$9001,(a6)
000057E0 3CBC 9200                  		move.w	#$9200,(a6)
000057E4 3CBC 8B03                  		move.w	#$8B03,(a6)
000057E8 3CBC 8720                  		move.w	#$8720,(a6)
000057EC 4238 F64E                  		clr.b	($FFFFF64E).w
000057F0 6100 BA00                  		bsr.w	ClearScreen
000057F4 43F8 D000                  		lea	($FFFFD000).w,a1
000057F8 7000                       		moveq	#0,d0
000057FA 323C 07FF                  		move.w	#$7FF,d1
000057FE                            
000057FE                            Cred_ClrObjRam:
000057FE 22C0                       		move.l	d0,(a1)+
00005800 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005804                            
00005804 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000580E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005814 6100 BBEA                  		bsr.w	NemDec
00005818 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000581C 7000                       		moveq	#0,d0
0000581E 323C 001F                  		move.w	#$1F,d1
00005822                            
00005822                            Cred_ClrPallet:
00005822 22C0                       		move.l	d0,(a1)+
00005824 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005828                            
00005828 7003                       		moveq	#3,d0
0000582A 6100 C890                  		bsr.w	PalLoad1	; load Sonic's pallet
0000582E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005834 4EB9 0000 0000             		jsr	ObjectsLoad
0000583A 4EB9 0000 0000             		jsr	BuildSprites
00005840 6100 0000                  		bsr.w	EndingDemoLoad
00005844 7000                       		moveq	#0,d0
00005846 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000584A E948                       		lsl.w	#4,d0
0000584C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005852 45F2 0000                  		lea	(a2,d0.w),a2
00005856 7000                       		moveq	#0,d0
00005858 1012                       		move.b	(a2),d0
0000585A 6700                       		beq.s	loc_5862
0000585C 6100 BCE2                  		bsr.w	LoadPLC		; load level patterns
00005860                            
00005860                            loc_5862:
00005860 7001                       		moveq	#1,d0
00005862 6100 BCDC                  		bsr.w	LoadPLC		; load standard	level patterns
00005866 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
0000586C 6100 C4FE                  		bsr.w	Pal_FadeTo
00005870                            
00005870                            Cred_WaitLoop:
00005870 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005876 6100 D110                  		bsr.w	DelayProgram
0000587A 6100 BD30                  		bsr.w	RunPLC_RAM
0000587E 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005882 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005884 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005888 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000588A 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005890 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005894 4E75                       		rts	
00005896                            
00005896                            ; ---------------------------------------------------------------------------
00005896                            ; Ending sequence demo loading subroutine
00005896                            ; ---------------------------------------------------------------------------
00005896                            
00005896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005896                            
00005896                            
00005896                            EndingDemoLoad:				; XREF: Credits
00005896 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000589A 0240 000F                  		andi.w	#$F,d0
0000589E D040                       		add.w	d0,d0
000058A0 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058A4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058A8 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058AC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058B2 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058B4 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058BA 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058C0 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058C6 7000                       		moveq	#0,d0
000058C8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058CC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058D0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058D4 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058D8 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058DE 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058E0 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058E6 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058EA 303C 0008                  		move.w	#8,d0
000058EE                            
000058EE                            EndDemo_LampLoad:
000058EE 24D9                       		move.l	(a1)+,(a2)+
000058F0 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058F4                            
000058F4                            EndDemo_Exit:
000058F4 4E75                       		rts	
000058F6                            ; End of function EndingDemoLoad
000058F6                            
000058F6                            ; ===========================================================================
000058F6                            ; ---------------------------------------------------------------------------
000058F6                            ; Levels used in the end sequence demos
000058F6                            ; ---------------------------------------------------------------------------
000058F6                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005906                            
00005906                            ; ---------------------------------------------------------------------------
00005906                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005906                            ; ---------------------------------------------------------------------------
00005906                            EndDemo_LampVar:
00005906 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005908 0A00 062C 000D             		dc.w $A00, $62C, $D
0000590E 0000 0000                  		dc.l 0
00005912 0000                       		dc.b 0,	0
00005914 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005928 0101                       		dc.b 1,	1
0000592A                            ; ===========================================================================
0000592A                            ; ---------------------------------------------------------------------------
0000592A                            ; "TRY AGAIN" and "END"	screens
0000592A                            ; ---------------------------------------------------------------------------
0000592A                            
0000592A                            TryAgainEnd:				; XREF: Credits
0000592A 6100 BC72                  		bsr.w	ClearPLC
0000592E 6100 C4E2                  		bsr.w	Pal_FadeFrom
00005932 4DF9 00C0 0004             		lea	($C00004).l,a6
00005938 3CBC 8004                  		move.w	#$8004,(a6)
0000593C 3CBC 8230                  		move.w	#$8230,(a6)
00005940 3CBC 8407                  		move.w	#$8407,(a6)
00005944 3CBC 9001                  		move.w	#$9001,(a6)
00005948 3CBC 9200                  		move.w	#$9200,(a6)
0000594C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005950 3CBC 8720                  		move.w	#$8720,(a6)
00005954 4238 F64E                  		clr.b	($FFFFF64E).w
00005958 6100 B898                  		bsr.w	ClearScreen
0000595C 43F8 D000                  		lea	($FFFFD000).w,a1
00005960 7000                       		moveq	#0,d0
00005962 323C 07FF                  		move.w	#$7FF,d1
00005966                            
00005966                            TryAg_ClrObjRam:
00005966 22C0                       		move.l	d0,(a1)+
00005968 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000596C                            
0000596C 701D                       		moveq	#$1D,d0
0000596E 6100 BD3C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005972 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005976 7000                       		moveq	#0,d0
00005978 323C 001F                  		move.w	#$1F,d1
0000597C                            
0000597C                            TryAg_ClrPallet:
0000597C 22C0                       		move.l	d0,(a1)+
0000597E 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005982                            
00005982 7013                       		moveq	#$13,d0
00005984 6100 C736                  		bsr.w	PalLoad1	; load ending pallet
00005988 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000598C 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005992 4EB9 0000 0000             		jsr	ObjectsLoad
00005998 4EB9 0000 0000             		jsr	BuildSprites
0000599E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059A4 6100 C3C6                  		bsr.w	Pal_FadeTo
000059A8                            
000059A8                            ; ---------------------------------------------------------------------------
000059A8                            ; "TRY AGAIN" and "END"	screen main loop
000059A8                            ; ---------------------------------------------------------------------------
000059A8                            TryAg_MainLoop:
000059A8 6100 B92E                  		bsr.w	PauseGame
000059AC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059B2 6100 CFD4                  		bsr.w	DelayProgram
000059B6 4EB9 0000 0000             		jsr	ObjectsLoad
000059BC 4EB9 0000 0000             		jsr	BuildSprites
000059C2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059C8 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059CA 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059CE 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059D0 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059D6 67D0                       		beq.s	TryAg_MainLoop
000059D8                            
000059D8                            TryAg_Exit:
000059D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059DE 4E75                       		rts	
000059E0                            
000059E0                            ; ===========================================================================
000059E0                            ; ---------------------------------------------------------------------------
000059E0                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059E0                            ; ---------------------------------------------------------------------------
000059E0                            
000059E0                            Obj8B:					; XREF: Obj_Index
000059E0 7000                       		moveq	#0,d0
000059E2 1028 0024                  		move.b	$24(a0),d0
000059E6 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059EA 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059EE 4EF9 0000 0000             		jmp	DisplaySprite
000059F4                            ; ===========================================================================
000059F4 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059F6 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059F8 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059FA 0000                       		dc.w loc_5A8E-Obj8B_Index
000059FC                            ; ===========================================================================
000059FC                            
000059FC                            Obj8B_Main:				; XREF: Obj8B_Index
000059FC 5428 0024                  		addq.b	#2,$24(a0)
00005A00 317C 0120 0008             		move.w	#$120,8(a0)
00005A06 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A0C 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A14 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A1A 117C 0000 0001             		move.b	#0,1(a0)
00005A20 117C 0002 0018             		move.b	#2,$18(a0)
00005A26 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A2C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A32 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A34 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A3A 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A40 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A46 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A4C                            
00005A4C                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A4C 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A52 4EF9 0000 0000             		jmp	AnimateSprite
00005A58                            ; ===========================================================================
00005A58                            
00005A58                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A58 5428 0024                  		addq.b	#2,$24(a0)
00005A5C 7002                       		moveq	#2,d0
00005A5E 0828 0000 001C             		btst	#0,$1C(a0)
00005A64 6700                       		beq.s	loc_5A6A
00005A66 4440                       		neg.w	d0
00005A68                            
00005A68                            loc_5A6A:
00005A68 43F8 D800                  		lea	($FFFFD800).w,a1
00005A6C 7205                       		moveq	#5,d1
00005A6E                            
00005A6E                            loc_5A70:
00005A6E 1340 003E                  		move.b	d0,$3E(a1)
00005A72 3400                       		move.w	d0,d2
00005A74 E742                       		asl.w	#3,d2
00005A76 D529 0026                  		add.b	d2,$26(a1)
00005A7A 43E9 0040                  		lea	$40(a1),a1
00005A7E 51C9 FFEE                  		dbf	d1,loc_5A70
00005A82 5228 001A                  		addq.b	#1,$1A(a0)
00005A86 317C 0070 0030             		move.w	#112,$30(a0)
00005A8C                            
00005A8C                            loc_5A8E:				; XREF: Obj8B_Index
00005A8C 5368 0030                  		subq.w	#1,$30(a0)
00005A90 6A00                       		bpl.s	locret_5AA0
00005A92 0868 0000 001C             		bchg	#0,$1C(a0)
00005A98 117C 0002 0024             		move.b	#2,$24(a0)
00005A9E                            
00005A9E                            locret_5AA0:
00005A9E 4E75                       		rts	
00005AA0                            ; ===========================================================================
00005AA0                            Ani_obj8B:
00005AA0                            	include "_anim\obj8B.asm"
00005AA0                            ; ---------------------------------------------------------------------------
00005AA0                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005AA0                            ; ---------------------------------------------------------------------------
00005AA0 0000                       		dc.w byte_5AA8-Ani_obj8B
00005AA2 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AA4 0000                       		dc.w byte_5AB0-Ani_obj8B
00005AA6 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005AAA 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AAE 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005AC0                            		even
00005AC0                            		even
00005AC0                            
00005AC0                            ; ===========================================================================
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            
00005AC0                            Obj8C:					; XREF: Obj_Index
00005AC0 7000                       		moveq	#0,d0
00005AC2 1028 0024                  		move.b	$24(a0),d0
00005AC6 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005ACA 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005ACE 4EF9 0000 0000             		jmp	DisplaySprite
00005AD4                            ; ===========================================================================
00005AD4 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005AD6 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005AD8                            ; ===========================================================================
00005AD8                            
00005AD8                            Obj8C_Main:				; XREF: Obj8C_Index
00005AD8 2248                       		movea.l	a0,a1
00005ADA 7400                       		moveq	#0,d2
00005ADC 7600                       		moveq	#0,d3
00005ADE 7205                       		moveq	#5,d1
00005AE0 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005AE4                            
00005AE4                            Obj8C_MakeEms:				; XREF: loc_5B42
00005AE4 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005AE8 5429 0024                  		addq.b	#2,$24(a1)
00005AEC 237C 0000 5778 0004        		move.l	#Map_obj88,4(a1)
00005AF4 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AFA 137C 0000 0001             		move.b	#0,1(a1)
00005B00 137C 0001 0018             		move.b	#1,$18(a1)
00005B06 337C 0104 0008             		move.w	#$104,8(a1)
00005B0C 337C 0120 0038             		move.w	#$120,$38(a1)
00005B12 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B18 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B1E 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B24 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B28                            
00005B28                            Obj8C_ChkEms:
00005B28 7000                       		moveq	#0,d0
00005B2A 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B2E 5340                       		subq.w	#1,d0
00005B30 6500                       		bcs.s	loc_5B42
00005B32                            
00005B32                            Obj8C_ChkEmLoop:
00005B32 B433 0000                  		cmp.b	(a3,d0.w),d2
00005B36 6600                       		bne.s	loc_5B3E
00005B38 5202                       		addq.b	#1,d2
00005B3A 60EC                       		bra.s	Obj8C_ChkEms
00005B3C                            ; ===========================================================================
00005B3C                            
00005B3C                            loc_5B3E:
00005B3C 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B40                            
00005B40                            loc_5B42:
00005B40 1342 001A                  		move.b	d2,$1A(a1)
00005B44 5229 001A                  		addq.b	#1,$1A(a1)
00005B48 5202                       		addq.b	#1,d2
00005B4A 137C 0080 0026             		move.b	#$80,$26(a1)
00005B50 1343 001E                  		move.b	d3,$1E(a1)
00005B54 1343 001F                  		move.b	d3,$1F(a1)
00005B58 0643 000A                  		addi.w	#$A,d3
00005B5C 43E9 0040                  		lea	$40(a1),a1
00005B60 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B64                            
00005B64                            Obj8C_Move:				; XREF: Obj8C_Index
00005B64 4A68 003E                  		tst.w	$3E(a0)
00005B68 6700                       		beq.s	locret_5BBA
00005B6A 4A28 001E                  		tst.b	$1E(a0)
00005B6E 6700                       		beq.s	loc_5B78
00005B70 5328 001E                  		subq.b	#1,$1E(a0)
00005B74 6600                       		bne.s	loc_5B80
00005B76                            
00005B76                            loc_5B78:
00005B76 3028 003E                  		move.w	$3E(a0),d0
00005B7A D168 0026                  		add.w	d0,$26(a0)
00005B7E                            
00005B7E                            loc_5B80:
00005B7E 1028 0026                  		move.b	$26(a0),d0
00005B82 6700                       		beq.s	loc_5B8C
00005B84 0C00 0080                  		cmpi.b	#$80,d0
00005B88 6600                       		bne.s	loc_5B96
00005B8A                            
00005B8A                            loc_5B8C:
00005B8A 4268 003E                  		clr.w	$3E(a0)
00005B8E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B94                            
00005B94                            loc_5B96:
00005B94 4EB9 0000 29BA             		jsr	(CalcSine).l
00005B9A 7800                       		moveq	#0,d4
00005B9C 1828 003C                  		move.b	$3C(a0),d4
00005BA0 C3C4                       		muls.w	d4,d1
00005BA2 E081                       		asr.l	#8,d1
00005BA4 C1C4                       		muls.w	d4,d0
00005BA6 E080                       		asr.l	#8,d0
00005BA8 D268 0038                  		add.w	$38(a0),d1
00005BAC D068 003A                  		add.w	$3A(a0),d0
00005BB0 3141 0008                  		move.w	d1,8(a0)
00005BB4 3140 000A                  		move.w	d0,$A(a0)
00005BB8                            
00005BB8                            locret_5BBA:
00005BB8 4E75                       		rts	
00005BBA                            ; ===========================================================================
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA                            Map_obj8B:
00005BBA                            	include "_maps\obj8B.asm"
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BBA                            ; ---------------------------------------------------------------------------
00005BBA 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BBE 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BC2 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BC6 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BCA 08                         byte_5BCC:	dc.b 8
00005BCB E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BD0 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BD5 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BDA F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BDF 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BE4 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BE9 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BEE 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BF3 08                         byte_5BF5:	dc.b 8
00005BF4 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BF9 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BFE E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005C03 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C08 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C0D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C12 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C17 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C1C 08                         byte_5C1E:	dc.b 8
00005C1D E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C22 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C27 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C2C F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C31 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C36 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C3B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C40 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C45 08                         byte_5C47:	dc.b 8
00005C46 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C4B F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C50 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C55 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C5A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C5F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C64 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C69 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C6E 0C                         byte_5C70:	dc.b $C
00005C6F ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C74 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C79 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C7E 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C83 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C88 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C8D 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C92 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C97 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C9C 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005CA1 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CA6 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CAB 0A                         byte_5CAD:	dc.b $A
00005CAC D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CB1 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CB6 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CBB D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CC0 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CC5 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CCA 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CCF 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CD4 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CD9 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CDE 0A                         byte_5CE0:	dc.b $A
00005CDF C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CE4 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CE9 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CEE C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CF3 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CF8 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CFD 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D02 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D07 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D0C 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D11 0C                         byte_5D13:	dc.b $C
00005D12 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D17 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D1C 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D21 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D26 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D2B FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D30 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D35 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D3A 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D3F 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D44 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D49 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D4E                            		even
00005D4E                            		even
00005D4E                            
00005D4E                            ; ---------------------------------------------------------------------------
00005D4E                            ; Ending sequence demos
00005D4E                            ; ---------------------------------------------------------------------------
00005D4E                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D7C                            		even
00005D7C                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DBC                            		even
00005DBC                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DEC                            		even
00005DEC                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E1C                            		even
00005E1C                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E3C                            		even
00005E3C                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E5C                            		even
00005E5C                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E8C                            		even
00005E8C                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EBC                            		even
00005EBC                            
00005EBC                            ; ---------------------------------------------------------------------------
00005EBC                            ; Subroutine to	load level boundaries and start	locations
00005EBC                            ; ---------------------------------------------------------------------------
00005EBC                            
00005EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EBC                            
00005EBC                            
00005EBC                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EBC 7000                       		moveq	#0,d0
00005EBE 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EC2 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EC6 11C0 F746                  		move.b	d0,($FFFFF746).w
00005ECA 11C0 F748                  		move.b	d0,($FFFFF748).w
00005ECE 11C0 F742                  		move.b	d0,($FFFFF742).w
00005ED2 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005ED6 ED08                       		lsl.b	#6,d0
00005ED8 E848                       		lsr.w	#4,d0
00005EDA 3200                       		move.w	d0,d1
00005EDC D040                       		add.w	d0,d0
00005EDE D041                       		add.w	d1,d0
00005EE0 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EE4 3018                       		move.w	(a0)+,d0
00005EE6 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EEA 2018                       		move.l	(a0)+,d0
00005EEC 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EF0 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EF4 2018                       		move.l	(a0)+,d0
00005EF6 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005EFA 21C0 F724                  		move.l	d0,($FFFFF724).w
00005EFE 3038 F728                  		move.w	($FFFFF728).w,d0
00005F02 0640 0240                  		addi.w	#$240,d0
00005F06 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F0A 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F10 3018                       		move.w	(a0)+,d0
00005F12 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F16 6000 0000                  		bra.w	LevSz_ChkLamp
00005F1A                            ; ===========================================================================
00005F1A                            ; ---------------------------------------------------------------------------
00005F1A                            ; Level size array and ending start location array
00005F1A                            ; ---------------------------------------------------------------------------
00005F1A                            LevelSizeArray:	   ; GHZ
00005F1A 0004 0000 3E20 0000 0300+          dc.w $0004, $0000, $3E20, $0000, $0300, $0060 ; Act 1
00005F26 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00005F32 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00005F3E 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00005F4A                                    ; LZ
00005F4A 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00005F56 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00005F62 0004 0000 202F FF00 0800+          dc.w $0004, $0000, $202F, $FF00, $0800, $0060 ; Act 3
00005F6E 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00005F7A                                    ; MZ
00005F7A 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00005F86 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00005F92 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00005F9E 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00005FAA                                    ; SLZ
00005FAA 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00005FB6 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00005FC2 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00005FCE 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00005FDA                                    ; SYZ
00005FDA 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00005FE6 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00005FF2 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00005FFE 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000600A                                    ; SBZ
0000600A 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006016 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006022 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000602E 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000603A                                    ; Ending
0000603A 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006046 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006052 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
0000605E 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
0000606A                                    even
0000606A                            
0000606A                            EndingStLocArray:
0000606A                            		incbin	misc\sloc_end.bin
0000608A                            		even
0000608A                            
0000608A                            ; ===========================================================================
0000608A                            
0000608A                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000608A 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000608E 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006090 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006096 3238 D008                  		move.w	($FFFFD008).w,d1
0000609A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000609E 6000                       		bra.s	loc_60D0
000060A0                            ; ===========================================================================
000060A0                            
000060A0                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000060A0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060A4 ED08                       		lsl.b	#6,d0
000060A6 E848                       		lsr.w	#4,d0
000060A8 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060AC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060B0 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060B2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060B6 5340                       		subq.w	#1,d0
000060B8 E548                       		lsl.w	#2,d0
000060BA 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060BE                            
000060BE                            LevSz_SonicPos:
000060BE 7200                       		moveq	#0,d1
000060C0 3219                       		move.w	(a1)+,d1
000060C2 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060C6 7000                       		moveq	#0,d0
000060C8 3011                       		move.w	(a1),d0
000060CA 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060CE                            
000060CE                            loc_60D0:				; XREF: LevSz_ChkLamp
000060CE 0441 00A0                  		subi.w	#$A0,d1
000060D2 6400                       		bcc.s	loc_60D8
000060D4 7200                       		moveq	#0,d1
000060D6                            
000060D6                            loc_60D8:
000060D6 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060DA B242                       		cmp.w	d2,d1
000060DC 6500                       		bcs.s	loc_60E2
000060DE 3202                       		move.w	d2,d1
000060E0                            
000060E0                            loc_60E2:
000060E0 31C1 F700                  		move.w	d1,($FFFFF700).w
000060E4 0440 0060                  		subi.w	#$60,d0
000060E8 6400                       		bcc.s	loc_60EE
000060EA 7000                       		moveq	#0,d0
000060EC                            
000060EC                            loc_60EE:
000060EC B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060F0 6D00                       		blt.s	loc_60F8
000060F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060F6                            
000060F6                            loc_60F8:
000060F6 31C0 F704                  		move.w	d0,($FFFFF704).w
000060FA 6100 0000                  		bsr.w	BgScrollSpeed
000060FE 7000                       		moveq	#0,d0
00006100 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006104 E508                       		lsl.b	#2,d0
00006106 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000610C 6000 0000                  		bra.w	LevSz_Unk
00006110                            ; ===========================================================================
00006110                            ; ---------------------------------------------------------------------------
00006110                            ; Sonic	start location array
00006110                            ; ---------------------------------------------------------------------------
00006110                            StartLocArray:	incbin	misc\sloc_lev.bin
00006180                            		even
00006180                            
00006180                            ; ---------------------------------------------------------------------------
00006180                            ; Which	256x256	tiles contain loops or roll-tunnels
00006180                            ; ---------------------------------------------------------------------------
00006180                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006180                            ; loop,	loop, tunnel, tunnel
00006180                            ; ---------------------------------------------------------------------------
00006180                            LoopTileNums:	incbin	misc\loopnums.bin
0000619C                            		even
0000619C                            
0000619C                            ; ===========================================================================
0000619C                            
0000619C                            LevSz_Unk:				; XREF: LevelSizeLoad
0000619C 7000                       		moveq	#0,d0
0000619E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000061A2 E748                       		lsl.w	#3,d0
000061A4 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000061A8 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061AC 24D9                       		move.l	(a1)+,(a2)+
000061AE 24D9                       		move.l	(a1)+,(a2)+
000061B0 4E75                       		rts	
000061B2                            ; End of function LevelSizeLoad
000061B2                            
000061B2                            ; ===========================================================================
000061B2 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061BA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061CA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061DA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061E2 0070 0100 0100 0100        		dc.l $700100, $1000100
000061EA                            
000061EA                            ; ---------------------------------------------------------------------------
000061EA                            ; Subroutine to	set scroll speed of some backgrounds
000061EA                            ; ---------------------------------------------------------------------------
000061EA                            
000061EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061EA                            
000061EA                            
000061EA                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061EA 4A38 FE30                  		tst.b	($FFFFFE30).w
000061EE 6600                       		bne.s	loc_6206
000061F0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061F4 31C0 F714                  		move.w	d0,($FFFFF714).w
000061F8 31C1 F708                  		move.w	d1,($FFFFF708).w
000061FC 31C1 F710                  		move.w	d1,($FFFFF710).w
00006200 31C1 F718                  		move.w	d1,($FFFFF718).w
00006204                            
00006204                            loc_6206:
00006204 7400                       		moveq	#0,d2
00006206 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000620A D442                       		add.w	d2,d2
0000620C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006210 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006214                            ; End of function BgScrollSpeed
00006214                            
00006214                            ; ===========================================================================
00006214 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006218 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000621C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006220 0000                       		dc.w BgScroll_End-BgScroll_Index
00006222                            ; ===========================================================================
00006222                            
00006222                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006222 6000 0000                  		bra.w	Deform_GHZ
00006226                            ; ===========================================================================
00006226                            
00006226                            BgScroll_LZ:				; XREF: BgScroll_Index
00006226 E280                       		asr.l	#1,d0
00006228 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000622C 4E75                       		rts	
0000622E                            ; ===========================================================================
0000622E                            
0000622E                            BgScroll_MZ:				; XREF: BgScroll_Index
0000622E 4E75                       		rts	
00006230                            ; ===========================================================================
00006230                            
00006230                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006230 E280                       		asr.l	#1,d0
00006232 0640 00C0                  		addi.w	#$C0,d0
00006236 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000623A 4E75                       		rts	
0000623C                            ; ===========================================================================
0000623C                            
0000623C                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000623C E980                       		asl.l	#4,d0
0000623E 2400                       		move.l	d0,d2
00006240 E380                       		asl.l	#1,d0
00006242 D082                       		add.l	d2,d0
00006244 E080                       		asr.l	#8,d0
00006246 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000624A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000624E 4E75                       		rts	
00006250                            ; ===========================================================================
00006250                            
00006250                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006250 E980                       		asl.l	#4,d0
00006252 E380                       		asl.l	#1,d0
00006254 E080                       		asr.l	#8,d0
00006256 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000625A 4E75                       		rts	
0000625C                            ; ===========================================================================
0000625C                            
0000625C                            BgScroll_End:				; XREF: BgScroll_Index
0000625C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006262 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006268 4E75                       		rts	
0000626A                            ; ===========================================================================
0000626A 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006270 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006276 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000627C 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006282 4E75                       		rts
00006284                            
00006284                            ; ---------------------------------------------------------------------------
00006284                            ; Background layer deformation subroutines
00006284                            ; ---------------------------------------------------------------------------
00006284                            
00006284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006284                            
00006284                            
00006284                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006284 4A38 F744                  		tst.b	($FFFFF744).w
00006288 6700                       		beq.s	loc_628E
0000628A 4E75                       		rts	
0000628C                            ; ===========================================================================
0000628C                            
0000628C                            loc_628E:
0000628C 4278 F754                  		clr.w	($FFFFF754).w
00006290 4278 F756                  		clr.w	($FFFFF756).w
00006294 4278 F758                  		clr.w	($FFFFF758).w
00006298 4278 F75A                  		clr.w	($FFFFF75A).w
0000629C 6100 0000                  		bsr.w	ScrollHoriz
000062A0 6100 0000                  		bsr.w	ScrollVertical
000062A4 6100 0000                  		bsr.w	DynScrResizeLoad
000062A8 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062AE 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062B4 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062BA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062C0 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062C6 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062CC 7000                       		moveq	#0,d0
000062CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062D2 D040                       		add.w	d0,d0
000062D4 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062D8 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062DC                            ; End of function DeformBgLayer
000062DC                            
000062DC                            ; ===========================================================================
000062DC                            ; ---------------------------------------------------------------------------
000062DC                            ; Offset index for background layer deformation	code
000062DC                            ; ---------------------------------------------------------------------------
000062DC 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062E0 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062E4 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062E8 0000                       		dc.w Deform_GHZ-Deform_Index
000062EA                            ; ---------------------------------------------------------------------------
000062EA                            ; Green	Hill Zone background layer deformation code
000062EA                            ; ---------------------------------------------------------------------------
000062EA                            
000062EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062EA                            
000062EA                            
000062EA                            Deform_GHZ:				; XREF: Deform_Index
000062EA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062EE 48C4                       		ext.l	d4
000062F0 EB84                       		asl.l	#5,d4
000062F2 2204                       		move.l	d4,d1
000062F4 E384                       		asl.l	#1,d4
000062F6 D881                       		add.l	d1,d4
000062F8 7A00                       		moveq	#0,d5
000062FA 6100 0000                  		bsr.w	ScrollBlock1
000062FE 6100 0000                  		bsr.w	ScrollBlock4
00006302 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006306 3038 F704                  		move.w	($FFFFF704).w,d0
0000630A 0240 07FF                  		andi.w	#$7FF,d0
0000630E EA48                       		lsr.w	#5,d0
00006310 4440                       		neg.w	d0
00006312 0640 0026                  		addi.w	#$26,d0
00006316 31C0 F714                  		move.w	d0,($FFFFF714).w
0000631A 3800                       		move.w	d0,d4
0000631C 6100 0000                  		bsr.w	ScrollBlock3
00006320 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006326 323C 006F                  		move.w	#$6F,d1
0000632A 9244                       		sub.w	d4,d1
0000632C 3038 F700                  		move.w	($FFFFF700).w,d0
00006330 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006336 6600                       		bne.s	loc_633C
00006338 7000                       		moveq	#0,d0
0000633A                            
0000633A                            loc_633C:
0000633A 4440                       		neg.w	d0
0000633C 4840                       		swap	d0
0000633E 3038 F708                  		move.w	($FFFFF708).w,d0
00006342 4440                       		neg.w	d0
00006344                            
00006344                            loc_6346:
00006344 22C0                       		move.l	d0,(a1)+
00006346 51C9 FFFC                  		dbf	d1,loc_6346
0000634A 323C 0027                  		move.w	#$27,d1
0000634E 3038 F710                  		move.w	($FFFFF710).w,d0
00006352 4440                       		neg.w	d0
00006354                            
00006354                            loc_6356:
00006354 22C0                       		move.l	d0,(a1)+
00006356 51C9 FFFC                  		dbf	d1,loc_6356
0000635A 3038 F710                  		move.w	($FFFFF710).w,d0
0000635E 0640 0000                  		addi.w	#0,d0
00006362 3438 F700                  		move.w	($FFFFF700).w,d2
00006366 0642 FE00                  		addi.w	#-$200,d2
0000636A 9440                       		sub.w	d0,d2
0000636C 48C2                       		ext.l	d2
0000636E E182                       		asl.l	#8,d2
00006370 85FC 0068                  		divs.w	#$68,d2
00006374 48C2                       		ext.l	d2
00006376 E182                       		asl.l	#8,d2
00006378 7600                       		moveq	#0,d3
0000637A 3600                       		move.w	d0,d3
0000637C 323C 0047                  		move.w	#$47,d1
00006380 D244                       		add.w	d4,d1
00006382                            
00006382                            loc_6384:
00006382 3003                       		move.w	d3,d0
00006384 4440                       		neg.w	d0
00006386 22C0                       		move.l	d0,(a1)+
00006388 4843                       		swap	d3
0000638A D682                       		add.l	d2,d3
0000638C 4843                       		swap	d3
0000638E 51C9 FFF2                  		dbf	d1,loc_6384
00006392 4E75                       		rts	
00006394                            ; End of function Deform_GHZ
00006394                            
00006394                            ; ---------------------------------------------------------------------------
00006394                            ; Labyrinth Zone background layer deformation code
00006394                            ; ---------------------------------------------------------------------------
00006394                            
00006394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006394                            
00006394                            
00006394                            Deform_LZ:				; XREF: Deform_Index
00006394 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006398 48C4                       		ext.l	d4
0000639A EF84                       		asl.l	#7,d4
0000639C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000063A0 48C5                       		ext.l	d5
000063A2 EF85                       		asl.l	#7,d5
000063A4 6100 0000                  		bsr.w	ScrollBlock1
000063A8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063AE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063B2 323C 00DF                  		move.w	#$DF,d1
000063B6 3038 F700                  		move.w	($FFFFF700).w,d0
000063BA 4440                       		neg.w	d0
000063BC 4840                       		swap	d0
000063BE 3038 F708                  		move.w	($FFFFF708).w,d0
000063C2 4440                       		neg.w	d0
000063C4                            
000063C4                            loc_63C6:
000063C4 22C0                       		move.l	d0,(a1)+
000063C6 51C9 FFFC                  		dbf	d1,loc_63C6
000063CA 3038 F646                  		move.w	($FFFFF646).w,d0
000063CE 9078 F704                  		sub.w	($FFFFF704).w,d0
000063D2 4E75                       		rts	
000063D4                            ; End of function Deform_LZ
000063D4                            
000063D4                            ; ---------------------------------------------------------------------------
000063D4                            ; Marble Zone background layer deformation code
000063D4                            ; ---------------------------------------------------------------------------
000063D4                            
000063D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D4                            
000063D4                            
000063D4                            Deform_MZ:				; XREF: Deform_Index
000063D4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063D8 48C4                       		ext.l	d4
000063DA ED84                       		asl.l	#6,d4
000063DC 2204                       		move.l	d4,d1
000063DE E384                       		asl.l	#1,d4
000063E0 D881                       		add.l	d1,d4
000063E2 7A00                       		moveq	#0,d5
000063E4 6100 0000                  		bsr.w	ScrollBlock1
000063E8 303C 0200                  		move.w	#$200,d0
000063EC 3238 F704                  		move.w	($FFFFF704).w,d1
000063F0 0441 01C8                  		subi.w	#$1C8,d1
000063F4 6500                       		bcs.s	loc_6402
000063F6 3401                       		move.w	d1,d2
000063F8 D241                       		add.w	d1,d1
000063FA D242                       		add.w	d2,d1
000063FC E441                       		asr.w	#2,d1
000063FE D041                       		add.w	d1,d0
00006400                            
00006400                            loc_6402:
00006400 31C0 F714                  		move.w	d0,($FFFFF714).w
00006404 6100 0000                  		bsr.w	ScrollBlock3
00006408 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000640E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006412 323C 00DF                  		move.w	#$DF,d1
00006416 3038 F700                  		move.w	($FFFFF700).w,d0
0000641A 4440                       		neg.w	d0
0000641C 4840                       		swap	d0
0000641E 3038 F708                  		move.w	($FFFFF708).w,d0
00006422 4440                       		neg.w	d0
00006424                            
00006424                            loc_6426:
00006424 22C0                       		move.l	d0,(a1)+
00006426 51C9 FFFC                  		dbf	d1,loc_6426
0000642A 4E75                       		rts	
0000642C                            ; End of function Deform_MZ
0000642C                            
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            ; Star Light Zone background layer deformation code
0000642C                            ; ---------------------------------------------------------------------------
0000642C                            
0000642C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000642C                            
0000642C                            
0000642C                            Deform_SLZ:				; XREF: Deform_Index
0000642C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006430 48C4                       		ext.l	d4
00006432 EF84                       		asl.l	#7,d4
00006434 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006438 48C5                       		ext.l	d5
0000643A EF85                       		asl.l	#7,d5
0000643C 6100 0000                  		bsr.w	ScrollBlock2
00006440 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006446 6100 0000                  		bsr.w	Deform_SLZ_2
0000644A 45F8 A800                  		lea	($FFFFA800).w,a2
0000644E 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006452 3400                       		move.w	d0,d2
00006454 0440 00C0                  		subi.w	#$C0,d0
00006458 0240 03F0                  		andi.w	#$3F0,d0
0000645C E648                       		lsr.w	#3,d0
0000645E 45F2 0000                  		lea	(a2,d0.w),a2
00006462 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006466 323C 000E                  		move.w	#$E,d1
0000646A 3038 F700                  		move.w	($FFFFF700).w,d0
0000646E 4440                       		neg.w	d0
00006470 4840                       		swap	d0
00006472 0242 000F                  		andi.w	#$F,d2
00006476 D442                       		add.w	d2,d2
00006478 301A                       		move.w	(a2)+,d0
0000647A 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
0000647E                            ; ===========================================================================
0000647E                            
0000647E                            loc_6480:				; XREF: Deform_SLZ
0000647E 301A                       		move.w	(a2)+,d0
00006480                            
00006480                            loc_6482:
00006480 22C0                       		move.l	d0,(a1)+
00006482 22C0                       		move.l	d0,(a1)+
00006484 22C0                       		move.l	d0,(a1)+
00006486 22C0                       		move.l	d0,(a1)+
00006488 22C0                       		move.l	d0,(a1)+
0000648A 22C0                       		move.l	d0,(a1)+
0000648C 22C0                       		move.l	d0,(a1)+
0000648E 22C0                       		move.l	d0,(a1)+
00006490 22C0                       		move.l	d0,(a1)+
00006492 22C0                       		move.l	d0,(a1)+
00006494 22C0                       		move.l	d0,(a1)+
00006496 22C0                       		move.l	d0,(a1)+
00006498 22C0                       		move.l	d0,(a1)+
0000649A 22C0                       		move.l	d0,(a1)+
0000649C 22C0                       		move.l	d0,(a1)+
0000649E 22C0                       		move.l	d0,(a1)+
000064A0 51C9 FFDC                  		dbf	d1,loc_6480
000064A4 4E75                       		rts	
000064A6                            ; End of function Deform_SLZ
000064A6                            
000064A6                            
000064A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064A6                            
000064A6                            
000064A6                            Deform_SLZ_2:				; XREF: Deform_SLZ
000064A6 43F8 A800                  		lea	($FFFFA800).w,a1
000064AA 3438 F700                  		move.w	($FFFFF700).w,d2
000064AE 4442                       		neg.w	d2
000064B0 3002                       		move.w	d2,d0
000064B2 E640                       		asr.w	#3,d0
000064B4 9042                       		sub.w	d2,d0
000064B6 48C0                       		ext.l	d0
000064B8 E980                       		asl.l	#4,d0
000064BA 81FC 001C                  		divs.w	#$1C,d0
000064BE 48C0                       		ext.l	d0
000064C0 E980                       		asl.l	#4,d0
000064C2 E180                       		asl.l	#8,d0
000064C4 7600                       		moveq	#0,d3
000064C6 3602                       		move.w	d2,d3
000064C8 323C 001B                  		move.w	#$1B,d1
000064CC                            
000064CC                            loc_64CE:
000064CC 32C3                       		move.w	d3,(a1)+
000064CE 4843                       		swap	d3
000064D0 D680                       		add.l	d0,d3
000064D2 4843                       		swap	d3
000064D4 51C9 FFF6                  		dbf	d1,loc_64CE
000064D8 3002                       		move.w	d2,d0
000064DA E640                       		asr.w	#3,d0
000064DC 323C 0004                  		move.w	#4,d1
000064E0                            
000064E0                            loc_64E2:
000064E0 32C0                       		move.w	d0,(a1)+
000064E2 51C9 FFFC                  		dbf	d1,loc_64E2
000064E6 3002                       		move.w	d2,d0
000064E8 E440                       		asr.w	#2,d0
000064EA 323C 0004                  		move.w	#4,d1
000064EE                            
000064EE                            loc_64F0:
000064EE 32C0                       		move.w	d0,(a1)+
000064F0 51C9 FFFC                  		dbf	d1,loc_64F0
000064F4 3002                       		move.w	d2,d0
000064F6 E240                       		asr.w	#1,d0
000064F8 323C 001D                  		move.w	#$1D,d1
000064FC                            
000064FC                            loc_64FE:
000064FC 32C0                       		move.w	d0,(a1)+
000064FE 51C9 FFFC                  		dbf	d1,loc_64FE
00006502 4E75                       		rts	
00006504                            ; End of function Deform_SLZ_2
00006504                            
00006504                            ; ---------------------------------------------------------------------------
00006504                            ; Spring Yard Zone background layer deformation	code
00006504                            ; ---------------------------------------------------------------------------
00006504                            
00006504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006504                            
00006504                            
00006504                            Deform_SYZ:				; XREF: Deform_Index
00006504 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006508 48C4                       		ext.l	d4
0000650A ED84                       		asl.l	#6,d4
0000650C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006510 48C5                       		ext.l	d5
00006512 E985                       		asl.l	#4,d5
00006514 2205                       		move.l	d5,d1
00006516 E385                       		asl.l	#1,d5
00006518 DA81                       		add.l	d1,d5
0000651A 6100 0000                  		bsr.w	ScrollBlock1
0000651E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006524 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006528 323C 00DF                  		move.w	#$DF,d1
0000652C 3038 F700                  		move.w	($FFFFF700).w,d0
00006530 4440                       		neg.w	d0
00006532 4840                       		swap	d0
00006534 3038 F708                  		move.w	($FFFFF708).w,d0
00006538 4440                       		neg.w	d0
0000653A                            
0000653A                            loc_653C:
0000653A 22C0                       		move.l	d0,(a1)+
0000653C 51C9 FFFC                  		dbf	d1,loc_653C
00006540 4E75                       		rts	
00006542                            ; End of function Deform_SYZ
00006542                            
00006542                            ; ---------------------------------------------------------------------------
00006542                            ; Scrap	Brain Zone background layer deformation	code
00006542                            ; ---------------------------------------------------------------------------
00006542                            
00006542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006542                            
00006542                            
00006542                            Deform_SBZ:				; XREF: Deform_Index
00006542 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006546 48C4                       		ext.l	d4
00006548 ED84                       		asl.l	#6,d4
0000654A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000654E 48C5                       		ext.l	d5
00006550 E985                       		asl.l	#4,d5
00006552 E385                       		asl.l	#1,d5
00006554 6100 0000                  		bsr.w	ScrollBlock1
00006558 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000655E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006562 323C 00DF                  		move.w	#$DF,d1
00006566 3038 F700                  		move.w	($FFFFF700).w,d0
0000656A 4440                       		neg.w	d0
0000656C 4840                       		swap	d0
0000656E 3038 F708                  		move.w	($FFFFF708).w,d0
00006572 4440                       		neg.w	d0
00006574                            
00006574                            loc_6576:
00006574 22C0                       		move.l	d0,(a1)+
00006576 51C9 FFFC                  		dbf	d1,loc_6576
0000657A 4E75                       		rts	
0000657C                            ; End of function Deform_SBZ
0000657C                            
0000657C                            ; ---------------------------------------------------------------------------
0000657C                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000657C                            ; ---------------------------------------------------------------------------
0000657C                            
0000657C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000657C                            
0000657C                            
0000657C                            ScrollHoriz:				; XREF: DeformBgLayer
0000657C 3838 F700                  		move.w	($FFFFF700).w,d4
00006580 6100                       		bsr.s	ScrollHoriz2
00006582 3038 F700                  		move.w	($FFFFF700).w,d0
00006586 0240 0010                  		andi.w	#$10,d0
0000658A 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000658E B300                       		eor.b	d1,d0
00006590 6600                       		bne.s	locret_65B0
00006592 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006598 3038 F700                  		move.w	($FFFFF700).w,d0
0000659C 9044                       		sub.w	d4,d0
0000659E 6A00                       		bpl.s	loc_65AA
000065A0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000065A6 4E75                       		rts	
000065A8                            ; ===========================================================================
000065A8                            
000065A8                            loc_65AA:
000065A8 08F8 0003 F754             		bset	#3,($FFFFF754).w
000065AE                            
000065AE                            locret_65B0:
000065AE 4E75                       		rts	
000065B0                            ; End of function ScrollHoriz
000065B0                            
000065B0                            
000065B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B0                            
000065B0                            
000065B0                            ScrollHoriz2:				; XREF: ScrollHoriz
000065B0 3038 D008                  		move.w	($FFFFD008).w,d0
000065B4 9078 F700                  		sub.w	($FFFFF700).w,d0
000065B8 0440 0090                  		subi.w	#$90,d0
000065BC 6500                       		bcs.s	loc_65F6
000065BE 0440 0010                  		subi.w	#$10,d0
000065C2 6400                       		bcc.s	loc_65CC
000065C4 4278 F73A                  		clr.w	($FFFFF73A).w
000065C8 4E75                       		rts	
000065CA                            ; ===========================================================================
000065CA                            
000065CA                            loc_65CC:
000065CA 0C40 0010                  		cmpi.w	#$10,d0
000065CE 6500                       		bcs.s	loc_65D6
000065D0 303C 0010                  		move.w	#$10,d0
000065D4                            
000065D4                            loc_65D6:
000065D4 D078 F700                  		add.w	($FFFFF700).w,d0
000065D8 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000065DC 6D00                       		blt.s	loc_65E4
000065DE 3038 F72A                  		move.w	($FFFFF72A).w,d0
000065E2                            
000065E2                            loc_65E4:
000065E2 3200                       		move.w	d0,d1
000065E4 9278 F700                  		sub.w	($FFFFF700).w,d1
000065E8 E141                       		asl.w	#8,d1
000065EA 31C0 F700                  		move.w	d0,($FFFFF700).w
000065EE 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000065F2 4E75                       		rts	
000065F4                            ; ===========================================================================
000065F4                            
000065F4                            loc_65F6:				; XREF: ScrollHoriz2
000065F4 D078 F700                  		add.w	($FFFFF700).w,d0
000065F8 B078 F728                  		cmp.w	($FFFFF728).w,d0
000065FC 6EE4                       		bgt.s	loc_65E4
000065FE 3038 F728                  		move.w	($FFFFF728).w,d0
00006602 60DE                       		bra.s	loc_65E4
00006604                            ; End of function ScrollHoriz2
00006604                            
00006604                            ; ===========================================================================
00006604 4A40                       		tst.w	d0
00006606 6A00                       		bpl.s	loc_6610
00006608 303C FFFE                  		move.w	#-2,d0
0000660C 60E6                       		bra.s	loc_65F6
0000660E                            ; ===========================================================================
0000660E                            
0000660E                            loc_6610:
0000660E 303C 0002                  		move.w	#2,d0
00006612 60B6                       		bra.s	loc_65CC
00006614                            
00006614                            ; ---------------------------------------------------------------------------
00006614                            ; Subroutine to	scroll the level vertically as Sonic moves
00006614                            ; ---------------------------------------------------------------------------
00006614                            
00006614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006614                            
00006614                            
00006614                            ScrollVertical:				; XREF: DeformBgLayer
00006614 7200                       		moveq	#0,d1
00006616 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000661A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000661E 0838 0002 D022             		btst	#2,($FFFFD022).w
00006624 6700                       		beq.s	loc_662A
00006626 5B40                       		subq.w	#5,d0
00006628                            
00006628                            loc_662A:
00006628 0838 0001 D022             		btst	#1,($FFFFD022).w
0000662E 6700                       		beq.s	loc_664A
00006630 0640 0020                  		addi.w	#$20,d0
00006634 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006638 6500                       		bcs.s	loc_6696
0000663A 0440 0040                  		subi.w	#$40,d0
0000663E 6400                       		bcc.s	loc_6696
00006640 4A38 F75C                  		tst.b	($FFFFF75C).w
00006644 6600                       		bne.s	loc_66A8
00006646 6000                       		bra.s	loc_6656
00006648                            ; ===========================================================================
00006648                            
00006648                            loc_664A:
00006648 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000664C 6600                       		bne.s	loc_665C
0000664E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006652 6600                       		bne.s	loc_66A8
00006654                            
00006654                            loc_6656:
00006654 4278 F73C                  		clr.w	($FFFFF73C).w
00006658 4E75                       		rts	
0000665A                            ; ===========================================================================
0000665A                            
0000665A                            loc_665C:
0000665A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006660 6600                       		bne.s	loc_6684
00006662 3238 D014                  		move.w	($FFFFD014).w,d1
00006666 6A00                       		bpl.s	loc_666C
00006668 4441                       		neg.w	d1
0000666A                            
0000666A                            loc_666C:
0000666A 0C41 0800                  		cmpi.w	#$800,d1
0000666E 6400                       		bcc.s	loc_6696
00006670 323C 0600                  		move.w	#$600,d1
00006674 0C40 0006                  		cmpi.w	#6,d0
00006678 6E00                       		bgt.s	loc_66F6
0000667A 0C40 FFFA                  		cmpi.w	#-6,d0
0000667E 6D00                       		blt.s	loc_66C0
00006680 6000                       		bra.s	loc_66AE
00006682                            ; ===========================================================================
00006682                            
00006682                            loc_6684:
00006682 323C 0200                  		move.w	#$200,d1
00006686 0C40 0002                  		cmpi.w	#2,d0
0000668A 6E00                       		bgt.s	loc_66F6
0000668C 0C40 FFFE                  		cmpi.w	#-2,d0
00006690 6D00                       		blt.s	loc_66C0
00006692 6000                       		bra.s	loc_66AE
00006694                            ; ===========================================================================
00006694                            
00006694                            loc_6696:
00006694 323C 1000                  		move.w	#$1000,d1
00006698 0C40 0010                  		cmpi.w	#$10,d0
0000669C 6E00                       		bgt.s	loc_66F6
0000669E 0C40 FFF0                  		cmpi.w	#-$10,d0
000066A2 6D00                       		blt.s	loc_66C0
000066A4 6000                       		bra.s	loc_66AE
000066A6                            ; ===========================================================================
000066A6                            
000066A6                            loc_66A8:
000066A6 7000                       		moveq	#0,d0
000066A8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000066AC                            
000066AC                            loc_66AE:
000066AC 7200                       		moveq	#0,d1
000066AE 3200                       		move.w	d0,d1
000066B0 D278 F704                  		add.w	($FFFFF704).w,d1
000066B4 4A40                       		tst.w	d0
000066B6 6A00 0000                  		bpl.w	loc_6700
000066BA 6000 0000                  		bra.w	loc_66CC
000066BE                            ; ===========================================================================
000066BE                            
000066BE                            loc_66C0:
000066BE 4441                       		neg.w	d1
000066C0 48C1                       		ext.l	d1
000066C2 E181                       		asl.l	#8,d1
000066C4 D2B8 F704                  		add.l	($FFFFF704).w,d1
000066C8 4841                       		swap	d1
000066CA                            
000066CA                            loc_66CC:
000066CA B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000066CE 6E00                       		bgt.s	loc_6724
000066D0 0C41 FF00                  		cmpi.w	#-$100,d1
000066D4 6E00                       		bgt.s	loc_66F0
000066D6 0241 07FF                  		andi.w	#$7FF,d1
000066DA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000066E0 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000066E6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000066EC 6000                       		bra.s	loc_6724
000066EE                            ; ===========================================================================
000066EE                            
000066EE                            loc_66F0:
000066EE 3238 F72C                  		move.w	($FFFFF72C).w,d1
000066F2 6000                       		bra.s	loc_6724
000066F4                            ; ===========================================================================
000066F4                            
000066F4                            loc_66F6:
000066F4 48C1                       		ext.l	d1
000066F6 E181                       		asl.l	#8,d1
000066F8 D2B8 F704                  		add.l	($FFFFF704).w,d1
000066FC 4841                       		swap	d1
000066FE                            
000066FE                            loc_6700:
000066FE B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006702 6D00                       		blt.s	loc_6724
00006704 0441 0800                  		subi.w	#$800,d1
00006708 6500                       		bcs.s	loc_6720
0000670A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006710 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006716 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000671C 6000                       		bra.s	loc_6724
0000671E                            ; ===========================================================================
0000671E                            
0000671E                            loc_6720:
0000671E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006722                            
00006722                            loc_6724:
00006722 3838 F704                  		move.w	($FFFFF704).w,d4
00006726 4841                       		swap	d1
00006728 2601                       		move.l	d1,d3
0000672A 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000672E E09B                       		ror.l	#8,d3
00006730 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006734 21C1 F704                  		move.l	d1,($FFFFF704).w
00006738 3038 F704                  		move.w	($FFFFF704).w,d0
0000673C 0240 0010                  		andi.w	#$10,d0
00006740 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006744 B300                       		eor.b	d1,d0
00006746 6600                       		bne.s	locret_6766
00006748 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000674E 3038 F704                  		move.w	($FFFFF704).w,d0
00006752 9044                       		sub.w	d4,d0
00006754 6A00                       		bpl.s	loc_6760
00006756 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000675C 4E75                       		rts	
0000675E                            ; ===========================================================================
0000675E                            
0000675E                            loc_6760:
0000675E 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006764                            
00006764                            locret_6766:
00006764 4E75                       		rts	
00006766                            ; End of function ScrollVertical
00006766                            
00006766                            
00006766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006766                            
00006766                            
00006766                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006766 2438 F708                  		move.l	($FFFFF708).w,d2
0000676A 2002                       		move.l	d2,d0
0000676C D084                       		add.l	d4,d0
0000676E 21C0 F708                  		move.l	d0,($FFFFF708).w
00006772 2200                       		move.l	d0,d1
00006774 4841                       		swap	d1
00006776 0241 0010                  		andi.w	#$10,d1
0000677A 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000677E B701                       		eor.b	d3,d1
00006780 6600                       		bne.s	loc_679C
00006782 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006788 9082                       		sub.l	d2,d0
0000678A 6A00                       		bpl.s	loc_6796
0000678C 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006792 6000                       		bra.s	loc_679C
00006794                            ; ===========================================================================
00006794                            
00006794                            loc_6796:
00006794 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000679A                            
0000679A                            loc_679C:
0000679A 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000679E 2003                       		move.l	d3,d0
000067A0 D085                       		add.l	d5,d0
000067A2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000067A6 2200                       		move.l	d0,d1
000067A8 4841                       		swap	d1
000067AA 0241 0010                  		andi.w	#$10,d1
000067AE 1438 F74D                  		move.b	($FFFFF74D).w,d2
000067B2 B501                       		eor.b	d2,d1
000067B4 6600                       		bne.s	locret_67D0
000067B6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000067BC 9083                       		sub.l	d3,d0
000067BE 6A00                       		bpl.s	loc_67CA
000067C0 08F8 0000 F756             		bset	#0,($FFFFF756).w
000067C6 4E75                       		rts	
000067C8                            ; ===========================================================================
000067C8                            
000067C8                            loc_67CA:
000067C8 08F8 0001 F756             		bset	#1,($FFFFF756).w
000067CE                            
000067CE                            locret_67D0:
000067CE 4E75                       		rts	
000067D0                            ; End of function ScrollBlock1
000067D0                            
000067D0                            
000067D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067D0                            
000067D0                            
000067D0                            ScrollBlock2:				; XREF: Deform_SLZ
000067D0 2438 F708                  		move.l	($FFFFF708).w,d2
000067D4 2002                       		move.l	d2,d0
000067D6 D084                       		add.l	d4,d0
000067D8 21C0 F708                  		move.l	d0,($FFFFF708).w
000067DC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000067E0 2003                       		move.l	d3,d0
000067E2 D085                       		add.l	d5,d0
000067E4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000067E8 2200                       		move.l	d0,d1
000067EA 4841                       		swap	d1
000067EC 0241 0010                  		andi.w	#$10,d1
000067F0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000067F4 B501                       		eor.b	d2,d1
000067F6 6600                       		bne.s	locret_6812
000067F8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000067FE 9083                       		sub.l	d3,d0
00006800 6A00                       		bpl.s	loc_680C
00006802 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006808 4E75                       		rts	
0000680A                            ; ===========================================================================
0000680A                            
0000680A                            loc_680C:
0000680A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006810                            
00006810                            locret_6812:
00006810 4E75                       		rts	
00006812                            ; End of function ScrollBlock2
00006812                            
00006812                            
00006812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006812                            
00006812                            
00006812                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006812 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006816 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000681A 3200                       		move.w	d0,d1
0000681C 0241 0010                  		andi.w	#$10,d1
00006820 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006824 B501                       		eor.b	d2,d1
00006826 6600                       		bne.s	locret_6842
00006828 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000682E 9043                       		sub.w	d3,d0
00006830 6A00                       		bpl.s	loc_683C
00006832 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006838 4E75                       		rts	
0000683A                            ; ===========================================================================
0000683A                            
0000683A                            loc_683C:
0000683A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006840                            
00006840                            locret_6842:
00006840 4E75                       		rts	
00006842                            ; End of function ScrollBlock3
00006842                            
00006842                            
00006842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006842                            
00006842                            
00006842                            ScrollBlock4:				; XREF: Deform_GHZ
00006842 3438 F710                  		move.w	($FFFFF710).w,d2
00006846 3638 F714                  		move.w	($FFFFF714).w,d3
0000684A 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000684E 48C0                       		ext.l	d0
00006850 EF80                       		asl.l	#7,d0
00006852 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006856 3038 F710                  		move.w	($FFFFF710).w,d0
0000685A 0240 0010                  		andi.w	#$10,d0
0000685E 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006862 B300                       		eor.b	d1,d0
00006864 6600                       		bne.s	locret_6884
00006866 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000686C 3038 F710                  		move.w	($FFFFF710).w,d0
00006870 9042                       		sub.w	d2,d0
00006872 6A00                       		bpl.s	loc_687E
00006874 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000687A 6000                       		bra.s	locret_6884
0000687C                            ; ===========================================================================
0000687C                            
0000687C                            loc_687E:
0000687C 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006882                            
00006882                            locret_6884:
00006882 4E75                       		rts	
00006884                            ; End of function ScrollBlock4
00006884                            
00006884                            
00006884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006884                            
00006884                            
00006884                            sub_6886:				; XREF: loc_C44
00006884 4BF9 00C0 0004             		lea	($C00004).l,a5
0000688A 4DF9 00C0 0000             		lea	($C00000).l,a6
00006890 45F8 F756                  		lea	($FFFFF756).w,a2
00006894 47F8 F708                  		lea	($FFFFF708).w,a3
00006898 49F8 A440                  		lea	($FFFFA440).w,a4
0000689C 343C 6000                  		move.w	#$6000,d2
000068A0 6100 0000                  		bsr.w	sub_6954
000068A4 45F8 F758                  		lea	($FFFFF758).w,a2
000068A8 47F8 F710                  		lea	($FFFFF710).w,a3
000068AC 6000 0000                  		bra.w	sub_69F4
000068B0                            ; End of function sub_6886
000068B0                            
000068B0                            ; ---------------------------------------------------------------------------
000068B0                            ; Subroutine to	display	correct	tiles as you move
000068B0                            ; ---------------------------------------------------------------------------
000068B0                            
000068B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B0                            
000068B0                            
000068B0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000068B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000068B6 4DF9 00C0 0000             		lea	($C00000).l,a6
000068BC 45F8 FF32                  		lea	($FFFFFF32).w,a2
000068C0 47F8 FF18                  		lea	($FFFFFF18).w,a3
000068C4 49F8 A440                  		lea	($FFFFA440).w,a4
000068C8 343C 6000                  		move.w	#$6000,d2
000068CC 6100 0000                  		bsr.w	sub_6954
000068D0 45F8 FF34                  		lea	($FFFFFF34).w,a2
000068D4 47F8 FF20                  		lea	($FFFFFF20).w,a3
000068D8 6100 0000                  		bsr.w	sub_69F4
000068DC 45F8 FF30                  		lea	($FFFFFF30).w,a2
000068E0 47F8 FF10                  		lea	($FFFFFF10).w,a3
000068E4 49F8 A400                  		lea	($FFFFA400).w,a4
000068E8 343C 4000                  		move.w	#$4000,d2
000068EC 4A12                       		tst.b	(a2)
000068EE 6700                       		beq.s	locret_6952
000068F0 0892 0000                  		bclr	#0,(a2)
000068F4 6700                       		beq.s	loc_6908
000068F6 78F0                       		moveq	#-$10,d4
000068F8 7AF0                       		moveq	#-$10,d5
000068FA 6100 0000                  		bsr.w	sub_6C20
000068FE 78F0                       		moveq	#-$10,d4
00006900 7AF0                       		moveq	#-$10,d5
00006902 6100 0000                  		bsr.w	sub_6AD8
00006906                            
00006906                            loc_6908:
00006906 0892 0001                  		bclr	#1,(a2)
0000690A 6700                       		beq.s	loc_6922
0000690C 383C 00E0                  		move.w	#$E0,d4
00006910 7AF0                       		moveq	#-$10,d5
00006912 6100 0000                  		bsr.w	sub_6C20
00006916 383C 00E0                  		move.w	#$E0,d4
0000691A 7AF0                       		moveq	#-$10,d5
0000691C 6100 0000                  		bsr.w	sub_6AD8
00006920                            
00006920                            loc_6922:
00006920 0892 0002                  		bclr	#2,(a2)
00006924 6700                       		beq.s	loc_6938
00006926 78F0                       		moveq	#-$10,d4
00006928 7AF0                       		moveq	#-$10,d5
0000692A 6100 0000                  		bsr.w	sub_6C20
0000692E 78F0                       		moveq	#-$10,d4
00006930 7AF0                       		moveq	#-$10,d5
00006932 6100 0000                  		bsr.w	sub_6B04
00006936                            
00006936                            loc_6938:
00006936 0892 0003                  		bclr	#3,(a2)
0000693A 6700                       		beq.s	locret_6952
0000693C 78F0                       		moveq	#-$10,d4
0000693E 3A3C 0140                  		move.w	#$140,d5
00006942 6100 0000                  		bsr.w	sub_6C20
00006946 78F0                       		moveq	#-$10,d4
00006948 3A3C 0140                  		move.w	#$140,d5
0000694C 6100 0000                  		bsr.w	sub_6B04
00006950                            
00006950                            locret_6952:
00006950 4E75                       		rts	
00006952                            ; End of function LoadTilesAsYouMove
00006952                            
00006952                            
00006952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006952                            
00006952                            
00006952                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006952 4A12                       		tst.b	(a2)
00006954 6700 0000                  		beq.w	locret_69F2
00006958 0892 0000                  		bclr	#0,(a2)
0000695C 6700                       		beq.s	loc_6972
0000695E 78F0                       		moveq	#-$10,d4
00006960 7AF0                       		moveq	#-$10,d5
00006962 6100 0000                  		bsr.w	sub_6C20
00006966 78F0                       		moveq	#-$10,d4
00006968 7AF0                       		moveq	#-$10,d5
0000696A 7C1F                       		moveq	#$1F,d6
0000696C 6100 0000                  		bsr.w	sub_6ADA
00006970                            
00006970                            loc_6972:
00006970 0892 0001                  		bclr	#1,(a2)
00006974 6700                       		beq.s	loc_698E
00006976 383C 00E0                  		move.w	#$E0,d4
0000697A 7AF0                       		moveq	#-$10,d5
0000697C 6100 0000                  		bsr.w	sub_6C20
00006980 383C 00E0                  		move.w	#$E0,d4
00006984 7AF0                       		moveq	#-$10,d5
00006986 7C1F                       		moveq	#$1F,d6
00006988 6100 0000                  		bsr.w	sub_6ADA
0000698C                            
0000698C                            loc_698E:
0000698C 0892 0002                  		bclr	#2,(a2)
00006990 6700                       		beq.s	loc_69BE
00006992 78F0                       		moveq	#-$10,d4
00006994 7AF0                       		moveq	#-$10,d5
00006996 6100 0000                  		bsr.w	sub_6C20
0000699A 78F0                       		moveq	#-$10,d4
0000699C 7AF0                       		moveq	#-$10,d5
0000699E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000069A2 322B 0004                  		move.w	4(a3),d1
000069A6 0241 FFF0                  		andi.w	#-$10,d1
000069AA 9C41                       		sub.w	d1,d6
000069AC 6D00                       		blt.s	loc_69BE
000069AE E84E                       		lsr.w	#4,d6
000069B0 0C46 000F                  		cmpi.w	#$F,d6
000069B4 6500                       		bcs.s	loc_69BA
000069B6 7C0F                       		moveq	#$F,d6
000069B8                            
000069B8                            loc_69BA:
000069B8 6100 0000                  		bsr.w	sub_6B06
000069BC                            
000069BC                            loc_69BE:
000069BC 0892 0003                  		bclr	#3,(a2)
000069C0 6700                       		beq.s	locret_69F2
000069C2 78F0                       		moveq	#-$10,d4
000069C4 3A3C 0140                  		move.w	#$140,d5
000069C8 6100 0000                  		bsr.w	sub_6C20
000069CC 78F0                       		moveq	#-$10,d4
000069CE 3A3C 0140                  		move.w	#$140,d5
000069D2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000069D6 322B 0004                  		move.w	4(a3),d1
000069DA 0241 FFF0                  		andi.w	#-$10,d1
000069DE 9C41                       		sub.w	d1,d6
000069E0 6D00                       		blt.s	locret_69F2
000069E2 E84E                       		lsr.w	#4,d6
000069E4 0C46 000F                  		cmpi.w	#$F,d6
000069E8 6500                       		bcs.s	loc_69EE
000069EA 7C0F                       		moveq	#$F,d6
000069EC                            
000069EC                            loc_69EE:
000069EC 6100 0000                  		bsr.w	sub_6B06
000069F0                            
000069F0                            locret_69F2:
000069F0 4E75                       		rts	
000069F2                            ; End of function sub_6954
000069F2                            
000069F2                            
000069F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069F2                            
000069F2                            
000069F2                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000069F2 4A12                       		tst.b	(a2)
000069F4 6700 0000                  		beq.w	locret_6A80
000069F8 0892 0002                  		bclr	#2,(a2)
000069FC 6700                       		beq.s	loc_6A3E
000069FE 0C53 0010                  		cmpi.w	#$10,(a3)
00006A02 6500                       		bcs.s	loc_6A3E
00006A04 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006A08 322B 0004                  		move.w	4(a3),d1
00006A0C 0241 FFF0                  		andi.w	#-$10,d1
00006A10 9841                       		sub.w	d1,d4
00006A12 3F04                       		move.w	d4,-(sp)
00006A14 7AF0                       		moveq	#-$10,d5
00006A16 6100 0000                  		bsr.w	sub_6C20
00006A1A 381F                       		move.w	(sp)+,d4
00006A1C 7AF0                       		moveq	#-$10,d5
00006A1E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A22 322B 0004                  		move.w	4(a3),d1
00006A26 0241 FFF0                  		andi.w	#-$10,d1
00006A2A 9C41                       		sub.w	d1,d6
00006A2C 6D00                       		blt.s	loc_6A3E
00006A2E E84E                       		lsr.w	#4,d6
00006A30 0446 000E                  		subi.w	#$E,d6
00006A34 6400                       		bcc.s	loc_6A3E
00006A36 4446                       		neg.w	d6
00006A38 6100 0000                  		bsr.w	sub_6B06
00006A3C                            
00006A3C                            loc_6A3E:
00006A3C 0892 0003                  		bclr	#3,(a2)
00006A40 6700                       		beq.s	locret_6A80
00006A42 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006A46 322B 0004                  		move.w	4(a3),d1
00006A4A 0241 FFF0                  		andi.w	#-$10,d1
00006A4E 9841                       		sub.w	d1,d4
00006A50 3F04                       		move.w	d4,-(sp)
00006A52 3A3C 0140                  		move.w	#$140,d5
00006A56 6100 0000                  		bsr.w	sub_6C20
00006A5A 381F                       		move.w	(sp)+,d4
00006A5C 3A3C 0140                  		move.w	#$140,d5
00006A60 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A64 322B 0004                  		move.w	4(a3),d1
00006A68 0241 FFF0                  		andi.w	#-$10,d1
00006A6C 9C41                       		sub.w	d1,d6
00006A6E 6D00                       		blt.s	locret_6A80
00006A70 E84E                       		lsr.w	#4,d6
00006A72 0446 000E                  		subi.w	#$E,d6
00006A76 6400                       		bcc.s	locret_6A80
00006A78 4446                       		neg.w	d6
00006A7A 6100 0000                  		bsr.w	sub_6B06
00006A7E                            
00006A7E                            locret_6A80:
00006A7E 4E75                       		rts	
00006A80                            ; End of function sub_69F4
00006A80                            
00006A80                            ; ===========================================================================
00006A80 4A12                       		tst.b	(a2)
00006A82 6700                       		beq.s	locret_6AD6
00006A84 0892 0002                  		bclr	#2,(a2)
00006A88 6700                       		beq.s	loc_6AAC
00006A8A 383C 00D0                  		move.w	#$D0,d4
00006A8E 322B 0004                  		move.w	4(a3),d1
00006A92 0241 FFF0                  		andi.w	#-$10,d1
00006A96 9841                       		sub.w	d1,d4
00006A98 3F04                       		move.w	d4,-(sp)
00006A9A 7AF0                       		moveq	#-$10,d5
00006A9C 6100 0000                  		bsr.w	sub_6C3C
00006AA0 381F                       		move.w	(sp)+,d4
00006AA2 7AF0                       		moveq	#-$10,d5
00006AA4 7C02                       		moveq	#2,d6
00006AA6 6100 0000                  		bsr.w	sub_6B06
00006AAA                            
00006AAA                            loc_6AAC:
00006AAA 0892 0003                  		bclr	#3,(a2)
00006AAE 6700                       		beq.s	locret_6AD6
00006AB0 383C 00D0                  		move.w	#$D0,d4
00006AB4 322B 0004                  		move.w	4(a3),d1
00006AB8 0241 FFF0                  		andi.w	#-$10,d1
00006ABC 9841                       		sub.w	d1,d4
00006ABE 3F04                       		move.w	d4,-(sp)
00006AC0 3A3C 0140                  		move.w	#$140,d5
00006AC4 6100 0000                  		bsr.w	sub_6C3C
00006AC8 381F                       		move.w	(sp)+,d4
00006ACA 3A3C 0140                  		move.w	#$140,d5
00006ACE 7C02                       		moveq	#2,d6
00006AD0 6100 0000                  		bsr.w	sub_6B06
00006AD4                            
00006AD4                            locret_6AD6:
00006AD4 4E75                       		rts	
00006AD6                            
00006AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD6                            
00006AD6                            
00006AD6                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006AD6 7C15                       		moveq	#$15,d6
00006AD8                            ; End of function sub_6AD8
00006AD8                            
00006AD8                            
00006AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD8                            
00006AD8                            
00006AD8                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006AD8 2E3C 0080 0000             		move.l	#$800000,d7
00006ADE 2200                       		move.l	d0,d1
00006AE0                            
00006AE0                            loc_6AE2:
00006AE0 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006AE4 6100 0000                  		bsr.w	sub_6BD6
00006AE8 2001                       		move.l	d1,d0
00006AEA 6100 0000                  		bsr.w	sub_6B32
00006AEE 5801                       		addq.b	#4,d1
00006AF0 0201 007F                  		andi.b	#$7F,d1
00006AF4 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006AF8 0645 0010                  		addi.w	#$10,d5
00006AFC 51CE FFE2                  		dbf	d6,loc_6AE2
00006B00 4E75                       		rts	
00006B02                            ; End of function sub_6ADA
00006B02                            
00006B02                            
00006B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B02                            
00006B02                            
00006B02                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006B02 7C0F                       		moveq	#$F,d6
00006B04                            ; End of function sub_6B04
00006B04                            
00006B04                            
00006B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B04                            
00006B04                            
00006B04                            sub_6B06:				; XREF: sub_6954
00006B04 2E3C 0080 0000             		move.l	#$800000,d7
00006B0A 2200                       		move.l	d0,d1
00006B0C                            
00006B0C                            loc_6B0E:
00006B0C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006B10 6100 0000                  		bsr.w	sub_6BD6
00006B14 2001                       		move.l	d1,d0
00006B16 6100 0000                  		bsr.w	sub_6B32
00006B1A 0641 0100                  		addi.w	#$100,d1
00006B1E 0241 0FFF                  		andi.w	#$FFF,d1
00006B22 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006B26 0644 0010                  		addi.w	#$10,d4
00006B2A 51CE FFE0                  		dbf	d6,loc_6B0E
00006B2E 4E75                       		rts	
00006B30                            ; End of function sub_6B06
00006B30                            
00006B30                            
00006B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B30                            
00006B30                            
00006B30                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006B30 8042                       		or.w	d2,d0
00006B32 4840                       		swap	d0
00006B34 0810 0004                  		btst	#4,(a0)
00006B38 6600                       		bne.s	loc_6B6E
00006B3A 0810 0003                  		btst	#3,(a0)
00006B3E 6600                       		bne.s	loc_6B4E
00006B40 2A80                       		move.l	d0,(a5)
00006B42 2C99                       		move.l	(a1)+,(a6)
00006B44 D087                       		add.l	d7,d0
00006B46 2A80                       		move.l	d0,(a5)
00006B48 2C99                       		move.l	(a1)+,(a6)
00006B4A 4E75                       		rts	
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_6B4E:
00006B4C 2A80                       		move.l	d0,(a5)
00006B4E 2819                       		move.l	(a1)+,d4
00006B50 0A84 0800 0800             		eori.l	#$8000800,d4
00006B56 4844                       		swap	d4
00006B58 2C84                       		move.l	d4,(a6)
00006B5A D087                       		add.l	d7,d0
00006B5C 2A80                       		move.l	d0,(a5)
00006B5E 2819                       		move.l	(a1)+,d4
00006B60 0A84 0800 0800             		eori.l	#$8000800,d4
00006B66 4844                       		swap	d4
00006B68 2C84                       		move.l	d4,(a6)
00006B6A 4E75                       		rts	
00006B6C                            ; ===========================================================================
00006B6C                            
00006B6C                            loc_6B6E:
00006B6C 0810 0003                  		btst	#3,(a0)
00006B70 6600                       		bne.s	loc_6B90
00006B72 2A80                       		move.l	d0,(a5)
00006B74 2A19                       		move.l	(a1)+,d5
00006B76 2819                       		move.l	(a1)+,d4
00006B78 0A84 1000 1000             		eori.l	#$10001000,d4
00006B7E 2C84                       		move.l	d4,(a6)
00006B80 D087                       		add.l	d7,d0
00006B82 2A80                       		move.l	d0,(a5)
00006B84 0A85 1000 1000             		eori.l	#$10001000,d5
00006B8A 2C85                       		move.l	d5,(a6)
00006B8C 4E75                       		rts	
00006B8E                            ; ===========================================================================
00006B8E                            
00006B8E                            loc_6B90:
00006B8E 2A80                       		move.l	d0,(a5)
00006B90 2A19                       		move.l	(a1)+,d5
00006B92 2819                       		move.l	(a1)+,d4
00006B94 0A84 1800 1800             		eori.l	#$18001800,d4
00006B9A 4844                       		swap	d4
00006B9C 2C84                       		move.l	d4,(a6)
00006B9E D087                       		add.l	d7,d0
00006BA0 2A80                       		move.l	d0,(a5)
00006BA2 0A85 1800 1800             		eori.l	#$18001800,d5
00006BA8 4845                       		swap	d5
00006BAA 2C85                       		move.l	d5,(a6)
00006BAC 4E75                       		rts	
00006BAE                            ; End of function sub_6B32
00006BAE                            
00006BAE                            ; ===========================================================================
00006BAE 4E75                       		rts	
00006BB0                            ; ===========================================================================
00006BB0 2A80                       		move.l	d0,(a5)
00006BB2 3A3C 2000                  		move.w	#$2000,d5
00006BB6 3819                       		move.w	(a1)+,d4
00006BB8 D845                       		add.w	d5,d4
00006BBA 3C84                       		move.w	d4,(a6)
00006BBC 3819                       		move.w	(a1)+,d4
00006BBE D845                       		add.w	d5,d4
00006BC0 3C84                       		move.w	d4,(a6)
00006BC2 D087                       		add.l	d7,d0
00006BC4 2A80                       		move.l	d0,(a5)
00006BC6 3819                       		move.w	(a1)+,d4
00006BC8 D845                       		add.w	d5,d4
00006BCA 3C84                       		move.w	d4,(a6)
00006BCC 3819                       		move.w	(a1)+,d4
00006BCE D845                       		add.w	d5,d4
00006BD0 3C84                       		move.w	d4,(a6)
00006BD2 4E75                       		rts	
00006BD4                            
00006BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BD4                            
00006BD4                            
00006BD4                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006BD4 43F8 B000                  		lea	($FFFFB000).w,a1
00006BD8 D86B 0004                  		add.w	4(a3),d4
00006BDC DA53                       		add.w	(a3),d5
00006BDE 3604                       		move.w	d4,d3
00006BE0 E24B                       		lsr.w	#1,d3
00006BE2 0243 0380                  		andi.w	#$380,d3
00006BE6 E64D                       		lsr.w	#3,d5
00006BE8 3005                       		move.w	d5,d0
00006BEA EA48                       		lsr.w	#5,d0
00006BEC 0240 007F                  		andi.w	#$7F,d0
00006BF0 D043                       		add.w	d3,d0
00006BF2 76FF                       		moveq	#-1,d3
00006BF4 1634 0000                  		move.b	(a4,d0.w),d3
00006BF8 6700                       		beq.s	locret_6C1E
00006BFA 5303                       		subq.b	#1,d3
00006BFC 0243 007F                  		andi.w	#$7F,d3
00006C00 EE5B                       		ror.w	#7,d3
00006C02 D844                       		add.w	d4,d4
00006C04 0244 01E0                  		andi.w	#$1E0,d4
00006C08 0245 001E                  		andi.w	#$1E,d5
00006C0C D644                       		add.w	d4,d3
00006C0E D645                       		add.w	d5,d3
00006C10 2043                       		movea.l	d3,a0
00006C12 3610                       		move.w	(a0),d3
00006C14 0243 03FF                  		andi.w	#$3FF,d3
00006C18 E74B                       		lsl.w	#3,d3
00006C1A D2C3                       		adda.w	d3,a1
00006C1C                            
00006C1C                            locret_6C1E:
00006C1C 4E75                       		rts	
00006C1E                            ; End of function sub_6BD6
00006C1E                            
00006C1E                            
00006C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C1E                            
00006C1E                            
00006C1E                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006C1E D86B 0004                  		add.w	4(a3),d4
00006C22 DA53                       		add.w	(a3),d5
00006C24 0244 00F0                  		andi.w	#$F0,d4
00006C28 0245 01F0                  		andi.w	#$1F0,d5
00006C2C E94C                       		lsl.w	#4,d4
00006C2E E44D                       		lsr.w	#2,d5
00006C30 D845                       		add.w	d5,d4
00006C32 7003                       		moveq	#3,d0
00006C34 4840                       		swap	d0
00006C36 3004                       		move.w	d4,d0
00006C38 4E75                       		rts	
00006C3A                            ; End of function sub_6C20
00006C3A                            
00006C3A                            
00006C3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C3A                            ; not used
00006C3A                            
00006C3A                            
00006C3A                            sub_6C3C:
00006C3A D86B 0004                  		add.w	4(a3),d4
00006C3E DA53                       		add.w	(a3),d5
00006C40 0244 00F0                  		andi.w	#$F0,d4
00006C44 0245 01F0                  		andi.w	#$1F0,d5
00006C48 E94C                       		lsl.w	#4,d4
00006C4A E44D                       		lsr.w	#2,d5
00006C4C D845                       		add.w	d5,d4
00006C4E 7002                       		moveq	#2,d0
00006C50 4840                       		swap	d0
00006C52 3004                       		move.w	d4,d0
00006C54 4E75                       		rts	
00006C56                            ; End of function sub_6C3C
00006C56                            
00006C56                            ; ---------------------------------------------------------------------------
00006C56                            ; Subroutine to	load tiles as soon as the level	appears
00006C56                            ; ---------------------------------------------------------------------------
00006C56                            
00006C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C56                            
00006C56                            
00006C56                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006C56 4BF9 00C0 0004             		lea	($C00004).l,a5
00006C5C 4DF9 00C0 0000             		lea	($C00000).l,a6
00006C62 47F8 F700                  		lea	($FFFFF700).w,a3
00006C66 49F8 A400                  		lea	($FFFFA400).w,a4
00006C6A 343C 4000                  		move.w	#$4000,d2
00006C6E 6100                       		bsr.s	LoadTilesFromStart2
00006C70 47F8 F708                  		lea	($FFFFF708).w,a3
00006C74 49F8 A440                  		lea	($FFFFA440).w,a4
00006C78 343C 6000                  		move.w	#$6000,d2
00006C7C                            ; End of function LoadTilesFromStart
00006C7C                            
00006C7C                            
00006C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C7C                            
00006C7C                            
00006C7C                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006C7C 78F0                       		moveq	#-$10,d4
00006C7E 7C0F                       		moveq	#$F,d6
00006C80                            
00006C80                            loc_6C82:
00006C80 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006C84 7A00                       		moveq	#0,d5
00006C86 3204                       		move.w	d4,d1
00006C88 6100 FF94                  		bsr.w	sub_6C20
00006C8C 3801                       		move.w	d1,d4
00006C8E 7A00                       		moveq	#0,d5
00006C90 7C1F                       		moveq	#$1F,d6
00006C92 6100 FE44                  		bsr.w	sub_6ADA
00006C96 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006C9A 0644 0010                  		addi.w	#$10,d4
00006C9E 51CE FFE0                  		dbf	d6,loc_6C82
00006CA2 4E75                       		rts	
00006CA4                            ; End of function LoadTilesFromStart2
00006CA4                            
00006CA4                            ; ---------------------------------------------------------------------------
00006CA4                            ; Main Load Block loading subroutine
00006CA4                            ; ---------------------------------------------------------------------------
00006CA4                            
00006CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA4                            
00006CA4                            
00006CA4                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006CA4 7000                       		moveq	#0,d0
00006CA6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006CAA E948                       		lsl.w	#4,d0
00006CAC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006CB2 45F2 0000                  		lea	(a2,d0.w),a2
00006CB6 2F0A                       		move.l	a2,-(sp)
00006CB8 588A                       		addq.l	#4,a2
00006CBA 205A                       		movea.l	(a2)+,a0
00006CBC 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006CC0 303C 0000                  		move.w	#0,d0
00006CC4 6100 AA18                  		bsr.w	EniDec
00006CC8 205A                       		movea.l	(a2)+,a0
00006CCA 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006CD0 6100 AB8A                  		bsr.w	KosDec
00006CD4 6100 0000                  		bsr.w	LevelLayoutLoad
00006CD8 301A                       		move.w	(a2)+,d0
00006CDA 3012                       		move.w	(a2),d0
00006CDC 0240 00FF                  		andi.w	#$FF,d0
00006CE0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006CE6 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006CE8 700C                       		moveq	#$C,d0		; use SB3 pallet
00006CEA                            
00006CEA                            MLB_ChkSBZPal:
00006CEA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006CF0 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006CF2 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006CF8 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006CFA                            
00006CFA                            MLB_UsePal0E:
00006CFA 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006CFC                            
00006CFC                            MLB_NormalPal:
00006CFC 6100 B3BE                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006D00 245F                       		movea.l	(sp)+,a2
00006D02 584A                       		addq.w	#4,a2
00006D04 7000                       		moveq	#0,d0
00006D06 1012                       		move.b	(a2),d0
00006D08 6700                       		beq.s	locret_6D10
00006D0A 6100 A834                  		bsr.w	LoadPLC		; load pattern load cues
00006D0E                            
00006D0E                            locret_6D10:
00006D0E 4E75                       		rts	
00006D10                            ; End of function MainLoadBlockLoad
00006D10                            
00006D10                            ; ---------------------------------------------------------------------------
00006D10                            ; Level	layout loading subroutine
00006D10                            ; ---------------------------------------------------------------------------
00006D10                            
00006D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D10                            
00006D10                            
00006D10                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006D10 47F8 A400                  		lea	($FFFFA400).w,a3
00006D14 323C 01FF                  		move.w	#$1FF,d1
00006D18 7000                       		moveq	#0,d0
00006D1A                            
00006D1A                            LevLoad_ClrRam:
00006D1A 26C0                       		move.l	d0,(a3)+
00006D1C 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006D20                            
00006D20 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006D24 7200                       		moveq	#0,d1
00006D26 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006D2A 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006D2E 7202                       		moveq	#2,d1
00006D30                            ; End of function LevelLayoutLoad
00006D30                            
00006D30                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006D30                            
00006D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D30                            
00006D30                            
00006D30                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006D30 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006D34 ED08                       		lsl.b	#6,d0
00006D36 EA48                       		lsr.w	#5,d0
00006D38 3400                       		move.w	d0,d2
00006D3A D040                       		add.w	d0,d0
00006D3C D042                       		add.w	d2,d0
00006D3E D041                       		add.w	d1,d0
00006D40 43F9 0000 0000             		lea	(Level_Index).l,a1
00006D46 3031 0000                  		move.w	(a1,d0.w),d0
00006D4A 43F1 0000                  		lea	(a1,d0.w),a1
00006D4E 7200                       		moveq	#0,d1
00006D50 3401                       		move.w	d1,d2
00006D52 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006D54 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006D56                            
00006D56                            LevLoad_NumRows:
00006D56 3001                       		move.w	d1,d0
00006D58 204B                       		movea.l	a3,a0
00006D5A                            
00006D5A                            LevLoad_Row:
00006D5A 10D9                       		move.b	(a1)+,(a0)+
00006D5C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006D60 47EB 0080                  		lea	$80(a3),a3	; do next row
00006D64 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006D68 4E75                       		rts	
00006D6A                            ; End of function LevelLayoutLoad2
00006D6A                            
00006D6A                            ; ---------------------------------------------------------------------------
00006D6A                            ; Dynamic screen resize	loading	subroutine
00006D6A                            ; ---------------------------------------------------------------------------
00006D6A                            
00006D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6A                            
00006D6A                            
00006D6A                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006D6A 7000                       		moveq	#0,d0
00006D6C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D70 D040                       		add.w	d0,d0
00006D72 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006D76 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006D7A 7202                       		moveq	#2,d1
00006D7C 3038 F726                  		move.w	($FFFFF726).w,d0
00006D80 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006D84 6700                       		beq.s	locret_6DAA
00006D86 6400                       		bcc.s	loc_6DAC
00006D88 4441                       		neg.w	d1
00006D8A 3038 F704                  		move.w	($FFFFF704).w,d0
00006D8E B078 F726                  		cmp.w	($FFFFF726).w,d0
00006D92 6300                       		bls.s	loc_6DA0
00006D94 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006D98 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006D9E                            
00006D9E                            loc_6DA0:
00006D9E D378 F72E                  		add.w	d1,($FFFFF72E).w
00006DA2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006DA8                            
00006DA8                            locret_6DAA:
00006DA8 4E75                       		rts	
00006DAA                            ; ===========================================================================
00006DAA                            
00006DAA                            loc_6DAC:				; XREF: DynScrResizeLoad
00006DAA 3038 F704                  		move.w	($FFFFF704).w,d0
00006DAE 5040                       		addq.w	#8,d0
00006DB0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006DB4 6500                       		bcs.s	loc_6DC4
00006DB6 0838 0001 D022             		btst	#1,($FFFFD022).w
00006DBC 6700                       		beq.s	loc_6DC4
00006DBE D241                       		add.w	d1,d1
00006DC0 D241                       		add.w	d1,d1
00006DC2                            
00006DC2                            loc_6DC4:
00006DC2 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006DC6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006DCC 4E75                       		rts	
00006DCE                            ; End of function DynScrResizeLoad
00006DCE                            
00006DCE                            ; ===========================================================================
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE                            ; Offset index for dynamic screen resizing
00006DCE                            ; ---------------------------------------------------------------------------
00006DCE 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006DD2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006DD6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006DDA 0000                       		dc.w Resize_Ending-Resize_Index
00006DDC                            ; ===========================================================================
00006DDC                            ; ---------------------------------------------------------------------------
00006DDC                            ; Green	Hill Zone dynamic screen resizing
00006DDC                            ; ---------------------------------------------------------------------------
00006DDC                            
00006DDC                            Resize_GHZ:				; XREF: Resize_Index
00006DDC 7000                       		moveq	#0,d0
00006DDE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006DE2 D040                       		add.w	d0,d0
00006DE4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006DE8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006DEC                            ; ===========================================================================
00006DEC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006DEE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006DF0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006DF2                            ; ===========================================================================
00006DF2                            
00006DF2                            Resize_GHZ1:
00006DF2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006DF8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006DFE 6500                       		bcs.s	locret_6E08	; if not, branch
00006E00 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006E06                            
00006E06                            locret_6E08:
00006E06 4E75                       		rts	
00006E08                            ; ===========================================================================
00006E08                            
00006E08                            Resize_GHZ2:
00006E08 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E0E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006E14 6500                       		bcs.s	locret_6E3A
00006E16 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006E1C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006E22 6500                       		bcs.s	locret_6E3A
00006E24 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006E2A 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006E30 6500                       		bcs.s	locret_6E3A
00006E32 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E38                            
00006E38                            locret_6E3A:
00006E38 4E75                       		rts	
00006E3A                            ; ===========================================================================
00006E3A                            
00006E3A                            Resize_GHZ3:
00006E3A 7000                       		moveq	#0,d0
00006E3C 1038 F742                  		move.b	($FFFFF742).w,d0
00006E40 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006E44 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006E48                            ; ===========================================================================
00006E48 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006E4A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006E4C 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006E4E                            ; ===========================================================================
00006E4E                            
00006E4E                            Resize_GHZ3main:
00006E4E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E54 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006E5A 6500                       		bcs.s	locret_6E96
00006E5C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006E62 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006E68 6500                       		bcs.s	locret_6E96
00006E6A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006E70 6500                       		bcs.s	loc_6E98
00006E72 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006E78 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006E7E 6400                       		bcc.s	loc_6E8E
00006E80 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006E86 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006E8C                            
00006E8C                            loc_6E8E:
00006E8C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006E92 6400                       		bcc.s	loc_6E98
00006E94                            
00006E94                            locret_6E96:
00006E94 4E75                       		rts	
00006E96                            ; ===========================================================================
00006E96                            
00006E96                            loc_6E98:
00006E96 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E9C 5438 F742                  		addq.b	#2,($FFFFF742).w
00006EA0 4E75                       		rts	
00006EA2                            ; ===========================================================================
00006EA2                            
00006EA2                            Resize_GHZ3boss:
00006EA2 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006EA8 6400                       		bcc.s	loc_6EB0
00006EAA 5538 F742                  		subq.b	#2,($FFFFF742).w
00006EAE                            
00006EAE                            loc_6EB0:
00006EAE 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006EB4 6500                       		bcs.s	locret_6EE8
00006EB6 6100 0000                  		bsr.w	SingleObjLoad
00006EBA 6600                       		bne.s	loc_6ED0
00006EBC 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006EC0 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006EC6 337C 0280 000C             		move.w	#$280,$C(a1)
00006ECC                            
00006ECC                            loc_6ED0:
00006ECC 303C 009C                  		move.w	#$9C,d0
00006ED0 6100 A3F4                  		bsr.w	PlaySound	; play boss music
00006ED4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006EDA 5438 F742                  		addq.b	#2,($FFFFF742).w
00006EDE 7011                       		moveq	#$11,d0
00006EE0 6000 A65E                  		bra.w	LoadPLC		; load boss patterns
00006EE4                            ; ===========================================================================
00006EE4                            
00006EE4                            locret_6EE8:
00006EE4 4E75                       		rts	
00006EE6                            ; ===========================================================================
00006EE6                            
00006EE6                            Resize_GHZ3end:
00006EE6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006EEC 4E75                       		rts	
00006EEE                            ; ===========================================================================
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            ; Labyrinth Zone dynamic screen	resizing
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            
00006EEE                            Resize_LZ:				; XREF: Resize_Index
00006EEE 7000                       		moveq	#0,d0
00006EF0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EF4 D040                       		add.w	d0,d0
00006EF6 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00006EFA 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00006EFE                            ; ===========================================================================
00006EFE 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00006F00 0000                       		dc.w Resize_LZ12-Resize_LZx
00006F02 0000                       		dc.w Resize_LZ3-Resize_LZx
00006F04 0000                       		dc.w Resize_SBZ3-Resize_LZx
00006F06                            ; ===========================================================================
00006F06                            
00006F06                            Resize_LZ12:
00006F06 4E75                       		rts	
00006F08                            ; ===========================================================================
00006F08                            
00006F08                            Resize_LZ3:
00006F08 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00006F0C 6700                       		beq.s	loc_6F28	; if not, branch
00006F0E 43F8 A506                  		lea	($FFFFA506).w,a1
00006F12 0C11 0007                  		cmpi.b	#7,(a1)
00006F16 6700                       		beq.s	loc_6F28
00006F18 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00006F1C 303C 00B7                  		move.w	#$B7,d0
00006F20 6100 A3AA                  		bsr.w	PlaySound_Special ; play rumbling sound
00006F24                            
00006F24                            loc_6F28:
00006F24 4A38 F742                  		tst.b	($FFFFF742).w
00006F28 6600                       		bne.s	locret_6F64
00006F2A 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00006F30 6500                       		bcs.s	locret_6F62
00006F32 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00006F38 6400                       		bcc.s	locret_6F62
00006F3A 6100 0000                  		bsr.w	SingleObjLoad
00006F3E 6600                       		bne.s	loc_6F4A
00006F40 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00006F44                            
00006F44                            loc_6F4A:
00006F44 303C 009C                  		move.w	#$9C,d0
00006F48 6100 A37C                  		bsr.w	PlaySound	; play boss music
00006F4C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006F52 5438 F742                  		addq.b	#2,($FFFFF742).w
00006F56 7011                       		moveq	#$11,d0
00006F58 6000 A5E6                  		bra.w	LoadPLC		; load boss patterns
00006F5C                            ; ===========================================================================
00006F5C                            
00006F5C                            locret_6F62:
00006F5C 4E75                       		rts	
00006F5E                            ; ===========================================================================
00006F5E                            
00006F5E                            locret_6F64:
00006F5E 4E75                       		rts	
00006F60                            ; ===========================================================================
00006F60                            
00006F60                            Resize_SBZ3:
00006F60 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006F66 6500                       		bcs.s	locret_6F8C
00006F68 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00006F6E 6400                       		bcc.s	locret_6F8C	; if not, branch
00006F70 4238 FE30                  		clr.b	($FFFFFE30).w
00006F74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00006F7A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00006F80 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00006F86                            
00006F86                            locret_6F8C:
00006F86 4E75                       		rts	
00006F88                            ; ===========================================================================
00006F88                            ; ---------------------------------------------------------------------------
00006F88                            ; Marble Zone dynamic screen resizing
00006F88                            ; ---------------------------------------------------------------------------
00006F88                            
00006F88                            Resize_MZ:				; XREF: Resize_Index
00006F88 7000                       		moveq	#0,d0
00006F8A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006F8E D040                       		add.w	d0,d0
00006F90 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00006F94 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00006F98                            ; ===========================================================================
00006F98 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00006F9A 0000                       		dc.w Resize_MZ2-Resize_MZx
00006F9C 0000                       		dc.w Resize_MZ3-Resize_MZx
00006F9E                            ; ===========================================================================
00006F9E                            
00006F9E                            Resize_MZ1:
00006F9E 7000                       		moveq	#0,d0
00006FA0 1038 F742                  		move.b	($FFFFF742).w,d0
00006FA4 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00006FA8 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00006FAC                            ; ===========================================================================
00006FAC 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00006FAE 0000                       		dc.w loc_6FEA-off_6FB2
00006FB0 0000                       		dc.w loc_702E-off_6FB2
00006FB2 0000                       		dc.w loc_7050-off_6FB2
00006FB4                            ; ===========================================================================
00006FB4                            
00006FB4                            loc_6FBA:
00006FB4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00006FBA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00006FC0 6500                       		bcs.s	locret_6FE8
00006FC2 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00006FC8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006FCE 6500                       		bcs.s	locret_6FE8
00006FD0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00006FD6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00006FDC 6500                       		bcs.s	locret_6FE8
00006FDE 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FE2                            
00006FE2                            locret_6FE8:
00006FE2 4E75                       		rts	
00006FE4                            ; ===========================================================================
00006FE4                            
00006FE4                            loc_6FEA:
00006FE4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00006FEA 6400                       		bcc.s	loc_6FF8
00006FEC 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FF0 4E75                       		rts	
00006FF2                            ; ===========================================================================
00006FF2                            
00006FF2                            loc_6FF8:
00006FF2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00006FF8 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00006FFE 6400                       		bcc.s	locret_702C
00007000 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007006 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000700C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007012 6400                       		bcc.s	locret_702C
00007014 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000701A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007020 6500                       		bcs.s	locret_702C
00007022 5438 F742                  		addq.b	#2,($FFFFF742).w
00007026                            
00007026                            locret_702C:
00007026 4E75                       		rts	
00007028                            ; ===========================================================================
00007028                            
00007028                            loc_702E:
00007028 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000702E 6400                       		bcc.s	loc_703C
00007030 5538 F742                  		subq.b	#2,($FFFFF742).w
00007034 4E75                       		rts	
00007036                            ; ===========================================================================
00007036                            
00007036                            loc_703C:
00007036 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000703C 6500                       		bcs.s	locret_704E
0000703E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007044 5438 F742                  		addq.b	#2,($FFFFF742).w
00007048                            
00007048                            locret_704E:
00007048 4E75                       		rts	
0000704A                            ; ===========================================================================
0000704A                            
0000704A                            loc_7050:
0000704A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007050 6500                       		bcs.s	locret_7072
00007052 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007058 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000705E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007064 6500                       		bcs.s	locret_7072
00007066 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000706C                            
0000706C                            locret_7072:
0000706C 4E75                       		rts	
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            Resize_MZ2:
0000706E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007074 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000707A 6500                       		bcs.s	locret_7088
0000707C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007082                            
00007082                            locret_7088:
00007082 4E75                       		rts	
00007084                            ; ===========================================================================
00007084                            
00007084                            Resize_MZ3:
00007084 7000                       		moveq	#0,d0
00007086 1038 F742                  		move.b	($FFFFF742).w,d0
0000708A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000708E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007092                            ; ===========================================================================
00007092 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007094 0000                       		dc.w Resize_MZ3end-off_7098
00007096                            ; ===========================================================================
00007096                            
00007096                            Resize_MZ3boss:
00007096 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000709C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000070A2 6500                       		bcs.s	locret_70E8
000070A4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000070AA 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000070B0 6500                       		bcs.s	locret_70E8
000070B2 6100 0000                  		bsr.w	SingleObjLoad
000070B6 6600                       		bne.s	loc_70D0
000070B8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000070BC 337C 19F0 0008             		move.w	#$19F0,8(a1)
000070C2 337C 022C 000C             		move.w	#$22C,$C(a1)
000070C8                            
000070C8                            loc_70D0:
000070C8 303C 009C                  		move.w	#$9C,d0
000070CC 6100 A1F8                  		bsr.w	PlaySound	; play boss music
000070D0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000070D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000070DA 7011                       		moveq	#$11,d0
000070DC 6000 A462                  		bra.w	LoadPLC		; load boss patterns
000070E0                            ; ===========================================================================
000070E0                            
000070E0                            locret_70E8:
000070E0 4E75                       		rts	
000070E2                            ; ===========================================================================
000070E2                            
000070E2                            Resize_MZ3end:
000070E2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000070E8 4E75                       		rts	
000070EA                            ; ===========================================================================
000070EA                            ; ---------------------------------------------------------------------------
000070EA                            ; Star Light Zone dynamic screen resizing
000070EA                            ; ---------------------------------------------------------------------------
000070EA                            
000070EA                            Resize_SLZ:				; XREF: Resize_Index
000070EA 7000                       		moveq	#0,d0
000070EC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070F0 D040                       		add.w	d0,d0
000070F2 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000070F6 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000070FA                            ; ===========================================================================
000070FA 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000070FC 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000070FE 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007100                            ; ===========================================================================
00007100                            
00007100                            Resize_SLZ12:
00007100 4E75                       		rts	
00007102                            ; ===========================================================================
00007102                            
00007102                            Resize_SLZ3:
00007102 7000                       		moveq	#0,d0
00007104 1038 F742                  		move.b	($FFFFF742).w,d0
00007108 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000710C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007110                            ; ===========================================================================
00007110 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007112 0000                       		dc.w Resize_SLZ3boss-off_7118
00007114 0000                       		dc.w Resize_SLZ3end-off_7118
00007116                            ; ===========================================================================
00007116                            
00007116                            Resize_SLZ3main:
00007116 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000711C 6500                       		bcs.s	locret_7130
0000711E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007124 5438 F742                  		addq.b	#2,($FFFFF742).w
00007128                            
00007128                            locret_7130:
00007128 4E75                       		rts	
0000712A                            ; ===========================================================================
0000712A                            
0000712A                            Resize_SLZ3boss:
0000712A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007130 6500                       		bcs.s	locret_715C
00007132 6100 0000                  		bsr.w	SingleObjLoad
00007136 6600                       		bne.s	loc_7144
00007138 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000713C                            
0000713C                            loc_7144:
0000713C 303C 009C                  		move.w	#$9C,d0
00007140 6100 A184                  		bsr.w	PlaySound	; play boss music
00007144 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000714A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000714E 7011                       		moveq	#$11,d0
00007150 6000 A3EE                  		bra.w	LoadPLC		; load boss patterns
00007154                            ; ===========================================================================
00007154                            
00007154                            locret_715C:
00007154 4E75                       		rts	
00007156                            ; ===========================================================================
00007156                            
00007156                            Resize_SLZ3end:
00007156 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000715C 4E75                       		rts
0000715E 4E75                       		rts
00007160                            ; ===========================================================================
00007160                            ; ---------------------------------------------------------------------------
00007160                            ; Spring Yard Zone dynamic screen resizing
00007160                            ; ---------------------------------------------------------------------------
00007160                            
00007160                            Resize_SYZ:				; XREF: Resize_Index
00007160 7000                       		moveq	#0,d0
00007162 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007166 D040                       		add.w	d0,d0
00007168 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000716C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007170                            ; ===========================================================================
00007170 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007172 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007174 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007176                            ; ===========================================================================
00007176                            
00007176                            Resize_SYZ1:
00007176 4E75                       		rts	
00007178                            ; ===========================================================================
00007178                            
00007178                            Resize_SYZ2:
00007178 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000717E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007184 6500                       		bcs.s	locret_71A2
00007186 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000718C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007192 6500                       		bcs.s	locret_71A2
00007194 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000719A                            
0000719A                            locret_71A2:
0000719A 4E75                       		rts	
0000719C                            ; ===========================================================================
0000719C                            
0000719C                            Resize_SYZ3:
0000719C 7000                       		moveq	#0,d0
0000719E 1038 F742                  		move.b	($FFFFF742).w,d0
000071A2 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000071A6 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000071AA                            ; ===========================================================================
000071AA 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000071AC 0000                       		dc.w Resize_SYZ3boss-off_71B2
000071AE 0000                       		dc.w Resize_SYZ3end-off_71B2
000071B0                            ; ===========================================================================
000071B0                            
000071B0                            Resize_SYZ3main:
000071B0 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000071B6 6500                       		bcs.s	locret_71CE
000071B8 6100 0000                  		bsr.w	SingleObjLoad
000071BC 6600                       		bne.s	locret_71CE
000071BE 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000071C2 5438 F742                  		addq.b	#2,($FFFFF742).w
000071C6                            
000071C6                            locret_71CE:
000071C6 4E75                       		rts	
000071C8                            ; ===========================================================================
000071C8                            
000071C8                            Resize_SYZ3boss:
000071C8 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000071CE 6500                       		bcs.s	locret_7200
000071D0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000071D6 6100 0000                  		bsr.w	SingleObjLoad
000071DA 6600                       		bne.s	loc_71EC
000071DC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000071E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000071E4                            
000071E4                            loc_71EC:
000071E4 303C 009C                  		move.w	#$9C,d0
000071E8 6100 A0DC                  		bsr.w	PlaySound	; play boss music
000071EC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071F2 7011                       		moveq	#$11,d0
000071F4 6000 A34A                  		bra.w	LoadPLC		; load boss patterns
000071F8                            ; ===========================================================================
000071F8                            
000071F8                            locret_7200:
000071F8 4E75                       		rts	
000071FA                            ; ===========================================================================
000071FA                            
000071FA                            Resize_SYZ3end:
000071FA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007200 4E75                       		rts	
00007202                            ; ===========================================================================
00007202                            ; ---------------------------------------------------------------------------
00007202                            ; Scrap	Brain Zone dynamic screen resizing
00007202                            ; ---------------------------------------------------------------------------
00007202                            
00007202                            Resize_SBZ:				; XREF: Resize_Index
00007202 7000                       		moveq	#0,d0
00007204 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007208 D040                       		add.w	d0,d0
0000720A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000720E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007212                            ; ===========================================================================
00007212 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007214 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007216 0000                       		dc.w Resize_FZ-Resize_SBZx
00007218                            ; ===========================================================================
00007218                            
00007218                            Resize_SBZ1:
00007218 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000721E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007224 6500                       		bcs.s	locret_7242
00007226 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000722C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007232 6500                       		bcs.s	locret_7242
00007234 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000723A                            
0000723A                            locret_7242:
0000723A 4E75                       		rts	
0000723C                            ; ===========================================================================
0000723C                            
0000723C                            Resize_SBZ2:
0000723C 7000                       		moveq	#0,d0
0000723E 1038 F742                  		move.b	($FFFFF742).w,d0
00007242 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000724C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000724E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007250 0000                       		dc.w Resize_SBZ2end-off_7252
00007252                            ; ===========================================================================
00007252                            
00007252                            Resize_SBZ2main:
00007252 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007258 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000725E 6500                       		bcs.s	locret_727A
00007260 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007266 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000726C 6500                       		bcs.s	locret_727A
0000726E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007272                            
00007272                            locret_727A:
00007272 4E75                       		rts	
00007274                            ; ===========================================================================
00007274                            
00007274                            Resize_SBZ2boss:
00007274 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000727A 6500                       		bcs.s	locret_7298
0000727C 6100 0000                  		bsr.w	SingleObjLoad
00007280 6600                       		bne.s	locret_7298
00007282 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007286 5438 F742                  		addq.b	#2,($FFFFF742).w
0000728A 701E                       		moveq	#$1E,d0
0000728C 6000 A2B2                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007290                            ; ===========================================================================
00007290                            
00007290                            locret_7298:
00007290 4E75                       		rts	
00007292                            ; ===========================================================================
00007292                            
00007292                            Resize_SBZ2boss2:
00007292 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007298 6500                       		bcs.s	loc_72B6
0000729A 6100 0000                  		bsr.w	SingleObjLoad
0000729E 6600                       		bne.s	loc_72B0
000072A0 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000072A4 5438 F742                  		addq.b	#2,($FFFFF742).w
000072A8                            
000072A8                            loc_72B0:
000072A8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000072AE                            
000072AE                            loc_72B6:
000072AE 6000                       		bra.s	loc_72C2
000072B0                            ; ===========================================================================
000072B0                            
000072B0                            Resize_SBZ2end:
000072B0 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000072B6 6500                       		bcs.s	loc_72C2
000072B8 4E75                       		rts	
000072BA                            ; ===========================================================================
000072BA                            
000072BA                            loc_72C2:
000072BA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000072C0 4E75                       		rts	
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_FZ:
000072C2 7000                       		moveq	#0,d0
000072C4 1038 F742                  		move.b	($FFFFF742).w,d0
000072C8 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000072CC 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000072D0                            ; ===========================================================================
000072D0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000072D4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000072D8 0000                       		dc.w Resize_FZend2-off_72D8
000072DA                            ; ===========================================================================
000072DA                            
000072DA                            Resize_FZmain:
000072DA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000072E0 6500                       		bcs.s	loc_72F4
000072E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000072E6 701F                       		moveq	#$1F,d0
000072E8 6100 A256                  		bsr.w	LoadPLC		; load FZ boss patterns
000072EC                            
000072EC                            loc_72F4:
000072EC 60CC                       		bra.s	loc_72C2
000072EE                            ; ===========================================================================
000072EE                            
000072EE                            Resize_FZboss:
000072EE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000072F4 6500                       		bcs.s	loc_7312
000072F6 6100 0000                  		bsr.w	SingleObjLoad
000072FA 6600                       		bne.s	loc_7312
000072FC 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007300 5438 F742                  		addq.b	#2,($FFFFF742).w
00007304 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000730A                            
0000730A                            loc_7312:
0000730A 60AE                       		bra.s	loc_72C2
0000730C                            ; ===========================================================================
0000730C                            
0000730C                            Resize_FZend:
0000730C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007312 6500                       		bcs.s	loc_7320
00007314 5438 F742                  		addq.b	#2,($FFFFF742).w
00007318                            
00007318                            loc_7320:
00007318 60A0                       		bra.s	loc_72C2
0000731A                            ; ===========================================================================
0000731A                            
0000731A                            locret_7322:
0000731A 4E75                       		rts	
0000731C                            ; ===========================================================================
0000731C                            
0000731C                            Resize_FZend2:
0000731C 609C                       		bra.s	loc_72C2
0000731E                            ; ===========================================================================
0000731E                            ; ---------------------------------------------------------------------------
0000731E                            ; Ending sequence dynamic screen resizing (empty)
0000731E                            ; ---------------------------------------------------------------------------
0000731E                            
0000731E                            Resize_Ending:				; XREF: Resize_Index
0000731E 4E75                       		rts	
00007320                            ; ===========================================================================
00007320                            ; ---------------------------------------------------------------------------
00007320                            ; Object 11 - GHZ bridge
00007320                            ; ---------------------------------------------------------------------------
00007320                            
00007320                            Obj11:					; XREF: Obj_Index
00007320 7000                       		moveq	#0,d0
00007322 1028 0024                  		move.b	$24(a0),d0
00007326 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000732A 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000732E                            ; ===========================================================================
0000732E 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007332 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007336 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000733A                            ; ===========================================================================
0000733A                            
0000733A                            Obj11_Main:				; XREF: Obj11_Index
0000733A 5428 0024                  		addq.b	#2,$24(a0)
0000733E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007346 317C 438E 0002             		move.w	#$438E,2(a0)
0000734C 117C 0004 0001             		move.b	#4,1(a0)
00007352 117C 0003 0018             		move.b	#3,$18(a0)
00007358 117C 0080 0019             		move.b	#$80,$19(a0)
0000735E 3428 000C                  		move.w	$C(a0),d2
00007362 3628 0008                  		move.w	8(a0),d3
00007366 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007368 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000736C 7200                       		moveq	#0,d1
0000736E 1212                       		move.b	(a2),d1		; copy a2 to d1
00007370 14FC 0000                  		move.b	#0,(a2)+
00007374 3001                       		move.w	d1,d0
00007376 E248                       		lsr.w	#1,d0
00007378 E948                       		lsl.w	#4,d0
0000737A 9640                       		sub.w	d0,d3
0000737C 5501                       		subq.b	#2,d1
0000737E 6500                       		bcs.s	Obj11_Action
00007380                            
00007380                            Obj11_MakeBdg:
00007380 6100 0000                  		bsr.w	SingleObjLoad
00007384 6600                       		bne.s	Obj11_Action
00007386 5228 0028                  		addq.b	#1,$28(a0)
0000738A B668 0008                  		cmp.w	8(a0),d3
0000738E 6600                       		bne.s	loc_73B8
00007390 0643 0010                  		addi.w	#$10,d3
00007394 3142 000C                  		move.w	d2,$C(a0)
00007398 3142 003C                  		move.w	d2,$3C(a0)
0000739C 3A08                       		move.w	a0,d5
0000739E 0445 D000                  		subi.w	#-$3000,d5
000073A2 EC4D                       		lsr.w	#6,d5
000073A4 0245 007F                  		andi.w	#$7F,d5
000073A8 14C5                       		move.b	d5,(a2)+
000073AA 5228 0028                  		addq.b	#1,$28(a0)
000073AE                            
000073AE                            loc_73B8:				; XREF: ROM:00007398j
000073AE 3A09                       		move.w	a1,d5
000073B0 0445 D000                  		subi.w	#-$3000,d5
000073B4 EC4D                       		lsr.w	#6,d5
000073B6 0245 007F                  		andi.w	#$7F,d5
000073BA 14C5                       		move.b	d5,(a2)+
000073BC 137C 000A 0024             		move.b	#$A,$24(a1)
000073C2 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000073C4 3342 000C                  		move.w	d2,$C(a1)
000073C8 3342 003C                  		move.w	d2,$3C(a1)
000073CC 3343 0008                  		move.w	d3,8(a1)
000073D0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000073D8 337C 438E 0002             		move.w	#$438E,2(a1)
000073DE 137C 0004 0001             		move.b	#4,1(a1)
000073E4 137C 0003 0018             		move.b	#3,$18(a1)
000073EA 137C 0008 0019             		move.b	#8,$19(a1)
000073F0 0643 0010                  		addi.w	#$10,d3
000073F4 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000073F8                            
000073F8                            Obj11_Action:				; XREF: Obj11_Index
000073F8 6100                       		bsr.s	Obj11_Solid
000073FA 4A28 003E                  		tst.b	$3E(a0)
000073FE 6700                       		beq.s	Obj11_Display
00007400 5928 003E                  		subq.b	#4,$3E(a0)
00007404 6100 0000                  		bsr.w	Obj11_Bend
00007408                            
00007408                            Obj11_Display:
00007408 6100 0000                  		bsr.w	DisplaySprite
0000740C 6000 0000                  		bra.w	Obj11_ChkDel
00007410                            
00007410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007410                            
00007410                            
00007410                            Obj11_Solid:				; XREF: Obj11_Action
00007410 7200                       		moveq	#0,d1
00007412 1228 0028                  		move.b	$28(a0),d1
00007416 E749                       		lsl.w	#3,d1
00007418 3401                       		move.w	d1,d2
0000741A 5041                       		addq.w	#8,d1
0000741C D442                       		add.w	d2,d2
0000741E 43F8 D000                  		lea	($FFFFD000).w,a1
00007422 4A69 0012                  		tst.w	$12(a1)
00007426 6B00 0000                  		bmi.w	locret_751E
0000742A 3029 0008                  		move.w	8(a1),d0
0000742E 9068 0008                  		sub.w	8(a0),d0
00007432 D041                       		add.w	d1,d0
00007434 6B00 0000                  		bmi.w	locret_751E
00007438 B042                       		cmp.w	d2,d0
0000743A 6400 0000                  		bcc.w	locret_751E
0000743E 6000                       		bra.s	Platform2
00007440                            ; End of function Obj11_Solid
00007440                            
00007440                            ; ---------------------------------------------------------------------------
00007440                            ; Platform subroutine
00007440                            ; ---------------------------------------------------------------------------
00007440                            
00007440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007440                            
00007440                            
00007440                            PlatformObject:
00007440 43F8 D000                  		lea	($FFFFD000).w,a1
00007444 4A69 0012                  		tst.w	$12(a1)
00007448 6B00 0000                  		bmi.w	locret_751E
0000744C 3029 0008                  		move.w	8(a1),d0
00007450 9068 0008                  		sub.w	8(a0),d0
00007454 D041                       		add.w	d1,d0
00007456 6B00 0000                  		bmi.w	locret_751E
0000745A D241                       		add.w	d1,d1
0000745C B041                       		cmp.w	d1,d0
0000745E 6400 0000                  		bcc.w	locret_751E
00007462                            
00007462                            Platform2:
00007462 3028 000C                  		move.w	$C(a0),d0
00007466 5140                       		subq.w	#8,d0
00007468                            
00007468                            Platform3:
00007468 3429 000C                  		move.w	$C(a1),d2
0000746C 1229 0016                  		move.b	$16(a1),d1
00007470 4881                       		ext.w	d1
00007472 D242                       		add.w	d2,d1
00007474 5841                       		addq.w	#4,d1
00007476 9041                       		sub.w	d1,d0
00007478 6200 0000                  		bhi.w	locret_751E
0000747C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007480 6500 0000                  		bcs.w	locret_751E
00007484 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007488 6B00 0000                  		bmi.w	locret_751E
0000748C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007492 6400 0000                  		bcc.w	locret_751E
00007496 D440                       		add.w	d0,d2
00007498 5642                       		addq.w	#3,d2
0000749A 3342 000C                  		move.w	d2,$C(a1)
0000749E 5428 0024                  		addq.b	#2,$24(a0)
000074A2                            
000074A2                            loc_74AE:
000074A2 0829 0003 0022             		btst	#3,$22(a1)
000074A8 6700                       		beq.s	loc_74DC
000074AA 7000                       		moveq	#0,d0
000074AC 1029 003D                  		move.b	$3D(a1),d0
000074B0 ED48                       		lsl.w	#6,d0
000074B2 0680 00FF D000             		addi.l	#$FFD000,d0
000074B8 2440                       		movea.l	d0,a2
000074BA 08AA 0003 0022             		bclr	#3,$22(a2)
000074C0 422A 0025                  		clr.b	$25(a2)
000074C4 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000074CA 6600                       		bne.s	loc_74DC
000074CC 552A 0024                  		subq.b	#2,$24(a2)
000074D0                            
000074D0                            loc_74DC:
000074D0 3008                       		move.w	a0,d0
000074D2 0440 D000                  		subi.w	#-$3000,d0
000074D6 EC48                       		lsr.w	#6,d0
000074D8 0240 007F                  		andi.w	#$7F,d0
000074DC 1340 003D                  		move.b	d0,$3D(a1)
000074E0 137C 0000 0026             		move.b	#0,$26(a1)
000074E6 337C 0000 0012             		move.w	#0,$12(a1)
000074EC 3369 0010 0014             		move.w	$10(a1),$14(a1)
000074F2 0829 0001 0022             		btst	#1,$22(a1)
000074F8 6700                       		beq.s	loc_7512
000074FA 2F08                       		move.l	a0,-(sp)
000074FC 2049                       		movea.l	a1,a0
000074FE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007504 205F                       		movea.l	(sp)+,a0
00007506                            
00007506                            loc_7512:
00007506 08E9 0003 0022             		bset	#3,$22(a1)
0000750C 08E8 0003 0022             		bset	#3,$22(a0)
00007512                            
00007512                            locret_751E:
00007512 4E75                       		rts	
00007514                            ; End of function PlatformObject
00007514                            
00007514                            ; ---------------------------------------------------------------------------
00007514                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007514                            ; ---------------------------------------------------------------------------
00007514                            
00007514                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007514                            
00007514                            
00007514                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007514 43F8 D000                  		lea	($FFFFD000).w,a1
00007518 4A69 0012                  		tst.w	$12(a1)
0000751C 6B00 FFF4                  		bmi.w	locret_751E
00007520 3029 0008                  		move.w	8(a1),d0
00007524 9068 0008                  		sub.w	8(a0),d0
00007528 D041                       		add.w	d1,d0
0000752A 6BE6                       		bmi.s	locret_751E
0000752C D241                       		add.w	d1,d1
0000752E B041                       		cmp.w	d1,d0
00007530 64E0                       		bcc.s	locret_751E
00007532 0828 0000 0001             		btst	#0,1(a0)
00007538 6700                       		beq.s	loc_754A
0000753A 4640                       		not.w	d0
0000753C D041                       		add.w	d1,d0
0000753E                            
0000753E                            loc_754A:
0000753E E248                       		lsr.w	#1,d0
00007540 7600                       		moveq	#0,d3
00007542 1632 0000                  		move.b	(a2,d0.w),d3
00007546 3028 000C                  		move.w	$C(a0),d0
0000754A 9043                       		sub.w	d3,d0
0000754C 6000 FF1A                  		bra.w	Platform3
00007550                            ; End of function SlopeObject
00007550                            
00007550                            
00007550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007550                            
00007550                            
00007550                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007550 43F8 D000                  		lea	($FFFFD000).w,a1
00007554 4A69 0012                  		tst.w	$12(a1)
00007558 6B00 FFB8                  		bmi.w	locret_751E
0000755C 3029 0008                  		move.w	8(a1),d0
00007560 9068 0008                  		sub.w	8(a0),d0
00007564 D041                       		add.w	d1,d0
00007566 6B00 FFAA                  		bmi.w	locret_751E
0000756A D241                       		add.w	d1,d1
0000756C B041                       		cmp.w	d1,d0
0000756E 6400 FFA2                  		bcc.w	locret_751E
00007572 3028 000C                  		move.w	$C(a0),d0
00007576 9043                       		sub.w	d3,d0
00007578 6000 FEEE                  		bra.w	Platform3
0000757C                            ; End of function Obj15_Solid
0000757C                            
0000757C                            ; ===========================================================================
0000757C                            
0000757C                            Obj11_Action2:				; XREF: Obj11_Index
0000757C 6100                       		bsr.s	Obj11_WalkOff
0000757E 6100 0000                  		bsr.w	DisplaySprite
00007582 6000 0000                  		bra.w	Obj11_ChkDel
00007586                            
00007586                            ; ---------------------------------------------------------------------------
00007586                            ; Subroutine allowing Sonic to walk off a bridge
00007586                            ; ---------------------------------------------------------------------------
00007586                            
00007586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007586                            
00007586                            
00007586                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007586 7200                       		moveq	#0,d1
00007588 1228 0028                  		move.b	$28(a0),d1
0000758C E749                       		lsl.w	#3,d1
0000758E 3401                       		move.w	d1,d2
00007590 5041                       		addq.w	#8,d1
00007592 6100                       		bsr.s	ExitPlatform2
00007594 6400                       		bcc.s	locret_75BE
00007596 E848                       		lsr.w	#4,d0
00007598 1140 003F                  		move.b	d0,$3F(a0)
0000759C 1028 003E                  		move.b	$3E(a0),d0
000075A0 0C00 0040                  		cmpi.b	#$40,d0
000075A4 6700                       		beq.s	loc_75B6
000075A6 5828 003E                  		addq.b	#4,$3E(a0)
000075AA                            
000075AA                            loc_75B6:
000075AA 6100 0000                  		bsr.w	Obj11_Bend
000075AE 6100 0000                  		bsr.w	Obj11_MoveSonic
000075B2                            
000075B2                            locret_75BE:
000075B2 4E75                       		rts	
000075B4                            ; End of function Obj11_WalkOff
000075B4                            
000075B4                            ; ---------------------------------------------------------------------------
000075B4                            ; Subroutine allowing Sonic to walk or jump off	a platform
000075B4                            ; ---------------------------------------------------------------------------
000075B4                            
000075B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075B4                            
000075B4                            
000075B4                            ExitPlatform:
000075B4 3401                       		move.w	d1,d2
000075B6                            
000075B6                            ExitPlatform2:
000075B6 D442                       		add.w	d2,d2
000075B8 43F8 D000                  		lea	($FFFFD000).w,a1
000075BC 0829 0001 0022             		btst	#1,$22(a1)
000075C2 6600                       		bne.s	loc_75E0
000075C4 3029 0008                  		move.w	8(a1),d0
000075C8 9068 0008                  		sub.w	8(a0),d0
000075CC D041                       		add.w	d1,d0
000075CE 6B00                       		bmi.s	loc_75E0
000075D0 B042                       		cmp.w	d2,d0
000075D2 6500                       		bcs.s	locret_75F2
000075D4                            
000075D4                            loc_75E0:
000075D4 08A9 0003 0022             		bclr	#3,$22(a1)
000075DA 117C 0002 0024             		move.b	#2,$24(a0)
000075E0 08A8 0003 0022             		bclr	#3,$22(a0)
000075E6                            
000075E6                            locret_75F2:
000075E6 4E75                       		rts	
000075E8                            ; End of function ExitPlatform
000075E8                            
000075E8                            
000075E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075E8                            
000075E8                            
000075E8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000075E8 7000                       		moveq	#0,d0
000075EA 1028 003F                  		move.b	$3F(a0),d0
000075EE 1030 0029                  		move.b	$29(a0,d0.w),d0
000075F2 ED48                       		lsl.w	#6,d0
000075F4 0680 00FF D000             		addi.l	#$FFD000,d0
000075FA 2440                       		movea.l	d0,a2
000075FC 43F8 D000                  		lea	($FFFFD000).w,a1
00007600 302A 000C                  		move.w	$C(a2),d0
00007604 5140                       		subq.w	#8,d0
00007606 7200                       		moveq	#0,d1
00007608 1229 0016                  		move.b	$16(a1),d1
0000760C 9041                       		sub.w	d1,d0
0000760E 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007612 4E75                       		rts	
00007614                            ; End of function Obj11_MoveSonic
00007614                            
00007614                            
00007614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007614                            
00007614                            
00007614                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007614 1028 003E                  		move.b	$3E(a0),d0
00007618 6100 B3A0                  		bsr.w	CalcSine
0000761C 3800                       		move.w	d0,d4
0000761E 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007624 7000                       		moveq	#0,d0
00007626 1028 0028                  		move.b	$28(a0),d0
0000762A E948                       		lsl.w	#4,d0
0000762C 7600                       		moveq	#0,d3
0000762E 1628 003F                  		move.b	$3F(a0),d3
00007632 3403                       		move.w	d3,d2
00007634 D640                       		add.w	d0,d3
00007636 7A00                       		moveq	#0,d5
00007638 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000763E 1A35 3000                  		move.b	(a5,d3.w),d5
00007642 0243 000F                  		andi.w	#$F,d3
00007646 E94B                       		lsl.w	#4,d3
00007648 47F4 3000                  		lea	(a4,d3.w),a3
0000764C 45E8 0029                  		lea	$29(a0),a2
00007650                            
00007650                            loc_765C:
00007650 7000                       		moveq	#0,d0
00007652 101A                       		move.b	(a2)+,d0
00007654 ED48                       		lsl.w	#6,d0
00007656 0680 00FF D000             		addi.l	#$FFD000,d0
0000765C 2240                       		movea.l	d0,a1
0000765E 7000                       		moveq	#0,d0
00007660 101B                       		move.b	(a3)+,d0
00007662 5240                       		addq.w	#1,d0
00007664 C0C5                       		mulu.w	d5,d0
00007666 C0C4                       		mulu.w	d4,d0
00007668 4840                       		swap	d0
0000766A D069 003C                  		add.w	$3C(a1),d0
0000766E 3340 000C                  		move.w	d0,$C(a1)
00007672 51CA FFDC                  		dbf	d2,loc_765C
00007676 7000                       		moveq	#0,d0
00007678 1028 0028                  		move.b	$28(a0),d0
0000767C 7600                       		moveq	#0,d3
0000767E 1628 003F                  		move.b	$3F(a0),d3
00007682 5203                       		addq.b	#1,d3
00007684 9600                       		sub.b	d0,d3
00007686 4403                       		neg.b	d3
00007688 6B00                       		bmi.s	locret_76CA
0000768A 3403                       		move.w	d3,d2
0000768C E94B                       		lsl.w	#4,d3
0000768E 47F4 3000                  		lea	(a4,d3.w),a3
00007692 D6C2                       		adda.w	d2,a3
00007694 5342                       		subq.w	#1,d2
00007696 6500                       		bcs.s	locret_76CA
00007698                            
00007698                            loc_76A4:
00007698 7000                       		moveq	#0,d0
0000769A 101A                       		move.b	(a2)+,d0
0000769C ED48                       		lsl.w	#6,d0
0000769E 0680 00FF D000             		addi.l	#$FFD000,d0
000076A4 2240                       		movea.l	d0,a1
000076A6 7000                       		moveq	#0,d0
000076A8 1023                       		move.b	-(a3),d0
000076AA 5240                       		addq.w	#1,d0
000076AC C0C5                       		mulu.w	d5,d0
000076AE C0C4                       		mulu.w	d4,d0
000076B0 4840                       		swap	d0
000076B2 D069 003C                  		add.w	$3C(a1),d0
000076B6 3340 000C                  		move.w	d0,$C(a1)
000076BA 51CA FFDC                  		dbf	d2,loc_76A4
000076BE                            
000076BE                            locret_76CA:
000076BE 4E75                       		rts	
000076C0                            ; End of function Obj11_Bend
000076C0                            
000076C0                            ; ===========================================================================
000076C0                            ; ---------------------------------------------------------------------------
000076C0                            ; GHZ bridge-bending data
000076C0                            ; (Defines how the bridge bends	when Sonic walks across	it)
000076C0                            ; ---------------------------------------------------------------------------
000076C0                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000077D0                            		even
000077D0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000078D0                            		even
000078D0                            
000078D0                            ; ===========================================================================
000078D0                            
000078D0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000078D0 3028 0008                  		move.w	8(a0),d0
000078D4 0240 FF80                  		andi.w	#$FF80,d0
000078D8 3238 F700                  		move.w	($FFFFF700).w,d1
000078DC 0441 0080                  		subi.w	#$80,d1
000078E0 0241 FF80                  		andi.w	#$FF80,d1
000078E4 9041                       		sub.w	d1,d0
000078E6 0C40 0280                  		cmpi.w	#$280,d0
000078EA 6200 0000                  		bhi.w	Obj11_DelAll
000078EE 4E75                       		rts	
000078F0                            ; ===========================================================================
000078F0                            
000078F0                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000078F0 7400                       		moveq	#0,d2
000078F2 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000078F6 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000078F8 5302                       		subq.b	#1,d2		; subtract 1
000078FA 6500                       		bcs.s	Obj11_Delete
000078FC                            
000078FC                            Obj11_DelLoop:
000078FC 7000                       		moveq	#0,d0
000078FE 101A                       		move.b	(a2)+,d0
00007900 ED48                       		lsl.w	#6,d0
00007902 0680 00FF D000             		addi.l	#$FFD000,d0
00007908 2240                       		movea.l	d0,a1
0000790A B048                       		cmp.w	a0,d0
0000790C 6700                       		beq.s	loc_791E
0000790E 6100 0000                  		bsr.w	DeleteObject2
00007912                            
00007912                            loc_791E:
00007912 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007916                            
00007916                            Obj11_Delete:
00007916 6100 0000                  		bsr.w	DeleteObject
0000791A 4E75                       		rts	
0000791C                            ; ===========================================================================
0000791C                            
0000791C                            Obj11_Delete2:				; XREF: Obj11_Index
0000791C 6100 0000                  		bsr.w	DeleteObject
00007920 4E75                       		rts	
00007922                            ; ===========================================================================
00007922                            
00007922                            Obj11_Display2:				; XREF: Obj11_Index
00007922 6100 0000                  		bsr.w	DisplaySprite
00007926 4E75                       		rts	
00007928                            ; ===========================================================================
00007928                            ; ---------------------------------------------------------------------------
00007928                            ; Sprite mappings - GHZ	bridge
00007928                            ; ---------------------------------------------------------------------------
00007928                            Map_obj11:
00007928                            	include "_maps\obj11.asm"
00007928                            ; ---------------------------------------------------------------------------
00007928                            ; Sprite mappings - GHZ	bridge
00007928                            ; ---------------------------------------------------------------------------
00007928 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
0000792C 0000                       		dc.w byte_794B-Map_obj11
0000792E 01                         byte_793A:	dc.b 1
0000792F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007934 02                         byte_7940:	dc.b 2
00007935 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000793A 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000793F 01                         byte_794B:	dc.b 1
00007940 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007946 00                         		even
00007946 00                         		even
00007946                            
00007946                            ; ===========================================================================
00007946                            ; ---------------------------------------------------------------------------
00007946                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007946                            ;	    - spiked ball on a chain (SBZ)
00007946                            ; ---------------------------------------------------------------------------
00007946                            
00007946                            Obj15:					; XREF: Obj_Index
00007946 7000                       		moveq	#0,d0
00007948 1028 0024                  		move.b	$24(a0),d0
0000794C 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007950 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007954                            ; ===========================================================================
00007954 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007958 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000795C 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007960 0000                       		dc.w Obj15_Action-Obj15_Index
00007962                            ; ===========================================================================
00007962                            
00007962                            Obj15_Main:				; XREF: Obj15_Index
00007962 5428 0024                  		addq.b	#2,$24(a0)
00007966 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000796E 317C 4380 0002             		move.w	#$4380,2(a0)
00007974 117C 0004 0001             		move.b	#4,1(a0)
0000797A 117C 0003 0018             		move.b	#3,$18(a0)
00007980 117C 0018 0019             		move.b	#$18,$19(a0)
00007986 117C 0008 0016             		move.b	#8,$16(a0)
0000798C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007992 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007998 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000799E 6600                       		bne.s	Obj15_NotSLZ
000079A0 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000079A8 317C 43DC 0002             		move.w	#$43DC,2(a0)
000079AE 117C 0020 0019             		move.b	#$20,$19(a0)
000079B4 117C 0010 0016             		move.b	#$10,$16(a0)
000079BA 117C 0099 0020             		move.b	#$99,$20(a0)
000079C0                            
000079C0                            Obj15_NotSLZ:
000079C0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000079C6 6600                       		bne.s	Obj15_SetLength
000079C8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000079D0 317C 0391 0002             		move.w	#$391,2(a0)
000079D6 117C 0018 0019             		move.b	#$18,$19(a0)
000079DC 117C 0018 0016             		move.b	#$18,$16(a0)
000079E2 117C 0086 0020             		move.b	#$86,$20(a0)
000079E8 117C 000C 0024             		move.b	#$C,$24(a0)
000079EE                            
000079EE                            Obj15_SetLength:
000079EE 1810                       		move.b	0(a0),d4
000079F0 7200                       		moveq	#0,d1
000079F2 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000079F6 1212                       		move.b	(a2),d1		; move a2 to d1
000079F8 3F01                       		move.w	d1,-(sp)
000079FA 0241 000F                  		andi.w	#$F,d1
000079FE 14FC 0000                  		move.b	#0,(a2)+
00007A02 3601                       		move.w	d1,d3
00007A04 E94B                       		lsl.w	#4,d3
00007A06 5003                       		addq.b	#8,d3
00007A08 1143 003C                  		move.b	d3,$3C(a0)
00007A0C 5103                       		subq.b	#8,d3
00007A0E 4A28 001A                  		tst.b	$1A(a0)
00007A12 6700                       		beq.s	Obj15_MakeChain
00007A14 5003                       		addq.b	#8,d3
00007A16 5341                       		subq.w	#1,d1
00007A18                            
00007A18                            Obj15_MakeChain:
00007A18 6100 0000                  		bsr.w	SingleObjLoad
00007A1C 6600                       		bne.s	loc_7A92
00007A1E 5228 0028                  		addq.b	#1,$28(a0)
00007A22 3A09                       		move.w	a1,d5
00007A24 0445 D000                  		subi.w	#-$3000,d5
00007A28 EC4D                       		lsr.w	#6,d5
00007A2A 0245 007F                  		andi.w	#$7F,d5
00007A2E 14C5                       		move.b	d5,(a2)+
00007A30 137C 000A 0024             		move.b	#$A,$24(a1)
00007A36 1284                       		move.b	d4,0(a1)	; load swinging	object
00007A38 2368 0004 0004             		move.l	4(a0),4(a1)
00007A3E 3368 0002 0002             		move.w	2(a0),2(a1)
00007A44 08A9 0006 0002             		bclr	#6,2(a1)
00007A4A 137C 0004 0001             		move.b	#4,1(a1)
00007A50 137C 0004 0018             		move.b	#4,$18(a1)
00007A56 137C 0008 0019             		move.b	#8,$19(a1)
00007A5C 137C 0001 001A             		move.b	#1,$1A(a1)
00007A62 1343 003C                  		move.b	d3,$3C(a1)
00007A66 0403 0010                  		subi.b	#$10,d3
00007A6A 6400                       		bcc.s	loc_7A8E
00007A6C 137C 0002 001A             		move.b	#2,$1A(a1)
00007A72 137C 0003 0018             		move.b	#3,$18(a1)
00007A78 08E9 0006 0002             		bset	#6,2(a1)
00007A7E                            
00007A7E                            loc_7A8E:
00007A7E 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007A82                            
00007A82                            loc_7A92:
00007A82 3A08                       		move.w	a0,d5
00007A84 0445 D000                  		subi.w	#-$3000,d5
00007A88 EC4D                       		lsr.w	#6,d5
00007A8A 0245 007F                  		andi.w	#$7F,d5
00007A8E 14C5                       		move.b	d5,(a2)+
00007A90 317C 4080 0026             		move.w	#$4080,$26(a0)
00007A96 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007A9C 321F                       		move.w	(sp)+,d1
00007A9E 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007AA2 6700                       		beq.s	loc_7AD4	; if not, branch
00007AA4 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007AAC 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007AB2 117C 0001 001A             		move.b	#1,$1A(a0)
00007AB8 117C 0002 0018             		move.b	#2,$18(a0)
00007ABE 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007AC4                            
00007AC4                            loc_7AD4:
00007AC4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007ACA 6700                       		beq.s	Obj15_Action	; if yes, branch
00007ACC                            
00007ACC                            Obj15_SetSolid:				; XREF: Obj15_Index
00007ACC 7200                       		moveq	#0,d1
00007ACE 1228 0019                  		move.b	$19(a0),d1
00007AD2 7600                       		moveq	#0,d3
00007AD4 1628 0016                  		move.b	$16(a0),d3
00007AD8 6100 FA76                  		bsr.w	Obj15_Solid
00007ADC                            
00007ADC                            Obj15_Action:				; XREF: Obj15_Index
00007ADC 6100 0000                  		bsr.w	Obj15_Move
00007AE0 6100 0000                  		bsr.w	DisplaySprite
00007AE4 6000 0000                  		bra.w	Obj15_ChkDel
00007AE8                            ; ===========================================================================
00007AE8                            
00007AE8                            Obj15_Action2:				; XREF: Obj15_Index
00007AE8 7200                       		moveq	#0,d1
00007AEA 1228 0019                  		move.b	$19(a0),d1
00007AEE 6100 FAC4                  		bsr.w	ExitPlatform
00007AF2 3F28 0008                  		move.w	8(a0),-(sp)
00007AF6 6100 0000                  		bsr.w	Obj15_Move
00007AFA 341F                       		move.w	(sp)+,d2
00007AFC 7600                       		moveq	#0,d3
00007AFE 1628 0016                  		move.b	$16(a0),d3
00007B02 5203                       		addq.b	#1,d3
00007B04 6100 0000                  		bsr.w	MvSonicOnPtfm
00007B08 6100 0000                  		bsr.w	DisplaySprite
00007B0C 6000 0000                  		bra.w	Obj15_ChkDel
00007B10                            
00007B10 4E75                       		rts
00007B12                            
00007B12                            ; ---------------------------------------------------------------------------
00007B12                            ; Subroutine to	change Sonic's position with a platform
00007B12                            ; ---------------------------------------------------------------------------
00007B12                            
00007B12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B12                            
00007B12                            
00007B12                            MvSonicOnPtfm:
00007B12 43F8 D000                  		lea	($FFFFD000).w,a1
00007B16 3028 000C                  		move.w	$C(a0),d0
00007B1A 9043                       		sub.w	d3,d0
00007B1C 6000                       		bra.s	MvSonic2
00007B1E                            ; End of function MvSonicOnPtfm
00007B1E                            
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; Subroutine to	change Sonic's position with a platform
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            
00007B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B1E                            
00007B1E                            
00007B1E                            MvSonicOnPtfm2:
00007B1E 43F8 D000                  		lea	($FFFFD000).w,a1
00007B22 3028 000C                  		move.w	$C(a0),d0
00007B26 0440 0009                  		subi.w	#9,d0
00007B2A                            
00007B2A                            MvSonic2:
00007B2A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007B2E 6B00                       		bmi.s	locret_7B62
00007B30 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007B36 6400                       		bcc.s	locret_7B62
00007B38 4A78 FE08                  		tst.w	($FFFFFE08).w
00007B3C 6600                       		bne.s	locret_7B62
00007B3E 7200                       		moveq	#0,d1
00007B40 1229 0016                  		move.b	$16(a1),d1
00007B44 9041                       		sub.w	d1,d0
00007B46 3340 000C                  		move.w	d0,$C(a1)
00007B4A 9468 0008                  		sub.w	8(a0),d2
00007B4E 9569 0008                  		sub.w	d2,8(a1)
00007B52                            
00007B52                            locret_7B62:
00007B52 4E75                       		rts	
00007B54                            ; End of function MvSonicOnPtfm2
00007B54                            
00007B54                            
00007B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B54                            
00007B54                            
00007B54                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007B54 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007B58 323C 0080                  		move.w	#$80,d1
00007B5C 0828 0000 0022             		btst	#0,$22(a0)
00007B62 6700                       		beq.s	loc_7B78
00007B64 4440                       		neg.w	d0
00007B66 D041                       		add.w	d1,d0
00007B68                            
00007B68                            loc_7B78:
00007B68 6000                       		bra.s	Obj15_Move2
00007B6A                            ; End of function Obj15_Move
00007B6A                            
00007B6A                            
00007B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B6A                            
00007B6A                            
00007B6A                            Obj48_Move:				; XREF: Obj48_Display2
00007B6A 4A28 003D                  		tst.b	$3D(a0)
00007B6E 6600                       		bne.s	loc_7B9C
00007B70 3028 003E                  		move.w	$3E(a0),d0
00007B74 5040                       		addq.w	#8,d0
00007B76 3140 003E                  		move.w	d0,$3E(a0)
00007B7A D168 0026                  		add.w	d0,$26(a0)
00007B7E 0C40 0200                  		cmpi.w	#$200,d0
00007B82 6600                       		bne.s	loc_7BB6
00007B84 117C 0001 003D             		move.b	#1,$3D(a0)
00007B8A 6000                       		bra.s	loc_7BB6
00007B8C                            ; ===========================================================================
00007B8C                            
00007B8C                            loc_7B9C:
00007B8C 3028 003E                  		move.w	$3E(a0),d0
00007B90 5140                       		subq.w	#8,d0
00007B92 3140 003E                  		move.w	d0,$3E(a0)
00007B96 D168 0026                  		add.w	d0,$26(a0)
00007B9A 0C40 FE00                  		cmpi.w	#-$200,d0
00007B9E 6600                       		bne.s	loc_7BB6
00007BA0 117C 0000 003D             		move.b	#0,$3D(a0)
00007BA6                            
00007BA6                            loc_7BB6:
00007BA6 1028 0026                  		move.b	$26(a0),d0
00007BAA                            ; End of function Obj48_Move
00007BAA                            
00007BAA                            
00007BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BAA                            
00007BAA                            
00007BAA                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007BAA 6100 AE0E                  		bsr.w	CalcSine
00007BAE 3428 0038                  		move.w	$38(a0),d2
00007BB2 3628 003A                  		move.w	$3A(a0),d3
00007BB6 45E8 0028                  		lea	$28(a0),a2
00007BBA 7C00                       		moveq	#0,d6
00007BBC 1C1A                       		move.b	(a2)+,d6
00007BBE                            
00007BBE                            loc_7BCE:
00007BBE 7800                       		moveq	#0,d4
00007BC0 181A                       		move.b	(a2)+,d4
00007BC2 ED4C                       		lsl.w	#6,d4
00007BC4 0684 00FF D000             		addi.l	#$FFD000,d4
00007BCA 2244                       		movea.l	d4,a1
00007BCC 7800                       		moveq	#0,d4
00007BCE 1829 003C                  		move.b	$3C(a1),d4
00007BD2 2A04                       		move.l	d4,d5
00007BD4 C9C0                       		muls.w	d0,d4
00007BD6 E084                       		asr.l	#8,d4
00007BD8 CBC1                       		muls.w	d1,d5
00007BDA E085                       		asr.l	#8,d5
00007BDC D842                       		add.w	d2,d4
00007BDE DA43                       		add.w	d3,d5
00007BE0 3344 000C                  		move.w	d4,$C(a1)
00007BE4 3345 0008                  		move.w	d5,8(a1)
00007BE8 51CE FFD4                  		dbf	d6,loc_7BCE
00007BEC 4E75                       		rts	
00007BEE                            ; End of function Obj15_Move2
00007BEE                            
00007BEE                            ; ===========================================================================
00007BEE                            
00007BEE                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007BEE 3028 003A                  		move.w	$3A(a0),d0
00007BF2 0240 FF80                  		andi.w	#$FF80,d0
00007BF6 3238 F700                  		move.w	($FFFFF700).w,d1
00007BFA 0441 0080                  		subi.w	#$80,d1
00007BFE 0241 FF80                  		andi.w	#$FF80,d1
00007C02 9041                       		sub.w	d1,d0
00007C04 0C40 0280                  		cmpi.w	#$280,d0
00007C08 6200 0000                  		bhi.w	Obj15_DelAll
00007C0C 4E75                       		rts	
00007C0E                            ; ===========================================================================
00007C0E                            
00007C0E                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007C0E 7400                       		moveq	#0,d2
00007C10 45E8 0028                  		lea	$28(a0),a2
00007C14 141A                       		move.b	(a2)+,d2
00007C16                            
00007C16                            Obj15_DelLoop:
00007C16 7000                       		moveq	#0,d0
00007C18 101A                       		move.b	(a2)+,d0
00007C1A ED48                       		lsl.w	#6,d0
00007C1C 0680 00FF D000             		addi.l	#$FFD000,d0
00007C22 2240                       		movea.l	d0,a1
00007C24 6100 0000                  		bsr.w	DeleteObject2
00007C28 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007C2C 4E75                       		rts	
00007C2E                            ; ===========================================================================
00007C2E                            
00007C2E                            Obj15_Delete:				; XREF: Obj15_Index
00007C2E 6100 0000                  		bsr.w	DeleteObject
00007C32 4E75                       		rts	
00007C34                            ; ===========================================================================
00007C34                            
00007C34                            Obj15_Display:				; XREF: Obj15_Index
00007C34 6000 0000                  		bra.w	DisplaySprite
00007C38                            ; ===========================================================================
00007C38                            ; ---------------------------------------------------------------------------
00007C38                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007C38                            ; ---------------------------------------------------------------------------
00007C38                            Map_obj15:
00007C38                            	include "_maps\obj15ghz.asm"
00007C38                            ; ---------------------------------------------------------------------------
00007C38                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007C38                            ; ---------------------------------------------------------------------------
00007C38 0000                       		dc.w byte_7C4E-Map_obj15
00007C3A 0000                       		dc.w byte_7C59-Map_obj15
00007C3C 0000                       		dc.w byte_7C5F-Map_obj15
00007C3E 02                         byte_7C4E:	dc.b 2
00007C3F F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007C44 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007C49 01                         byte_7C59:	dc.b 1
00007C4A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007C4F 01                         byte_7C5F:	dc.b 1
00007C50 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007C56 00                         		even
00007C56 00                         		even
00007C56                            
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            ; Sprite mappings - SLZ	swinging platforms
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            Map_obj15a:
00007C56                            	include "_maps\obj15slz.asm"
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            ; Sprite mappings - SLZ	swinging platforms
00007C56                            ; ---------------------------------------------------------------------------
00007C56 0000                       		dc.w byte_7C6C-Map_obj15a
00007C58 0000                       		dc.w byte_7C95-Map_obj15a
00007C5A 0000                       		dc.w byte_7C9B-Map_obj15a
00007C5C 08                         byte_7C6C:	dc.b 8
00007C5D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007C62 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007C67 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007C6C F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007C71 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007C76 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007C7B 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007C80 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007C85 01                         byte_7C95:	dc.b 1
00007C86 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007C8B 01                         byte_7C9B:	dc.b 1
00007C8C F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007C92 00                         		even
00007C92 00                         		even
00007C92                            
00007C92                            ; ===========================================================================
00007C92                            ; ---------------------------------------------------------------------------
00007C92                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007C92                            ; ---------------------------------------------------------------------------
00007C92                            
00007C92                            Obj17:					; XREF: Obj_Index
00007C92 7000                       		moveq	#0,d0
00007C94 1028 0024                  		move.b	$24(a0),d0
00007C98 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007C9C 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007CA0                            ; ===========================================================================
00007CA0 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007CA2 0000                       		dc.w Obj17_Action-Obj17_Index
00007CA4 0000                       		dc.w Obj17_Action-Obj17_Index
00007CA6 0000                       		dc.w Obj17_Delete-Obj17_Index
00007CA8 0000                       		dc.w Obj17_Display-Obj17_Index
00007CAA                            ; ===========================================================================
00007CAA                            
00007CAA                            Obj17_Main:				; XREF: Obj17_Index
00007CAA 5428 0024                  		addq.b	#2,$24(a0)
00007CAE 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007CB6 317C 4398 0002             		move.w	#$4398,2(a0)
00007CBC 117C 0007 0022             		move.b	#7,$22(a0)
00007CC2 117C 0004 0001             		move.b	#4,1(a0)
00007CC8 117C 0003 0018             		move.b	#3,$18(a0)
00007CCE 117C 0008 0019             		move.b	#8,$19(a0)
00007CD4 3428 000C                  		move.w	$C(a0),d2
00007CD8 3628 0008                  		move.w	8(a0),d3
00007CDC 1810                       		move.b	0(a0),d4
00007CDE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007CE2 7200                       		moveq	#0,d1
00007CE4 1212                       		move.b	(a2),d1		; move a2 to d1
00007CE6 14FC 0000                  		move.b	#0,(a2)+
00007CEA 3001                       		move.w	d1,d0
00007CEC E248                       		lsr.w	#1,d0
00007CEE E948                       		lsl.w	#4,d0
00007CF0 9640                       		sub.w	d0,d3
00007CF2 5501                       		subq.b	#2,d1
00007CF4 6500                       		bcs.s	Obj17_Action
00007CF6 7C00                       		moveq	#0,d6
00007CF8                            
00007CF8                            Obj17_MakeHelix:
00007CF8 6100 0000                  		bsr.w	SingleObjLoad
00007CFC 6600                       		bne.s	Obj17_Action
00007CFE 5228 0028                  		addq.b	#1,$28(a0)
00007D02 3A09                       		move.w	a1,d5
00007D04 0445 D000                  		subi.w	#$D000,d5
00007D08 EC4D                       		lsr.w	#6,d5
00007D0A 0245 007F                  		andi.w	#$7F,d5
00007D0E 14C5                       		move.b	d5,(a2)+
00007D10 137C 0008 0024             		move.b	#8,$24(a1)
00007D16 1284                       		move.b	d4,0(a1)
00007D18 3342 000C                  		move.w	d2,$C(a1)
00007D1C 3343 0008                  		move.w	d3,8(a1)
00007D20 2368 0004 0004             		move.l	4(a0),4(a1)
00007D26 337C 4398 0002             		move.w	#$4398,2(a1)
00007D2C 137C 0004 0001             		move.b	#4,1(a1)
00007D32 137C 0003 0018             		move.b	#3,$18(a1)
00007D38 137C 0008 0019             		move.b	#8,$19(a1)
00007D3E 1346 003E                  		move.b	d6,$3E(a1)
00007D42 5206                       		addq.b	#1,d6
00007D44 0206 0007                  		andi.b	#7,d6
00007D48 0643 0010                  		addi.w	#$10,d3
00007D4C B668 0008                  		cmp.w	8(a0),d3
00007D50 6600                       		bne.s	loc_7D78
00007D52 1146 003E                  		move.b	d6,$3E(a0)
00007D56 5206                       		addq.b	#1,d6
00007D58 0206 0007                  		andi.b	#7,d6
00007D5C 0643 0010                  		addi.w	#$10,d3
00007D60 5228 0028                  		addq.b	#1,$28(a0)
00007D64                            
00007D64                            loc_7D78:
00007D64 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007D68                            
00007D68                            Obj17_Action:				; XREF: Obj17_Index
00007D68 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007D6C 6100 0000                  		bsr.w	DisplaySprite
00007D70 6000 0000                  		bra.w	Obj17_ChkDel
00007D74                            
00007D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D74                            
00007D74                            
00007D74                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007D74 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007D78 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007D7E D028 003E                  		add.b	$3E(a0),d0
00007D82 0200 0007                  		andi.b	#7,d0
00007D86 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007D8A 6600                       		bne.s	locret_7DA6
00007D8C 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007D92                            
00007D92                            locret_7DA6:
00007D92 4E75                       		rts	
00007D94                            ; End of function Obj17_RotateSpikes
00007D94                            
00007D94                            ; ===========================================================================
00007D94                            
00007D94                            Obj17_ChkDel:				; XREF: Obj17_Action
00007D94 3028 0008                  		move.w	8(a0),d0
00007D98 0240 FF80                  		andi.w	#$FF80,d0
00007D9C 3238 F700                  		move.w	($FFFFF700).w,d1
00007DA0 0441 0080                  		subi.w	#$80,d1
00007DA4 0241 FF80                  		andi.w	#$FF80,d1
00007DA8 9041                       		sub.w	d1,d0
00007DAA 0C40 0280                  		cmpi.w	#$280,d0
00007DAE 6200 0000                  		bhi.w	Obj17_DelAll
00007DB2 4E75                       		rts	
00007DB4                            ; ===========================================================================
00007DB4                            
00007DB4                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007DB4 7400                       		moveq	#0,d2
00007DB6 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007DBA 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007DBC 5502                       		subq.b	#2,d2
00007DBE 6500                       		bcs.s	Obj17_Delete
00007DC0                            
00007DC0                            Obj17_DelLoop:
00007DC0 7000                       		moveq	#0,d0
00007DC2 101A                       		move.b	(a2)+,d0
00007DC4 ED48                       		lsl.w	#6,d0
00007DC6 0680 00FF D000             		addi.l	#$FFD000,d0
00007DCC 2240                       		movea.l	d0,a1
00007DCE 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007DD2 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007DD6                            
00007DD6                            Obj17_Delete:				; XREF: Obj17_Index
00007DD6 6100 0000                  		bsr.w	DeleteObject
00007DDA 4E75                       		rts	
00007DDC                            ; ===========================================================================
00007DDC                            
00007DDC                            Obj17_Display:				; XREF: Obj17_Index
00007DDC 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007DE0 6000 0000                  		bra.w	DisplaySprite
00007DE4                            ; ===========================================================================
00007DE4                            ; ---------------------------------------------------------------------------
00007DE4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007DE4                            ; ---------------------------------------------------------------------------
00007DE4                            Map_obj17:
00007DE4                            	include "_maps\obj17.asm"
00007DE4                            ; ---------------------------------------------------------------------------
00007DE4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007DE4                            ; ---------------------------------------------------------------------------
00007DE4 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007DE8 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007DEC 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007DF0 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007DF4 01                         byte_7E08:	dc.b 1
00007DF5 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007DFA 01                         byte_7E0E:	dc.b 1
00007DFB F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007E00 01                         byte_7E14:	dc.b 1
00007E01 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007E06 01                         byte_7E1A:	dc.b 1
00007E07 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007E0C 01                         byte_7E20:	dc.b 1
00007E0D 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007E12 01                         byte_7E26:	dc.b 1
00007E13 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007E18 01                         byte_7E2C:	dc.b 1
00007E19 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007E1E                            		even
00007E1E                            		even
00007E1E                            
00007E1E                            ; ===========================================================================
00007E1E                            ; ---------------------------------------------------------------------------
00007E1E                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007E1E                            ; ---------------------------------------------------------------------------
00007E1E                            
00007E1E                            Obj18:					; XREF: Obj_Index
00007E1E 7000                       		moveq	#0,d0
00007E20 1028 0024                  		move.b	$24(a0),d0
00007E24 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007E28 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007E2C                            ; ===========================================================================
00007E2C 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007E2E 0000                       		dc.w Obj18_Solid-Obj18_Index
00007E30 0000                       		dc.w Obj18_Action2-Obj18_Index
00007E32 0000                       		dc.w Obj18_Delete-Obj18_Index
00007E34 0000                       		dc.w Obj18_Action-Obj18_Index
00007E36                            ; ===========================================================================
00007E36                            
00007E36                            Obj18_Main:				; XREF: Obj18_Index
00007E36 5428 0024                  		addq.b	#2,$24(a0)
00007E3A 317C 4000 0002             		move.w	#$4000,2(a0)
00007E40 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007E48 117C 0020 0019             		move.b	#$20,$19(a0)
00007E4E 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007E54 6600                       		bne.s	Obj18_NotSYZ
00007E56 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007E5E 117C 0020 0019             		move.b	#$20,$19(a0)
00007E64                            
00007E64                            Obj18_NotSYZ:
00007E64 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E6A 6600                       		bne.s	Obj18_NotSLZ
00007E6C 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007E74 117C 0020 0019             		move.b	#$20,$19(a0)
00007E7A 317C 4000 0002             		move.w	#$4000,2(a0)
00007E80 117C 0003 0028             		move.b	#3,$28(a0)
00007E86                            
00007E86                            Obj18_NotSLZ:
00007E86 117C 0004 0001             		move.b	#4,1(a0)
00007E8C 117C 0004 0018             		move.b	#4,$18(a0)
00007E92 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007E98 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007E9E 3168 0008 0032             		move.w	8(a0),$32(a0)
00007EA4 317C 0080 0026             		move.w	#$80,$26(a0)
00007EAA 7200                       		moveq	#0,d1
00007EAC 1028 0028                  		move.b	$28(a0),d0
00007EB0 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007EB4 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007EB6 5201                       		addq.b	#1,d1		; use frame #1
00007EB8 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007EBE                            
00007EBE                            Obj18_SetFrame:
00007EBE 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007EC2                            
00007EC2                            Obj18_Solid:				; XREF: Obj18_Index
00007EC2 4A28 0038                  		tst.b	$38(a0)
00007EC6 6700                       		beq.s	loc_7EE0
00007EC8 5928 0038                  		subq.b	#4,$38(a0)
00007ECC                            
00007ECC                            loc_7EE0:
00007ECC 7200                       		moveq	#0,d1
00007ECE 1228 0019                  		move.b	$19(a0),d1
00007ED2 6100 F56C                  		bsr.w	PlatformObject
00007ED6                            
00007ED6                            Obj18_Action:				; XREF: Obj18_Index
00007ED6 6100 0000                  		bsr.w	Obj18_Move
00007EDA 6100 0000                  		bsr.w	Obj18_Nudge
00007EDE 6100 0000                  		bsr.w	DisplaySprite
00007EE2 6000 0000                  		bra.w	Obj18_ChkDel
00007EE6                            ; ===========================================================================
00007EE6                            
00007EE6                            Obj18_Action2:				; XREF: Obj18_Index
00007EE6 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007EEC 6700                       		beq.s	loc_7F06
00007EEE 5828 0038                  		addq.b	#4,$38(a0)
00007EF2                            
00007EF2                            loc_7F06:
00007EF2 7200                       		moveq	#0,d1
00007EF4 1228 0019                  		move.b	$19(a0),d1
00007EF8 6100 F6BA                  		bsr.w	ExitPlatform
00007EFC 3F28 0008                  		move.w	8(a0),-(sp)
00007F00 6100 0000                  		bsr.w	Obj18_Move
00007F04 6100 0000                  		bsr.w	Obj18_Nudge
00007F08 341F                       		move.w	(sp)+,d2
00007F0A 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00007F0E 6100 0000                  		bsr.w	DisplaySprite
00007F12 6000 0000                  		bra.w	Obj18_ChkDel
00007F16                            
00007F16 4E75                       		rts
00007F18                            
00007F18                            ; ---------------------------------------------------------------------------
00007F18                            ; Subroutine to	move platform slightly when you	stand on it
00007F18                            ; ---------------------------------------------------------------------------
00007F18                            
00007F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F18                            
00007F18                            
00007F18                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00007F18 1028 0038                  		move.b	$38(a0),d0
00007F1C 6100 AA9C                  		bsr.w	CalcSine
00007F20 323C 0400                  		move.w	#$400,d1
00007F24 C1C1                       		muls.w	d1,d0
00007F26 4840                       		swap	d0
00007F28 D068 002C                  		add.w	$2C(a0),d0
00007F2C 3140 000C                  		move.w	d0,$C(a0)
00007F30 4E75                       		rts	
00007F32                            ; End of function Obj18_Nudge
00007F32                            
00007F32                            ; ---------------------------------------------------------------------------
00007F32                            ; Subroutine to	move platforms
00007F32                            ; ---------------------------------------------------------------------------
00007F32                            
00007F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F32                            
00007F32                            
00007F32                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00007F32 7000                       		moveq	#0,d0
00007F34 1028 0028                  		move.b	$28(a0),d0
00007F38 0240 000F                  		andi.w	#$F,d0
00007F3C D040                       		add.w	d0,d0
00007F3E 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00007F42 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00007F46                            ; End of function Obj18_Move
00007F46                            
00007F46                            ; ===========================================================================
00007F46 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00007F4A 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00007F4E 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00007F52 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00007F56 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00007F5A 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00007F5E 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00007F60                            ; ===========================================================================
00007F60                            
00007F60                            Obj18_Type00:
00007F60 4E75                       		rts			; platform 00 doesn't move
00007F62                            ; ===========================================================================
00007F62                            
00007F62                            Obj18_Type05:
00007F62 3028 0032                  		move.w	$32(a0),d0
00007F66 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F6A 4401                       		neg.b	d1		; reverse platform-motion
00007F6C 0601 0040                  		addi.b	#$40,d1
00007F70 6000                       		bra.s	Obj18_01_Move
00007F72                            ; ===========================================================================
00007F72                            
00007F72                            Obj18_Type01:
00007F72 3028 0032                  		move.w	$32(a0),d0
00007F76 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F7A 0401 0040                  		subi.b	#$40,d1
00007F7E                            
00007F7E                            Obj18_01_Move:
00007F7E 4881                       		ext.w	d1
00007F80 D041                       		add.w	d1,d0
00007F82 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00007F86 6000 0000                  		bra.w	Obj18_ChgMotion
00007F8A                            ; ===========================================================================
00007F8A                            
00007F8A                            Obj18_Type0C:
00007F8A 3028 0034                  		move.w	$34(a0),d0
00007F8E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00007F92 4401                       		neg.b	d1		; reverse platform-motion
00007F94 0601 0030                  		addi.b	#$30,d1
00007F98 6000                       		bra.s	Obj18_02_Move
00007F9A                            ; ===========================================================================
00007F9A                            
00007F9A                            Obj18_Type0B:
00007F9A 3028 0034                  		move.w	$34(a0),d0
00007F9E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00007FA2 0401 0030                  		subi.b	#$30,d1
00007FA6 6000                       		bra.s	Obj18_02_Move
00007FA8                            ; ===========================================================================
00007FA8                            
00007FA8                            Obj18_Type06:
00007FA8 3028 0034                  		move.w	$34(a0),d0
00007FAC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007FB0 4401                       		neg.b	d1		; reverse platform-motion
00007FB2 0601 0040                  		addi.b	#$40,d1
00007FB6 6000                       		bra.s	Obj18_02_Move
00007FB8                            ; ===========================================================================
00007FB8                            
00007FB8                            Obj18_Type02:
00007FB8 3028 0034                  		move.w	$34(a0),d0
00007FBC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007FC0 0401 0040                  		subi.b	#$40,d1
00007FC4                            
00007FC4                            Obj18_02_Move:
00007FC4 4881                       		ext.w	d1
00007FC6 D041                       		add.w	d1,d0
00007FC8 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00007FCC 6000 0000                  		bra.w	Obj18_ChgMotion
00007FD0                            ; ===========================================================================
00007FD0                            
00007FD0                            Obj18_Type03:
00007FD0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00007FD4 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00007FD6 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00007FDC 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00007FDE 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00007FE4                            
00007FE4                            Obj18_03_NoMove:
00007FE4 4E75                       		rts	
00007FE6                            ; ===========================================================================
00007FE6                            
00007FE6                            Obj18_03_Wait:
00007FE6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00007FEA 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00007FEC 317C 0020 003A             		move.w	#32,$3A(a0)
00007FF2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00007FF6 4E75                       		rts	
00007FF8                            ; ===========================================================================
00007FF8                            
00007FF8                            Obj18_Type04:
00007FF8 4A68 003A                  		tst.w	$3A(a0)
00007FFC 6700                       		beq.s	loc_8048
00007FFE 5368 003A                  		subq.w	#1,$3A(a0)
00008002 6600                       		bne.s	loc_8048
00008004 0828 0003 0022             		btst	#3,$22(a0)
0000800A 6700                       		beq.s	loc_8042
0000800C 08E9 0001 0022             		bset	#1,$22(a1)
00008012 08A9 0003 0022             		bclr	#3,$22(a1)
00008018 137C 0002 0024             		move.b	#2,$24(a1)
0000801E 08A8 0003 0022             		bclr	#3,$22(a0)
00008024 4228 0025                  		clr.b	$25(a0)
00008028 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000802E                            
0000802E                            loc_8042:
0000802E 117C 0008 0024             		move.b	#8,$24(a0)
00008034                            
00008034                            loc_8048:
00008034 2628 002C                  		move.l	$2C(a0),d3
00008038 3028 0012                  		move.w	$12(a0),d0
0000803C 48C0                       		ext.l	d0
0000803E E180                       		asl.l	#8,d0
00008040 D680                       		add.l	d0,d3
00008042 2143 002C                  		move.l	d3,$2C(a0)
00008046 0668 0038 0012             		addi.w	#$38,$12(a0)
0000804C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008050 0640 00E0                  		addi.w	#$E0,d0
00008054 B068 002C                  		cmp.w	$2C(a0),d0
00008058 6400                       		bcc.s	locret_8074
0000805A 117C 0006 0024             		move.b	#6,$24(a0)
00008060                            
00008060                            locret_8074:
00008060 4E75                       		rts	
00008062                            ; ===========================================================================
00008062                            
00008062                            Obj18_Type07:
00008062 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008066 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008068 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000806C 7000                       		moveq	#0,d0
0000806E 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008072 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008074 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008078 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000807A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008080                            
00008080                            Obj18_07_NoMove:
00008080 4E75                       		rts	
00008082                            ; ===========================================================================
00008082                            
00008082                            Obj18_07_Wait:
00008082 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008086 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008088 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000808C 4E75                       		rts	
0000808E                            ; ===========================================================================
0000808E                            
0000808E                            Obj18_Type08:
0000808E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008092 3028 0034                  		move.w	$34(a0),d0
00008096 0440 0200                  		subi.w	#$200,d0
0000809A B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000809E 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000080A0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000080A4                            
000080A4                            Obj18_08_NoStop:
000080A4 4E75                       		rts	
000080A6                            ; ===========================================================================
000080A6                            
000080A6                            Obj18_Type0A:
000080A6 3028 0034                  		move.w	$34(a0),d0
000080AA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080AE 0401 0040                  		subi.b	#$40,d1
000080B2 4881                       		ext.w	d1
000080B4 E241                       		asr.w	#1,d1
000080B6 D041                       		add.w	d1,d0
000080B8 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000080BC                            
000080BC                            Obj18_ChgMotion:
000080BC 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000080C2 4E75                       		rts	
000080C4                            ; ===========================================================================
000080C4                            
000080C4                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000080C4 3028 0032                  		move.w	$32(a0),d0
000080C8 0240 FF80                  		andi.w	#$FF80,d0
000080CC 3238 F700                  		move.w	($FFFFF700).w,d1
000080D0 0441 0080                  		subi.w	#$80,d1
000080D4 0241 FF80                  		andi.w	#$FF80,d1
000080D8 9041                       		sub.w	d1,d0
000080DA 0C40 0280                  		cmpi.w	#$280,d0
000080DE 6200                       		bhi.s	Obj18_Delete
000080E0 4E75                       		rts	
000080E2                            ; ===========================================================================
000080E2                            
000080E2                            Obj18_Delete:				; XREF: Obj18_Index
000080E2 6000 0000                  		bra.w	DeleteObject
000080E6                            ; ===========================================================================
000080E6                            ; ---------------------------------------------------------------------------
000080E6                            ; Sprite mappings - unused
000080E6                            ; ---------------------------------------------------------------------------
000080E6                            Map_obj18x:
000080E6                            	include "_maps\obj18x.asm"
000080E6                            ; ---------------------------------------------------------------------------
000080E6                            ; Sprite mappings - unused
000080E6                            ; ---------------------------------------------------------------------------
000080E6 0000                       		dc.w byte_80FE-Map_obj18x
000080E8 0000                       		dc.w byte_8109-Map_obj18x
000080EA 02                         byte_80FE:	dc.b 2
000080EB F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000080F0 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000080F5 0A                         byte_8109:	dc.b $A
000080F6 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000080FB 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008100 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008105 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000810A 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000810F F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008114 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008119 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000811E 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008123 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008128                            		even
00008128                            		even
00008128                            
00008128                            ; ---------------------------------------------------------------------------
00008128                            ; Sprite mappings - GHZ	platforms
00008128                            ; ---------------------------------------------------------------------------
00008128                            Map_obj18:
00008128                            	include "_maps\obj18ghz.asm"
00008128                            ; ---------------------------------------------------------------------------
00008128                            ; Sprite mappings - GHZ	platforms
00008128                            ; ---------------------------------------------------------------------------
00008128 0000                       		dc.w byte_8140-Map_obj18
0000812A 0000                       		dc.w byte_8155-Map_obj18
0000812C 04                         byte_8140:	dc.b 4
0000812D F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008132 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008137 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000813C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008141 0A                         byte_8155:	dc.b $A
00008142 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008147 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000814C 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008151 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008156 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000815B F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008160 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008165 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000816A 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000816F 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008174                            		even
00008174                            		even
00008174                            
00008174                            ; ---------------------------------------------------------------------------
00008174                            ; Sprite mappings - SYZ	platforms
00008174                            ; ---------------------------------------------------------------------------
00008174                            Map_obj18a:
00008174                            	include "_maps\obj18syz.asm"
00008174                            ; ---------------------------------------------------------------------------
00008174                            ; Sprite mappings - SYZ	platforms
00008174                            ; ---------------------------------------------------------------------------
00008174 0000                       		dc.w byte_818A-Map_obj18a
00008176 03                         byte_818A:	dc.b 3
00008177 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000817C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008181 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008186                            		even
00008186                            		even
00008186                            
00008186                            ; ---------------------------------------------------------------------------
00008186                            ; Sprite mappings - SLZ	platforms
00008186                            ; ---------------------------------------------------------------------------
00008186                            Map_obj18b:
00008186                            	include "_maps\obj18slz.asm"
00008186                            ; ---------------------------------------------------------------------------
00008186                            ; Sprite mappings - SLZ	platforms
00008186                            ; ---------------------------------------------------------------------------
00008186 0000                       		dc.w byte_819C-Map_obj18b
00008188 02                         byte_819C:	dc.b 2
00008189 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000818E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008194 00                         		even
00008194 00                         		even
00008194                            
00008194                            ; ===========================================================================
00008194                            ; ---------------------------------------------------------------------------
00008194                            ; Object 19 - blank
00008194                            ; ---------------------------------------------------------------------------
00008194                            
00008194                            Obj19:					; XREF: Obj_Index
00008194 4E75                       		rts	
00008196                            ; ===========================================================================
00008196                            ; ---------------------------------------------------------------------------
00008196                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008196                            ; ---------------------------------------------------------------------------
00008196                            Map_obj48:
00008196                            	include "_maps\obj48.asm"
00008196                            ; ---------------------------------------------------------------------------
00008196                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008196                            ; ---------------------------------------------------------------------------
00008196 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000819A 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000819E 06                         byte_81B2:	dc.b 6
0000819F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000081A4 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000081A9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000081AE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000081B3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000081B8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000081BD 04                         byte_81D1:	dc.b 4
000081BE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000081C3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000081C8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000081CD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000081D2 04                         byte_81E6:	dc.b 4
000081D3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000081D8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000081DD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000081E2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000081E7 04                         byte_81FB:	dc.b 4
000081E8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000081ED E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000081F2 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000081F7 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000081FC                            		even
000081FC                            		even
000081FC                            
000081FC                            ; ===========================================================================
000081FC                            ; ---------------------------------------------------------------------------
000081FC                            ; Object 1A - GHZ collapsing ledge
000081FC                            ; ---------------------------------------------------------------------------
000081FC                            
000081FC                            Obj1A:					; XREF: Obj_Index
000081FC 7000                       		moveq	#0,d0
000081FE 1028 0024                  		move.b	$24(a0),d0
00008202 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008206 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000820A                            ; ===========================================================================
0000820A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000820E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008212 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008216                            ; ===========================================================================
00008216                            
00008216                            Obj1A_Main:				; XREF: Obj1A_Index
00008216 5428 0024                  		addq.b	#2,$24(a0)
0000821A 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008222 317C 4000 0002             		move.w	#$4000,2(a0)
00008228 0028 0004 0001             		ori.b	#4,1(a0)
0000822E 117C 0004 0018             		move.b	#4,$18(a0)
00008234 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000823A 117C 0064 0019             		move.b	#$64,$19(a0)
00008240 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008246 117C 0038 0016             		move.b	#$38,$16(a0)
0000824C 08E8 0004 0001             		bset	#4,1(a0)
00008252                            
00008252                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008252 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008256 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008258 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000825C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008260 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008264                            
00008264                            Obj1A_Slope:
00008264 323C 0030                  		move.w	#$30,d1
00008268 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000826E 6100 F2A4                  		bsr.w	SlopeObject
00008272 6000 0000                  		bra.w	MarkObjGone
00008276                            ; ===========================================================================
00008276                            
00008276                            Obj1A_Touch:				; XREF: Obj1A_Index
00008276 4A28 0038                  		tst.b	$38(a0)
0000827A 6700 0000                  		beq.w	loc_847A
0000827E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008284 5328 0038                  		subq.b	#1,$38(a0)
00008288                            
00008288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008288                            
00008288                            
00008288                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008288 323C 0030                  		move.w	#$30,d1
0000828C 6100 F326                  		bsr.w	ExitPlatform
00008290 323C 0030                  		move.w	#$30,d1
00008294 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000829A 3428 0008                  		move.w	8(a0),d2
0000829E 6100 0000                  		bsr.w	SlopeObject2
000082A2 6000 0000                  		bra.w	MarkObjGone
000082A6                            ; End of function Obj1A_WalkOff
000082A6                            
000082A6                            ; ===========================================================================
000082A6                            
000082A6                            Obj1A_Display:				; XREF: Obj1A_Index
000082A6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000082AA 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000082AC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000082B0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000082B4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000082B8 6000 0000                  		bra.w	DisplaySprite
000082BC                            ; ===========================================================================
000082BC                            
000082BC                            loc_82D0:				; XREF: Obj1A_Display
000082BC 5328 0038                  		subq.b	#1,$38(a0)
000082C0 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000082C4 43F8 D000                  		lea	($FFFFD000).w,a1
000082C8 0829 0003 0022             		btst	#3,$22(a1)
000082CE 6700                       		beq.s	loc_82FC
000082D0 4A28 0038                  		tst.b	$38(a0)
000082D4 6600                       		bne.s	locret_8308
000082D6 08A9 0003 0022             		bclr	#3,$22(a1)
000082DC 08A9 0005 0022             		bclr	#5,$22(a1)
000082E2 137C 0001 001D             		move.b	#1,$1D(a1)
000082E8                            
000082E8                            loc_82FC:
000082E8 117C 0000 003A             		move.b	#0,$3A(a0)
000082EE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000082F4                            
000082F4                            locret_8308:
000082F4 4E75                       		rts	
000082F6                            ; ===========================================================================
000082F6                            
000082F6                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000082F6 6100 0000                  		bsr.w	ObjectFall
000082FA 6100 0000                  		bsr.w	DisplaySprite
000082FE 4A28 0001                  		tst.b	1(a0)
00008302 6A00                       		bpl.s	Obj1A_Delete
00008304 4E75                       		rts	
00008306                            ; ===========================================================================
00008306                            
00008306                            Obj1A_Delete:				; XREF: Obj1A_Index
00008306 6100 0000                  		bsr.w	DeleteObject
0000830A 4E75                       		rts	
0000830C                            ; ===========================================================================
0000830C                            ; ---------------------------------------------------------------------------
0000830C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000830C                            ; ---------------------------------------------------------------------------
0000830C                            
0000830C                            Obj53:					; XREF: Obj_Index
0000830C 7000                       		moveq	#0,d0
0000830E 1028 0024                  		move.b	$24(a0),d0
00008312 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008316 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000831A                            ; ===========================================================================
0000831A 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000831E 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008322 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008326                            ; ===========================================================================
00008326                            
00008326                            Obj53_Main:				; XREF: Obj53_Index
00008326 5428 0024                  		addq.b	#2,$24(a0)
0000832A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008332 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008338 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000833E 6600                       		bne.s	Obj53_NotSLZ
00008340 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008346 5428 001A                  		addq.b	#2,$1A(a0)
0000834A                            
0000834A                            Obj53_NotSLZ:
0000834A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008350 6600                       		bne.s	Obj53_NotSBZ
00008352 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008358                            
00008358                            Obj53_NotSBZ:
00008358 0028 0004 0001             		ori.b	#4,1(a0)
0000835E 117C 0004 0018             		move.b	#4,$18(a0)
00008364 117C 0007 0038             		move.b	#7,$38(a0)
0000836A 117C 0044 0019             		move.b	#$44,$19(a0)
00008370                            
00008370                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008370 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008374 6700                       		beq.s	Obj53_Solid	; if not, branch
00008376 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000837A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000837E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008382                            
00008382                            Obj53_Solid:
00008382 323C 0020                  		move.w	#$20,d1
00008386 6100 F0B8                  		bsr.w	PlatformObject
0000838A 4A28 0028                  		tst.b	$28(a0)
0000838E 6A00                       		bpl.s	Obj53_MarkAsGone
00008390 0829 0003 0022             		btst	#3,$22(a1)
00008396 6700                       		beq.s	Obj53_MarkAsGone
00008398 08A8 0000 0001             		bclr	#0,1(a0)
0000839E 3029 0008                  		move.w	8(a1),d0
000083A2 9068 0008                  		sub.w	8(a0),d0
000083A6 6400                       		bcc.s	Obj53_MarkAsGone
000083A8 08E8 0000 0001             		bset	#0,1(a0)
000083AE                            
000083AE                            Obj53_MarkAsGone:
000083AE 6000 0000                  		bra.w	MarkObjGone
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Obj53_Touch:				; XREF: Obj53_Index
000083B2 4A28 0038                  		tst.b	$38(a0)
000083B6 6700 0000                  		beq.w	loc_8458
000083BA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000083C0 5328 0038                  		subq.b	#1,$38(a0)
000083C4                            
000083C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C4                            
000083C4                            
000083C4                            Obj53_WalkOff:				; XREF: Obj53_Index
000083C4 323C 0020                  		move.w	#$20,d1
000083C8 6100 F1EA                  		bsr.w	ExitPlatform
000083CC 3428 0008                  		move.w	8(a0),d2
000083D0 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000083D4 6000 0000                  		bra.w	MarkObjGone
000083D8                            ; End of function Obj53_WalkOff
000083D8                            
000083D8                            ; ===========================================================================
000083D8                            
000083D8                            Obj53_Display:				; XREF: Obj53_Index
000083D8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083DC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000083DE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083E2 6600 0000                  		bne.w	loc_8402	; if yes, branch
000083E6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083EA 6000 0000                  		bra.w	DisplaySprite
000083EE                            ; ===========================================================================
000083EE                            
000083EE                            loc_8402:
000083EE 5328 0038                  		subq.b	#1,$38(a0)
000083F2 6100 FFD0                  		bsr.w	Obj53_WalkOff
000083F6 43F8 D000                  		lea	($FFFFD000).w,a1
000083FA 0829 0003 0022             		btst	#3,$22(a1)
00008400 6700                       		beq.s	loc_842E
00008402 4A28 0038                  		tst.b	$38(a0)
00008406 6600                       		bne.s	locret_843A
00008408 08A9 0003 0022             		bclr	#3,$22(a1)
0000840E 08A9 0005 0022             		bclr	#5,$22(a1)
00008414 137C 0001 001D             		move.b	#1,$1D(a1)
0000841A                            
0000841A                            loc_842E:
0000841A 117C 0000 003A             		move.b	#0,$3A(a0)
00008420 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008426                            
00008426                            locret_843A:
00008426 4E75                       		rts	
00008428                            ; ===========================================================================
00008428                            
00008428                            Obj53_TimeZero:				; XREF: Obj53_Display
00008428 6100 0000                  		bsr.w	ObjectFall
0000842C 6100 0000                  		bsr.w	DisplaySprite
00008430 4A28 0001                  		tst.b	1(a0)
00008434 6A00                       		bpl.s	Obj53_Delete
00008436 4E75                       		rts	
00008438                            ; ===========================================================================
00008438                            
00008438                            Obj53_Delete:				; XREF: Obj53_Index
00008438 6100 0000                  		bsr.w	DeleteObject
0000843C 4E75                       		rts	
0000843E                            ; ===========================================================================
0000843E                            
0000843E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000843E 117C 0000 003A             		move.b	#0,$3A(a0)
00008444                            
00008444                            loc_8458:				; XREF: Obj53_Touch
00008444 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000844A 0828 0000 0028             		btst	#0,$28(a0)
00008450 6700                       		beq.s	loc_846C
00008452 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008458                            
00008458                            loc_846C:
00008458 7207                       		moveq	#7,d1
0000845A 5228 001A                  		addq.b	#1,$1A(a0)
0000845E 6000                       		bra.s	loc_8486
00008460                            ; ===========================================================================
00008460                            
00008460                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008460 117C 0000 003A             		move.b	#0,$3A(a0)
00008466                            
00008466                            loc_847A:				; XREF: Obj1A_Touch
00008466 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000846C 7218                       		moveq	#$18,d1
0000846E 5428 001A                  		addq.b	#2,$1A(a0)
00008472                            
00008472                            loc_8486:				; XREF: Obj53_Collapse
00008472 7000                       		moveq	#0,d0
00008474 1028 001A                  		move.b	$1A(a0),d0
00008478 D040                       		add.w	d0,d0
0000847A 2668 0004                  		movea.l	4(a0),a3
0000847E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008482 524B                       		addq.w	#1,a3
00008484 08E8 0005 0001             		bset	#5,1(a0)
0000848A 1810                       		move.b	0(a0),d4
0000848C 1A28 0001                  		move.b	1(a0),d5
00008490 2248                       		movea.l	a0,a1
00008492 6000                       		bra.s	loc_84B2
00008494                            ; ===========================================================================
00008494                            
00008494                            loc_84AA:
00008494 6100 0000                  		bsr.w	SingleObjLoad
00008498 6600                       		bne.s	loc_84F2
0000849A 5A4B                       		addq.w	#5,a3
0000849C                            
0000849C                            loc_84B2:
0000849C 137C 0006 0024             		move.b	#6,$24(a1)
000084A2 1284                       		move.b	d4,0(a1)
000084A4 234B 0004                  		move.l	a3,4(a1)
000084A8 1345 0001                  		move.b	d5,1(a1)
000084AC 3368 0008 0008             		move.w	8(a0),8(a1)
000084B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000084B8 3368 0002 0002             		move.w	2(a0),2(a1)
000084BE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000084C4 1368 0019 0019             		move.b	$19(a0),$19(a1)
000084CA 135C 0038                  		move.b	(a4)+,$38(a1)
000084CE B3C8                       		cmpa.l	a0,a1
000084D0 6400                       		bcc.s	loc_84EE
000084D2 6100 0000                  		bsr.w	DisplaySprite2
000084D6                            
000084D6                            loc_84EE:
000084D6 51C9 FFBC                  		dbf	d1,loc_84AA
000084DA                            
000084DA                            loc_84F2:
000084DA 6100 0000                  		bsr.w	DisplaySprite
000084DE 303C 00B9                  		move.w	#$B9,d0
000084E2 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000084E8                            ; ===========================================================================
000084E8                            ; ---------------------------------------------------------------------------
000084E8                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000084E8                            ; ---------------------------------------------------------------------------
000084E8 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000084F8 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008502 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000850A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008512                            
00008512                            ; ---------------------------------------------------------------------------
00008512                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008512                            ; ---------------------------------------------------------------------------
00008512                            
00008512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008512                            
00008512                            
00008512                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008512 43F8 D000                  		lea	($FFFFD000).w,a1
00008516 0829 0003 0022             		btst	#3,$22(a1)
0000851C 6700                       		beq.s	locret_856E
0000851E 3029 0008                  		move.w	8(a1),d0
00008522 9068 0008                  		sub.w	8(a0),d0
00008526 D041                       		add.w	d1,d0
00008528 E248                       		lsr.w	#1,d0
0000852A 0828 0000 0001             		btst	#0,1(a0)
00008530 6700                       		beq.s	loc_854E
00008532 4640                       		not.w	d0
00008534 D041                       		add.w	d1,d0
00008536                            
00008536                            loc_854E:
00008536 7200                       		moveq	#0,d1
00008538 1232 0000                  		move.b	(a2,d0.w),d1
0000853C 3028 000C                  		move.w	$C(a0),d0
00008540 9041                       		sub.w	d1,d0
00008542 7200                       		moveq	#0,d1
00008544 1229 0016                  		move.b	$16(a1),d1
00008548 9041                       		sub.w	d1,d0
0000854A 3340 000C                  		move.w	d0,$C(a1)
0000854E 9468 0008                  		sub.w	8(a0),d2
00008552 9569 0008                  		sub.w	d2,8(a1)
00008556                            
00008556                            locret_856E:
00008556 4E75                       		rts	
00008558                            ; End of function SlopeObject2
00008558                            
00008558                            ; ===========================================================================
00008558                            ; ---------------------------------------------------------------------------
00008558                            ; Collision data for GHZ collapsing ledge
00008558                            ; ---------------------------------------------------------------------------
00008558                            Obj1A_SlopeData:
00008558                            		incbin	misc\ghzledge.bin
00008588                            		even
00008588                            
00008588                            ; ---------------------------------------------------------------------------
00008588                            ; Sprite mappings - GHZ	collapsing ledge
00008588                            ; ---------------------------------------------------------------------------
00008588                            Map_obj1A:
00008588                            	include "_maps\obj1A.asm"
00008588                            ; ---------------------------------------------------------------------------
00008588                            ; Sprite mappings - GHZ	collapsing ledge
00008588                            ; ---------------------------------------------------------------------------
00008588 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000858C 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008590 10                         byte_85A8:	dc.b $10
00008591 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008596 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000859B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000085A0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000085A5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000085AA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000085AF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000085B4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000085B9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000085BE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000085C3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000085C8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000085CD 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000085D2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000085D7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000085DC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000085E1 10                         byte_85F9:	dc.b $10
000085E2 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000085E7 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000085EC E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000085F1 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000085F6 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000085FB D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008600 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008605 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000860A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000860F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008614 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008619 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000861E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008623 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008628 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000862D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008632 19                         byte_864A:	dc.b $19
00008633 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008638 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000863D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008642 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008647 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000864C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008651 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008656 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000865B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008660 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008665 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000866A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000866F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008674 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008679 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000867E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008683 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008688 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000868D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008692 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008697 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000869C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000086A1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000086A6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000086AB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086B0 19                         byte_86C8:	dc.b $19
000086B1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000086B6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000086BB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000086C0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000086C5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000086CA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000086CF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000086D4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000086D9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086DE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000086E3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000086E8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000086ED F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000086F2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000086F7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086FC F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008701 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008706 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000870B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008710 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008715 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000871A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000871F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008724 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008729 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000872E                            		even
0000872E                            		even
0000872E                            
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            Map_obj53:
0000872E                            	include "_maps\obj53.asm"
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000872E                            ; ---------------------------------------------------------------------------
0000872E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008732 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008736 04                         byte_874E:	dc.b 4
00008737 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000873C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008741 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008746 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000874B 08                         byte_8763:	dc.b 8
0000874C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008751 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008756 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000875B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008760 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008765 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000876A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000876F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008774 04                         byte_878C:	dc.b 4
00008775 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000877A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000877F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008784 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008789 08                         byte_87A1:	dc.b 8
0000878A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000878F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008794 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008799 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000879E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000087A3 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000087A8 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000087AD 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000087B2                            		even
000087B2                            		even
000087B2                            
000087B2                            ; ===========================================================================
000087B2                            ; ---------------------------------------------------------------------------
000087B2                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000087B2                            ; ---------------------------------------------------------------------------
000087B2                            
000087B2                            Obj1C:					; XREF: Obj_Index
000087B2 7000                       		moveq	#0,d0
000087B4 1028 0024                  		move.b	$24(a0),d0
000087B8 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000087BC 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000087C0                            ; ===========================================================================
000087C0 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000087C2 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000087C4                            ; ===========================================================================
000087C4                            
000087C4                            Obj1C_Main:				; XREF: Obj1C_Index
000087C4 5428 0024                  		addq.b	#2,$24(a0)
000087C8 7000                       		moveq	#0,d0
000087CA 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000087CE C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000087D2 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000087D6 2159 0004                  		move.l	(a1)+,4(a0)
000087DA 3159 0002                  		move.w	(a1)+,2(a0)
000087DE 0028 0004 0001             		ori.b	#4,1(a0)
000087E4 1159 001A                  		move.b	(a1)+,$1A(a0)
000087E8 1159 0019                  		move.b	(a1)+,$19(a0)
000087EC 1159 0018                  		move.b	(a1)+,$18(a0)
000087F0 1159 0020                  		move.b	(a1)+,$20(a0)
000087F4                            
000087F4                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000087F4 3028 0008                  		move.w	8(a0),d0
000087F8 0240 FF80                  		andi.w	#$FF80,d0
000087FC 3238 F700                  		move.w	($FFFFF700).w,d1
00008800 0441 0080                  		subi.w	#$80,d1
00008804 0241 FF80                  		andi.w	#$FF80,d1
00008808 9041                       		sub.w	d1,d0
0000880A 0C40 0280                  		cmpi.w	#$280,d0
0000880E 6200 0000                  		bhi.w	DeleteObject
00008812 6000 0000                  		bra.w	DisplaySprite
00008816                            ; ===========================================================================
00008816                            ; ---------------------------------------------------------------------------
00008816                            ; Variables for	object $1C are stored in an array
00008816                            ; ---------------------------------------------------------------------------
00008816 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000881A 44D8                       		dc.w $44D8		; VRAM setting
0000881C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008820 0000 0000                  		dc.l Map_obj1C
00008824 44D8                       		dc.w $44D8
00008826 0008 0200                  		dc.b 0,	8, 2, 0
0000882A 0000 0000                  		dc.l Map_obj1C
0000882E 44D8                       		dc.w $44D8
00008830 0008 0200                  		dc.b 0,	8, 2, 0
00008834 0000 7928                  		dc.l Map_obj11
00008838 438E                       		dc.w $438E
0000883A 0110 0100                  		dc.b 1,	$10, 1,	0
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            ; Sprite mappings - SLZ	lava thrower
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            Map_obj1C:
0000883E                            	include "_maps\obj1C.asm"
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            ; Sprite mappings - SLZ	lava thrower
0000883E                            ; ---------------------------------------------------------------------------
0000883E 0000                       		dc.w byte_8858-Map_obj1C
00008840 01                         byte_8858:	dc.b 1
00008841 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008846                            		even
00008846                            		even
00008846                            
00008846                            ; ===========================================================================
00008846                            ; ---------------------------------------------------------------------------
00008846                            ; Object 1D - switch that activates when Sonic touches it
00008846                            ; (this	is not used anywhere in	the game)
00008846                            ; ---------------------------------------------------------------------------
00008846                            
00008846                            Obj1D:					; XREF: Obj_Index
00008846 7000                       		moveq	#0,d0
00008848 1028 0024                  		move.b	$24(a0),d0
0000884C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008850 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008854                            ; ===========================================================================
00008854 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008856 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008858 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000885A                            ; ===========================================================================
0000885A                            
0000885A                            Obj1D_Main:				; XREF: Obj1D_Index
0000885A 5428 0024                  		addq.b	#2,$24(a0)
0000885E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008866 317C 4000 0002             		move.w	#$4000,2(a0)
0000886C 117C 0004 0001             		move.b	#4,1(a0)
00008872 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008878 117C 0010 0019             		move.b	#$10,$19(a0)
0000887E 117C 0005 0018             		move.b	#5,$18(a0)
00008884                            
00008884                            Obj1D_Action:				; XREF: Obj1D_Index
00008884 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000888A 323C 0010                  		move.w	#$10,d1
0000888E 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008892 6700                       		beq.s	Obj1D_ChkDel
00008894 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008898 7001                       		moveq	#1,d0
0000889A 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000889E                            
0000889E                            Obj1D_ChkDel:
0000889E 6100 0000                  		bsr.w	DisplaySprite
000088A2 3028 0008                  		move.w	8(a0),d0
000088A6 0240 FF80                  		andi.w	#$FF80,d0
000088AA 3238 F700                  		move.w	($FFFFF700).w,d1
000088AE 0441 0080                  		subi.w	#$80,d1
000088B2 0241 FF80                  		andi.w	#$FF80,d1
000088B6 9041                       		sub.w	d1,d0
000088B8 0C40 0280                  		cmpi.w	#$280,d0
000088BC 6200 0000                  		bhi.w	Obj1D_Delete
000088C0 4E75                       		rts	
000088C2                            ; ===========================================================================
000088C2                            
000088C2                            Obj1D_Delete:				; XREF: Obj1D_Index
000088C2 6100 0000                  		bsr.w	DeleteObject
000088C6 4E75                       		rts	
000088C8                            ; ---------------------------------------------------------------------------
000088C8                            ; Subroutine to	check if Sonic touches the object
000088C8                            ; ---------------------------------------------------------------------------
000088C8                            
000088C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088C8                            
000088C8                            
000088C8                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000088C8 43F8 D000                  		lea	($FFFFD000).w,a1
000088CC 3029 0008                  		move.w	8(a1),d0
000088D0 9068 0008                  		sub.w	8(a0),d0
000088D4 D041                       		add.w	d1,d0
000088D6 6B00                       		bmi.s	loc_8918
000088D8 D241                       		add.w	d1,d1
000088DA B041                       		cmp.w	d1,d0
000088DC 6400                       		bcc.s	loc_8918
000088DE 3429 000C                  		move.w	$C(a1),d2
000088E2 1229 0016                  		move.b	$16(a1),d1
000088E6 4881                       		ext.w	d1
000088E8 D242                       		add.w	d2,d1
000088EA 3028 000C                  		move.w	$C(a0),d0
000088EE 0440 0010                  		subi.w	#$10,d0
000088F2 9041                       		sub.w	d1,d0
000088F4 6200                       		bhi.s	loc_8918
000088F6 0C40 FFF0                  		cmpi.w	#-$10,d0
000088FA 6500                       		bcs.s	loc_8918
000088FC 70FF                       		moveq	#-1,d0
000088FE 4E75                       		rts	
00008900                            ; ===========================================================================
00008900                            
00008900                            loc_8918:
00008900 7000                       		moveq	#0,d0
00008902 4E75                       		rts	
00008904                            ; End of function Obj1D_ChkTouch
00008904                            
00008904                            ; ===========================================================================
00008904                            ; ---------------------------------------------------------------------------
00008904                            ; Sprite mappings - object 1D
00008904                            ; ---------------------------------------------------------------------------
00008904                            Map_obj1D:
00008904                            	include "_maps\obj1D.asm"
00008904                            ; ---------------------------------------------------------------------------
00008904                            ; Sprite mappings - object 1D
00008904                            ; ---------------------------------------------------------------------------
00008904 0000                       		dc.w byte_891E-Map_obj1D
00008906 04                         byte_891E:	dc.b 4
00008907 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000890C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008911 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008916 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000891C 00                         		even
0000891C 00                         		even
0000891C                            
0000891C                            ; ===========================================================================
0000891C                            ; ---------------------------------------------------------------------------
0000891C                            ; Object 2A - doors (SBZ)
0000891C                            ; ---------------------------------------------------------------------------
0000891C                            
0000891C                            Obj2A:					; XREF: Obj_Index
0000891C 7000                       		moveq	#0,d0
0000891E 1028 0024                  		move.b	$24(a0),d0
00008922 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008926 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000892A                            ; ===========================================================================
0000892A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000892C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000892E                            ; ===========================================================================
0000892E                            
0000892E                            Obj2A_Main:				; XREF: Obj2A_Index
0000892E 5428 0024                  		addq.b	#2,$24(a0)
00008932 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000893A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008940 0028 0004 0001             		ori.b	#4,1(a0)
00008946 117C 0008 0019             		move.b	#8,$19(a0)
0000894C 117C 0004 0018             		move.b	#4,$18(a0)
00008952                            
00008952                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008952 323C 0040                  		move.w	#$40,d1
00008956 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000895A 3038 D008                  		move.w	($FFFFD008).w,d0
0000895E D041                       		add.w	d1,d0
00008960 B068 0008                  		cmp.w	8(a0),d0
00008964 6500                       		bcs.s	Obj2A_Animate
00008966 9041                       		sub.w	d1,d0
00008968 9041                       		sub.w	d1,d0
0000896A B068 0008                  		cmp.w	8(a0),d0
0000896E 6400                       		bcc.s	Obj2A_Animate
00008970 D041                       		add.w	d1,d0
00008972 B068 0008                  		cmp.w	8(a0),d0
00008976 6400                       		bcc.s	loc_899A
00008978 0828 0000 0022             		btst	#0,$22(a0)
0000897E 6600                       		bne.s	Obj2A_Animate
00008980 6000                       		bra.s	Obj2A_Open
00008982                            ; ===========================================================================
00008982                            
00008982                            loc_899A:				; XREF: Obj2A_OpenShut
00008982 0828 0000 0022             		btst	#0,$22(a0)
00008988 6700                       		beq.s	Obj2A_Animate
0000898A                            
0000898A                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000898A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008990                            
00008990                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008990 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008996 6100 0000                  		bsr.w	AnimateSprite
0000899A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000899E 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000089A0 323C 0011                  		move.w	#$11,d1
000089A4 343C 0020                  		move.w	#$20,d2
000089A8 3602                       		move.w	d2,d3
000089AA 5243                       		addq.w	#1,d3
000089AC 3828 0008                  		move.w	8(a0),d4
000089B0 6100 0000                  		bsr.w	SolidObject
000089B4                            
000089B4                            Obj2A_MarkAsUsed:
000089B4 6000 0000                  		bra.w	MarkObjGone
000089B8                            ; ===========================================================================
000089B8                            Ani_obj2A:
000089B8                            	include "_anim\obj2A.asm"
000089B8                            ; ---------------------------------------------------------------------------
000089B8                            ; Animation script - doors (SBZ)
000089B8                            ; ---------------------------------------------------------------------------
000089B8 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000089BA 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000089BC 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000089C8 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000089D4                            		even
000089D4                            		even
000089D4                            
000089D4                            ; ---------------------------------------------------------------------------
000089D4                            ; Sprite mappings - doors (SBZ)
000089D4                            ; ---------------------------------------------------------------------------
000089D4                            Map_obj2A:
000089D4                            	include "_maps\obj2A.asm"
000089D4                            ; ---------------------------------------------------------------------------
000089D4                            ; Sprite mappings - doors (SBZ)
000089D4                            ; ---------------------------------------------------------------------------
000089D4 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000089D8 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000089DC 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000089E0 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000089E4 0000                       		dc.w byte_8A56-Map_obj2A
000089E6 02                         byte_89FE:	dc.b 2
000089E7 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000089EC 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000089F1 02                         byte_8A09:	dc.b 2
000089F2 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000089F7 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000089FC 02                         byte_8A14:	dc.b 2
000089FD D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008A02 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008A07 02                         byte_8A1F:	dc.b 2
00008A08 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008A0D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008A12 02                         byte_8A2A:	dc.b 2
00008A13 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008A18 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008A1D 02                         byte_8A35:	dc.b 2
00008A1E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008A23 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008A28 02                         byte_8A40:	dc.b 2
00008A29 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008A2E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008A33 02                         byte_8A4B:	dc.b 2
00008A34 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008A39 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008A3E 02                         byte_8A56:	dc.b 2
00008A3F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008A44 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008A4A 00                         		even
00008A4A 00                         		even
00008A4A                            
00008A4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A4A                            
00008A4A                            
00008A4A                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008A4A 6100 0000                  		bsr.w	Obj44_SolidWall2
00008A4E 6700                       		beq.s	loc_8AA8
00008A50 6B00 0000                  		bmi.w	loc_8AC4
00008A54 4A40                       		tst.w	d0
00008A56 6700 0000                  		beq.w	loc_8A92
00008A5A 6B00                       		bmi.s	loc_8A7C
00008A5C 4A69 0010                  		tst.w	$10(a1)
00008A60 6B00                       		bmi.s	loc_8A92
00008A62 6000                       		bra.s	loc_8A82
00008A64                            ; ===========================================================================
00008A64                            
00008A64                            loc_8A7C:
00008A64 4A69 0010                  		tst.w	$10(a1)
00008A68 6A00                       		bpl.s	loc_8A92
00008A6A                            
00008A6A                            loc_8A82:
00008A6A 9169 0008                  		sub.w	d0,8(a1)
00008A6E 337C 0000 0014             		move.w	#0,$14(a1)
00008A74 337C 0000 0010             		move.w	#0,$10(a1)
00008A7A                            
00008A7A                            loc_8A92:
00008A7A 0829 0001 0022             		btst	#1,$22(a1)
00008A80 6600                       		bne.s	loc_8AB6
00008A82 08E9 0005 0022             		bset	#5,$22(a1)
00008A88 08E8 0005 0022             		bset	#5,$22(a0)
00008A8E 4E75                       		rts	
00008A90                            ; ===========================================================================
00008A90                            
00008A90                            loc_8AA8:
00008A90 0828 0005 0022             		btst	#5,$22(a0)
00008A96 6700                       		beq.s	locret_8AC2
00008A98 337C 0001 001C             		move.w	#1,$1C(a1)
00008A9E                            
00008A9E                            loc_8AB6:
00008A9E 08A8 0005 0022             		bclr	#5,$22(a0)
00008AA4 08A9 0005 0022             		bclr	#5,$22(a1)
00008AAA                            
00008AAA                            locret_8AC2:
00008AAA 4E75                       		rts	
00008AAC                            ; ===========================================================================
00008AAC                            
00008AAC                            loc_8AC4:
00008AAC 4A69 0012                  		tst.w	$12(a1)
00008AB0 6A00                       		bpl.s	locret_8AD8
00008AB2 4A43                       		tst.w	d3
00008AB4 6A00                       		bpl.s	locret_8AD8
00008AB6 9769 000C                  		sub.w	d3,$C(a1)
00008ABA 337C 0000 0012             		move.w	#0,$12(a1)
00008AC0                            
00008AC0                            locret_8AD8:
00008AC0 4E75                       		rts	
00008AC2                            ; End of function Obj44_SolidWall
00008AC2                            
00008AC2                            
00008AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AC2                            
00008AC2                            
00008AC2                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008AC2 43F8 D000                  		lea	($FFFFD000).w,a1
00008AC6 3029 0008                  		move.w	8(a1),d0
00008ACA 9068 0008                  		sub.w	8(a0),d0
00008ACE D041                       		add.w	d1,d0
00008AD0 6B00                       		bmi.s	loc_8B48
00008AD2 3601                       		move.w	d1,d3
00008AD4 D643                       		add.w	d3,d3
00008AD6 B043                       		cmp.w	d3,d0
00008AD8 6200                       		bhi.s	loc_8B48
00008ADA 1629 0016                  		move.b	$16(a1),d3
00008ADE 4883                       		ext.w	d3
00008AE0 D443                       		add.w	d3,d2
00008AE2 3629 000C                  		move.w	$C(a1),d3
00008AE6 9668 000C                  		sub.w	$C(a0),d3
00008AEA D642                       		add.w	d2,d3
00008AEC 6B00                       		bmi.s	loc_8B48
00008AEE 3802                       		move.w	d2,d4
00008AF0 D844                       		add.w	d4,d4
00008AF2 B644                       		cmp.w	d4,d3
00008AF4 6400                       		bcc.s	loc_8B48
00008AF6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008AFA 6B00                       		bmi.s	loc_8B48
00008AFC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008B02 6400                       		bcc.s	loc_8B48
00008B04 4A78 FE08                  		tst.w	($FFFFFE08).w
00008B08 6600                       		bne.s	loc_8B48
00008B0A 3A00                       		move.w	d0,d5
00008B0C B240                       		cmp.w	d0,d1
00008B0E 6400                       		bcc.s	loc_8B30
00008B10 D241                       		add.w	d1,d1
00008B12 9041                       		sub.w	d1,d0
00008B14 3A00                       		move.w	d0,d5
00008B16 4445                       		neg.w	d5
00008B18                            
00008B18                            loc_8B30:
00008B18 3203                       		move.w	d3,d1
00008B1A B443                       		cmp.w	d3,d2
00008B1C 6400                       		bcc.s	loc_8B3C
00008B1E 9644                       		sub.w	d4,d3
00008B20 3203                       		move.w	d3,d1
00008B22 4441                       		neg.w	d1
00008B24                            
00008B24                            loc_8B3C:
00008B24 BA41                       		cmp.w	d1,d5
00008B26 6200                       		bhi.s	loc_8B44
00008B28 7801                       		moveq	#1,d4
00008B2A 4E75                       		rts	
00008B2C                            ; ===========================================================================
00008B2C                            
00008B2C                            loc_8B44:
00008B2C 78FF                       		moveq	#-1,d4
00008B2E 4E75                       		rts	
00008B30                            ; ===========================================================================
00008B30                            
00008B30                            loc_8B48:
00008B30 7800                       		moveq	#0,d4
00008B32 4E75                       		rts	
00008B34                            ; End of function Obj44_SolidWall2
00008B34                            
00008B34                            ; ===========================================================================
00008B34                            ; ---------------------------------------------------------------------------
00008B34                            ; Object 1E - Ball Hog enemy (SBZ)
00008B34                            ; ---------------------------------------------------------------------------
00008B34                            
00008B34                            Obj1E:					; XREF: Obj_Index
00008B34 7000                       		moveq	#0,d0
00008B36 1028 0024                  		move.b	$24(a0),d0
00008B3A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008B3E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008B42                            ; ===========================================================================
00008B42 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008B44 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008B46                            ; ===========================================================================
00008B46                            
00008B46                            Obj1E_Main:				; XREF: Obj1E_Index
00008B46 117C 0013 0016             		move.b	#$13,$16(a0)
00008B4C 117C 0008 0017             		move.b	#8,$17(a0)
00008B52 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008B5A 317C 2302 0002             		move.w	#$2302,2(a0)
00008B60 117C 0004 0001             		move.b	#4,1(a0)
00008B66 117C 0004 0018             		move.b	#4,$18(a0)
00008B6C 117C 0005 0020             		move.b	#5,$20(a0)
00008B72 117C 000C 0019             		move.b	#$C,$19(a0)
00008B78 6100 0000                  		bsr.w	ObjectFall
00008B7C 4EB9 0000 0000             		jsr	ObjHitFloor
00008B82 4A41                       		tst.w	d1
00008B84 6A00                       		bpl.s	locret_8BAC
00008B86 D368 000C                  		add.w	d1,$C(a0)
00008B8A 317C 0000 0012             		move.w	#0,$12(a0)
00008B90 5428 0024                  		addq.b	#2,$24(a0)
00008B94                            
00008B94                            locret_8BAC:
00008B94 4E75                       		rts	
00008B96                            ; ===========================================================================
00008B96                            
00008B96                            Obj1E_Action:				; XREF: Obj1E_Index
00008B96 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008B9C 6100 0000                  		bsr.w	AnimateSprite
00008BA0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008BA6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008BA8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008BAC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008BAE 6000                       		bra.s	Obj1E_MarkAsGone
00008BB0                            ; ===========================================================================
00008BB0                            
00008BB0                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008BB0 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008BB4                            
00008BB4                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008BB4 6000 0000                  		bra.w	MarkObjGone
00008BB8                            ; ===========================================================================
00008BB8                            
00008BB8                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008BB8 117C 0001 0032             		move.b	#1,$32(a0)
00008BBE 6100 0000                  		bsr.w	SingleObjLoad
00008BC2 6600                       		bne.s	loc_8C1A
00008BC4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008BC8 3368 0008 0008             		move.w	8(a0),8(a1)
00008BCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008BD4 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008BDA 337C 0000 0012             		move.w	#0,$12(a1)
00008BE0 70FC                       		moveq	#-4,d0
00008BE2 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008BE8 6700                       		beq.s	loc_8C0A	; if not, branch
00008BEA 4440                       		neg.w	d0
00008BEC 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008BF0                            
00008BF0                            loc_8C0A:
00008BF0 D169 0008                  		add.w	d0,8(a1)
00008BF4 0669 000C 000C             		addi.w	#$C,$C(a1)
00008BFA 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008C00                            
00008C00                            loc_8C1A:
00008C00 60B2                       		bra.s	Obj1E_MarkAsGone
00008C02                            ; ===========================================================================
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008C02                            ; ---------------------------------------------------------------------------
00008C02                            
00008C02                            Obj20:					; XREF: Obj_Index
00008C02 7000                       		moveq	#0,d0
00008C04 1028 0024                  		move.b	$24(a0),d0
00008C08 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008C0C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008C10                            ; ===========================================================================
00008C10 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008C12 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008C14                            ; ===========================================================================
00008C14                            
00008C14                            Obj20_Main:				; XREF: Obj20_Index
00008C14 5428 0024                  		addq.b	#2,$24(a0)
00008C18 117C 0007 0016             		move.b	#7,$16(a0)
00008C1E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008C26 317C 2302 0002             		move.w	#$2302,2(a0)
00008C2C 117C 0004 0001             		move.b	#4,1(a0)
00008C32 117C 0003 0018             		move.b	#3,$18(a0)
00008C38 117C 0087 0020             		move.b	#$87,$20(a0)
00008C3E 117C 0008 0019             		move.b	#8,$19(a0)
00008C44 7000                       		moveq	#0,d0
00008C46 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008C4A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008C4E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008C52 117C 0004 001A             		move.b	#4,$1A(a0)
00008C58                            
00008C58                            Obj20_Bounce:				; XREF: Obj20_Index
00008C58 4EB9 0000 0000             		jsr	ObjectFall
00008C5E 4A68 0012                  		tst.w	$12(a0)
00008C62 6B00                       		bmi.s	Obj20_ChkExplode
00008C64 4EB9 0000 0000             		jsr	ObjHitFloor
00008C6A 4A41                       		tst.w	d1
00008C6C 6A00                       		bpl.s	Obj20_ChkExplode
00008C6E D368 000C                  		add.w	d1,$C(a0)
00008C72 317C FD00 0012             		move.w	#-$300,$12(a0)
00008C78 4A03                       		tst.b	d3
00008C7A 6700                       		beq.s	Obj20_ChkExplode
00008C7C 6B00                       		bmi.s	loc_8CA4
00008C7E 4A68 0010                  		tst.w	$10(a0)
00008C82 6A00                       		bpl.s	Obj20_ChkExplode
00008C84 4468 0010                  		neg.w	$10(a0)
00008C88 6000                       		bra.s	Obj20_ChkExplode
00008C8A                            ; ===========================================================================
00008C8A                            
00008C8A                            loc_8CA4:				; XREF: Obj20_Bounce
00008C8A 4A68 0010                  		tst.w	$10(a0)
00008C8E 6B00                       		bmi.s	Obj20_ChkExplode
00008C90 4468 0010                  		neg.w	$10(a0)
00008C94                            
00008C94                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008C94 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008C98 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008C9A 10BC 0024                  		move.b	#$24,0(a0)
00008C9E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008CA2 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008CA8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008CAC                            ; ===========================================================================
00008CAC                            
00008CAC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008CAC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008CB0 6A00                       		bpl.s	Obj20_Display
00008CB2 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008CB8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008CBE                            
00008CBE                            Obj20_Display:
00008CBE 6100 0000                  		bsr.w	DisplaySprite
00008CC2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008CC6 0640 00E0                  		addi.w	#$E0,d0
00008CCA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008CCE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008CD2 4E75                       		rts	
00008CD4                            ; ===========================================================================
00008CD4                            ; ---------------------------------------------------------------------------
00008CD4                            ; Object 24 - explosion	from a destroyed monitor
00008CD4                            ; ---------------------------------------------------------------------------
00008CD4                            
00008CD4                            Obj24:					; XREF: Obj_Index
00008CD4 7000                       		moveq	#0,d0
00008CD6 1028 0024                  		move.b	$24(a0),d0
00008CDA 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008CDE 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008CE2                            ; ===========================================================================
00008CE2 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008CE4 0000                       		dc.w Obj24_Animate-Obj24_Index
00008CE6                            ; ===========================================================================
00008CE6                            
00008CE6                            Obj24_Main:				; XREF: Obj24_Index
00008CE6 5428 0024                  		addq.b	#2,$24(a0)
00008CEA 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008CF2 317C 041C 0002             		move.w	#$41C,2(a0)
00008CF8 117C 0004 0001             		move.b	#4,1(a0)
00008CFE 117C 0001 0018             		move.b	#1,$18(a0)
00008D04 117C 0000 0020             		move.b	#0,$20(a0)
00008D0A 117C 000C 0019             		move.b	#$C,$19(a0)
00008D10 117C 0009 001E             		move.b	#9,$1E(a0)
00008D16 117C 0000 001A             		move.b	#0,$1A(a0)
00008D1C 303C 00A5                  		move.w	#$A5,d0
00008D20 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play explosion sound
00008D26                            
00008D26                            Obj24_Animate:				; XREF: Obj24_Index
00008D26 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008D2A 6A00                       		bpl.s	Obj24_Display
00008D2C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008D32 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008D36 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008D3C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008D40                            
00008D40                            Obj24_Display:
00008D40 6000 0000                  		bra.w	DisplaySprite
00008D44                            ; ===========================================================================
00008D44                            ; ---------------------------------------------------------------------------
00008D44                            ; Object 27 - explosion	from a destroyed enemy
00008D44                            ; ---------------------------------------------------------------------------
00008D44                            
00008D44                            Obj27:					; XREF: Obj_Index
00008D44 7000                       		moveq	#0,d0
00008D46 1028 0024                  		move.b	$24(a0),d0
00008D4A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008D4E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008D52                            ; ===========================================================================
00008D52 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008D54 0000                       		dc.w Obj27_Main-Obj27_Index
00008D56 0000                       		dc.w Obj27_Animate-Obj27_Index
00008D58                            ; ===========================================================================
00008D58                            
00008D58                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008D58 5428 0024                  		addq.b	#2,$24(a0)
00008D5C 6100 0000                  		bsr.w	SingleObjLoad
00008D60 6600                       		bne.s	Obj27_Main
00008D62 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008D66 3368 0008 0008             		move.w	8(a0),8(a1)
00008D6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D72 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008D78                            
00008D78                            Obj27_Main:				; XREF: Obj27_Index
00008D78 5428 0024                  		addq.b	#2,$24(a0)
00008D7C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008D84 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008D8A 117C 0004 0001             		move.b	#4,1(a0)
00008D90 117C 0001 0018             		move.b	#1,$18(a0)
00008D96 117C 0000 0020             		move.b	#0,$20(a0)
00008D9C 117C 000C 0019             		move.b	#$C,$19(a0)
00008DA2 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008DA8 117C 0000 001A             		move.b	#0,$1A(a0)
00008DAE 303C 00C1                  		move.w	#$C1,d0
00008DB2 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008DB8                            
00008DB8                            Obj27_Animate:				; XREF: Obj27_Index
00008DB8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DBC 6A00                       		bpl.s	Obj27_Display
00008DBE 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008DC4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008DC8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008DCE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008DD2                            
00008DD2                            Obj27_Display:
00008DD2 6000 0000                  		bra.w	DisplaySprite
00008DD6                            ; ===========================================================================
00008DD6                            ; ---------------------------------------------------------------------------
00008DD6                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008DD6                            ; ---------------------------------------------------------------------------
00008DD6                            
00008DD6                            Obj3F:					; XREF: Obj_Index
00008DD6 7000                       		moveq	#0,d0
00008DD8 1028 0024                  		move.b	$24(a0),d0
00008DDC 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008DE0 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008DE4                            ; ===========================================================================
00008DE4 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008DE6 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008DE8                            ; ===========================================================================
00008DE8                            
00008DE8                            Obj3F_Main:				; XREF: Obj3F_Index
00008DE8 5428 0024                  		addq.b	#2,$24(a0)
00008DEC 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008DF4 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008DFA 117C 0004 0001             		move.b	#4,1(a0)
00008E00 117C 0001 0018             		move.b	#1,$18(a0)
00008E06 117C 0000 0020             		move.b	#0,$20(a0)
00008E0C 117C 000C 0019             		move.b	#$C,$19(a0)
00008E12 117C 0007 001E             		move.b	#7,$1E(a0)
00008E18 117C 0000 001A             		move.b	#0,$1A(a0)
00008E1E 303C 00C4                  		move.w	#$C4,d0
00008E22 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008E28                            ; ===========================================================================
00008E28                            Ani_obj1E:
00008E28                            	include "_anim\obj1E.asm"
00008E28                            ; ---------------------------------------------------------------------------
00008E28                            ; Animation script - doors (SBZ)
00008E28                            ; ---------------------------------------------------------------------------
00008E28 0000                       		dc.w byte_8E4A-Ani_obj1E
00008E2A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008E42 00                         		even
00008E42 00                         		even
00008E42                            
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            Map_obj1E:
00008E42                            	include "_maps\obj1E.asm"
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008E42                            ; ---------------------------------------------------------------------------
00008E42 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008E46 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008E4A 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008E4E 02                         byte_8E6E:	dc.b 2
00008E4F EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008E54 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008E59 02                         byte_8E79:	dc.b 2
00008E5A EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008E5F FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008E64 02                         byte_8E84:	dc.b 2
00008E65 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008E6A 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008E6F 02                         byte_8E8F:	dc.b 2
00008E70 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008E75 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008E7A 01                         byte_8E9A:	dc.b 1
00008E7B F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008E80 01                         byte_8EA0:	dc.b 1
00008E81 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008E86                            		even
00008E86                            		even
00008E86                            
00008E86                            ; ---------------------------------------------------------------------------
00008E86                            ; Sprite mappings - explosion
00008E86                            ; ---------------------------------------------------------------------------
00008E86                            Map_obj24:
00008E86                            	include "_maps\obj24.asm"
00008E86                            ; ---------------------------------------------------------------------------
00008E86                            ; Sprite mappings - explosion
00008E86                            ; ---------------------------------------------------------------------------
00008E86 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008E8A 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008E8E 01                         byte_8EAE:	dc.b 1
00008E8F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008E94 01                         byte_8EB4:	dc.b 1
00008E95 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008E9A 01                         byte_8EBA:	dc.b 1
00008E9B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008EA0 01                         byte_8EC0:	dc.b 1
00008EA1 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008EA6                            		even
00008EA6                            		even
00008EA6                            
00008EA6                            ; ---------------------------------------------------------------------------
00008EA6                            ; Sprite mappings - explosion
00008EA6                            ; ---------------------------------------------------------------------------
00008EA6 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008EAA 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008EAE 0000                       		dc.w byte_8EF7-Map_obj27
00008EB0 01                         byte_8ED0:	dc.b 1
00008EB1 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008EB6 01                         byte_8ED6:	dc.b 1
00008EB7 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008EBC 01                         byte_8EDC:	dc.b 1
00008EBD F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008EC2 04                         byte_8EE2:	dc.b 4
00008EC3 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008EC8 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008ECD 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008ED2 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008ED7 04                         byte_8EF7:	dc.b 4
00008ED8 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008EDD EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008EE2 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008EE7 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008EEC                            		even
00008EEC                            ; ---------------------------------------------------------------------------
00008EEC                            ; Sprite mappings - explosion from when	a boss is destroyed
00008EEC                            ; ---------------------------------------------------------------------------
00008EEC FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00008EEE 0000                       		dc.w byte_8F16-Map_obj3F
00008EF0 0000                       		dc.w byte_8F1C-Map_obj3F
00008EF2 FFD6                       		dc.w byte_8EE2-Map_obj3F
00008EF4 FFEB                       		dc.w byte_8EF7-Map_obj3F
00008EF6 01                         byte_8F16:	dc.b 1
00008EF7 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00008EFC 01                         byte_8F1C:	dc.b 1
00008EFD F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00008F02                            		even
00008F02                            ; ===========================================================================
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            ; Object 28 - animals
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            
00008F02                            Obj28:					; XREF: Obj_Index
00008F02 7000                       		moveq	#0,d0
00008F04 1028 0024                  		move.b	$24(a0),d0
00008F08 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00008F0C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00008F10                            ; ===========================================================================
00008F10 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00008F14 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008F18 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00008F1C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008F20 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00008F24 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00008F28 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00008F2C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008F30 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008F34 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00008F38 0000                       		dc.w loc_92D6-Obj28_Index
00008F3A                            
00008F3A 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00008F46                            
00008F46 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00008F4A 0000 0000                  		dc.l Map_obj28
00008F4E FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00008F52 0000 0000                  		dc.l Map_obj28a		; mappings address
00008F56 FE80 FD00                  		dc.w $FE80, $FD00
00008F5A 0000 0000                  		dc.l Map_obj28
00008F5E FEC0 FE80                  		dc.w $FEC0, $FE80
00008F62 0000 0000                  		dc.l Map_obj28a
00008F66 FE40 FD00                  		dc.w $FE40, $FD00
00008F6A 0000 0000                  		dc.l Map_obj28b
00008F6E FD00 FC00                  		dc.w $FD00, $FC00
00008F72 0000 0000                  		dc.l Map_obj28a
00008F76 FD80 FC80                  		dc.w $FD80, $FC80
00008F7A 0000 0000                  		dc.l Map_obj28b
00008F7E                            
00008F7E FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00008F8E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00008F9E FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00008FAA                            
00008FAA 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00008FBE 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00008FD2 0000 0000                  		dc.l Map_obj28b
00008FD6                            
00008FD6 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00008FE8 0565 05B3                  		dc.w $565, $5B3
00008FEC                            ; ===========================================================================
00008FEC                            
00008FEC                            Obj28_Ending:				; XREF: Obj28_Index
00008FEC 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00008FF0 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00008FF4 7000                       		moveq	#0,d0
00008FF6 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008FFA D040                       		add.w	d0,d0		; multiply d0 by 2
00008FFC 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009000 0440 0014                  		subi.w	#$14,d0
00009004 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000900A D040                       		add.w	d0,d0
0000900C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009012 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009016 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000901C 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009022 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009028 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000902E 117C 000C 0016             		move.b	#$C,$16(a0)
00009034 117C 0004 0001             		move.b	#4,1(a0)
0000903A 08E8 0000 0001             		bset	#0,1(a0)
00009040 117C 0006 0018             		move.b	#6,$18(a0)
00009046 117C 0008 0019             		move.b	#8,$19(a0)
0000904C 117C 0007 001E             		move.b	#7,$1E(a0)
00009052 6000 0000                  		bra.w	DisplaySprite
00009056                            ; ===========================================================================
00009056                            
00009056                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009056 5428 0024                  		addq.b	#2,$24(a0)
0000905A 6100 9938                  		bsr.w	RandomNumber
0000905E 0240 0001                  		andi.w	#1,d0
00009062 7200                       		moveq	#0,d1
00009064 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009068 D241                       		add.w	d1,d1
0000906A D240                       		add.w	d0,d1
0000906C 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009070 1031 1000                  		move.b	(a1,d1.w),d0
00009074 1140 0030                  		move.b	d0,$30(a0)
00009078 E748                       		lsl.w	#3,d0
0000907A 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000907E D2C0                       		adda.w	d0,a1
00009080 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009084 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009088 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000908C 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009092 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009098 6700                       		beq.s	loc_90C0	; if yes, branch
0000909A 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000090A0                            
000090A0                            loc_90C0:
000090A0 117C 000C 0016             		move.b	#$C,$16(a0)
000090A6 117C 0004 0001             		move.b	#4,1(a0)
000090AC 08E8 0000 0001             		bset	#0,1(a0)
000090B2 117C 0006 0018             		move.b	#6,$18(a0)
000090B8 117C 0008 0019             		move.b	#8,$19(a0)
000090BE 117C 0007 001E             		move.b	#7,$1E(a0)
000090C4 117C 0002 001A             		move.b	#2,$1A(a0)
000090CA 317C FC00 0012             		move.w	#-$400,$12(a0)
000090D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000090D4 6600                       		bne.s	loc_911C
000090D6 6100 0000                  		bsr.w	SingleObjLoad
000090DA 6600                       		bne.s	Obj28_Display
000090DC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000090E0 3368 0008 0008             		move.w	8(a0),8(a1)
000090E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090EC 3028 003E                  		move.w	$3E(a0),d0
000090F0 E248                       		lsr.w	#1,d0
000090F2 1340 001A                  		move.b	d0,$1A(a1)
000090F6                            
000090F6                            Obj28_Display:
000090F6 6000 0000                  		bra.w	DisplaySprite
000090FA                            ; ===========================================================================
000090FA                            
000090FA                            loc_911C:
000090FA 117C 0012 0024             		move.b	#$12,$24(a0)
00009100 4268 0010                  		clr.w	$10(a0)
00009104 6000 0000                  		bra.w	DisplaySprite
00009108                            ; ===========================================================================
00009108                            
00009108                            loc_912A:				; XREF: Obj28_Index
00009108 4A28 0001                  		tst.b	1(a0)
0000910C 6A00 0000                  		bpl.w	DeleteObject
00009110 6100 0000                  		bsr.w	ObjectFall
00009114 4A68 0012                  		tst.w	$12(a0)
00009118 6B00                       		bmi.s	loc_9180
0000911A 4EB9 0000 0000             		jsr	ObjHitFloor
00009120 4A41                       		tst.w	d1
00009122 6A00                       		bpl.s	loc_9180
00009124 D368 000C                  		add.w	d1,$C(a0)
00009128 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000912E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009134 117C 0001 001A             		move.b	#1,$1A(a0)
0000913A 1028 0030                  		move.b	$30(a0),d0
0000913E D000                       		add.b	d0,d0
00009140 5800                       		addq.b	#4,d0
00009142 1140 0024                  		move.b	d0,$24(a0)
00009146 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000914A 6700                       		beq.s	loc_9180
0000914C 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009152 6700                       		beq.s	loc_9180
00009154 4468 0010                  		neg.w	$10(a0)
00009158 0868 0000 0001             		bchg	#0,1(a0)
0000915E                            
0000915E                            loc_9180:
0000915E 6000 0000                  		bra.w	DisplaySprite
00009162                            ; ===========================================================================
00009162                            
00009162                            loc_9184:				; XREF: Obj28_Index
00009162 6100 0000                  		bsr.w	ObjectFall
00009166 117C 0001 001A             		move.b	#1,$1A(a0)
0000916C 4A68 0012                  		tst.w	$12(a0)
00009170 6B00                       		bmi.s	loc_91AE
00009172 117C 0000 001A             		move.b	#0,$1A(a0)
00009178 4EB9 0000 0000             		jsr	ObjHitFloor
0000917E 4A41                       		tst.w	d1
00009180 6A00                       		bpl.s	loc_91AE
00009182 D368 000C                  		add.w	d1,$C(a0)
00009186 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000918C                            
0000918C                            loc_91AE:
0000918C 4A28 0028                  		tst.b	$28(a0)
00009190 6600                       		bne.s	loc_9224
00009192 4A28 0001                  		tst.b	1(a0)
00009196 6A00 0000                  		bpl.w	DeleteObject
0000919A 6000 0000                  		bra.w	DisplaySprite
0000919E                            ; ===========================================================================
0000919E                            
0000919E                            loc_91C0:				; XREF: Obj28_Index
0000919E 6100 0000                  		bsr.w	SpeedToPos
000091A2 0668 0018 0012             		addi.w	#$18,$12(a0)
000091A8 4A68 0012                  		tst.w	$12(a0)
000091AC 6B00                       		bmi.s	loc_91FC
000091AE 4EB9 0000 0000             		jsr	ObjHitFloor
000091B4 4A41                       		tst.w	d1
000091B6 6A00                       		bpl.s	loc_91FC
000091B8 D368 000C                  		add.w	d1,$C(a0)
000091BC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000091C2 4A28 0028                  		tst.b	$28(a0)
000091C6 6700                       		beq.s	loc_91FC
000091C8 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000091CE 6700                       		beq.s	loc_91FC
000091D0 4468 0010                  		neg.w	$10(a0)
000091D4 0868 0000 0001             		bchg	#0,1(a0)
000091DA                            
000091DA                            loc_91FC:
000091DA 5328 001E                  		subq.b	#1,$1E(a0)
000091DE 6A00                       		bpl.s	loc_9212
000091E0 117C 0001 001E             		move.b	#1,$1E(a0)
000091E6 5228 001A                  		addq.b	#1,$1A(a0)
000091EA 0228 0001 001A             		andi.b	#1,$1A(a0)
000091F0                            
000091F0                            loc_9212:
000091F0 4A28 0028                  		tst.b	$28(a0)
000091F4 6600                       		bne.s	loc_9224
000091F6 4A28 0001                  		tst.b	1(a0)
000091FA 6A00 0000                  		bpl.w	DeleteObject
000091FE 6000 0000                  		bra.w	DisplaySprite
00009202                            ; ===========================================================================
00009202                            
00009202                            loc_9224:				; XREF: Obj28_Index
00009202 3028 0008                  		move.w	8(a0),d0
00009206 9078 D008                  		sub.w	($FFFFD008).w,d0
0000920A 6500                       		bcs.s	loc_923C
0000920C 0440 0180                  		subi.w	#$180,d0
00009210 6A00                       		bpl.s	loc_923C
00009212 4A28 0001                  		tst.b	1(a0)
00009216 6A00 0000                  		bpl.w	DeleteObject
0000921A                            
0000921A                            loc_923C:
0000921A 6000 0000                  		bra.w	DisplaySprite
0000921E                            ; ===========================================================================
0000921E                            
0000921E                            loc_9240:				; XREF: Obj28_Index
0000921E 4A28 0001                  		tst.b	1(a0)
00009222 6A00 0000                  		bpl.w	DeleteObject
00009226 5368 0036                  		subq.w	#1,$36(a0)
0000922A 6600 0000                  		bne.w	loc_925C
0000922E 117C 0002 0024             		move.b	#2,$24(a0)
00009234 117C 0003 0018             		move.b	#3,$18(a0)
0000923A                            
0000923A                            loc_925C:
0000923A 6000 0000                  		bra.w	DisplaySprite
0000923E                            ; ===========================================================================
0000923E                            
0000923E                            loc_9260:				; XREF: Obj28_Index
0000923E 6100 0000                  		bsr.w	sub_9404
00009242 6400                       		bcc.s	loc_927C
00009244 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000924A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009250 117C 000E 0024             		move.b	#$E,$24(a0)
00009256 6000 FF46                  		bra.w	loc_91C0
0000925A                            ; ===========================================================================
0000925A                            
0000925A                            loc_927C:
0000925A 6000 FFA6                  		bra.w	loc_9224
0000925E                            ; ===========================================================================
0000925E                            
0000925E                            loc_9280:				; XREF: Obj28_Index
0000925E 6100 0000                  		bsr.w	sub_9404
00009262 6A00                       		bpl.s	loc_92B6
00009264 4268 0010                  		clr.w	$10(a0)
00009268 4268 0032                  		clr.w	$32(a0)
0000926C 6100 0000                  		bsr.w	SpeedToPos
00009270 0668 0018 0012             		addi.w	#$18,$12(a0)
00009276 6100 0000                  		bsr.w	loc_93C4
0000927A 6100 0000                  		bsr.w	loc_93EC
0000927E 5328 001E                  		subq.b	#1,$1E(a0)
00009282 6A00                       		bpl.s	loc_92B6
00009284 117C 0001 001E             		move.b	#1,$1E(a0)
0000928A 5228 001A                  		addq.b	#1,$1A(a0)
0000928E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009294                            
00009294                            loc_92B6:
00009294 6000 FF6C                  		bra.w	loc_9224
00009298                            ; ===========================================================================
00009298                            
00009298                            loc_92BA:				; XREF: Obj28_Index
00009298 6100 0000                  		bsr.w	sub_9404
0000929C 6A00                       		bpl.s	loc_9310
0000929E 3168 0032 0010             		move.w	$32(a0),$10(a0)
000092A4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092AA 117C 0004 0024             		move.b	#4,$24(a0)
000092B0 6000 FEB0                  		bra.w	loc_9184
000092B4                            ; ===========================================================================
000092B4                            
000092B4                            loc_92D6:				; XREF: Obj28_Index
000092B4 6100 0000                  		bsr.w	ObjectFall
000092B8 117C 0001 001A             		move.b	#1,$1A(a0)
000092BE 4A68 0012                  		tst.w	$12(a0)
000092C2 6B00                       		bmi.s	loc_9310
000092C4 117C 0000 001A             		move.b	#0,$1A(a0)
000092CA 4EB9 0000 0000             		jsr	ObjHitFloor
000092D0 4A41                       		tst.w	d1
000092D2 6A00                       		bpl.s	loc_9310
000092D4 4628 0029                  		not.b	$29(a0)
000092D8 6600                       		bne.s	loc_9306
000092DA 4468 0010                  		neg.w	$10(a0)
000092DE 0868 0000 0001             		bchg	#0,1(a0)
000092E4                            
000092E4                            loc_9306:
000092E4 D368 000C                  		add.w	d1,$C(a0)
000092E8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092EE                            
000092EE                            loc_9310:
000092EE 6000 FF12                  		bra.w	loc_9224
000092F2                            ; ===========================================================================
000092F2                            
000092F2                            loc_9314:				; XREF: Obj28_Index
000092F2 6100 0000                  		bsr.w	sub_9404
000092F6 6A00                       		bpl.s	loc_932E
000092F8 4268 0010                  		clr.w	$10(a0)
000092FC 4268 0032                  		clr.w	$32(a0)
00009300 6100 0000                  		bsr.w	ObjectFall
00009304 6100 0000                  		bsr.w	loc_93C4
00009308 6100 0000                  		bsr.w	loc_93EC
0000930C                            
0000930C                            loc_932E:
0000930C 6000 FEF4                  		bra.w	loc_9224
00009310                            ; ===========================================================================
00009310                            
00009310                            loc_9332:				; XREF: Obj28_Index
00009310 6100 0000                  		bsr.w	sub_9404
00009314 6A00                       		bpl.s	loc_936C
00009316 6100 0000                  		bsr.w	ObjectFall
0000931A 117C 0001 001A             		move.b	#1,$1A(a0)
00009320 4A68 0012                  		tst.w	$12(a0)
00009324 6B00                       		bmi.s	loc_936C
00009326 117C 0000 001A             		move.b	#0,$1A(a0)
0000932C 4EB9 0000 0000             		jsr	ObjHitFloor
00009332 4A41                       		tst.w	d1
00009334 6A00                       		bpl.s	loc_936C
00009336 4468 0010                  		neg.w	$10(a0)
0000933A 0868 0000 0001             		bchg	#0,1(a0)
00009340 D368 000C                  		add.w	d1,$C(a0)
00009344 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000934A                            
0000934A                            loc_936C:
0000934A 6000 FEB6                  		bra.w	loc_9224
0000934E                            ; ===========================================================================
0000934E                            
0000934E                            loc_9370:				; XREF: Obj28_Index
0000934E 6100 0000                  		bsr.w	sub_9404
00009352 6A00                       		bpl.s	loc_93C0
00009354 6100 0000                  		bsr.w	SpeedToPos
00009358 0668 0018 0012             		addi.w	#$18,$12(a0)
0000935E 4A68 0012                  		tst.w	$12(a0)
00009362 6B00                       		bmi.s	loc_93AA
00009364 4EB9 0000 0000             		jsr	ObjHitFloor
0000936A 4A41                       		tst.w	d1
0000936C 6A00                       		bpl.s	loc_93AA
0000936E 4628 0029                  		not.b	$29(a0)
00009372 6600                       		bne.s	loc_93A0
00009374 4468 0010                  		neg.w	$10(a0)
00009378 0868 0000 0001             		bchg	#0,1(a0)
0000937E                            
0000937E                            loc_93A0:
0000937E D368 000C                  		add.w	d1,$C(a0)
00009382 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009388                            
00009388                            loc_93AA:
00009388 5328 001E                  		subq.b	#1,$1E(a0)
0000938C 6A00                       		bpl.s	loc_93C0
0000938E 117C 0001 001E             		move.b	#1,$1E(a0)
00009394 5228 001A                  		addq.b	#1,$1A(a0)
00009398 0228 0001 001A             		andi.b	#1,$1A(a0)
0000939E                            
0000939E                            loc_93C0:
0000939E 6000 FE62                  		bra.w	loc_9224
000093A2                            ; ===========================================================================
000093A2                            
000093A2                            loc_93C4:
000093A2 117C 0001 001A             		move.b	#1,$1A(a0)
000093A8 4A68 0012                  		tst.w	$12(a0)
000093AC 6B00                       		bmi.s	locret_93EA
000093AE 117C 0000 001A             		move.b	#0,$1A(a0)
000093B4 4EB9 0000 0000             		jsr	ObjHitFloor
000093BA 4A41                       		tst.w	d1
000093BC 6A00                       		bpl.s	locret_93EA
000093BE D368 000C                  		add.w	d1,$C(a0)
000093C2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093C8                            
000093C8                            locret_93EA:
000093C8 4E75                       		rts	
000093CA                            ; ===========================================================================
000093CA                            
000093CA                            loc_93EC:
000093CA 08E8 0000 0001             		bset	#0,1(a0)
000093D0 3028 0008                  		move.w	8(a0),d0
000093D4 9078 D008                  		sub.w	($FFFFD008).w,d0
000093D8 6400                       		bcc.s	locret_9402
000093DA 08A8 0000 0001             		bclr	#0,1(a0)
000093E0                            
000093E0                            locret_9402:
000093E0 4E75                       		rts	
000093E2                            
000093E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093E2                            
000093E2                            
000093E2                            sub_9404:
000093E2 3038 D008                  		move.w	($FFFFD008).w,d0
000093E6 9068 0008                  		sub.w	8(a0),d0
000093EA 0440 00B8                  		subi.w	#$B8,d0
000093EE 4E75                       		rts	
000093F0                            ; End of function sub_9404
000093F0                            
000093F0                            ; ===========================================================================
000093F0                            ; ---------------------------------------------------------------------------
000093F0                            ; Object 29 - points that appear when you destroy something
000093F0                            ; ---------------------------------------------------------------------------
000093F0                            
000093F0                            Obj29:					; XREF: Obj_Index
000093F0 7000                       		moveq	#0,d0
000093F2 1028 0024                  		move.b	$24(a0),d0
000093F6 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000093FA 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000093FE 6000 0000                  		bra.w	DisplaySprite
00009402                            ; ===========================================================================
00009402 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009404 0000                       		dc.w Obj29_Slower-Obj29_Index
00009406                            ; ===========================================================================
00009406                            
00009406                            Obj29_Main:				; XREF: Obj29_Index
00009406 5428 0024                  		addq.b	#2,$24(a0)
0000940A 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009412 317C 2797 0002             		move.w	#$2797,2(a0)
00009418 117C 0004 0001             		move.b	#4,1(a0)
0000941E 117C 0001 0018             		move.b	#1,$18(a0)
00009424 117C 0008 0019             		move.b	#8,$19(a0)
0000942A 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009430                            
00009430                            Obj29_Slower:				; XREF: Obj29_Index
00009430 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009434 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009438 6100 0000                  		bsr.w	SpeedToPos
0000943C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009442 4E75                       		rts	
00009444                            ; ===========================================================================
00009444                            ; ---------------------------------------------------------------------------
00009444                            ; Sprite mappings - animals
00009444                            ; ---------------------------------------------------------------------------
00009444                            Map_obj28:
00009444                            	include "_maps\obj28.asm"
00009444                            ; ---------------------------------------------------------------------------
00009444                            ; Sprite mappings - animals
00009444                            ; ---------------------------------------------------------------------------
00009444 0000                       		dc.w byte_9472-Map_obj28
00009446 0000                       		dc.w byte_9478-Map_obj28
00009448 0000                       		dc.w byte_946C-Map_obj28
0000944A 01                         byte_946C:	dc.b 1
0000944B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009450 01                         byte_9472:	dc.b 1
00009451 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009456 01                         byte_9478:	dc.b 1
00009457 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000945C                            		even
0000945C                            		even
0000945C                            
0000945C                            Map_obj28a:
0000945C                            	include "_maps\obj28a.asm"
0000945C                            ; ---------------------------------------------------------------------------
0000945C                            ; Sprite mappings - animals
0000945C                            ; ---------------------------------------------------------------------------
0000945C 0000                       		dc.w byte_948A-Map_obj28a
0000945E 0000                       		dc.w byte_9490-Map_obj28a
00009460 0000                       		dc.w byte_9484-Map_obj28a
00009462 01                         byte_9484:	dc.b 1
00009463 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009468 01                         byte_948A:	dc.b 1
00009469 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000946E 01                         byte_9490:	dc.b 1
0000946F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009474                            		even
00009474                            		even
00009474                            
00009474                            Map_obj28b:
00009474                            	include "_maps\obj28b.asm"
00009474                            ; ---------------------------------------------------------------------------
00009474                            ; Sprite mappings - animals
00009474                            ; ---------------------------------------------------------------------------
00009474 0000                       		dc.w byte_94A2-Map_obj28b
00009476 0000                       		dc.w byte_94A8-Map_obj28b
00009478 0000                       		dc.w byte_949C-Map_obj28b
0000947A 01                         byte_949C:	dc.b 1
0000947B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009480 01                         byte_94A2:	dc.b 1
00009481 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009486 01                         byte_94A8:	dc.b 1
00009487 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000948C                            		even
0000948C                            		even
0000948C                            
0000948C                            ; ---------------------------------------------------------------------------
0000948C                            ; Sprite mappings - points that	appear when you	destroy	something
0000948C                            ; ---------------------------------------------------------------------------
0000948C                            Map_obj29:
0000948C                            	include "_maps\obj29.asm"
0000948C                            ; ---------------------------------------------------------------------------
0000948C                            ; Sprite mappings - points that	appear when you	destroy	something
0000948C                            ; ---------------------------------------------------------------------------
0000948C 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009490 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009494 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009498 0000                       		dc.w byte_94E5-Map_obj29
0000949A 01                         byte_94BC:	dc.b 1
0000949B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000094A0 01                         byte_94C2:	dc.b 1
000094A1 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000094A6 01                         byte_94C8:	dc.b 1
000094A7 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000094AC 01                         byte_94CE:	dc.b 1
000094AD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000094B2 01                         byte_94D4:	dc.b 1
000094B3 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000094B8 02                         byte_94DA:	dc.b 2
000094B9 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000094BE FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000094C3 02                         byte_94E5:	dc.b 2
000094C4 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000094C9 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000094CE                            		even
000094CE                            		even
000094CE                            
000094CE                            ; ===========================================================================
000094CE                            ; ---------------------------------------------------------------------------
000094CE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000094CE                            ; ---------------------------------------------------------------------------
000094CE                            
000094CE                            Obj1F:					; XREF: Obj_Index
000094CE 7000                       		moveq	#0,d0
000094D0 1028 0024                  		move.b	$24(a0),d0
000094D4 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000094D8 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000094DC                            ; ===========================================================================
000094DC 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000094DE 0000                       		dc.w Obj1F_Action-Obj1F_Index
000094E0 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000094E2 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000094E4 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000094E6                            ; ===========================================================================
000094E6                            
000094E6                            Obj1F_Main:				; XREF: Obj1F_Index
000094E6 117C 0010 0016             		move.b	#$10,$16(a0)
000094EC 117C 0008 0017             		move.b	#8,$17(a0)
000094F2 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000094FA 317C 0400 0002             		move.w	#$400,2(a0)
00009500 117C 0004 0001             		move.b	#4,1(a0)
00009506 117C 0003 0018             		move.b	#3,$18(a0)
0000950C 117C 0006 0020             		move.b	#6,$20(a0)
00009512 117C 0015 0019             		move.b	#$15,$19(a0)
00009518 6100 0000                  		bsr.w	ObjectFall
0000951C 4EB9 0000 0000             		jsr	ObjHitFloor
00009522 4A41                       		tst.w	d1
00009524 6A00                       		bpl.s	locret_955A
00009526 D368 000C                  		add.w	d1,$C(a0)
0000952A 1143 0026                  		move.b	d3,$26(a0)
0000952E 317C 0000 0012             		move.w	#0,$12(a0)
00009534 5428 0024                  		addq.b	#2,$24(a0)
00009538                            
00009538                            locret_955A:
00009538 4E75                       		rts	
0000953A                            ; ===========================================================================
0000953A                            
0000953A                            Obj1F_Action:				; XREF: Obj1F_Index
0000953A 7000                       		moveq	#0,d0
0000953C 1028 0025                  		move.b	$25(a0),d0
00009540 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009544 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009548 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000954E 6100 0000                  		bsr.w	AnimateSprite
00009552 6000 0000                  		bra.w	MarkObjGone
00009556                            ; ===========================================================================
00009556 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009558 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000955A                            ; ===========================================================================
0000955A                            
0000955A                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000955A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000955E 6A00                       		bpl.s	locret_95B6
00009560 4A28 0001                  		tst.b	1(a0)
00009564 6A00                       		bpl.s	Obj1F_Move
00009566 0868 0001 0032             		bchg	#1,$32(a0)
0000956C 6600                       		bne.s	Obj1F_MakeFire
0000956E                            
0000956E                            Obj1F_Move:
0000956E 5428 0025                  		addq.b	#2,$25(a0)
00009572 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009578 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000957E 6100 0000                  		bsr.w	Obj1F_SetAni
00009582 5600                       		addq.b	#3,d0
00009584 1140 001C                  		move.b	d0,$1C(a0)
00009588 0868 0000 0022             		bchg	#0,$22(a0)
0000958E 6600                       		bne.s	locret_95B6
00009590 4468 0010                  		neg.w	$10(a0)		; change direction
00009594                            
00009594                            locret_95B6:
00009594 4E75                       		rts	
00009596                            ; ===========================================================================
00009596                            
00009596                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009596 317C 003B 0030             		move.w	#$3B,$30(a0)
0000959C 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000095A2 6100 0000                  		bsr.w	SingleObjLoad
000095A6 6600                       		bne.s	Obj1F_MakeFire2
000095A8 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000095AC 137C 0006 0024             		move.b	#6,$24(a1)
000095B2 3368 0008 0008             		move.w	8(a0),8(a1)
000095B8 0469 0010 0008             		subi.w	#$10,8(a1)
000095BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095C4 337C FF00 0010             		move.w	#-$100,$10(a1)
000095CA                            
000095CA                            Obj1F_MakeFire2:
000095CA 6100 0000                  		bsr.w	SingleObjLoad
000095CE 6600                       		bne.s	locret_9618
000095D0 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000095D4 137C 0006 0024             		move.b	#6,$24(a1)
000095DA 3368 0008 0008             		move.w	8(a0),8(a1)
000095E0 0669 0010 0008             		addi.w	#$10,8(a1)
000095E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095EC 337C 0100 0010             		move.w	#$100,$10(a1)
000095F2                            
000095F2                            locret_9618:
000095F2 4E75                       		rts	
000095F4                            ; ===========================================================================
000095F4                            
000095F4                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
000095F4 5368 0030                  		subq.w	#1,$30(a0)
000095F8 6B00                       		bmi.s	loc_966E
000095FA 6100 0000                  		bsr.w	SpeedToPos
000095FE 0868 0000 0032             		bchg	#0,$32(a0)
00009604 6600                       		bne.s	loc_9654
00009606 3628 0008                  		move.w	8(a0),d3
0000960A 0643 0010                  		addi.w	#$10,d3
0000960E 0828 0000 0022             		btst	#0,$22(a0)
00009614 6700                       		beq.s	loc_9640
00009616 0443 0020                  		subi.w	#$20,d3
0000961A                            
0000961A                            loc_9640:
0000961A 4EB9 0000 0000             		jsr	ObjHitFloor2
00009620 0C41 FFF8                  		cmpi.w	#-8,d1
00009624 6D00                       		blt.s	loc_966E
00009626 0C41 000C                  		cmpi.w	#$C,d1
0000962A 6C00                       		bge.s	loc_966E
0000962C 4E75                       		rts	
0000962E                            ; ===========================================================================
0000962E                            
0000962E                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000962E 4EB9 0000 0000             		jsr	ObjHitFloor
00009634 D368 000C                  		add.w	d1,$C(a0)
00009638 1143 0026                  		move.b	d3,$26(a0)
0000963C 6100 0000                  		bsr.w	Obj1F_SetAni
00009640 5600                       		addq.b	#3,d0
00009642 1140 001C                  		move.b	d0,$1C(a0)
00009646 4E75                       		rts	
00009648                            ; ===========================================================================
00009648                            
00009648                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009648 5528 0025                  		subq.b	#2,$25(a0)
0000964C 317C 003B 0030             		move.w	#59,$30(a0)
00009652 317C 0000 0010             		move.w	#0,$10(a0)
00009658 6100 0000                  		bsr.w	Obj1F_SetAni
0000965C 1140 001C                  		move.b	d0,$1C(a0)
00009660 4E75                       		rts	
00009662                            ; ---------------------------------------------------------------------------
00009662                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009662                            ; ---------------------------------------------------------------------------
00009662                            
00009662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009662                            
00009662                            
00009662                            Obj1F_SetAni:				; XREF: loc_966E
00009662 7000                       		moveq	#0,d0
00009664 1628 0026                  		move.b	$26(a0),d3
00009668 6B00                       		bmi.s	loc_96A4
0000966A 0C03 0006                  		cmpi.b	#6,d3
0000966E 6500                       		bcs.s	locret_96A2
00009670 7001                       		moveq	#1,d0
00009672 0828 0000 0022             		btst	#0,$22(a0)
00009678 6600                       		bne.s	locret_96A2
0000967A 7002                       		moveq	#2,d0
0000967C                            
0000967C                            locret_96A2:
0000967C 4E75                       		rts	
0000967E                            ; ===========================================================================
0000967E                            
0000967E                            loc_96A4:				; XREF: Obj1F_SetAni
0000967E 0C03 00FA                  		cmpi.b	#-6,d3
00009682 6200                       		bhi.s	locret_96B6
00009684 7002                       		moveq	#2,d0
00009686 0828 0000 0022             		btst	#0,$22(a0)
0000968C 6600                       		bne.s	locret_96B6
0000968E 7001                       		moveq	#1,d0
00009690                            
00009690                            locret_96B6:
00009690 4E75                       		rts	
00009692                            ; End of function Obj1F_SetAni
00009692                            
00009692                            ; ===========================================================================
00009692                            
00009692                            Obj1F_Delete:				; XREF: Obj1F_Index
00009692 6100 0000                  		bsr.w	DeleteObject
00009696 4E75                       		rts	
00009698                            ; ===========================================================================
00009698                            ; ---------------------------------------------------------------------------
00009698                            ; Sub-object - missile that the	Crabmeat throws
00009698                            ; ---------------------------------------------------------------------------
00009698                            
00009698                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009698 5428 0024                  		addq.b	#2,$24(a0)
0000969C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000096A4 317C 0400 0002             		move.w	#$400,2(a0)
000096AA 117C 0004 0001             		move.b	#4,1(a0)
000096B0 117C 0003 0018             		move.b	#3,$18(a0)
000096B6 117C 0087 0020             		move.b	#$87,$20(a0)
000096BC 117C 0008 0019             		move.b	#8,$19(a0)
000096C2 317C FC00 0012             		move.w	#-$400,$12(a0)
000096C8 117C 0007 001C             		move.b	#7,$1C(a0)
000096CE                            
000096CE                            Obj1F_BallMove:				; XREF: Obj1F_Index
000096CE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000096D4 6100 0000                  		bsr.w	AnimateSprite
000096D8 6100 0000                  		bsr.w	ObjectFall
000096DC 6100 0000                  		bsr.w	DisplaySprite
000096E0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000096E4 0640 00E0                  		addi.w	#$E0,d0
000096E8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000096EC 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
000096EE 4E75                       		rts	
000096F0                            ; ===========================================================================
000096F0                            
000096F0                            Obj1F_Delete2:
000096F0 6000 0000                  		bra.w	DeleteObject
000096F4                            ; ===========================================================================
000096F4                            Ani_obj1F:
000096F4                            	include "_anim\obj1F.asm"
000096F4                            ; ---------------------------------------------------------------------------
000096F4                            ; Animation script - Crabmeat enemy
000096F4                            ; ---------------------------------------------------------------------------
000096F4 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
000096FA 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009700 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009704 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009708 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000970C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009710 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009716 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000971C 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009722 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009726 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000972A                            		even
0000972A                            		even
0000972A                            
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            Map_obj1F:
0000972A                            	include "_maps\obj1F.asm"
0000972A                            ; ---------------------------------------------------------------------------
0000972A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000972A                            ; ---------------------------------------------------------------------------
0000972A 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000972E 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009732 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009736 0000                       		dc.w byte_97D7-Map_obj1F
00009738 04                         byte_975E:	dc.b 4
00009739 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000973E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009743 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009748 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000974D 04                         byte_9773:	dc.b 4
0000974E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009753 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009758 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000975D 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009762 04                         byte_9788:	dc.b 4
00009763 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009768 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000976D FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009772 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009777 04                         byte_979D:	dc.b 4
00009778 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000977D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009782 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009787 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000978C 06                         byte_97B2:	dc.b 6
0000978D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009792 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009797 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000979C F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
000097A1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
000097A6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000097AB 01                         byte_97D1:	dc.b 1
000097AC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000097B1 01                         byte_97D7:	dc.b 1
000097B2 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
000097B8 00                         		even
000097B8 00                         		even
000097B8                            
000097B8                            ; ===========================================================================
000097B8                            ; ---------------------------------------------------------------------------
000097B8                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
000097B8                            ; ---------------------------------------------------------------------------
000097B8                            
000097B8                            Obj22:					; XREF: Obj_Index
000097B8 7000                       		moveq	#0,d0
000097BA 1028 0024                  		move.b	$24(a0),d0
000097BE 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000097C2 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000097C6                            ; ===========================================================================
000097C6 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000097C8 0000                       		dc.w Obj22_Action-Obj22_Index
000097CA 0000                       		dc.w Obj22_Delete-Obj22_Index
000097CC                            ; ===========================================================================
000097CC                            
000097CC                            Obj22_Main:				; XREF: Obj22_Index
000097CC 5428 0024                  		addq.b	#2,$24(a0)
000097D0 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000097D8 317C 0444 0002             		move.w	#$444,2(a0)
000097DE 117C 0004 0001             		move.b	#4,1(a0)
000097E4 117C 0003 0018             		move.b	#3,$18(a0)
000097EA 117C 0008 0020             		move.b	#8,$20(a0)
000097F0 117C 0018 0019             		move.b	#$18,$19(a0)
000097F6                            
000097F6                            Obj22_Action:				; XREF: Obj22_Index
000097F6 7000                       		moveq	#0,d0
000097F8 1028 0025                  		move.b	$25(a0),d0
000097FC 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009800 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009804 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000980A 6100 0000                  		bsr.w	AnimateSprite
0000980E 6000 0000                  		bra.w	MarkObjGone
00009812                            ; ===========================================================================
00009812 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009814 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009816                            ; ===========================================================================
00009816                            
00009816                            Obj22_Move:				; XREF: Obj22_Index2
00009816 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000981A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000981C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009822 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009824 5428 0025                  		addq.b	#2,$25(a0)
00009828 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000982E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009834 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000983A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009840 6600                       		bne.s	locret_986C	; if not, branch
00009842 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009846                            
00009846                            locret_986C:
00009846 4E75                       		rts	
00009848                            ; ===========================================================================
00009848                            
00009848                            Obj22_Fire:				; XREF: Obj22_Move
00009848 6100 0000                  		bsr.w	SingleObjLoad
0000984C 6600                       		bne.s	locret_98D0
0000984E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009852 3368 0008 0008             		move.w	8(a0),8(a1)
00009858 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000985E 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009864 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000986A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009870 303C 0018                  		move.w	#$18,d0
00009874 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000987A 6600                       		bne.s	loc_98AA	; if not, branch
0000987C 4440                       		neg.w	d0
0000987E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009882                            
00009882                            loc_98AA:
00009882 D169 0008                  		add.w	d0,8(a1)
00009886 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000988C 337C 000E 0032             		move.w	#$E,$32(a1)
00009892 2348 003C                  		move.l	a0,$3C(a1)
00009896 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000989C 317C 003B 0032             		move.w	#$3B,$32(a0)
000098A2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
000098A8                            
000098A8                            locret_98D0:
000098A8 4E75                       		rts	
000098AA                            ; ===========================================================================
000098AA                            
000098AA                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000098AA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000098AE 6B00                       		bmi.s	Obj22_ChgDir
000098B0 6100 0000                  		bsr.w	SpeedToPos
000098B4 4A28 0034                  		tst.b	$34(a0)
000098B8 6600                       		bne.s	locret_992A
000098BA 3038 D008                  		move.w	($FFFFD008).w,d0
000098BE 9068 0008                  		sub.w	8(a0),d0
000098C2 6A00                       		bpl.s	Obj22_SetNrSonic
000098C4 4440                       		neg.w	d0
000098C6                            
000098C6                            Obj22_SetNrSonic:
000098C6 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000098CA 6400                       		bcc.s	locret_992A	; if not, branch
000098CC 4A28 0001                  		tst.b	1(a0)
000098D0 6A00                       		bpl.s	locret_992A
000098D2 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000098D8 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000098DE 6000                       		bra.s	Obj22_Stop
000098E0                            ; ===========================================================================
000098E0                            
000098E0                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000098E0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000098E6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000098EC 317C 003B 0032             		move.w	#59,$32(a0)
000098F2                            
000098F2                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
000098F2 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
000098F6 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
000098FC 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009902                            
00009902                            locret_992A:
00009902 4E75                       		rts	
00009904                            ; ===========================================================================
00009904                            
00009904                            Obj22_Delete:				; XREF: Obj22_Index
00009904 6100 0000                  		bsr.w	DeleteObject
00009908 4E75                       		rts	
0000990A                            ; ===========================================================================
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Object 23 - missile that Buzz	Bomber throws
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            
0000990A                            Obj23:					; XREF: Obj_Index
0000990A 7000                       		moveq	#0,d0
0000990C 1028 0024                  		move.b	$24(a0),d0
00009910 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009914 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009918                            ; ===========================================================================
00009918 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000991A 0000                       		dc.w Obj23_Animate-Obj23_Index
0000991C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000991E 0000                       		dc.w Obj23_Delete-Obj23_Index
00009920 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009922                            ; ===========================================================================
00009922                            
00009922                            Obj23_Main:				; XREF: Obj23_Index
00009922 5368 0032                  		subq.w	#1,$32(a0)
00009926 6A00                       		bpl.s	Obj23_ChkCancel
00009928 5428 0024                  		addq.b	#2,$24(a0)
0000992C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009934 317C 2444 0002             		move.w	#$2444,2(a0)
0000993A 117C 0004 0001             		move.b	#4,1(a0)
00009940 117C 0003 0018             		move.b	#3,$18(a0)
00009946 117C 0008 0019             		move.b	#8,$19(a0)
0000994C 0228 0003 0022             		andi.b	#3,$22(a0)
00009952 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009956 6700                       		beq.s	Obj23_Animate	; if not, branch
00009958 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000995E 117C 0087 0020             		move.b	#$87,$20(a0)
00009964 117C 0001 001C             		move.b	#1,$1C(a0)
0000996A 6000                       		bra.s	Obj23_Animate2
0000996C                            ; ===========================================================================
0000996C                            
0000996C                            Obj23_Animate:				; XREF: Obj23_Index
0000996C 6100                       		bsr.s	Obj23_ChkCancel
0000996E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009974 6100 0000                  		bsr.w	AnimateSprite
00009978 6000 0000                  		bra.w	DisplaySprite
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000997C                            ; destroyed, and if it has, then cancel	the missile
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000997C                            
0000997C                            
0000997C                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000997C 2268 003C                  		movea.l	$3C(a0),a1
00009980 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009984 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009986 4E75                       		rts	
00009988                            ; End of function Obj23_ChkCancel
00009988                            
00009988                            ; ===========================================================================
00009988                            
00009988                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009988 0828 0007 0022             		btst	#7,$22(a0)
0000998E 6600                       		bne.s	Obj23_Explode
00009990 117C 0087 0020             		move.b	#$87,$20(a0)
00009996 117C 0001 001C             		move.b	#1,$1C(a0)
0000999C 6100 0000                  		bsr.w	SpeedToPos
000099A0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
000099A6 6100 0000                  		bsr.w	AnimateSprite
000099AA 6100 0000                  		bsr.w	DisplaySprite
000099AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000099B2 0640 00E0                  		addi.w	#$E0,d0
000099B6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000099BA 6500                       		bcs.s	Obj23_Delete	; if yes, branch
000099BC 4E75                       		rts	
000099BE                            ; ===========================================================================
000099BE                            
000099BE                            Obj23_Explode:				; XREF: Obj23_FromBuzz
000099BE 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
000099C2 117C 0000 0024             		move.b	#0,$24(a0)
000099C8 6000 F30A                  		bra.w	Obj24
000099CC                            ; ===========================================================================
000099CC                            
000099CC                            Obj23_Delete:				; XREF: Obj23_Index
000099CC 6100 0000                  		bsr.w	DeleteObject
000099D0 4E75                       		rts	
000099D2                            ; ===========================================================================
000099D2                            
000099D2                            Obj23_FromNewt:				; XREF: Obj23_Index
000099D2 4A28 0001                  		tst.b	1(a0)
000099D6 6AF4                       		bpl.s	Obj23_Delete
000099D8 6100 0000                  		bsr.w	SpeedToPos
000099DC                            
000099DC                            Obj23_Animate2:				; XREF: Obj23_Main
000099DC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
000099E2 6100 0000                  		bsr.w	AnimateSprite
000099E6 6100 0000                  		bsr.w	DisplaySprite
000099EA 4E75                       		rts	
000099EC                            ; ===========================================================================
000099EC                            Ani_obj22:
000099EC                            	include "_anim\obj22.asm"
000099EC                            ; ---------------------------------------------------------------------------
000099EC                            ; Animation script - Buzz Bomber enemy
000099EC                            ; ---------------------------------------------------------------------------
000099EC 0000                       		dc.w byte_9A1E-Ani_obj22
000099EE 0000                       		dc.w byte_9A22-Ani_obj22
000099F0 0000                       		dc.w byte_9A26-Ani_obj22
000099F2 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
000099F6 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
000099FA 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
000099FE                            		even
000099FE                            		even
000099FE                            
000099FE                            Ani_obj23:
000099FE                            	include "_anim\obj23.asm"
000099FE                            ; ---------------------------------------------------------------------------
000099FE                            ; Animation script - missile that Buzz Bomber throws
000099FE                            ; ---------------------------------------------------------------------------
000099FE 0000                       		dc.w byte_9A2E-Ani_obj23
00009A00 0000                       		dc.w byte_9A32-Ani_obj23
00009A02 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009A06 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009A0A                            		even
00009A0A                            		even
00009A0A                            
00009A0A                            ; ---------------------------------------------------------------------------
00009A0A                            ; Sprite mappings - Buzz Bomber	enemy
00009A0A                            ; ---------------------------------------------------------------------------
00009A0A                            Map_obj22:
00009A0A                            	include "_maps\obj22.asm"
00009A0A                            ; ---------------------------------------------------------------------------
00009A0A                            ; Sprite mappings - Buzz Bomber	enemy
00009A0A                            ; ---------------------------------------------------------------------------
00009A0A 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
00009A0E 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
00009A12 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
00009A16 06                         byte_9A42:	dc.b 6
00009A17 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A1C F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A21 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A26 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A2B F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A30 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A35 06                         byte_9A61:	dc.b 6
00009A36 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A3B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A40 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A45 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A4A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009A4F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009A54 07                         byte_9A80:	dc.b 7
00009A55 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00009A5A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A5F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A64 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A69 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A6E F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A73 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A78 07                         byte_9AA4:	dc.b 7
00009A79 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00009A7E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A83 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A88 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A8D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A92 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009A97 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009A9C 06                         byte_9AC8:	dc.b 6
00009A9D F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009AA2 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009AA7 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009AAC 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009AB1 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009AB6 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009ABB 04                         byte_9AE7:	dc.b 4
00009ABC F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009AC1 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009AC6 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009ACB 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009AD0 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009AD5 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009ADA                            		even
00009ADA                            		even
00009ADA                            
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            ; Sprite mappings - missile that Buzz Bomber throws
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            Map_obj23:
00009ADA                            	include "_maps\obj23.asm"
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            ; Sprite mappings - missile that Buzz Bomber throws
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009ADE 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009AE2 01                         byte_9B0E:	dc.b 1
00009AE3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009AE8 01                         byte_9B14:	dc.b 1
00009AE9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009AEE 01                         byte_9B1A:	dc.b 1
00009AEF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009AF4 01                         byte_9B20:	dc.b 1
00009AF5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009AFA                            		even
00009AFA                            		even
00009AFA                            
00009AFA                            ; ===========================================================================
00009AFA                            ; ---------------------------------------------------------------------------
00009AFA                            ; Object 25 - rings
00009AFA                            ; ---------------------------------------------------------------------------
00009AFA                            
00009AFA                            Obj25:					; XREF: Obj_Index
00009AFA 7000                       		moveq	#0,d0
00009AFC 1028 0024                  		move.b	$24(a0),d0
00009B00 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009B04 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009B08                            ; ===========================================================================
00009B08 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009B0A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009B0C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009B0E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009B10 0000                       		dc.w Obj25_Delete-Obj25_Index
00009B12                            ; ---------------------------------------------------------------------------
00009B12                            ; Distances between rings (format: horizontal, vertical)
00009B12                            ; ---------------------------------------------------------------------------
00009B12 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009B14 1800                       		dc.b $18, 0		; horizontal normal
00009B16 2000                       		dc.b $20, 0		; horizontal wide
00009B18 0010                       		dc.b 0,	$10		; vertical tight
00009B1A 0018                       		dc.b 0,	$18		; vertical normal
00009B1C 0020                       		dc.b 0,	$20		; vertical wide
00009B1E 1010                       		dc.b $10, $10		; diagonal
00009B20 1818                       		dc.b $18, $18
00009B22 2020                       		dc.b $20, $20
00009B24 F010                       		dc.b $F0, $10
00009B26 E818                       		dc.b $E8, $18
00009B28 E020                       		dc.b $E0, $20
00009B2A 1008                       		dc.b $10, 8
00009B2C 1810                       		dc.b $18, $10
00009B2E F008                       		dc.b $F0, 8
00009B30 E810                       		dc.b $E8, $10
00009B32                            ; ===========================================================================
00009B32                            
00009B32                            Obj25_Main:				; XREF: Obj25_Index
00009B32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009B36 7000                       		moveq	#0,d0
00009B38 1028 0023                  		move.b	$23(a0),d0
00009B3C 45F2 0002                  		lea	2(a2,d0.w),a2
00009B40 1812                       		move.b	(a2),d4
00009B42 1228 0028                  		move.b	$28(a0),d1
00009B46 1001                       		move.b	d1,d0
00009B48 0241 0007                  		andi.w	#7,d1
00009B4C 0C41 0007                  		cmpi.w	#7,d1
00009B50 6600                       		bne.s	loc_9B80
00009B52 7206                       		moveq	#6,d1
00009B54                            
00009B54                            loc_9B80:
00009B54 4841                       		swap	d1
00009B56 323C 0000                  		move.w	#0,d1
00009B5A E808                       		lsr.b	#4,d0
00009B5C D040                       		add.w	d0,d0
00009B5E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009B62 4885                       		ext.w	d5
00009B64 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009B68 4886                       		ext.w	d6
00009B6A 2248                       		movea.l	a0,a1
00009B6C 3428 0008                  		move.w	8(a0),d2
00009B70 3628 000C                  		move.w	$C(a0),d3
00009B74 E20C                       		lsr.b	#1,d4
00009B76 6500                       		bcs.s	loc_9C02
00009B78 0892 0007                  		bclr	#7,(a2)
00009B7C 6000                       		bra.s	loc_9BBA
00009B7E                            ; ===========================================================================
00009B7E                            
00009B7E                            Obj25_MakeRings:
00009B7E 4841                       		swap	d1
00009B80 E20C                       		lsr.b	#1,d4
00009B82 6500                       		bcs.s	loc_9C02
00009B84 0892 0007                  		bclr	#7,(a2)
00009B88 6100 0000                  		bsr.w	SingleObjLoad
00009B8C 6600                       		bne.s	loc_9C0E
00009B8E                            
00009B8E                            loc_9BBA:				; XREF: Obj25_Main
00009B8E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009B92 5429 0024                  		addq.b	#2,$24(a1)
00009B96 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009B9A 3368 0008 0032             		move.w	8(a0),$32(a1)
00009BA0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009BA4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009BAC 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009BB2 137C 0004 0001             		move.b	#4,1(a1)
00009BB8 137C 0002 0018             		move.b	#2,$18(a1)
00009BBE 137C 0047 0020             		move.b	#$47,$20(a1)
00009BC4 137C 0008 0019             		move.b	#8,$19(a1)
00009BCA 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009BD0 1341 0034                  		move.b	d1,$34(a1)
00009BD4                            
00009BD4                            loc_9C02:
00009BD4 5241                       		addq.w	#1,d1
00009BD6 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009BD8 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009BDA 4841                       		swap	d1
00009BDC 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009BE0                            
00009BE0                            loc_9C0E:
00009BE0 0812 0000                  		btst	#0,(a2)
00009BE4 6600 0000                  		bne.w	DeleteObject
00009BE8                            
00009BE8                            Obj25_Animate:				; XREF: Obj25_Index
00009BE8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009BEE 6100 0000                  		bsr.w	DisplaySprite
00009BF2 3028 0032                  		move.w	$32(a0),d0
00009BF6 0240 FF80                  		andi.w	#$FF80,d0
00009BFA 3238 F700                  		move.w	($FFFFF700).w,d1
00009BFE 0441 0080                  		subi.w	#$80,d1
00009C02 0241 FF80                  		andi.w	#$FF80,d1
00009C06 9041                       		sub.w	d1,d0
00009C08 0C40 0280                  		cmpi.w	#$280,d0
00009C0C 6200                       		bhi.s	Obj25_Delete
00009C0E 4E75                       		rts	
00009C10                            ; ===========================================================================
00009C10                            
00009C10                            Obj25_Collect:				; XREF: Obj25_Index
00009C10 5428 0024                  		addq.b	#2,$24(a0)
00009C14 117C 0000 0020             		move.b	#0,$20(a0)
00009C1A 117C 0001 0018             		move.b	#1,$18(a0)
00009C20 6100 0000                  		bsr.w	CollectRing
00009C24 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C28 7000                       		moveq	#0,d0
00009C2A 1028 0023                  		move.b	$23(a0),d0
00009C2E 1228 0034                  		move.b	$34(a0),d1
00009C32 03F2 0002                  		bset	d1,2(a2,d0.w)
00009C36                            
00009C36                            Obj25_Sparkle:				; XREF: Obj25_Index
00009C36 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009C3C 6100 0000                  		bsr.w	AnimateSprite
00009C40 6000 0000                  		bra.w	DisplaySprite
00009C44                            ; ===========================================================================
00009C44                            
00009C44                            Obj25_Delete:				; XREF: Obj25_Index
00009C44 6000 0000                  		bra.w	DeleteObject
00009C48                            
00009C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C48                            
00009C48                            
00009C48                            CollectRing:				; XREF: Obj25_Collect
00009C48 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009C4C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009C52 303C 00CE                  		move.w	#$CE,d0		; play ring sound     (B5??)
00009C56 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009C5C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009C5E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009C64 6700                       		beq.s	loc_9CA4
00009C66 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009C6C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009C6E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009C74 6600                       		bne.s	Obj25_PlaySnd
00009C76                            
00009C76                            loc_9CA4:
00009C76 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009C7A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009C7E 303C 009F                  		move.w	#$9F,d0		; play extra life music
00009C82                            
00009C82                            Obj25_PlaySnd:
00009C82 4EF9 0000 12CC             		jmp	(PlaySound_Special).l
00009C88                            ; End of function CollectRing
00009C88                            
00009C88                            ; ===========================================================================
00009C88                            ; ---------------------------------------------------------------------------
00009C88                            ; Object 37 - rings flying out of Sonic	when he's hit
00009C88                            ; ---------------------------------------------------------------------------
00009C88                            
00009C88                            Obj37:					; XREF: Obj_Index
00009C88 7000                       		moveq	#0,d0
00009C8A 1028 0024                  		move.b	$24(a0),d0
00009C8E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009C92 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009C96                            ; ===========================================================================
00009C96 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009C98 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009C9A 0000                       		dc.w Obj37_Collect-Obj37_Index
00009C9C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009C9E 0000                       		dc.w Obj37_Delete-Obj37_Index
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj37_CountRings:			; XREF: Obj37_Index
00009CA0 2248                       		movea.l	a0,a1
00009CA2 7A00                       		moveq	#0,d5
00009CA4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009CA8 7020                       		moveq	#32,d0
00009CAA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009CAC 6500                       		bcs.s	loc_9CDE	; if not, branch
00009CAE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009CB0                            
00009CB0                            loc_9CDE:
00009CB0 5345                       		subq.w	#1,d5
00009CB2 383C 0288                  		move.w	#$288,d4
00009CB6 6000                       		bra.s	Obj37_MakeRings
00009CB8                            ; ===========================================================================
00009CB8                            
00009CB8                            Obj37_Loop:
00009CB8 6100 0000                  		bsr.w	SingleObjLoad
00009CBC 6600 0000                  		bne.w	Obj37_ResetCounter
00009CC0                            
00009CC0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009CC0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009CC4 5429 0024                  		addq.b	#2,$24(a1)
00009CC8 137C 0008 0016             		move.b	#8,$16(a1)
00009CCE 137C 0008 0017             		move.b	#8,$17(a1)
00009CD4 3368 0008 0008             		move.w	8(a0),8(a1)
00009CDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CE8 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CEE 137C 0004 0001             		move.b	#4,1(a1)
00009CF4 137C 0003 0018             		move.b	#3,$18(a1)
00009CFA 137C 0047 0020             		move.b	#$47,$20(a1)
00009D00 137C 0008 0019             		move.b	#8,$19(a1)
00009D06 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009D0C 4A44                       		tst.w	d4
00009D0E 6B00                       		bmi.s	loc_9D62
00009D10 3004                       		move.w	d4,d0
00009D12 6100 8CA6                  		bsr.w	CalcSine
00009D16 3404                       		move.w	d4,d2
00009D18 E04A                       		lsr.w	#8,d2
00009D1A E560                       		asl.w	d2,d0
00009D1C E561                       		asl.w	d2,d1
00009D1E 3400                       		move.w	d0,d2
00009D20 3601                       		move.w	d1,d3
00009D22 0604 0010                  		addi.b	#$10,d4
00009D26 6400                       		bcc.s	loc_9D62
00009D28 0444 0080                  		subi.w	#$80,d4
00009D2C 6400                       		bcc.s	loc_9D62
00009D2E 383C 0288                  		move.w	#$288,d4
00009D32                            
00009D32                            loc_9D62:
00009D32 3342 0010                  		move.w	d2,$10(a1)
00009D36 3343 0012                  		move.w	d3,$12(a1)
00009D3A 4442                       		neg.w	d2
00009D3C 4444                       		neg.w	d4
00009D3E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009D42                            
00009D42                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009D42 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009D48 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009D4E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009D54 303C 00C6                  		move.w	#$C6,d0
00009D58 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009D5E                            
00009D5E                            Obj37_Bounce:				; XREF: Obj37_Index
00009D5E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009D64 6100 0000                  		bsr.w	SpeedToPos
00009D68 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D6E 6B00                       		bmi.s	Obj37_ChkDel
00009D70 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009D74 D007                       		add.b	d7,d0
00009D76 0200 0003                  		andi.b	#3,d0
00009D7A 6600                       		bne.s	Obj37_ChkDel
00009D7C 4EB9 0000 0000             		jsr	ObjHitFloor
00009D82 4A41                       		tst.w	d1
00009D84 6A00                       		bpl.s	Obj37_ChkDel
00009D86 D368 000C                  		add.w	d1,$C(a0)
00009D8A 3028 0012                  		move.w	$12(a0),d0
00009D8E E440                       		asr.w	#2,d0
00009D90 9168 0012                  		sub.w	d0,$12(a0)
00009D94 4468 0012                  		neg.w	$12(a0)
00009D98                            
00009D98                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009D98 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009D9C 6700                       		beq.s	Obj37_Delete
00009D9E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009DA2 0640 00E0                  		addi.w	#$E0,d0
00009DA6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009DAA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009DAC 6000 0000                  		bra.w	DisplaySprite
00009DB0                            ; ===========================================================================
00009DB0                            
00009DB0                            Obj37_Collect:				; XREF: Obj37_Index
00009DB0 5428 0024                  		addq.b	#2,$24(a0)
00009DB4 117C 0000 0020             		move.b	#0,$20(a0)
00009DBA 117C 0001 0018             		move.b	#1,$18(a0)
00009DC0 6100 FE86                  		bsr.w	CollectRing
00009DC4                            
00009DC4                            Obj37_Sparkle:				; XREF: Obj37_Index
00009DC4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009DCA 6100 0000                  		bsr.w	AnimateSprite
00009DCE 6000 0000                  		bra.w	DisplaySprite
00009DD2                            ; ===========================================================================
00009DD2                            
00009DD2                            Obj37_Delete:				; XREF: Obj37_Index
00009DD2 6000 0000                  		bra.w	DeleteObject
00009DD6                            ; ===========================================================================
00009DD6                            ; ---------------------------------------------------------------------------
00009DD6                            ; Object 4B - giant ring for entry to special stage
00009DD6                            ; ---------------------------------------------------------------------------
00009DD6                            
00009DD6                            Obj4B:					; XREF: Obj_Index
00009DD6 7000                       		moveq	#0,d0
00009DD8 1028 0024                  		move.b	$24(a0),d0
00009DDC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009DE0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009DE4                            ; ===========================================================================
00009DE4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009DE6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009DE8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009DEA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009DEC                            ; ===========================================================================
00009DEC                            
00009DEC                            Obj4B_Main:				; XREF: Obj4B_Index
00009DEC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009DF4 317C 2400 0002             		move.w	#$2400,2(a0)
00009DFA 0028 0004 0001             		ori.b	#4,1(a0)
00009E00 117C 0040 0019             		move.b	#$40,$19(a0)
00009E06 4A28 0001                  		tst.b	1(a0)
00009E0A 6A00                       		bpl.s	Obj4B_Animate
00009E0C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009E12 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009E16 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009E1C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009E1E 4E75                       		rts	
00009E20                            ; ===========================================================================
00009E20                            
00009E20                            Obj4B_Okay:				; XREF: Obj4B_Main
00009E20 5428 0024                  		addq.b	#2,$24(a0)
00009E24 117C 0002 0018             		move.b	#2,$18(a0)
00009E2A 117C 0052 0020             		move.b	#$52,$20(a0)
00009E30 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009E36                            
00009E36                            Obj4B_Animate:				; XREF: Obj4B_Index
00009E36 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009E3C 3028 0008                  		move.w	8(a0),d0
00009E40 0240 FF80                  		andi.w	#$FF80,d0
00009E44 3238 F700                  		move.w	($FFFFF700).w,d1
00009E48 0441 0080                  		subi.w	#$80,d1
00009E4C 0241 FF80                  		andi.w	#$FF80,d1
00009E50 9041                       		sub.w	d1,d0
00009E52 0C40 0280                  		cmpi.w	#$280,d0
00009E56 6200 0000                  		bhi.w	DeleteObject
00009E5A 6000 0000                  		bra.w	DisplaySprite
00009E5E                            ; ===========================================================================
00009E5E                            
00009E5E                            Obj4B_Collect:				; XREF: Obj4B_Index
00009E5E 5528 0024                  		subq.b	#2,$24(a0)
00009E62 117C 0000 0020             		move.b	#0,$20(a0)
00009E68 6100 0000                  		bsr.w	SingleObjLoad
00009E6C 6600 0000                  		bne.w	Obj4B_PlaySnd
00009E70 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009E74 3368 0008 0008             		move.w	8(a0),8(a1)
00009E7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E80 2348 003C                  		move.l	a0,$3C(a1)
00009E84 3038 D008                  		move.w	($FFFFD008).w,d0
00009E88 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009E8C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009E8E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009E94                            
00009E94                            Obj4B_PlaySnd:
00009E94 303C 00C3                  		move.w	#$C3,d0
00009E98 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009E9E 6096                       		bra.s	Obj4B_Animate
00009EA0                            ; ===========================================================================
00009EA0                            
00009EA0                            Obj4B_Delete:				; XREF: Obj4B_Index
00009EA0 6000 0000                  		bra.w	DeleteObject
00009EA4                            ; ===========================================================================
00009EA4                            ; ---------------------------------------------------------------------------
00009EA4                            ; Object 7C - flash effect when	you collect the	giant ring
00009EA4                            ; ---------------------------------------------------------------------------
00009EA4                            
00009EA4                            Obj7C:					; XREF: Obj_Index
00009EA4 7000                       		moveq	#0,d0
00009EA6 1028 0024                  		move.b	$24(a0),d0
00009EAA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009EAE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009EB2                            ; ===========================================================================
00009EB2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009EB4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009EB6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009EB8                            ; ===========================================================================
00009EB8                            
00009EB8                            Obj7C_Main:				; XREF: Obj7C_Index
00009EB8 5428 0024                  		addq.b	#2,$24(a0)
00009EBC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009EC4 317C 2462 0002             		move.w	#$2462,2(a0)
00009ECA 0028 0004 0001             		ori.b	#4,1(a0)
00009ED0 117C 0000 0018             		move.b	#0,$18(a0)
00009ED6 117C 0020 0019             		move.b	#$20,$19(a0)
00009EDC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009EE2                            
00009EE2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009EE2 6100                       		bsr.s	Obj7C_Collect
00009EE4 3028 0008                  		move.w	8(a0),d0
00009EE8 0240 FF80                  		andi.w	#$FF80,d0
00009EEC 3238 F700                  		move.w	($FFFFF700).w,d1
00009EF0 0441 0080                  		subi.w	#$80,d1
00009EF4 0241 FF80                  		andi.w	#$FF80,d1
00009EF8 9041                       		sub.w	d1,d0
00009EFA 0C40 0280                  		cmpi.w	#$280,d0
00009EFE 6200 0000                  		bhi.w	DeleteObject
00009F02 6000 0000                  		bra.w	DisplaySprite
00009F06                            
00009F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F06                            
00009F06                            
00009F06                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00009F06 5328 001E                  		subq.b	#1,$1E(a0)
00009F0A 6A00                       		bpl.s	locret_9F76
00009F0C 117C 0001 001E             		move.b	#1,$1E(a0)
00009F12 5228 001A                  		addq.b	#1,$1A(a0)
00009F16 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
00009F1C 6400                       		bcc.s	Obj7C_End	; if yes, branch
00009F1E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
00009F24 6600                       		bne.s	locret_9F76	; if not, branch
00009F26 2268 003C                  		movea.l	$3C(a0),a1
00009F2A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
00009F30 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
00009F36 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00009F3C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
00009F40 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00009F44                            
00009F44                            locret_9F76:
00009F44 4E75                       		rts	
00009F46                            ; ===========================================================================
00009F46                            
00009F46                            Obj7C_End:				; XREF: Obj7C_Collect
00009F46 5428 0024                  		addq.b	#2,$24(a0)
00009F4A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00009F50 588F                       		addq.l	#4,sp
00009F52 4E75                       		rts	
00009F54                            ; End of function Obj7C_Collect
00009F54                            
00009F54                            ; ===========================================================================
00009F54                            
00009F54                            Obj7C_Delete:				; XREF: Obj7C_Index
00009F54 6000 0000                  		bra.w	DeleteObject
00009F58                            ; ===========================================================================
00009F58                            Ani_obj25:
00009F58                            	include "_anim\obj25.asm"
00009F58                            ; ---------------------------------------------------------------------------
00009F58                            ; Animation script - ring
00009F58                            ; ---------------------------------------------------------------------------
00009F58 0000                       		dc.w byte_9F8C-Ani_obj25
00009F5A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
00009F60                            		even
00009F60                            		even
00009F60                            
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            ; Sprite mappings - rings
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            Map_obj25:
00009F60                            	include "_maps\obj25.asm"
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            ; Sprite mappings - rings
00009F60                            ; ---------------------------------------------------------------------------
00009F60 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00009F64 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00009F68 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
00009F6C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
00009F70 01                         byte_9FA2:	dc.b 1
00009F71 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009F76 01                         byte_9FA8:	dc.b 1
00009F77 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00009F7C 01                         byte_9FAE:	dc.b 1
00009F7D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00009F82 01                         byte_9FB4:	dc.b 1
00009F83 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00009F88 01                         byte_9FBA:	dc.b 1
00009F89 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009F8E 01                         byte_9FC0:	dc.b 1
00009F8F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00009F94 01                         byte_9FC6:	dc.b 1
00009F95 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00009F9A 01                         byte_9FCC:	dc.b 1
00009F9B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
00009FA0                            		even
00009FA0                            		even
00009FA0                            
00009FA0                            ; ---------------------------------------------------------------------------
00009FA0                            ; Sprite mappings - giant ring
00009FA0                            ; ---------------------------------------------------------------------------
00009FA0                            Map_obj4B:
00009FA0                            	include "_maps\obj4B.asm"
00009FA0                            ; ---------------------------------------------------------------------------
00009FA0                            ; Sprite mappings - giant ring
00009FA0                            ; ---------------------------------------------------------------------------
00009FA0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00009FA4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00009FA8 0A                         byte_9FDA:	dc.b $A
00009FA9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
00009FAE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00009FB3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00009FB8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
00009FBD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
00009FC2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
00009FC7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
00009FCC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
00009FD1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
00009FD6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
00009FDB 08                         byte_A00D:	dc.b 8
00009FDC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
00009FE1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
00009FE6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
00009FEB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
00009FF0 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
00009FF5 0809 0045 00               		dc.b 8,	9, 0, $45, 0
00009FFA 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
00009FFF 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A004 04                         byte_A036:	dc.b 4
0000A005 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A00A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A00F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A014 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A019 08                         byte_A04B:	dc.b 8
0000A01A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A01F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A024 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A029 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A02E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A033 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A038 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A03D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A042                            		even
0000A042                            		even
0000A042                            
0000A042                            ; ---------------------------------------------------------------------------
0000A042                            ; Sprite mappings - flash effect when you collect the giant ring
0000A042                            ; ---------------------------------------------------------------------------
0000A042                            Map_obj7C:
0000A042                            	include "_maps\obj7C.asm"
0000A042                            ; ---------------------------------------------------------------------------
0000A042                            ; Sprite mappings - flash effect when you collect the giant ring
0000A042                            ; ---------------------------------------------------------------------------
0000A042 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A046 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A04A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A04E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A052 02                         byte_A084:	dc.b 2
0000A053 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A058 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A05D 04                         byte_A08F:	dc.b 4
0000A05E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A063 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A068 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A06D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A072 04                         byte_A0A4:	dc.b 4
0000A073 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A078 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A07D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A082 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A087 04                         byte_A0B9:	dc.b 4
0000A088 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A08D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A092 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A097 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A09C 04                         byte_A0CE:	dc.b 4
0000A09D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A0A2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A0A7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A0AC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A0B1 04                         byte_A0E3:	dc.b 4
0000A0B2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A0B7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A0BC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A0C1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A0C6 02                         byte_A0F8:	dc.b 2
0000A0C7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A0CC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A0D1 04                         byte_A103:	dc.b 4
0000A0D2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A0D7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A0DC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A0E1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A0E6                            		even
0000A0E6                            		even
0000A0E6                            
0000A0E6                            ; ===========================================================================
0000A0E6                            ; ---------------------------------------------------------------------------
0000A0E6                            ; Object 26 - monitors
0000A0E6                            ; ---------------------------------------------------------------------------
0000A0E6                            
0000A0E6                            Obj26:					; XREF: Obj_Index
0000A0E6 7000                       		moveq	#0,d0
0000A0E8 1028 0024                  		move.b	$24(a0),d0
0000A0EC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A0F0 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A0F4                            ; ===========================================================================
0000A0F4 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A0F6 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A0F8 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A0FA 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A0FC 0000                       		dc.w Obj26_Display-Obj26_Index
0000A0FE                            ; ===========================================================================
0000A0FE                            
0000A0FE                            Obj26_Main:				; XREF: Obj26_Index
0000A0FE 5428 0024                  		addq.b	#2,$24(a0)
0000A102 117C 000E 0016             		move.b	#$E,$16(a0)
0000A108 117C 000E 0017             		move.b	#$E,$17(a0)
0000A10E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A116 317C 0680 0002             		move.w	#$680,2(a0)
0000A11C 117C 0004 0001             		move.b	#4,1(a0)
0000A122 117C 0003 0018             		move.b	#3,$18(a0)
0000A128 117C 000F 0019             		move.b	#$F,$19(a0)
0000A12E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A132 7000                       		moveq	#0,d0
0000A134 1028 0023                  		move.b	$23(a0),d0
0000A138 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A13E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A144 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A146 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A14C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A152 4E75                       		rts	
0000A154                            ; ===========================================================================
0000A154                            
0000A154                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A154 117C 0046 0020             		move.b	#$46,$20(a0)
0000A15A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A160                            
0000A160                            Obj26_Solid:				; XREF: Obj26_Index
0000A160 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A164 6700                       		beq.s	loc_A1EC	; if not, branch
0000A166 5500                       		subq.b	#2,d0
0000A168 6600                       		bne.s	Obj26_Fall
0000A16A 7200                       		moveq	#0,d1
0000A16C 1228 0019                  		move.b	$19(a0),d1
0000A170 0641 000B                  		addi.w	#$B,d1
0000A174 6100 D43E                  		bsr.w	ExitPlatform
0000A178 0829 0003 0022             		btst	#3,$22(a1)
0000A17E 6600 0000                  		bne.w	loc_A1BC
0000A182 4228 0025                  		clr.b	$25(a0)
0000A186 6000 0000                  		bra.w	Obj26_Animate
0000A18A                            ; ===========================================================================
0000A18A                            
0000A18A                            loc_A1BC:				; XREF: Obj26_Solid
0000A18A 363C 0010                  		move.w	#$10,d3
0000A18E 3428 0008                  		move.w	8(a0),d2
0000A192 6100 D97E                  		bsr.w	MvSonicOnPtfm
0000A196 6000 0000                  		bra.w	Obj26_Animate
0000A19A                            ; ===========================================================================
0000A19A                            
0000A19A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A19A 6100 0000                  		bsr.w	ObjectFall
0000A19E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1A4 4A41                       		tst.w	d1
0000A1A6 6A00 0000                  		bpl.w	Obj26_Animate
0000A1AA D368 000C                  		add.w	d1,$C(a0)
0000A1AE 4268 0012                  		clr.w	$12(a0)
0000A1B2 4228 0025                  		clr.b	$25(a0)
0000A1B6 6000 0000                  		bra.w	Obj26_Animate
0000A1BA                            ; ===========================================================================
0000A1BA                            
0000A1BA                            loc_A1EC:				; XREF: Obj26_Solid
0000A1BA 323C 001A                  		move.w	#$1A,d1
0000A1BE 343C 000F                  		move.w	#$F,d2
0000A1C2 6100 0000                  		bsr.w	Obj26_SolidSides
0000A1C6 6700 0000                  		beq.w	loc_A25C
0000A1CA 4A69 0012                  		tst.w	$12(a1)
0000A1CE 6B00                       		bmi.s	loc_A20A
0000A1D0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A1D6 6700                       		beq.s	loc_A25C	; if yes, branch
0000A1D8 0C29 001F 001C             		cmp.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000A1DE 6700 0000                  		beq	loc_A25C	; if yes, branch
0000A1E2                            
0000A1E2                            loc_A20A:
0000A1E2 4A41                       		tst.w	d1
0000A1E4 6A00                       		bpl.s	loc_A220
0000A1E6 9769 000C                  		sub.w	d3,$C(a1)
0000A1EA 6100 D2B6                  		bsr.w	loc_74AE
0000A1EE 117C 0002 0025             		move.b	#2,$25(a0)
0000A1F4 6000 0000                  		bra.w	Obj26_Animate
0000A1F8                            ; ===========================================================================
0000A1F8                            
0000A1F8                            loc_A220:
0000A1F8 4A40                       		tst.w	d0
0000A1FA 6700 0000                  		beq.w	loc_A246
0000A1FE 6B00                       		bmi.s	loc_A230
0000A200 4A69 0010                  		tst.w	$10(a1)
0000A204 6B00                       		bmi.s	loc_A246
0000A206 6000                       		bra.s	loc_A236
0000A208                            ; ===========================================================================
0000A208                            
0000A208                            loc_A230:
0000A208 4A69 0010                  		tst.w	$10(a1)
0000A20C 6A00                       		bpl.s	loc_A246
0000A20E                            
0000A20E                            loc_A236:
0000A20E 9169 0008                  		sub.w	d0,8(a1)
0000A212 337C 0000 0014             		move.w	#0,$14(a1)
0000A218 337C 0000 0010             		move.w	#0,$10(a1)
0000A21E                            
0000A21E                            loc_A246:
0000A21E 0829 0001 0022             		btst	#1,$22(a1)
0000A224 6600                       		bne.s	loc_A26A
0000A226 08E9 0005 0022             		bset	#5,$22(a1)
0000A22C 08E8 0005 0022             		bset	#5,$22(a0)
0000A232 6000                       		bra.s	Obj26_Animate
0000A234                            ; ===========================================================================
0000A234                            
0000A234                            loc_A25C:
0000A234 0828 0005 0022             		btst	#5,$22(a0)
0000A23A 6700                       		beq.s	Obj26_Animate
0000A23C 337C 0001 001C             		move.w	#1,$1C(a1)
0000A242                            
0000A242                            loc_A26A:
0000A242 08A8 0005 0022             		bclr	#5,$22(a0)
0000A248 08A9 0005 0022             		bclr	#5,$22(a1)
0000A24E                            
0000A24E                            Obj26_Animate:				; XREF: Obj26_Index
0000A24E 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A254 6100 0000                  		bsr.w	AnimateSprite
0000A258                            
0000A258                            Obj26_Display:				; XREF: Obj26_Index
0000A258 6100 0000                  		bsr.w	DisplaySprite
0000A25C 3028 0008                  		move.w	8(a0),d0
0000A260 0240 FF80                  		andi.w	#$FF80,d0
0000A264 3238 F700                  		move.w	($FFFFF700).w,d1
0000A268 0441 0080                  		subi.w	#$80,d1
0000A26C 0241 FF80                  		andi.w	#$FF80,d1
0000A270 9041                       		sub.w	d1,d0
0000A272 0C40 0280                  		cmpi.w	#$280,d0
0000A276 6200 0000                  		bhi.w	DeleteObject
0000A27A 4E75                       		rts	
0000A27C                            ; ===========================================================================
0000A27C                            
0000A27C                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A27C 5428 0024                  		addq.b	#2,$24(a0)
0000A280 117C 0000 0020             		move.b	#0,$20(a0)
0000A286 6100 0000                  		bsr.w	SingleObjLoad
0000A28A 6600                       		bne.s	Obj26_Explode
0000A28C 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A290 3368 0008 0008             		move.w	8(a0),8(a1)
0000A296 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A29C 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A2A2                            
0000A2A2                            Obj26_Explode:
0000A2A2 6100 0000                  		bsr.w	SingleObjLoad
0000A2A6 6600                       		bne.s	Obj26_SetBroken
0000A2A8 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A2AC 5429 0024                  		addq.b	#2,$24(a1)
0000A2B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2BC                            
0000A2BC                            Obj26_SetBroken:
0000A2BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A2C0 7000                       		moveq	#0,d0
0000A2C2 1028 0023                  		move.b	$23(a0),d0
0000A2C6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A2CC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A2D2 6000 0000                  		bra.w	DisplaySprite
0000A2D6                            ; ===========================================================================
0000A2D6                            ; ---------------------------------------------------------------------------
0000A2D6                            ; Object 2E - contents of monitors
0000A2D6                            ; ---------------------------------------------------------------------------
0000A2D6                            
0000A2D6                            Obj2E:					; XREF: Obj_Index
0000A2D6 7000                       		moveq	#0,d0
0000A2D8 1028 0024                  		move.b	$24(a0),d0
0000A2DC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A2E0 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A2E4 6000 0000                  		bra.w	DisplaySprite
0000A2E8                            ; ===========================================================================
0000A2E8 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A2EA 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A2EC 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A2EE                            ; ===========================================================================
0000A2EE                            
0000A2EE                            Obj2E_Main:				; XREF: Obj2E_Index
0000A2EE 5428 0024                  		addq.b	#2,$24(a0)
0000A2F2 317C 0680 0002             		move.w	#$680,2(a0)
0000A2F8 117C 0024 0001             		move.b	#$24,1(a0)
0000A2FE 117C 0003 0018             		move.b	#3,$18(a0)
0000A304 117C 0008 0019             		move.b	#8,$19(a0)
0000A30A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A310 7000                       		moveq	#0,d0
0000A312 1028 001C                  		move.b	$1C(a0),d0
0000A316 5400                       		addq.b	#2,d0
0000A318 1140 001A                  		move.b	d0,$1A(a0)
0000A31C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A322 D000                       		add.b	d0,d0
0000A324 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A328 5249                       		addq.w	#1,a1
0000A32A 2149 0004                  		move.l	a1,4(a0)
0000A32E                            
0000A32E                            Obj2E_Move:				; XREF: Obj2E_Index
0000A32E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A332 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A336 6100 0000                  		bsr.w	SpeedToPos
0000A33A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A340 4E75                       		rts	
0000A342                            ; ===========================================================================
0000A342                            
0000A342                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A342 5428 0024                  		addq.b	#2,$24(a0)
0000A346 317C 001D 001E             		move.w	#29,$1E(a0)
0000A34C 1028 001C                  		move.b	$1C(a0),d0
0000A350 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A354 6600                       		bne.s	Obj2E_ChkSonic
0000A356 4E75                       		rts			; Eggman monitor does nothing
0000A358                            ; ===========================================================================
0000A358                            
0000A358                            Obj2E_ChkSonic:
0000A358 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A35C 6600                       		bne.s	Obj2E_ChkShoes
0000A35E                            
0000A35E                            ExtraLife:
0000A35E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A362 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A366 303C 009F                  		move.w	#$9F,d0
0000A36A 4EF9 0000 12C6             		jmp	(PlaySound).l	; play extra life music
0000A370                            ; ===========================================================================
0000A370                            
0000A370                            Obj2E_ChkShoes:
0000A370 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A374 6600                       		bne.s	Obj2E_ChkShield
0000A376 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A37C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A382 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A388 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A38E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A394 303C 00E2                  		move.w	#$E2,d0
0000A398 4EF9 0000 12C6             		jmp	(PlaySound).l	; Speed	up the music
0000A39E                            ; ===========================================================================
0000A39E                            
0000A39E                            Obj2E_ChkShield:
0000A39E 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A3A2 6600                       		bne.s	Obj2E_ChkInvinc
0000A3A4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A3AA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A3B0 303C 00AF                  		move.w	#$AF,d0
0000A3B4 4EF9 0000 12C6             		jmp	(PlaySound).l	; play shield sound
0000A3BA                            ; ===========================================================================
0000A3BA                            
0000A3BA                            Obj2E_ChkInvinc:
0000A3BA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A3BE 6600                       		bne.s	Obj2E_ChkRings
0000A3C0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A3C6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A3CC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A3D2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A3D8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A3DE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A3E4 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A3EA 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A3F0 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A3F6 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A3FC 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A400 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A402 303C 0098                  		move.w	#$98,d0
0000A406 4EF9 0000 12C6             		jmp	(PlaySound).l	; play invincibility music
0000A40C                            ; ===========================================================================
0000A40C                            
0000A40C                            Obj2E_NoMusic:
0000A40C 4E75                       		rts	
0000A40E                            ; ===========================================================================
0000A40E                            
0000A40E                            Obj2E_ChkRings:
0000A40E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A412 6600                       		bne.s	Obj2E_ChkS
0000A414 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A41A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A420 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A426 6500                       		bcs.s	Obj2E_RingSound
0000A428 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A42E 6700 FF2E                  		beq.w	ExtraLife
0000A432 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A438 6500                       		bcs.s	Obj2E_RingSound
0000A43A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A440 6700 FF1C                  		beq.w	ExtraLife
0000A444                            
0000A444                            Obj2E_RingSound:
0000A444 303C 00B5                  		move.w	#$B5,d0
0000A448 4EF9 0000 12C6             		jmp	(PlaySound).l	; play ring sound
0000A44E                            ; ===========================================================================
0000A44E                            
0000A44E                            Obj2E_ChkS:
0000A44E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A452 6600                       		bne.s	Obj2E_ChkEnd
0000A454 4E71                       		nop	
0000A456                            
0000A456                            Obj2E_ChkEnd:
0000A456 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A458                            ; ===========================================================================
0000A458                            
0000A458                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A458 5368 001E                  		subq.w	#1,$1E(a0)
0000A45C 6B00 0000                  		bmi.w	DeleteObject
0000A460 4E75                       		rts	
0000A462                            ; ---------------------------------------------------------------------------
0000A462                            ; Subroutine to	make the sides of a monitor solid
0000A462                            ; ---------------------------------------------------------------------------
0000A462                            
0000A462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A462                            
0000A462                            
0000A462                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A462 43F8 D000                  		lea	($FFFFD000).w,a1
0000A466 3029 0008                  		move.w	8(a1),d0
0000A46A 9068 0008                  		sub.w	8(a0),d0
0000A46E D041                       		add.w	d1,d0
0000A470 6B00                       		bmi.s	loc_A4E6
0000A472 3601                       		move.w	d1,d3
0000A474 D643                       		add.w	d3,d3
0000A476 B043                       		cmp.w	d3,d0
0000A478 6200                       		bhi.s	loc_A4E6
0000A47A 1629 0016                  		move.b	$16(a1),d3
0000A47E 4883                       		ext.w	d3
0000A480 D443                       		add.w	d3,d2
0000A482 3629 000C                  		move.w	$C(a1),d3
0000A486 9668 000C                  		sub.w	$C(a0),d3
0000A48A D642                       		add.w	d2,d3
0000A48C 6B00                       		bmi.s	loc_A4E6
0000A48E D442                       		add.w	d2,d2
0000A490 B642                       		cmp.w	d2,d3
0000A492 6400                       		bcc.s	loc_A4E6
0000A494 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A498 6B00                       		bmi.s	loc_A4E6
0000A49A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A4A0 6400                       		bcc.s	loc_A4E6
0000A4A2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A4A6 6600                       		bne.s	loc_A4E6
0000A4A8 B240                       		cmp.w	d0,d1
0000A4AA 6400                       		bcc.s	loc_A4DC
0000A4AC D241                       		add.w	d1,d1
0000A4AE 9041                       		sub.w	d1,d0
0000A4B0                            
0000A4B0                            loc_A4DC:
0000A4B0 0C43 0010                  		cmpi.w	#$10,d3
0000A4B4 6500                       		bcs.s	loc_A4EA
0000A4B6                            
0000A4B6                            loc_A4E2:
0000A4B6 7201                       		moveq	#1,d1
0000A4B8 4E75                       		rts	
0000A4BA                            ; ===========================================================================
0000A4BA                            
0000A4BA                            loc_A4E6:
0000A4BA 7200                       		moveq	#0,d1
0000A4BC 4E75                       		rts	
0000A4BE                            ; ===========================================================================
0000A4BE                            
0000A4BE                            loc_A4EA:
0000A4BE 7200                       		moveq	#0,d1
0000A4C0 1228 0019                  		move.b	$19(a0),d1
0000A4C4 5841                       		addq.w	#4,d1
0000A4C6 3401                       		move.w	d1,d2
0000A4C8 D442                       		add.w	d2,d2
0000A4CA D269 0008                  		add.w	8(a1),d1
0000A4CE 9268 0008                  		sub.w	8(a0),d1
0000A4D2 6BE2                       		bmi.s	loc_A4E2
0000A4D4 B242                       		cmp.w	d2,d1
0000A4D6 64DE                       		bcc.s	loc_A4E2
0000A4D8 72FF                       		moveq	#-1,d1
0000A4DA 4E75                       		rts	
0000A4DC                            ; End of function Obj26_SolidSides
0000A4DC                            
0000A4DC                            ; ===========================================================================
0000A4DC                            Ani_obj26:
0000A4DC                            	include "_anim\obj26.asm"
0000A4DC                            ; ---------------------------------------------------------------------------
0000A4DC                            ; Animation script - monitors
0000A4DC                            ; ---------------------------------------------------------------------------
0000A4DC 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A4E2 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A4E8 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A4EE 0000                       		dc.w byte_A582-Ani_obj26
0000A4F0 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A4F6 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A502 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A50E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A51A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A526 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A532 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A53E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A54A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A556 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A55E                            		even
0000A55E                            		even
0000A55E                            
0000A55E                            ; ---------------------------------------------------------------------------
0000A55E                            ; Sprite mappings - monitors
0000A55E                            ; ---------------------------------------------------------------------------
0000A55E                            Map_obj26:
0000A55E                            	include "_maps\obj26.asm"
0000A55E                            ; ---------------------------------------------------------------------------
0000A55E                            ; Sprite mappings - monitors
0000A55E                            ; ---------------------------------------------------------------------------
0000A55E 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A562 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A566 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A56A 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A56E 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A572 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A576 01                         byte_A5A2:	dc.b 1			; static monitor
0000A577 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A57C 02                         byte_A5A8:	dc.b 2			; static monitor
0000A57D F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A582 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A587 02                         byte_A5B3:	dc.b 2			; static monitor
0000A588 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A58D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A592 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A593 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A598 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A59D 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A59E F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A5A3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5A8 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A5A9 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A5AE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5B3 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A5B4 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A5B9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5BE 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A5BF F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A5C4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5C9 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A5CA F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A5CF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5D4 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A5D5 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A5DA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5DF 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A5E0 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A5E5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5EA 01                         byte_A616:	dc.b 1			; broken monitor
0000A5EB FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A5F0                            		even
0000A5F0                            		even
0000A5F0                            
0000A5F0                            ; ===========================================================================
0000A5F0                            ; ---------------------------------------------------------------------------
0000A5F0                            ; Object 0E - Sonic on the title screen
0000A5F0                            ; ---------------------------------------------------------------------------
0000A5F0                            
0000A5F0                            Obj0E:					; XREF: Obj_Index
0000A5F0 7000                       		moveq	#0,d0
0000A5F2 1028 0024                  		move.b	$24(a0),d0
0000A5F6 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A5FA 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A5FE                            ; ===========================================================================
0000A5FE 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A600 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A602 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A604 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A606                            ; ===========================================================================
0000A606                            
0000A606                            Obj0E_Main:				; XREF: Obj0E_Index
0000A606 5428 0024                  		addq.b	#2,$24(a0)
0000A60A 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A610 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A616 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A61E 317C 2300 0002             		move.w	#$2300,2(a0)
0000A624 117C 0001 0018             		move.b	#1,$18(a0)
0000A62A 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A630 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A636 6100 0000                  		bsr.w	AnimateSprite
0000A63A                            
0000A63A                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A63A 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A63E 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A640 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A644 6000 0000                  		bra.w	DisplaySprite
0000A648                            ; ===========================================================================
0000A648                            
0000A648                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A648 4E75                       		rts	
0000A64A                            ; ===========================================================================
0000A64A                            
0000A64A                            Obj0E_Move:				; XREF: Obj0E_Index
0000A64A 5168 000A                  		subq.w	#8,$A(a0)
0000A64E 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A654 6600                       		bne.s	Obj0E_Display
0000A656 5428 0024                  		addq.b	#2,$24(a0)
0000A65A                            
0000A65A                            Obj0E_Display:
0000A65A 6000 0000                  		bra.w	DisplaySprite
0000A65E                            ; ===========================================================================
0000A65E 4E75                       		rts	
0000A660                            ; ===========================================================================
0000A660                            
0000A660                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A660 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A666 6100 0000                  		bsr.w	AnimateSprite
0000A66A 6000 0000                  		bra.w	DisplaySprite
0000A66E                            ; ===========================================================================
0000A66E 4E75                       		rts	
0000A670                            ; ===========================================================================
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            
0000A670                            Obj0F:					; XREF: Obj_Index
0000A670 7000                       		moveq	#0,d0
0000A672 1028 0024                  		move.b	$24(a0),d0
0000A676 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A67A 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A67E 6000 0000                  		bra.w	DisplaySprite
0000A682                            ; ===========================================================================
0000A682 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A684 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A686 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A688                            ; ===========================================================================
0000A688                            
0000A688                            Obj0F_Main:				; XREF: Obj0F_Index
0000A688 5428 0024                  		addq.b	#2,$24(a0)
0000A68C 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A692 317C 0130 000A             		move.w	#$130,$A(a0)
0000A698 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A6A0 317C 0200 0002             		move.w	#$200,2(a0)
0000A6A6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A6AC 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A6AE 5428 0024                  		addq.b	#2,$24(a0)
0000A6B2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A6B8 6600                       		bne.s	locret_A6F8	; if not, branch
0000A6BA 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A6C0 317C 0170 0008             		move.w	#$170,8(a0)
0000A6C6 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A6CC                            
0000A6CC                            locret_A6F8:				; XREF: Obj0F_Index
0000A6CC 4E75                       		rts	
0000A6CE                            ; ===========================================================================
0000A6CE                            
0000A6CE                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A6CE 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A6D4 6000 0000                  		bra.w	AnimateSprite
0000A6D8                            ; ===========================================================================
0000A6D8                            Ani_obj0E:
0000A6D8                            	include "_anim\obj0E.asm"
0000A6D8                            ; ---------------------------------------------------------------------------
0000A6D8                            ; Animation script - Sonic on the title screen
0000A6D8                            ; ---------------------------------------------------------------------------
0000A6D8 0000                       		dc.w byte_A706-Ani_obj0E
0000A6DA 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A6E6                            		even
0000A6E6                            		even
0000A6E6                            
0000A6E6                            Ani_obj0F:
0000A6E6                            	include "_anim\obj0F.asm"
0000A6E6                            ; ---------------------------------------------------------------------------
0000A6E6                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A6E6                            ; ---------------------------------------------------------------------------
0000A6E6 0000                       		dc.w byte_A714-Ani_obj0F
0000A6E8 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A6EC                            		even
0000A6EC                            		even
0000A6EC                            
0000A6EC                            ; ---------------------------------------------------------------------------
0000A6EC                            ; Subroutine to	animate	a sprite using an animation script
0000A6EC                            ; ---------------------------------------------------------------------------
0000A6EC                            
0000A6EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6EC                            
0000A6EC                            
0000A6EC                            AnimateSprite:
0000A6EC 7000                       		moveq	#0,d0
0000A6EE 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A6F2 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A6F6 6700                       		beq.s	Anim_Run	; if not, branch
0000A6F8 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A6FC 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A702 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A708                            
0000A708                            Anim_Run:
0000A708 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A70C 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A70E D040                       		add.w	d0,d0
0000A710 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A714 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A718 7200                       		moveq	#0,d1
0000A71A 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A71E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A722 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A724                            
0000A724                            Anim_Next:
0000A724 1200                       		move.b	d0,d1
0000A726 0200 001F                  		andi.b	#$1F,d0
0000A72A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A72E 1028 0022                  		move.b	$22(a0),d0
0000A732 E719                       		rol.b	#3,d1
0000A734 B101                       		eor.b	d0,d1
0000A736 0201 0003                  		andi.b	#3,d1
0000A73A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A740 8328 0001                  		or.b	d1,1(a0)
0000A744 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A748                            
0000A748                            Anim_Wait:
0000A748 4E75                       		rts	
0000A74A                            ; ===========================================================================
0000A74A                            
0000A74A                            Anim_End_FF:
0000A74A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A74C 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A74E 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A754 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A758 60CA                       		bra.s	Anim_Next
0000A75A                            ; ===========================================================================
0000A75A                            
0000A75A                            Anim_End_FE:
0000A75A 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A75C 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A75E 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A762 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A766 9200                       		sub.b	d0,d1
0000A768 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A76C 60B6                       		bra.s	Anim_Next
0000A76E                            ; ===========================================================================
0000A76E                            
0000A76E                            Anim_End_FD:
0000A76E 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A770 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A772 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A778                            
0000A778                            Anim_End_FC:
0000A778 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A77A 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A77C 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A780                            
0000A780                            Anim_End_FB:
0000A780 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A782 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A784 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A78A 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A78E                            
0000A78E                            Anim_End_FA:
0000A78E 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A790 6600                       		bne.s	Anim_End	; if not, branch
0000A792 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A796                            
0000A796                            Anim_End:
0000A796 4E75                       		rts	
0000A798                            ; End of function AnimateSprite
0000A798                            
0000A798                            ; ===========================================================================
0000A798                            ; ---------------------------------------------------------------------------
0000A798                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A798                            ; ---------------------------------------------------------------------------
0000A798                            Map_obj0F:
0000A798                            	include "_maps\obj0F.asm"
0000A798                            ; ---------------------------------------------------------------------------
0000A798                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A798                            ; ---------------------------------------------------------------------------
0000A798 0000                       		dc.w byte_A7CD-Map_obj0F
0000A79A 0000                       		dc.w byte_A7CC-Map_obj0F
0000A79C 0000                       		dc.w byte_A7EB-Map_obj0F
0000A79E 0000                       		dc.w byte_A882-Map_obj0F
0000A7A0 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A7A1 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A7A6 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A7AB 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A7B0 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A7B5 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A7BA 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A7BF 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A7C0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7C5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7CA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7CF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7D4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7D9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7DE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7E3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7E8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7ED B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7F2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7F7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7FC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A801 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A806 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A80B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A810 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A815 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A81A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A81F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A824 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A829 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A82E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A833 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A838 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A83D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A842 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A847 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A84C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A851 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A856 01                         byte_A882:	dc.b 1			; "TM"
0000A857 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A85C                            		even
0000A85C                            		even
0000A85C                            
0000A85C                            ; ---------------------------------------------------------------------------
0000A85C                            ; Sprite mappings - Sonic on the title screen
0000A85C                            ; ---------------------------------------------------------------------------
0000A85C                            Map_obj0E:
0000A85C                            	include "_maps\obj0E.asm"
0000A85C                            ; ---------------------------------------------------------------------------
0000A85C                            ; Sprite mappings - Sonic on the title screen
0000A85C                            ; ---------------------------------------------------------------------------
0000A85C 0000                       		dc.w byte_A898-Map_obj0E
0000A85E 0000                       		dc.w byte_A8CB-Map_obj0E
0000A860 0000                       		dc.w byte_A917-Map_obj0E
0000A862 0000                       		dc.w byte_A96D-Map_obj0E
0000A864 0000                       		dc.w byte_A9AF-Map_obj0E
0000A866 0000                       		dc.w byte_A9E7-Map_obj0E
0000A868 0000                       		dc.w byte_AA47-Map_obj0E
0000A86A 0000                       		dc.w byte_AAB1-Map_obj0E
0000A86C 0A                         byte_A898:	dc.b $A
0000A86D 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A872 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A877 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A87C 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A881 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A886 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A88B 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A890 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A895 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A89A 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A89F 0F                         byte_A8CB:	dc.b $F
0000A8A0 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A8A5 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A8AA 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A8AF 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A8B4 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A8B9 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A8BE 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A8C3 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A8C8 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A8CD 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A8D2 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A8D7 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A8DC 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A8E1 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A8E6 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A8EB 11                         byte_A917:	dc.b $11
0000A8EC 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A8F1 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000A8F6 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000A8FB 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000A900 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000A905 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000A90A 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000A90F 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A914 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A919 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A91E 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A923 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A928 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A92D 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A932 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A937 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A93C 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A941 0D                         byte_A96D:	dc.b $D
0000A942 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000A947 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000A94C 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000A951 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000A956 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000A95B 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000A960 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000A965 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000A96A 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000A96F 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000A974 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000A979 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000A97E 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000A983 0B                         byte_A9AF:	dc.b $B
0000A984 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000A989 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000A98E 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000A993 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000A998 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000A99D 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000A9A2 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000A9A7 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000A9AC 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000A9B1 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000A9B6 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000A9BB 13                         byte_A9E7:	dc.b $13
0000A9BC 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000A9C1 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000A9C6 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000A9CB 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000A9D0 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000A9D5 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000A9DA 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000A9DF 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000A9E4 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000A9E9 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000A9EE 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000A9F3 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000A9F8 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000A9FD 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AA02 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AA07 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AA0C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AA11 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AA16 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AA1B 15                         byte_AA47:	dc.b $15
0000AA1C 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AA21 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AA26 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AA2B 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AA30 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AA35 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AA3A 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AA3F 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AA44 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AA49 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AA4E 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AA53 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AA58 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AA5D 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AA62 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AA67 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AA6C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AA71 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AA76 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AA7B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AA80 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AA85 16                         byte_AAB1:	dc.b $16
0000AA86 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AA8B 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AA90 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000AA95 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000AA9A 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000AA9F 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AAA4 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AAA9 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AAAE 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AAB3 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AAB8 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AABD 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AAC2 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AAC7 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AACC 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AAD1 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AAD6 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AADB 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AAE0 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AAE5 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AAEA 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AAEF 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AAF4                            		even
0000AAF4                            		even
0000AAF4                            
0000AAF4                            ; ===========================================================================
0000AAF4                            ; ---------------------------------------------------------------------------
0000AAF4                            ; Object 2B - Chopper enemy (GHZ)
0000AAF4                            ; ---------------------------------------------------------------------------
0000AAF4                            
0000AAF4                            Obj2B:					; XREF: Obj_Index
0000AAF4 7000                       		moveq	#0,d0
0000AAF6 1028 0024                  		move.b	$24(a0),d0
0000AAFA 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AAFE 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AB02 6000 0000                  		bra.w	MarkObjGone
0000AB06                            ; ===========================================================================
0000AB06 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AB08 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AB0A                            ; ===========================================================================
0000AB0A                            
0000AB0A                            Obj2B_Main:				; XREF: Obj2B_Index
0000AB0A 5428 0024                  		addq.b	#2,$24(a0)
0000AB0E 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AB16 317C 047B 0002             		move.w	#$47B,2(a0)
0000AB1C 117C 0004 0001             		move.b	#4,1(a0)
0000AB22 117C 0004 0018             		move.b	#4,$18(a0)
0000AB28 117C 0009 0020             		move.b	#9,$20(a0)
0000AB2E 117C 0010 0019             		move.b	#$10,$19(a0)
0000AB34 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AB3A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AB40                            
0000AB40                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AB40 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AB46 6100 FBA4                  		bsr.w	AnimateSprite
0000AB4A 6100 0000                  		bsr.w	SpeedToPos
0000AB4E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AB54 3028 0030                  		move.w	$30(a0),d0
0000AB58 B068 000C                  		cmp.w	$C(a0),d0
0000AB5C 6400                       		bcc.s	Obj2B_ChgAni
0000AB5E 3140 000C                  		move.w	d0,$C(a0)
0000AB62 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AB68                            
0000AB68                            Obj2B_ChgAni:
0000AB68 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AB6E 0440 00C0                  		subi.w	#$C0,d0
0000AB72 B068 000C                  		cmp.w	$C(a0),d0
0000AB76 6400                       		bcc.s	locret_ABB6
0000AB78 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AB7E 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AB82 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AB84 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AB8A                            
0000AB8A                            locret_ABB6:
0000AB8A 4E75                       		rts	
0000AB8C                            ; ===========================================================================
0000AB8C                            Ani_obj2B:
0000AB8C                            	include "_anim\obj2B.asm"
0000AB8C                            ; ---------------------------------------------------------------------------
0000AB8C                            ; Animation script - Chopper enemy
0000AB8C                            ; ---------------------------------------------------------------------------
0000AB8C 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AB8E 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AB90 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AB92 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AB96 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AB9A 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AB9E 00                         		even
0000AB9E 00                         		even
0000AB9E                            
0000AB9E                            ; ---------------------------------------------------------------------------
0000AB9E                            ; Sprite mappings - Chopper enemy (GHZ)
0000AB9E                            ; ---------------------------------------------------------------------------
0000AB9E                            Map_obj2B:
0000AB9E                            	include "_maps\obj2B.asm"
0000AB9E                            ; ---------------------------------------------------------------------------
0000AB9E                            ; Sprite mappings - Chopper enemy (GHZ)
0000AB9E                            ; ---------------------------------------------------------------------------
0000AB9E 0000                       		dc.w byte_ABCE-Map_obj2B
0000ABA0 0000                       		dc.w byte_ABD4-Map_obj2B
0000ABA2 01                         byte_ABCE:	dc.b 1
0000ABA3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000ABA8 01                         byte_ABD4:	dc.b 1
0000ABA9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000ABAE                            		even
0000ABAE                            		even
0000ABAE                            
0000ABAE                            ; ===========================================================================
0000ABAE                            ; ---------------------------------------------------------------------------
0000ABAE                            ; Object 2C - Jaws enemy (LZ)
0000ABAE                            ; ---------------------------------------------------------------------------
0000ABAE                            
0000ABAE                            Obj2C:					; XREF: Obj_Index
0000ABAE 7000                       		moveq	#0,d0
0000ABB0 1028 0024                  		move.b	$24(a0),d0
0000ABB4 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000ABB8 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000ABBC                            ; ===========================================================================
0000ABBC 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000ABBE 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000ABC0                            ; ===========================================================================
0000ABC0                            
0000ABC0                            Obj2C_Main:				; XREF: Obj2C_Index
0000ABC0 5428 0024                  		addq.b	#2,$24(a0)
0000ABC4 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000ABCC 317C 2486 0002             		move.w	#$2486,2(a0)
0000ABD2 0028 0004 0001             		ori.b	#4,1(a0)
0000ABD8 117C 000A 0020             		move.b	#$A,$20(a0)
0000ABDE 117C 0004 0018             		move.b	#4,$18(a0)
0000ABE4 117C 0010 0019             		move.b	#$10,$19(a0)
0000ABEA 7000                       		moveq	#0,d0
0000ABEC 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ABF0 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ABF2 5340                       		subq.w	#1,d0
0000ABF4 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ABF8 3140 0032                  		move.w	d0,$32(a0)
0000ABFC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000AC02 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AC08 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AC0A 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AC0E                            
0000AC0E                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AC0E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AC12 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AC14 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AC1A 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AC1E 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AC24 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AC2A                            
0000AC2A                            Obj2C_Animate:
0000AC2A 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AC30 6100 FABA                  		bsr.w	AnimateSprite
0000AC34 6100 0000                  		bsr.w	SpeedToPos
0000AC38 6000 0000                  		bra.w	MarkObjGone
0000AC3C                            ; ===========================================================================
0000AC3C                            Ani_obj2C:
0000AC3C                            	include "_anim\obj2C.asm"
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C                            ; Animation script - Jaws enemy
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AC3E 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AC44                            		even
0000AC44                            		even
0000AC44                            
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44                            ; Sprite mappings - Jaws enemy (LZ)
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44                            Map_obj2C:
0000AC44                            	include "_maps\obj2C.asm"
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44                            ; Sprite mappings - Jaws enemy (LZ)
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44 0000                       		dc.w byte_AC78-Map_obj2C
0000AC46 0000                       		dc.w byte_AC83-Map_obj2C
0000AC48 0000                       		dc.w byte_AC8E-Map_obj2C
0000AC4A 0000                       		dc.w byte_AC99-Map_obj2C
0000AC4C 02                         byte_AC78:	dc.b 2
0000AC4D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AC52 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AC57 02                         byte_AC83:	dc.b 2
0000AC58 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AC5D F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AC62 02                         byte_AC8E:	dc.b 2
0000AC63 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AC68 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AC6D 02                         byte_AC99:	dc.b 2
0000AC6E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AC73 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AC78                            		even
0000AC78                            		even
0000AC78                            
0000AC78                            ; ===========================================================================
0000AC78                            ; ---------------------------------------------------------------------------
0000AC78                            ; Object 2D - Burrobot enemy (LZ)
0000AC78                            ; ---------------------------------------------------------------------------
0000AC78                            
0000AC78                            Obj2D:					; XREF: Obj_Index
0000AC78 7000                       		moveq	#0,d0
0000AC7A 1028 0024                  		move.b	$24(a0),d0
0000AC7E 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AC82 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AC86                            ; ===========================================================================
0000AC86 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AC88 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AC8A                            ; ===========================================================================
0000AC8A                            
0000AC8A                            Obj2D_Main:				; XREF: Obj2D_Index
0000AC8A 5428 0024                  		addq.b	#2,$24(a0)
0000AC8E 117C 0013 0016             		move.b	#$13,$16(a0)
0000AC94 117C 0008 0017             		move.b	#8,$17(a0)
0000AC9A 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000ACA2 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000ACA8 0028 0004 0001             		ori.b	#4,1(a0)
0000ACAE 117C 0004 0018             		move.b	#4,$18(a0)
0000ACB4 117C 0005 0020             		move.b	#5,$20(a0)
0000ACBA 117C 000C 0019             		move.b	#$C,$19(a0)
0000ACC0 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000ACC4 117C 0002 001C             		move.b	#2,$1C(a0)
0000ACCA                            
0000ACCA                            Obj2D_Action:				; XREF: Obj2D_Index
0000ACCA 7000                       		moveq	#0,d0
0000ACCC 1028 0025                  		move.b	$25(a0),d0
0000ACD0 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000ACD4 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ACD8 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ACDE 6100 FA0C                  		bsr.w	AnimateSprite
0000ACE2 6000 0000                  		bra.w	MarkObjGone
0000ACE6                            ; ===========================================================================
0000ACE6 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ACE8 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ACEA 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ACEC 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ACEE                            ; ===========================================================================
0000ACEE                            
0000ACEE                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ACEE 5368 0030                  		subq.w	#1,$30(a0)
0000ACF2 6A00                       		bpl.s	locret_AD42
0000ACF4 5428 0025                  		addq.b	#2,$25(a0)
0000ACF8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ACFE 317C 0080 0010             		move.w	#$80,$10(a0)
0000AD04 117C 0001 001C             		move.b	#1,$1C(a0)
0000AD0A 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000AD10 6700                       		beq.s	locret_AD42
0000AD12 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AD16                            
0000AD16                            locret_AD42:
0000AD16 4E75                       		rts	
0000AD18                            ; ===========================================================================
0000AD18                            
0000AD18                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AD18 5368 0030                  		subq.w	#1,$30(a0)
0000AD1C 6B00                       		bmi.s	loc_AD84
0000AD1E 6100 0000                  		bsr.w	SpeedToPos
0000AD22 0868 0000 0032             		bchg	#0,$32(a0)
0000AD28 6600                       		bne.s	loc_AD78
0000AD2A 3628 0008                  		move.w	8(a0),d3
0000AD2E 0643 000C                  		addi.w	#$C,d3
0000AD32 0828 0000 0022             		btst	#0,$22(a0)
0000AD38 6600                       		bne.s	loc_AD6A
0000AD3A 0443 0018                  		subi.w	#$18,d3
0000AD3E                            
0000AD3E                            loc_AD6A:
0000AD3E 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AD44 0C41 000C                  		cmpi.w	#$C,d1
0000AD48 6C00                       		bge.s	loc_AD84
0000AD4A 4E75                       		rts	
0000AD4C                            ; ===========================================================================
0000AD4C                            
0000AD4C                            loc_AD78:				; XREF: Obj2D_Move
0000AD4C 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD52 D368 000C                  		add.w	d1,$C(a0)
0000AD56 4E75                       		rts	
0000AD58                            ; ===========================================================================
0000AD58                            
0000AD58                            loc_AD84:				; XREF: Obj2D_Move
0000AD58 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AD5E 6700                       		beq.s	loc_ADA4
0000AD60 5528 0025                  		subq.b	#2,$25(a0)
0000AD64 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AD6A 317C 0000 0010             		move.w	#0,$10(a0)
0000AD70 117C 0000 001C             		move.b	#0,$1C(a0)
0000AD76 4E75                       		rts	
0000AD78                            ; ===========================================================================
0000AD78                            
0000AD78                            loc_ADA4:
0000AD78 5428 0025                  		addq.b	#2,$25(a0)
0000AD7C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AD82 117C 0002 001C             		move.b	#2,$1C(a0)
0000AD88 4E75                       		rts	
0000AD8A                            ; ===========================================================================
0000AD8A                            
0000AD8A                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AD8A 6100 0000                  		bsr.w	SpeedToPos
0000AD8E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD94 6B00                       		bmi.s	locret_ADF0
0000AD96 117C 0003 001C             		move.b	#3,$1C(a0)
0000AD9C 4EB9 0000 0000             		jsr	ObjHitFloor
0000ADA2 4A41                       		tst.w	d1
0000ADA4 6A00                       		bpl.s	locret_ADF0
0000ADA6 D368 000C                  		add.w	d1,$C(a0)
0000ADAA 317C 0000 0012             		move.w	#0,$12(a0)
0000ADB0 117C 0001 001C             		move.b	#1,$1C(a0)
0000ADB6 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ADBC 5528 0025                  		subq.b	#2,$25(a0)
0000ADC0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000ADC4                            
0000ADC4                            locret_ADF0:
0000ADC4 4E75                       		rts	
0000ADC6                            ; ===========================================================================
0000ADC6                            
0000ADC6                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000ADC6 343C 0060                  		move.w	#$60,d2
0000ADCA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000ADCE 6400                       		bcc.s	locret_AE20
0000ADD0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000ADD4 9068 000C                  		sub.w	$C(a0),d0
0000ADD8 6400                       		bcc.s	locret_AE20
0000ADDA 0C40 FF80                  		cmpi.w	#-$80,d0
0000ADDE 6500                       		bcs.s	locret_AE20
0000ADE0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ADE4 6600                       		bne.s	locret_AE20
0000ADE6 5528 0025                  		subq.b	#2,$25(a0)
0000ADEA 3141 0010                  		move.w	d1,$10(a0)
0000ADEE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000ADF4                            
0000ADF4                            locret_AE20:
0000ADF4 4E75                       		rts	
0000ADF6                            
0000ADF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADF6                            
0000ADF6                            
0000ADF6                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000ADF6 323C 0080                  		move.w	#$80,d1
0000ADFA 08E8 0000 0022             		bset	#0,$22(a0)
0000AE00 3038 D008                  		move.w	($FFFFD008).w,d0
0000AE04 9068 0008                  		sub.w	8(a0),d0
0000AE08 6400                       		bcc.s	loc_AE40
0000AE0A 4440                       		neg.w	d0
0000AE0C 4441                       		neg.w	d1
0000AE0E 08A8 0000 0022             		bclr	#0,$22(a0)
0000AE14                            
0000AE14                            loc_AE40:
0000AE14 B042                       		cmp.w	d2,d0
0000AE16 4E75                       		rts	
0000AE18                            ; End of function Obj2D_ChkSonic2
0000AE18                            
0000AE18                            ; ===========================================================================
0000AE18                            Ani_obj2D:
0000AE18                            	include "_anim\obj2D.asm"
0000AE18                            ; ---------------------------------------------------------------------------
0000AE18                            ; Animation script - Burrobot enemy
0000AE18                            ; ---------------------------------------------------------------------------
0000AE18 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AE1A 0000                       		dc.w byte_AE50-Ani_obj2D
0000AE1C 0000                       		dc.w byte_AE54-Ani_obj2D
0000AE1E 0000                       		dc.w byte_AE58-Ani_obj2D
0000AE20 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AE24 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AE28 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AE2C 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AE30 00                         		even
0000AE30 00                         		even
0000AE30                            
0000AE30                            ; ---------------------------------------------------------------------------
0000AE30                            ; Sprite mappings - Burrobot enemy (LZ)
0000AE30                            ; ---------------------------------------------------------------------------
0000AE30                            Map_obj2D:
0000AE30                            	include "_maps\obj2D.asm"
0000AE30                            ; ---------------------------------------------------------------------------
0000AE30                            ; Sprite mappings - Burrobot enemy (LZ)
0000AE30                            ; ---------------------------------------------------------------------------
0000AE30 0000                       		dc.w byte_AE6A-Map_obj2D
0000AE32 0000                       		dc.w byte_AE75-Map_obj2D
0000AE34 0000                       		dc.w byte_AE80-Map_obj2D
0000AE36 0000                       		dc.w byte_AE8B-Map_obj2D
0000AE38 0000                       		dc.w byte_AE96-Map_obj2D
0000AE3A 0000                       		dc.w byte_AEA1-Map_obj2D
0000AE3C 0000                       		dc.w byte_AEAC-Map_obj2D
0000AE3E 02                         byte_AE6A:	dc.b 2
0000AE3F EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AE44 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AE49 02                         byte_AE75:	dc.b 2
0000AE4A EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AE4F 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AE54 02                         byte_AE80:	dc.b 2
0000AE55 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AE5A 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AE5F 02                         byte_AE8B:	dc.b 2
0000AE60 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AE65 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AE6A 02                         byte_AE96:	dc.b 2
0000AE6B E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AE70 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AE75 02                         byte_AEA1:	dc.b 2
0000AE76 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AE7B F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AE80 02                         byte_AEAC:	dc.b 2
0000AE81 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AE86 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AE8C 00                         		even
0000AE8C 00                         		even
0000AE8C                            
0000AE8C                            ; ===========================================================================
0000AE8C                            ; ---------------------------------------------------------------------------
0000AE8C                            ; Object 2F - large moving platforms (MZ)
0000AE8C                            ; ---------------------------------------------------------------------------
0000AE8C                            
0000AE8C                            Obj2F:					; XREF: Obj_Index
0000AE8C 7000                       		moveq	#0,d0
0000AE8E 1028 0024                  		move.b	$24(a0),d0
0000AE92 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AE96 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AE9A                            ; ===========================================================================
0000AE9A 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AE9C 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AE9E                            
0000AE9E 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AEA0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AEA2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AEA4 0140                       		dc.b 1,	$40
0000AEA6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AEA8 0220                       		dc.b 2,	$20
0000AEAA                            ; ===========================================================================
0000AEAA                            
0000AEAA                            Obj2F_Main:				; XREF: Obj2F_Index
0000AEAA 5428 0024                  		addq.b	#2,$24(a0)
0000AEAE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AEB6 317C C000 0002             		move.w	#$C000,2(a0)
0000AEBC 117C 0004 0001             		move.b	#4,1(a0)
0000AEC2 117C 0005 0018             		move.b	#5,$18(a0)
0000AEC8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AECE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AED4 7000                       		moveq	#0,d0
0000AED6 1028 0028                  		move.b	$28(a0),d0
0000AEDA E448                       		lsr.w	#2,d0
0000AEDC 0240 001C                  		andi.w	#$1C,d0
0000AEE0 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AEE4 3019                       		move.w	(a1)+,d0
0000AEE6 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AEEA 214A 0030                  		move.l	a2,$30(a0)
0000AEEE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AEF2 1151 0019                  		move.b	(a1),$19(a0)
0000AEF6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AEFC 117C 0040 0016             		move.b	#$40,$16(a0)
0000AF02 08E8 0004 0001             		bset	#4,1(a0)
0000AF08                            
0000AF08                            Obj2F_Action:				; XREF: Obj2F_Index
0000AF08 6100 0000                  		bsr.w	Obj2F_Types
0000AF0C 4A28 0025                  		tst.b	$25(a0)
0000AF10 6700                       		beq.s	Obj2F_Solid
0000AF12 7200                       		moveq	#0,d1
0000AF14 1228 0019                  		move.b	$19(a0),d1
0000AF18 0641 000B                  		addi.w	#$B,d1
0000AF1C 6100 C696                  		bsr.w	ExitPlatform
0000AF20 0829 0003 0022             		btst	#3,$22(a1)
0000AF26 6600 0000                  		bne.w	Obj2F_Slope
0000AF2A 4228 0025                  		clr.b	$25(a0)
0000AF2E 6000                       		bra.s	Obj2F_Display
0000AF30                            ; ===========================================================================
0000AF30                            
0000AF30                            Obj2F_Slope:				; XREF: Obj2F_Action
0000AF30 7200                       		moveq	#0,d1
0000AF32 1228 0019                  		move.b	$19(a0),d1
0000AF36 0641 000B                  		addi.w	#$B,d1
0000AF3A 2468 0030                  		movea.l	$30(a0),a2
0000AF3E 3428 0008                  		move.w	8(a0),d2
0000AF42 6100 D5CE                  		bsr.w	SlopeObject2
0000AF46 6000                       		bra.s	Obj2F_Display
0000AF48                            ; ===========================================================================
0000AF48                            
0000AF48                            Obj2F_Solid:				; XREF: Obj2F_Action
0000AF48 7200                       		moveq	#0,d1
0000AF4A 1228 0019                  		move.b	$19(a0),d1
0000AF4E 0641 000B                  		addi.w	#$B,d1
0000AF52 343C 0020                  		move.w	#$20,d2
0000AF56 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000AF5C 6600                       		bne.s	loc_AF8E
0000AF5E 343C 0030                  		move.w	#$30,d2
0000AF62                            
0000AF62                            loc_AF8E:
0000AF62 2468 0030                  		movea.l	$30(a0),a2
0000AF66 6100 0000                  		bsr.w	SolidObject2F
0000AF6A                            
0000AF6A                            Obj2F_Display:				; XREF: Obj2F_Action
0000AF6A 6100 0000                  		bsr.w	DisplaySprite
0000AF6E 6000 0000                  		bra.w	Obj2F_ChkDel
0000AF72                            
0000AF72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF72                            
0000AF72                            
0000AF72                            Obj2F_Types:				; XREF: Obj2F_Action
0000AF72 7000                       		moveq	#0,d0
0000AF74 1028 0028                  		move.b	$28(a0),d0
0000AF78 0240 0007                  		andi.w	#7,d0
0000AF7C D040                       		add.w	d0,d0
0000AF7E 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000AF82 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000AF86                            ; End of function Obj2F_Types
0000AF86                            
0000AF86                            ; ===========================================================================
0000AF86 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000AF88 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000AF8A 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000AF8C 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000AF8E 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000AF90 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000AF92                            ; ===========================================================================
0000AF92                            
0000AF92                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000AF92 4E75                       		rts			; type 00 platform doesn't move
0000AF94                            ; ===========================================================================
0000AF94                            
0000AF94                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000AF94 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000AF98 323C 0020                  		move.w	#$20,d1
0000AF9C 6000                       		bra.s	Obj2F_Move
0000AF9E                            ; ===========================================================================
0000AF9E                            
0000AF9E                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000AF9E 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000AFA2 323C 0030                  		move.w	#$30,d1
0000AFA6 6000                       		bra.s	Obj2F_Move
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000AFA8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000AFAC 323C 0040                  		move.w	#$40,d1
0000AFB0 6000                       		bra.s	Obj2F_Move
0000AFB2                            ; ===========================================================================
0000AFB2                            
0000AFB2                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000AFB2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000AFB6 323C 0060                  		move.w	#$60,d1
0000AFBA                            
0000AFBA                            Obj2F_Move:
0000AFBA 0828 0003 0028             		btst	#3,$28(a0)
0000AFC0 6700                       		beq.s	loc_AFF2
0000AFC2 4440                       		neg.w	d0
0000AFC4 D041                       		add.w	d1,d0
0000AFC6                            
0000AFC6                            loc_AFF2:
0000AFC6 3228 002C                  		move.w	$2C(a0),d1
0000AFCA 9240                       		sub.w	d0,d1
0000AFCC 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000AFD0 4E75                       		rts	
0000AFD2                            ; ===========================================================================
0000AFD2                            
0000AFD2                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000AFD2 1028 0034                  		move.b	$34(a0),d0
0000AFD6 4A28 0025                  		tst.b	$25(a0)
0000AFDA 6600                       		bne.s	loc_B010
0000AFDC 5500                       		subq.b	#2,d0
0000AFDE 6400                       		bcc.s	loc_B01C
0000AFE0 7000                       		moveq	#0,d0
0000AFE2 6000                       		bra.s	loc_B01C
0000AFE4                            ; ===========================================================================
0000AFE4                            
0000AFE4                            loc_B010:
0000AFE4 5800                       		addq.b	#4,d0
0000AFE6 0C00 0040                  		cmpi.b	#$40,d0
0000AFEA 6500                       		bcs.s	loc_B01C
0000AFEC 103C 0040                  		move.b	#$40,d0
0000AFF0                            
0000AFF0                            loc_B01C:
0000AFF0 1140 0034                  		move.b	d0,$34(a0)
0000AFF4 4EB9 0000 29BA             		jsr	(CalcSine).l
0000AFFA E848                       		lsr.w	#4,d0
0000AFFC 3200                       		move.w	d0,d1
0000AFFE D068 002C                  		add.w	$2C(a0),d0
0000B002 3140 000C                  		move.w	d0,$C(a0)
0000B006 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B00C 6600                       		bne.s	loc_B07A
0000B00E 4A28 0035                  		tst.b	$35(a0)
0000B012 6600                       		bne.s	loc_B07A
0000B014 117C 0001 0035             		move.b	#1,$35(a0)
0000B01A 6100 0000                  		bsr.w	SingleObjLoad2
0000B01E 6600                       		bne.s	loc_B07A
0000B020 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B024 3368 0008 0008             		move.w	8(a0),8(a1)
0000B02A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B030 5069 002C                  		addq.w	#8,$2C(a1)
0000B034 5769 002C                  		subq.w	#3,$2C(a1)
0000B038 0469 0040 0008             		subi.w	#$40,8(a1)
0000B03E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B044 2348 0038                  		move.l	a0,$38(a1)
0000B048 2448                       		movea.l	a0,a2
0000B04A 6100                       		bsr.s	sub_B09C
0000B04C                            
0000B04C                            loc_B07A:
0000B04C 7400                       		moveq	#0,d2
0000B04E 45E8 0036                  		lea	$36(a0),a2
0000B052 141A                       		move.b	(a2)+,d2
0000B054 5302                       		subq.b	#1,d2
0000B056 6500                       		bcs.s	locret_B09A
0000B058                            
0000B058                            loc_B086:
0000B058 7000                       		moveq	#0,d0
0000B05A 101A                       		move.b	(a2)+,d0
0000B05C ED48                       		lsl.w	#6,d0
0000B05E 0640 D000                  		addi.w	#-$3000,d0
0000B062 3240                       		movea.w	d0,a1
0000B064 3341 003C                  		move.w	d1,$3C(a1)
0000B068 51CA FFEE                  		dbf	d2,loc_B086
0000B06C                            
0000B06C                            locret_B09A:
0000B06C 4E75                       		rts	
0000B06E                            
0000B06E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B06E                            
0000B06E                            
0000B06E                            sub_B09C:
0000B06E 45EA 0036                  		lea	$36(a2),a2
0000B072 7000                       		moveq	#0,d0
0000B074 1012                       		move.b	(a2),d0
0000B076 5212                       		addq.b	#1,(a2)
0000B078 45F2 0001                  		lea	1(a2,d0.w),a2
0000B07C 3009                       		move.w	a1,d0
0000B07E 0440 D000                  		subi.w	#-$3000,d0
0000B082 EC48                       		lsr.w	#6,d0
0000B084 0240 007F                  		andi.w	#$7F,d0
0000B088 1480                       		move.b	d0,(a2)
0000B08A 4E75                       		rts	
0000B08C                            ; End of function sub_B09C
0000B08C                            
0000B08C                            ; ===========================================================================
0000B08C                            
0000B08C                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B08C 4A28 0035                  		tst.b	$35(a0)
0000B090 6700                       		beq.s	loc_B0C6
0000B092 4A28 0001                  		tst.b	1(a0)
0000B096 6A00                       		bpl.s	Obj2F_DelFlames
0000B098                            
0000B098                            loc_B0C6:
0000B098 3028 002A                  		move.w	$2A(a0),d0
0000B09C 0240 FF80                  		andi.w	#$FF80,d0
0000B0A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000B0A4 0441 0080                  		subi.w	#$80,d1
0000B0A8 0241 FF80                  		andi.w	#$FF80,d1
0000B0AC 9041                       		sub.w	d1,d0
0000B0AE 0C40 0280                  		cmpi.w	#$280,d0
0000B0B2 6200 0000                  		bhi.w	DeleteObject
0000B0B6 4E75                       		rts	
0000B0B8                            ; ===========================================================================
0000B0B8                            
0000B0B8                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B0B8 7400                       		moveq	#0,d2
0000B0BA                            
0000B0BA                            loc_B0E8:
0000B0BA 45E8 0036                  		lea	$36(a0),a2
0000B0BE 1412                       		move.b	(a2),d2
0000B0C0 421A                       		clr.b	(a2)+
0000B0C2 5302                       		subq.b	#1,d2
0000B0C4 6500                       		bcs.s	locret_B116
0000B0C6                            
0000B0C6                            loc_B0F4:
0000B0C6 7000                       		moveq	#0,d0
0000B0C8 1012                       		move.b	(a2),d0
0000B0CA 421A                       		clr.b	(a2)+
0000B0CC ED48                       		lsl.w	#6,d0
0000B0CE 0640 D000                  		addi.w	#-$3000,d0
0000B0D2 3240                       		movea.w	d0,a1
0000B0D4 6100 0000                  		bsr.w	DeleteObject2
0000B0D8 51CA FFEC                  		dbf	d2,loc_B0F4
0000B0DC 117C 0000 0035             		move.b	#0,$35(a0)
0000B0E2 117C 0000 0034             		move.b	#0,$34(a0)
0000B0E8                            
0000B0E8                            locret_B116:
0000B0E8 4E75                       		rts	
0000B0EA                            ; ===========================================================================
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            ; Collision data for large moving platforms (MZ)
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B136                            		even
0000B136                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B162                            		even
0000B162                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B1AE                            		even
0000B1AE                            ; ===========================================================================
0000B1AE                            ; ---------------------------------------------------------------------------
0000B1AE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B1AE                            ; (appears when	you walk on sinking platforms)
0000B1AE                            ; ---------------------------------------------------------------------------
0000B1AE                            
0000B1AE                            Obj35:					; XREF: Obj_Index
0000B1AE 7000                       		moveq	#0,d0
0000B1B0 1028 0024                  		move.b	$24(a0),d0
0000B1B4 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B1B8 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B1BC                            ; ===========================================================================
0000B1BC 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B1BE 0000                       		dc.w loc_B238-Obj35_Index
0000B1C0 0000                       		dc.w Obj35_Move-Obj35_Index
0000B1C2                            ; ===========================================================================
0000B1C2                            
0000B1C2                            Obj35_Main:				; XREF: Obj35_Index
0000B1C2 5428 0024                  		addq.b	#2,$24(a0)
0000B1C6 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B1CE 317C 0345 0002             		move.w	#$345,2(a0)
0000B1D4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B1DA 117C 0004 0001             		move.b	#4,1(a0)
0000B1E0 117C 0001 0018             		move.b	#1,$18(a0)
0000B1E6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B1EC 117C 0008 0019             		move.b	#8,$19(a0)
0000B1F2 303C 00C8                  		move.w	#$C8,d0
0000B1F6 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B1FC 4A28 0028                  		tst.b	$28(a0)
0000B200 6700                       		beq.s	loc_B238
0000B202 5428 0024                  		addq.b	#2,$24(a0)
0000B206 6000 0000                  		bra.w	Obj35_Move
0000B20A                            ; ===========================================================================
0000B20A                            
0000B20A                            loc_B238:				; XREF: Obj35_Index
0000B20A 2268 0030                  		movea.l	$30(a0),a1
0000B20E 3228 0008                  		move.w	8(a0),d1
0000B212 9268 002A                  		sub.w	$2A(a0),d1
0000B216 0641 000C                  		addi.w	#$C,d1
0000B21A 3001                       		move.w	d1,d0
0000B21C E248                       		lsr.w	#1,d0
0000B21E 1031 0000                  		move.b	(a1,d0.w),d0
0000B222 4440                       		neg.w	d0
0000B224 D068 002C                  		add.w	$2C(a0),d0
0000B228 3400                       		move.w	d0,d2
0000B22A D068 003C                  		add.w	$3C(a0),d0
0000B22E 3140 000C                  		move.w	d0,$C(a0)
0000B232 0C41 0084                  		cmpi.w	#$84,d1
0000B236 6400                       		bcc.s	loc_B2B0
0000B238 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B240 0C41 0080                  		cmpi.w	#$80,d1
0000B244 6400                       		bcc.s	loc_B2B0
0000B246 2028 0008                  		move.l	8(a0),d0
0000B24A 0680 0008 0000             		addi.l	#$80000,d0
0000B250 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B256 6600                       		bne.s	loc_B2B0
0000B258 6100 0000                  		bsr.w	SingleObjLoad2
0000B25C 6600                       		bne.s	loc_B2B0
0000B25E 12BC 0035                  		move.b	#$35,0(a1)
0000B262 3368 0008 0008             		move.w	8(a0),8(a1)
0000B268 3342 002C                  		move.w	d2,$2C(a1)
0000B26C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B272 137C 0001 0028             		move.b	#1,$28(a1)
0000B278 2468 0038                  		movea.l	$38(a0),a2
0000B27C 6100 FDF0                  		bsr.w	sub_B09C
0000B280                            
0000B280                            loc_B2B0:
0000B280 6000                       		bra.s	Obj35_Animate
0000B282                            ; ===========================================================================
0000B282                            
0000B282                            Obj35_Move:				; XREF: Obj35_Index
0000B282 3028 002C                  		move.w	$2C(a0),d0
0000B286 D068 003C                  		add.w	$3C(a0),d0
0000B28A 3140 000C                  		move.w	d0,$C(a0)
0000B28E                            
0000B28E                            Obj35_Animate:				; XREF: loc_B238
0000B28E 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B294 6100 F456                  		bsr.w	AnimateSprite
0000B298 6000 0000                  		bra.w	DisplaySprite
0000B29C                            ; ===========================================================================
0000B29C                            Ani_obj35:
0000B29C                            	include "_anim\obj35.asm"
0000B29C                            ; ---------------------------------------------------------------------------
0000B29C                            ; Animation script - fireball that sits on the	floor (MZ)
0000B29C                            ; ---------------------------------------------------------------------------
0000B29C 0000                       		dc.w byte_B2CE-Ani_obj35
0000B29E 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B2A4                            		even
0000B2A4                            		even
0000B2A4                            
0000B2A4                            ; ---------------------------------------------------------------------------
0000B2A4                            ; Sprite mappings - large moving platforms (MZ)
0000B2A4                            ; ---------------------------------------------------------------------------
0000B2A4                            Map_obj2F:
0000B2A4                            	include "_maps\obj2F.asm"
0000B2A4                            ; ---------------------------------------------------------------------------
0000B2A4                            ; Sprite mappings - large moving platforms (MZ)
0000B2A4                            ; ---------------------------------------------------------------------------
0000B2A4 0000                       		dc.w byte_B2DA-Map_obj2F
0000B2A6 0000                       		dc.w byte_B31C-Map_obj2F
0000B2A8 0000                       		dc.w byte_B34F-Map_obj2F
0000B2AA 0D                         byte_B2DA:	dc.b $D
0000B2AB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B2B0 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B2B5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B2BA D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B2BF F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B2C4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B2C9 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B2CE D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B2D3 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B2D8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B2DD 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B2E2 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B2E7 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B2EC 0A                         byte_B31C:	dc.b $A
0000B2ED D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B2F2 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B2F7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B2FC C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B301 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B306 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B30B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B310 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B315 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B31A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B31F 06                         byte_B34F:	dc.b 6
0000B320 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B325 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B32A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B32F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B334 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B339 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B33E                            		even
0000B33E                            		even
0000B33E                            
0000B33E                            ; ---------------------------------------------------------------------------
0000B33E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B33E                            ; ---------------------------------------------------------------------------
0000B33E                            Map_obj14:
0000B33E                            	include "_maps\obj14.asm"
0000B33E                            ; ---------------------------------------------------------------------------
0000B33E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B33E                            ; ---------------------------------------------------------------------------
0000B33E 0000                       		dc.w byte_B37A-Map_obj14
0000B340 0000                       		dc.w byte_B380-Map_obj14
0000B342 0000                       		dc.w byte_B386-Map_obj14
0000B344 0000                       		dc.w byte_B38C-Map_obj14
0000B346 0000                       		dc.w byte_B392-Map_obj14
0000B348 0000                       		dc.w byte_B398-Map_obj14
0000B34A 01                         byte_B37A:	dc.b 1
0000B34B E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B350 01                         byte_B380:	dc.b 1
0000B351 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B356 01                         byte_B386:	dc.b 1
0000B357 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B35C 01                         byte_B38C:	dc.b 1
0000B35D F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B362 01                         byte_B392:	dc.b 1
0000B363 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B368 01                         byte_B398:	dc.b 1
0000B369 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B36E                            		even
0000B36E                            		even
0000B36E                            
0000B36E                            ; ===========================================================================
0000B36E                            ; ---------------------------------------------------------------------------
0000B36E                            ; Object 30 - large green glassy blocks	(MZ)
0000B36E                            ; ---------------------------------------------------------------------------
0000B36E                            
0000B36E                            Obj30:					; XREF: Obj_Index
0000B36E 7000                       		moveq	#0,d0
0000B370 1028 0024                  		move.b	$24(a0),d0
0000B374 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B378 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B37C 3028 0008                  		move.w	8(a0),d0
0000B380 0240 FF80                  		andi.w	#$FF80,d0
0000B384 3238 F700                  		move.w	($FFFFF700).w,d1
0000B388 0441 0080                  		subi.w	#$80,d1
0000B38C 0241 FF80                  		andi.w	#$FF80,d1
0000B390 9041                       		sub.w	d1,d0
0000B392 0C40 0280                  		cmpi.w	#$280,d0
0000B396 6200 0000                  		bhi.w	Obj30_Delete
0000B39A 6000 0000                  		bra.w	DisplaySprite
0000B39E                            ; ===========================================================================
0000B39E                            
0000B39E                            Obj30_Delete:
0000B39E 6000 0000                  		bra.w	DeleteObject
0000B3A2                            ; ===========================================================================
0000B3A2 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B3A4 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B3A6 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B3A8 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B3AA 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B3AC                            
0000B3AC 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B3AF 0400 01                    		dc.b 4,	0, 1
0000B3B2 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B3B5 0800 01                    		dc.b 8,	0, 1
0000B3B8                            ; ===========================================================================
0000B3B8                            
0000B3B8                            Obj30_Main:				; XREF: Obj30_Index
0000B3B8 45F9 0000 B3AC             		lea	(Obj30_Vars1).l,a2
0000B3BE 7201                       		moveq	#1,d1
0000B3C0 117C 0048 0016             		move.b	#$48,$16(a0)
0000B3C6 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B3CC 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B3CE 45F9 0000 B3B2             		lea	(Obj30_Vars2).l,a2
0000B3D4 7201                       		moveq	#1,d1
0000B3D6 117C 0038 0016             		move.b	#$38,$16(a0)
0000B3DC                            
0000B3DC                            loc_B40C:
0000B3DC 2248                       		movea.l	a0,a1
0000B3DE 6000                       		bra.s	Obj30_Load	; load main object
0000B3E0                            ; ===========================================================================
0000B3E0                            
0000B3E0                            Obj30_Loop:
0000B3E0 6100 0000                  		bsr.w	SingleObjLoad2
0000B3E4 6600                       		bne.s	loc_B480
0000B3E6                            
0000B3E6                            Obj30_Load:				; XREF: Obj30_Main
0000B3E6 135A 0024                  		move.b	(a2)+,$24(a1)
0000B3EA 12BC 0030                  		move.b	#$30,0(a1)
0000B3EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3F4 101A                       		move.b	(a2)+,d0
0000B3F6 4880                       		ext.w	d0
0000B3F8 D068 000C                  		add.w	$C(a0),d0
0000B3FC 3340 000C                  		move.w	d0,$C(a1)
0000B400 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B408 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B40E 137C 0004 0001             		move.b	#4,1(a1)
0000B414 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B41A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B420 137C 0020 0019             		move.b	#$20,$19(a1)
0000B426 137C 0004 0018             		move.b	#4,$18(a1)
0000B42C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B430 2348 003C                  		move.l	a0,$3C(a1)
0000B434 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B438                            
0000B438 137C 0010 0019             		move.b	#$10,$19(a1)
0000B43E 137C 0003 0018             		move.b	#3,$18(a1)
0000B444 5029 0028                  		addq.b	#8,$28(a1)
0000B448 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B44E                            
0000B44E                            loc_B480:
0000B44E 317C 0090 0032             		move.w	#$90,$32(a0)
0000B454 08E8 0004 0001             		bset	#4,1(a0)
0000B45A                            
0000B45A                            Obj30_Block012:				; XREF: Obj30_Index
0000B45A 6100 0000                  		bsr.w	Obj30_Types
0000B45E 323C 002B                  		move.w	#$2B,d1
0000B462 343C 0048                  		move.w	#$48,d2
0000B466 363C 0049                  		move.w	#$49,d3
0000B46A 3828 0008                  		move.w	8(a0),d4
0000B46E 6000 0000                  		bra.w	SolidObject
0000B472                            ; ===========================================================================
0000B472                            
0000B472                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B472 2268 003C                  		movea.l	$3C(a0),a1
0000B476 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B47C 6000 0000                  		bra.w	Obj30_Types
0000B480                            ; ===========================================================================
0000B480                            
0000B480                            Obj30_Block34:				; XREF: Obj30_Index
0000B480 6100 0000                  		bsr.w	Obj30_Types
0000B484 323C 002B                  		move.w	#$2B,d1
0000B488 343C 0038                  		move.w	#$38,d2
0000B48C 363C 0039                  		move.w	#$39,d3
0000B490 3828 0008                  		move.w	8(a0),d4
0000B494 6000 0000                  		bra.w	SolidObject
0000B498                            ; ===========================================================================
0000B498                            
0000B498                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B498 2268 003C                  		movea.l	$3C(a0),a1
0000B49C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B4A2 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B4A8 6000 0002                  		bra.w	*+4
0000B4AC                            
0000B4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4AC                            
0000B4AC                            
0000B4AC                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B4AC 7000                       		moveq	#0,d0
0000B4AE 1028 0028                  		move.b	$28(a0),d0
0000B4B2 0240 0007                  		andi.w	#7,d0
0000B4B6 D040                       		add.w	d0,d0
0000B4B8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B4BC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B4C0                            ; End of function Obj30_Types
0000B4C0                            
0000B4C0                            ; ===========================================================================
0000B4C0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B4C2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B4C4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B4C6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B4C8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B4CA                            ; ===========================================================================
0000B4CA                            
0000B4CA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B4CA 4E75                       		rts	
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B4CC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4D0 323C 0040                  		move.w	#$40,d1
0000B4D4 6000                       		bra.s	loc_B514
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B4D6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4DA 323C 0040                  		move.w	#$40,d1
0000B4DE 4440                       		neg.w	d0
0000B4E0 D041                       		add.w	d1,d0
0000B4E2                            
0000B4E2                            loc_B514:				; XREF: Obj30_Type01
0000B4E2 0828 0003 0028             		btst	#3,$28(a0)
0000B4E8 6700                       		beq.s	loc_B526
0000B4EA 4440                       		neg.w	d0
0000B4EC D041                       		add.w	d1,d0
0000B4EE E208                       		lsr.b	#1,d0
0000B4F0 0640 0020                  		addi.w	#$20,d0
0000B4F4                            
0000B4F4                            loc_B526:
0000B4F4 6000 0000                  		bra.w	loc_B5EE
0000B4F8                            ; ===========================================================================
0000B4F8                            
0000B4F8                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B4F8 0828 0003 0028             		btst	#3,$28(a0)
0000B4FE 6700                       		beq.s	loc_B53E
0000B500 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B504 0440 0010                  		subi.w	#$10,d0
0000B508 6000 0000                  		bra.w	loc_B5EE
0000B50C                            ; ===========================================================================
0000B50C                            
0000B50C                            loc_B53E:
0000B50C 0828 0003 0022             		btst	#3,$22(a0)
0000B512 6600                       		bne.s	loc_B54E
0000B514 08A8 0000 0034             		bclr	#0,$34(a0)
0000B51A 6000                       		bra.s	loc_B582
0000B51C                            ; ===========================================================================
0000B51C                            
0000B51C                            loc_B54E:
0000B51C 4A28 0034                  		tst.b	$34(a0)
0000B520 6600                       		bne.s	loc_B582
0000B522 117C 0001 0034             		move.b	#1,$34(a0)
0000B528 08E8 0000 0035             		bset	#0,$35(a0)
0000B52E 6700                       		beq.s	loc_B582
0000B530 08E8 0007 0034             		bset	#7,$34(a0)
0000B536 317C 0010 0036             		move.w	#$10,$36(a0)
0000B53C 117C 000A 0038             		move.b	#$A,$38(a0)
0000B542 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B548 6600                       		bne.s	loc_B582
0000B54A 317C 0040 0036             		move.w	#$40,$36(a0)
0000B550                            
0000B550                            loc_B582:
0000B550 4A28 0034                  		tst.b	$34(a0)
0000B554 6A00                       		bpl.s	loc_B5AA
0000B556 4A28 0038                  		tst.b	$38(a0)
0000B55A 6700                       		beq.s	loc_B594
0000B55C 5328 0038                  		subq.b	#1,$38(a0)
0000B560 6600                       		bne.s	loc_B5AA
0000B562                            
0000B562                            loc_B594:
0000B562 4A68 0032                  		tst.w	$32(a0)
0000B566 6700                       		beq.s	loc_B5A4
0000B568 5368 0032                  		subq.w	#1,$32(a0)
0000B56C 5368 0036                  		subq.w	#1,$36(a0)
0000B570 6600                       		bne.s	loc_B5AA
0000B572                            
0000B572                            loc_B5A4:
0000B572 08A8 0007 0034             		bclr	#7,$34(a0)
0000B578                            
0000B578                            loc_B5AA:
0000B578 3028 0032                  		move.w	$32(a0),d0
0000B57C 6000                       		bra.s	loc_B5EE
0000B57E                            ; ===========================================================================
0000B57E                            
0000B57E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B57E 0828 0003 0028             		btst	#3,$28(a0)
0000B584 6700                       		beq.s	Obj30_ChkSwitch
0000B586 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B58A 0440 0010                  		subi.w	#$10,d0
0000B58E 6000                       		bra.s	loc_B5EE
0000B590                            ; ===========================================================================
0000B590                            
0000B590                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B590 4A28 0034                  		tst.b	$34(a0)
0000B594 6600                       		bne.s	loc_B5E0
0000B596 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B59A 7000                       		moveq	#0,d0
0000B59C 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B5A0 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B5A2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B5A6 6700                       		beq.s	loc_B5EA	; if not, branch
0000B5A8 117C 0001 0034             		move.b	#1,$34(a0)
0000B5AE                            
0000B5AE                            loc_B5E0:
0000B5AE 4A68 0032                  		tst.w	$32(a0)
0000B5B2 6700                       		beq.s	loc_B5EA
0000B5B4 5568 0032                  		subq.w	#2,$32(a0)
0000B5B8                            
0000B5B8                            loc_B5EA:
0000B5B8 3028 0032                  		move.w	$32(a0),d0
0000B5BC                            
0000B5BC                            loc_B5EE:
0000B5BC 3228 0030                  		move.w	$30(a0),d1
0000B5C0 9240                       		sub.w	d0,d1
0000B5C2 3141 000C                  		move.w	d1,$C(a0)
0000B5C6 4E75                       		rts	
0000B5C8                            ; ===========================================================================
0000B5C8                            ; ---------------------------------------------------------------------------
0000B5C8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B5C8                            ; ---------------------------------------------------------------------------
0000B5C8                            Map_obj30:
0000B5C8                            	include "_maps\obj30.asm"
0000B5C8                            ; ---------------------------------------------------------------------------
0000B5C8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B5C8                            ; ---------------------------------------------------------------------------
0000B5C8 0000                       		dc.w byte_B600-Map_obj30
0000B5CA 0000                       		dc.w byte_B63D-Map_obj30
0000B5CC 0000                       		dc.w byte_B648-Map_obj30
0000B5CE 0C                         byte_B600:	dc.b $C
0000B5CF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B5D4 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B5D9 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B5DE C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B5E3 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B5E8 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B5ED 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B5F2 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B5F7 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B5FC 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B601 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B606 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B60B 02                         byte_B63D:	dc.b 2
0000B60C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B611 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B616 0A                         byte_B648:	dc.b $A
0000B617 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B61C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B621 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B626 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B62B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B630 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B635 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B63A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B63F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B644 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B64A 00                         		even
0000B64A 00                         		even
0000B64A                            
0000B64A                            ; ===========================================================================
0000B64A                            ; ---------------------------------------------------------------------------
0000B64A                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B64A                            ; ---------------------------------------------------------------------------
0000B64A                            
0000B64A                            Obj31:					; XREF: Obj_Index
0000B64A 7000                       		moveq	#0,d0
0000B64C 1028 0024                  		move.b	$24(a0),d0
0000B650 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B654 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B658                            ; ===========================================================================
0000B658 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B65A 0000                       		dc.w loc_B798-Obj31_Index
0000B65C 0000                       		dc.w loc_B7FE-Obj31_Index
0000B65E 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B660 0000                       		dc.w loc_B7E2-Obj31_Index
0000B662                            
0000B662 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B664 0100                       		dc.b 1,	0
0000B666                            
0000B666 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B669 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B66C 08CC 03                    		dc.b 8,	$CC, 3
0000B66F 06F0 02                    		dc.b 6,	$F0, 2
0000B672                            
0000B672 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B676 5000 7800                  		dc.w $5000, $7800
0000B67A 3800 5800                  		dc.w $3800, $5800
0000B67E B800                       		dc.w $B800
0000B680                            ; ===========================================================================
0000B680                            
0000B680                            Obj31_Main:				; XREF: Obj31_Index
0000B680 7000                       		moveq	#0,d0
0000B682 1028 0028                  		move.b	$28(a0),d0
0000B686 6A00                       		bpl.s	loc_B6CE
0000B688 0240 007F                  		andi.w	#$7F,d0
0000B68C D040                       		add.w	d0,d0
0000B68E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B692 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B696 101A                       		move.b	(a2)+,d0
0000B698 1140 0028                  		move.b	d0,$28(a0)
0000B69C                            
0000B69C                            loc_B6CE:
0000B69C 0200 000F                  		andi.b	#$F,d0
0000B6A0 D040                       		add.w	d0,d0
0000B6A2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B6A6 4A40                       		tst.w	d0
0000B6A8 6600                       		bne.s	loc_B6E0
0000B6AA 3142 0032                  		move.w	d2,$32(a0)
0000B6AE                            
0000B6AE                            loc_B6E0:
0000B6AE 45F9 0000 B666             		lea	(Obj31_Var).l,a2
0000B6B4 2248                       		movea.l	a0,a1
0000B6B6 7203                       		moveq	#3,d1
0000B6B8 6000                       		bra.s	Obj31_MakeStomper
0000B6BA                            ; ===========================================================================
0000B6BA                            
0000B6BA                            Obj31_Loop:
0000B6BA 6100 0000                  		bsr.w	SingleObjLoad2
0000B6BE 6600 0000                  		bne.w	Obj31_SetSize
0000B6C2                            
0000B6C2                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B6C2 135A 0024                  		move.b	(a2)+,$24(a1)
0000B6C6 12BC 0031                  		move.b	#$31,0(a1)
0000B6CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6D0 101A                       		move.b	(a2)+,d0
0000B6D2 4880                       		ext.w	d0
0000B6D4 D068 000C                  		add.w	$C(a0),d0
0000B6D8 3340 000C                  		move.w	d0,$C(a1)
0000B6DC 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B6E4 337C 0300 0002             		move.w	#$300,2(a1)
0000B6EA 137C 0004 0001             		move.b	#4,1(a1)
0000B6F0 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B6F6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B6FC 137C 0010 0019             		move.b	#$10,$19(a1)
0000B702 3342 0034                  		move.w	d2,$34(a1)
0000B706 137C 0004 0018             		move.b	#4,$18(a1)
0000B70C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B710 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B716 6600                       		bne.s	loc_B76A
0000B718 5341                       		subq.w	#1,d1
0000B71A 1028 0028                  		move.b	$28(a0),d0
0000B71E 0240 00F0                  		andi.w	#$F0,d0
0000B722 0C40 0020                  		cmpi.w	#$20,d0
0000B726 679A                       		beq.s	Obj31_MakeStomper
0000B728 137C 0038 0019             		move.b	#$38,$19(a1)
0000B72E 137C 0090 0020             		move.b	#$90,$20(a1)
0000B734 5241                       		addq.w	#1,d1
0000B736                            
0000B736                            loc_B76A:
0000B736 2348 003C                  		move.l	a0,$3C(a1)
0000B73A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B73E                            
0000B73E 137C 0003 0018             		move.b	#3,$18(a1)
0000B744                            
0000B744                            Obj31_SetSize:
0000B744 7000                       		moveq	#0,d0
0000B746 1028 0028                  		move.b	$28(a0),d0
0000B74A E648                       		lsr.w	#3,d0
0000B74C 0200 000E                  		andi.b	#$E,d0
0000B750 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B754 115A 0019                  		move.b	(a2)+,$19(a0)
0000B758 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B75C 6000                       		bra.s	loc_B798
0000B75E                            ; ===========================================================================
0000B75E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B760 3009                       		dc.b $30, 9
0000B762 100A                       		dc.b $10, $A
0000B764                            ; ===========================================================================
0000B764                            
0000B764                            loc_B798:				; XREF: Obj31_Index
0000B764 6100 0000                  		bsr.w	Obj31_Types
0000B768 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B76E 7200                       		moveq	#0,d1
0000B770 1228 0019                  		move.b	$19(a0),d1
0000B774 0641 000B                  		addi.w	#$B,d1
0000B778 343C 000C                  		move.w	#$C,d2
0000B77C 363C 000D                  		move.w	#$D,d3
0000B780 3828 0008                  		move.w	8(a0),d4
0000B784 6100 0000                  		bsr.w	SolidObject
0000B788 0828 0003 0022             		btst	#3,$22(a0)
0000B78E 6700                       		beq.s	Obj31_Display
0000B790 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B796 6400                       		bcc.s	Obj31_Display
0000B798 2448                       		movea.l	a0,a2
0000B79A 41F8 D000                  		lea	($FFFFD000).w,a0
0000B79E 4EB9 0000 0000             		jsr	KillSonic
0000B7A4 204A                       		movea.l	a2,a0
0000B7A6                            
0000B7A6                            Obj31_Display:
0000B7A6 6100 0000                  		bsr.w	DisplaySprite
0000B7AA 6000 0000                  		bra.w	Obj31_ChkDel
0000B7AE                            ; ===========================================================================
0000B7AE                            
0000B7AE                            loc_B7E2:				; XREF: Obj31_Index
0000B7AE 117C 0080 0016             		move.b	#$80,$16(a0)
0000B7B4 08E8 0004 0001             		bset	#4,1(a0)
0000B7BA 2268 003C                  		movea.l	$3C(a0),a1
0000B7BE 1029 0032                  		move.b	$32(a1),d0
0000B7C2 EA08                       		lsr.b	#5,d0
0000B7C4 5600                       		addq.b	#3,d0
0000B7C6 1140 001A                  		move.b	d0,$1A(a0)
0000B7CA                            
0000B7CA                            loc_B7FE:				; XREF: Obj31_Index
0000B7CA 2268 003C                  		movea.l	$3C(a0),a1
0000B7CE 7000                       		moveq	#0,d0
0000B7D0 1029 0032                  		move.b	$32(a1),d0
0000B7D4 D068 0030                  		add.w	$30(a0),d0
0000B7D8 3140 000C                  		move.w	d0,$C(a0)
0000B7DC                            
0000B7DC                            Obj31_Display2:				; XREF: Obj31_Index
0000B7DC 6100 0000                  		bsr.w	DisplaySprite
0000B7E0                            
0000B7E0                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B7E0 3028 0008                  		move.w	8(a0),d0
0000B7E4 0240 FF80                  		andi.w	#$FF80,d0
0000B7E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000B7EC 0441 0080                  		subi.w	#$80,d1
0000B7F0 0241 FF80                  		andi.w	#$FF80,d1
0000B7F4 9041                       		sub.w	d1,d0
0000B7F6 0C40 0280                  		cmpi.w	#$280,d0
0000B7FA 6200 0000                  		bhi.w	DeleteObject
0000B7FE 4E75                       		rts	
0000B800                            ; ===========================================================================
0000B800                            
0000B800                            Obj31_Types:				; XREF: loc_B798
0000B800 1028 0028                  		move.b	$28(a0),d0
0000B804 0240 000F                  		andi.w	#$F,d0
0000B808 D040                       		add.w	d0,d0
0000B80A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B80E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B812                            ; ===========================================================================
0000B812 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B814 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B816 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B818 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B81A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B81C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B81E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B820 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B824 7000                       		moveq	#0,d0
0000B826 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B82A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B82E 6700                       		beq.s	loc_B8A8	; if not, branch
0000B830 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B834 6A00                       		bpl.s	loc_B872
0000B836 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B83C 6700                       		beq.s	loc_B8A0
0000B83E                            
0000B83E                            loc_B872:
0000B83E 4A68 0032                  		tst.w	$32(a0)
0000B842 6700                       		beq.s	loc_B8A0
0000B844 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B848 0200 000F                  		andi.b	#$F,d0
0000B84C 6600                       		bne.s	loc_B892
0000B84E 4A28 0001                  		tst.b	1(a0)
0000B852 6A00                       		bpl.s	loc_B892
0000B854 303C 00C7                  		move.w	#$C7,d0
0000B858 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B85E                            
0000B85E                            loc_B892:
0000B85E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B864 6400                       		bcc.s	Obj31_Restart
0000B866 317C 0000 0032             		move.w	#0,$32(a0)
0000B86C                            
0000B86C                            loc_B8A0:
0000B86C 317C 0000 0012             		move.w	#0,$12(a0)
0000B872 6000                       		bra.s	Obj31_Restart
0000B874                            ; ===========================================================================
0000B874                            
0000B874                            loc_B8A8:				; XREF: Obj31_Type00
0000B874 3228 0034                  		move.w	$34(a0),d1
0000B878 B268 0032                  		cmp.w	$32(a0),d1
0000B87C 6700                       		beq.s	Obj31_Restart
0000B87E 3028 0012                  		move.w	$12(a0),d0
0000B882 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B888 D168 0032                  		add.w	d0,$32(a0)
0000B88C B268 0032                  		cmp.w	$32(a0),d1
0000B890 6200                       		bhi.s	Obj31_Restart
0000B892 3141 0032                  		move.w	d1,$32(a0)
0000B896 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B89C 4A28 0001                  		tst.b	1(a0)
0000B8A0 6A00                       		bpl.s	Obj31_Restart
0000B8A2 303C 00BD                  		move.w	#$BD,d0
0000B8A6 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B8AC                            
0000B8AC                            Obj31_Restart:
0000B8AC 7000                       		moveq	#0,d0
0000B8AE 1028 0032                  		move.b	$32(a0),d0
0000B8B2 D068 0030                  		add.w	$30(a0),d0
0000B8B6 3140 000C                  		move.w	d0,$C(a0)
0000B8BA 4E75                       		rts	
0000B8BC                            ; ===========================================================================
0000B8BC                            
0000B8BC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B8BC 4A68 0036                  		tst.w	$36(a0)
0000B8C0 6700                       		beq.s	loc_B938
0000B8C2 4A68 0038                  		tst.w	$38(a0)
0000B8C6 6700                       		beq.s	loc_B902
0000B8C8 5368 0038                  		subq.w	#1,$38(a0)
0000B8CC 6000                       		bra.s	loc_B97C
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            loc_B902:
0000B8CE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B8D2 0200 000F                  		andi.b	#$F,d0
0000B8D6 6600                       		bne.s	loc_B91C
0000B8D8 4A28 0001                  		tst.b	1(a0)
0000B8DC 6A00                       		bpl.s	loc_B91C
0000B8DE 303C 00C7                  		move.w	#$C7,d0
0000B8E2 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B8E8                            
0000B8E8                            loc_B91C:
0000B8E8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B8EE 6400                       		bcc.s	loc_B97C
0000B8F0 317C 0000 0032             		move.w	#0,$32(a0)
0000B8F6 317C 0000 0012             		move.w	#0,$12(a0)
0000B8FC 317C 0000 0036             		move.w	#0,$36(a0)
0000B902 6000                       		bra.s	loc_B97C
0000B904                            ; ===========================================================================
0000B904                            
0000B904                            loc_B938:				; XREF: Obj31_Type01
0000B904 3228 0034                  		move.w	$34(a0),d1
0000B908 B268 0032                  		cmp.w	$32(a0),d1
0000B90C 6700                       		beq.s	loc_B97C
0000B90E 3028 0012                  		move.w	$12(a0),d0
0000B912 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B918 D168 0032                  		add.w	d0,$32(a0)
0000B91C B268 0032                  		cmp.w	$32(a0),d1
0000B920 6200                       		bhi.s	loc_B97C
0000B922 3141 0032                  		move.w	d1,$32(a0)
0000B926 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B92C 317C 0001 0036             		move.w	#1,$36(a0)
0000B932 317C 003C 0038             		move.w	#$3C,$38(a0)
0000B938 4A28 0001                  		tst.b	1(a0)
0000B93C 6A00                       		bpl.s	loc_B97C
0000B93E 303C 00BD                  		move.w	#$BD,d0
0000B942 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B948                            
0000B948                            loc_B97C:
0000B948 6000 FF62                  		bra.w	Obj31_Restart
0000B94C                            ; ===========================================================================
0000B94C                            
0000B94C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000B94C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B950 9068 0008                  		sub.w	8(a0),d0
0000B954 6400                       		bcc.s	loc_B98C
0000B956 4440                       		neg.w	d0
0000B958                            
0000B958                            loc_B98C:
0000B958 0C40 0090                  		cmpi.w	#$90,d0
0000B95C 6400                       		bcc.s	loc_B996
0000B95E 5228 0028                  		addq.b	#1,$28(a0)
0000B962                            
0000B962                            loc_B996:
0000B962 6000 FF48                  		bra.w	Obj31_Restart
0000B966                            ; ===========================================================================
0000B966                            ; ---------------------------------------------------------------------------
0000B966                            ; Object 45 - spiked metal block from beta version (MZ)
0000B966                            ; ---------------------------------------------------------------------------
0000B966                            
0000B966                            Obj45:					; XREF: Obj_Index
0000B966 7000                       		moveq	#0,d0
0000B968 1028 0024                  		move.b	$24(a0),d0
0000B96C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000B970 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000B974                            ; ===========================================================================
0000B974 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000B976 0000                       		dc.w Obj45_Solid-Obj45_Index
0000B978 0000                       		dc.w loc_BA8E-Obj45_Index
0000B97A 0000                       		dc.w Obj45_Display-Obj45_Index
0000B97C 0000                       		dc.w loc_BA7A-Obj45_Index
0000B97E                            
0000B97E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000B981 04E4 01                    		dc.b	4, $E4,	  1
0000B984 0834 03                    		dc.b	8, $34,	  3
0000B987 0628 02                    		dc.b	6, $28,	  2
0000B98A                            
0000B98A 3800                       word_B9BE:	dc.w $3800
0000B98C A000                       		dc.w -$6000
0000B98E 5000                       		dc.w $5000
0000B990                            ; ===========================================================================
0000B990                            
0000B990                            Obj45_Main:				; XREF: Obj45_Index
0000B990 7000                       		moveq	#0,d0
0000B992 1028 0028                  		move.b	$28(a0),d0
0000B996 D040                       		add.w	d0,d0
0000B998 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000B99C 45F9 0000 B97E             		lea	(Obj45_Var).l,a2
0000B9A2 2248                       		movea.l	a0,a1
0000B9A4 7203                       		moveq	#3,d1
0000B9A6 6000                       		bra.s	Obj45_Load
0000B9A8                            ; ===========================================================================
0000B9A8                            
0000B9A8                            Obj45_Loop:
0000B9A8 6100 0000                  		bsr.w	SingleObjLoad2
0000B9AC 6600                       		bne.s	loc_BA52
0000B9AE                            
0000B9AE                            Obj45_Load:				; XREF: Obj45_Main
0000B9AE 135A 0024                  		move.b	(a2)+,$24(a1)
0000B9B2 12BC 0045                  		move.b	#$45,0(a1)
0000B9B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B9BC 101A                       		move.b	(a2)+,d0
0000B9BE 4880                       		ext.w	d0
0000B9C0 D068 0008                  		add.w	8(a0),d0
0000B9C4 3340 0008                  		move.w	d0,8(a1)
0000B9C8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000B9D0 337C 0300 0002             		move.w	#$300,2(a1)
0000B9D6 137C 0004 0001             		move.b	#4,1(a1)
0000B9DC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000B9E2 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000B9E8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9EE 137C 0020 0019             		move.b	#$20,$19(a1)
0000B9F4 3342 0034                  		move.w	d2,$34(a1)
0000B9F8 137C 0004 0018             		move.b	#4,$18(a1)
0000B9FE 0C12 0001                  		cmpi.b	#1,(a2)
0000BA02 6600                       		bne.s	loc_BA40
0000BA04 137C 0091 0020             		move.b	#$91,$20(a1)
0000BA0A                            
0000BA0A                            loc_BA40:
0000BA0A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BA0E 2348 003C                  		move.l	a0,$3C(a1)
0000BA12 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BA16                            
0000BA16 137C 0003 0018             		move.b	#3,$18(a1)
0000BA1C                            
0000BA1C                            loc_BA52:
0000BA1C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BA22                            
0000BA22                            Obj45_Solid:				; XREF: Obj45_Index
0000BA22 3F28 0008                  		move.w	8(a0),-(sp)
0000BA26 6100 0000                  		bsr.w	Obj45_Move
0000BA2A 323C 0017                  		move.w	#$17,d1
0000BA2E 343C 0020                  		move.w	#$20,d2
0000BA32 363C 0020                  		move.w	#$20,d3
0000BA36 381F                       		move.w	(sp)+,d4
0000BA38 6100 0000                  		bsr.w	SolidObject
0000BA3C 6100 0000                  		bsr.w	DisplaySprite
0000BA40 6000 0000                  		bra.w	Obj45_ChkDel
0000BA44                            ; ===========================================================================
0000BA44                            
0000BA44                            loc_BA7A:				; XREF: Obj45_Index
0000BA44 2268 003C                  		movea.l	$3C(a0),a1
0000BA48 1029 0032                  		move.b	$32(a1),d0
0000BA4C 0600 0010                  		addi.b	#$10,d0
0000BA50 EA08                       		lsr.b	#5,d0
0000BA52 5600                       		addq.b	#3,d0
0000BA54 1140 001A                  		move.b	d0,$1A(a0)
0000BA58                            
0000BA58                            loc_BA8E:				; XREF: Obj45_Index
0000BA58 2268 003C                  		movea.l	$3C(a0),a1
0000BA5C 7000                       		moveq	#0,d0
0000BA5E 1029 0032                  		move.b	$32(a1),d0
0000BA62 4440                       		neg.w	d0
0000BA64 D068 0030                  		add.w	$30(a0),d0
0000BA68 3140 0008                  		move.w	d0,8(a0)
0000BA6C                            
0000BA6C                            Obj45_Display:				; XREF: Obj45_Index
0000BA6C 6100 0000                  		bsr.w	DisplaySprite
0000BA70                            
0000BA70                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BA70 3028 003A                  		move.w	$3A(a0),d0
0000BA74 0240 FF80                  		andi.w	#$FF80,d0
0000BA78 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA7C 0441 0080                  		subi.w	#$80,d1
0000BA80 0241 FF80                  		andi.w	#$FF80,d1
0000BA84 9041                       		sub.w	d1,d0
0000BA86 0C40 0280                  		cmpi.w	#$280,d0
0000BA8A 6200 0000                  		bhi.w	DeleteObject
0000BA8E 4E75                       		rts	
0000BA90                            
0000BA90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA90                            
0000BA90                            
0000BA90                            Obj45_Move:				; XREF: Obj45_Solid
0000BA90 7000                       		moveq	#0,d0
0000BA92 1028 0028                  		move.b	$28(a0),d0
0000BA96 D040                       		add.w	d0,d0
0000BA98 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BA9C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BAA0                            ; End of function Obj45_Move
0000BAA0                            
0000BAA0                            ; ===========================================================================
0000BAA0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BAA2 0000                       		dc.w loc_BADA-off_BAD6
0000BAA4                            ; ===========================================================================
0000BAA4                            
0000BAA4                            loc_BADA:				; XREF: off_BAD6
0000BAA4 4A68 0036                  		tst.w	$36(a0)
0000BAA8 6700                       		beq.s	loc_BB08
0000BAAA 4A68 0038                  		tst.w	$38(a0)
0000BAAE 6700                       		beq.s	loc_BAEC
0000BAB0 5368 0038                  		subq.w	#1,$38(a0)
0000BAB4 6000                       		bra.s	loc_BB3C
0000BAB6                            ; ===========================================================================
0000BAB6                            
0000BAB6                            loc_BAEC:
0000BAB6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BABC 6400                       		bcc.s	loc_BB3C
0000BABE 317C 0000 0032             		move.w	#0,$32(a0)
0000BAC4 317C 0000 0010             		move.w	#0,$10(a0)
0000BACA 317C 0000 0036             		move.w	#0,$36(a0)
0000BAD0 6000                       		bra.s	loc_BB3C
0000BAD2                            ; ===========================================================================
0000BAD2                            
0000BAD2                            loc_BB08:				; XREF: loc_BADA
0000BAD2 3228 0034                  		move.w	$34(a0),d1
0000BAD6 B268 0032                  		cmp.w	$32(a0),d1
0000BADA 6700                       		beq.s	loc_BB3C
0000BADC 3028 0010                  		move.w	$10(a0),d0
0000BAE0 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BAE6 D168 0032                  		add.w	d0,$32(a0)
0000BAEA B268 0032                  		cmp.w	$32(a0),d1
0000BAEE 6200                       		bhi.s	loc_BB3C
0000BAF0 3141 0032                  		move.w	d1,$32(a0)
0000BAF4 317C 0000 0010             		move.w	#0,$10(a0)
0000BAFA 317C 0001 0036             		move.w	#1,$36(a0)
0000BB00 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BB06                            
0000BB06                            loc_BB3C:
0000BB06 7000                       		moveq	#0,d0
0000BB08 1028 0032                  		move.b	$32(a0),d0
0000BB0C 4440                       		neg.w	d0
0000BB0E D068 0030                  		add.w	$30(a0),d0
0000BB12 3140 0008                  		move.w	d0,8(a0)
0000BB16 4E75                       		rts	
0000BB18                            ; ===========================================================================
0000BB18                            ; ---------------------------------------------------------------------------
0000BB18                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BB18                            ; ---------------------------------------------------------------------------
0000BB18                            Map_obj31:
0000BB18                            	include "_maps\obj31.asm"
0000BB18                            ; ---------------------------------------------------------------------------
0000BB18                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BB18                            ; ---------------------------------------------------------------------------
0000BB18 0000                       		dc.w byte_BB64-Map_obj31
0000BB1A 0000                       		dc.w byte_BB7E-Map_obj31
0000BB1C 0000                       		dc.w byte_BB98-Map_obj31
0000BB1E 0000                       		dc.w byte_BB9E-Map_obj31
0000BB20 0000                       		dc.w byte_BBA9-Map_obj31
0000BB22 0000                       		dc.w byte_BBBE-Map_obj31
0000BB24 0000                       		dc.w byte_BBDD-Map_obj31
0000BB26 0000                       		dc.w byte_BC06-Map_obj31
0000BB28 0000                       		dc.w byte_BC06-Map_obj31
0000BB2A 0000                       		dc.w byte_BC39-Map_obj31
0000BB2C 0000                       		dc.w byte_BC53-Map_obj31
0000BB2E 05                         byte_BB64:	dc.b 5
0000BB2F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BB34 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BB39 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BB3E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BB43 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BB48 05                         byte_BB7E:	dc.b 5
0000BB49 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BB4E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BB53 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BB58 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BB5D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BB62 01                         byte_BB98:	dc.b 1
0000BB63 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BB68 02                         byte_BB9E:	dc.b 2
0000BB69 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB6E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB73 04                         byte_BBA9:	dc.b 4
0000BB74 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB79 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB7E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB83 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB88 06                         byte_BBBE:	dc.b 6
0000BB89 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BB8E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BB93 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB98 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB9D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BBA2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BBA7 08                         byte_BBDD:	dc.b 8
0000BBA8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BBAD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BBB2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BBB7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BBBC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BBC1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BBC6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BBCB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BBD0 0A                         byte_BC06:	dc.b $A
0000BBD1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BBD6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BBDB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BBE0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BBE5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BBEA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BBEF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BBF4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BBF9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BBFE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC03 05                         byte_BC39:	dc.b 5
0000BC04 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BC09 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BC0E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BC13 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BC18 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC1D 01                         byte_BC53:	dc.b 1
0000BC1E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BC24 00                         		even
0000BC24 00                         		even
0000BC24                            
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24                            Map_obj45:
0000BC24                            	include "_maps\obj45.asm"
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BC24                            ; ---------------------------------------------------------------------------
0000BC24 0000                       		dc.w byte_BC6C-Map_obj45
0000BC26 0000                       		dc.w byte_BC7C-Map_obj45
0000BC28 0000                       		dc.w byte_BC8C-Map_obj45
0000BC2A 0000                       		dc.w byte_BC92-Map_obj45
0000BC2C 0000                       		dc.w byte_BC9D-Map_obj45
0000BC2E 0000                       		dc.w byte_BCB2-Map_obj45
0000BC30 0000                       		dc.w byte_BCD1-Map_obj45
0000BC32 0000                       		dc.w byte_BCFA-Map_obj45
0000BC34 0000                       		dc.w byte_BCFA-Map_obj45
0000BC36 03                         byte_BC6C:	dc.b 3
0000BC37 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BC3C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BC41 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BC46 03                         byte_BC7C:	dc.b 3
0000BC47 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BC4C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BC51 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BC56 01                         byte_BC8C:	dc.b 1
0000BC57 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BC5C 02                         byte_BC92:	dc.b 2
0000BC5D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC62 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC67 04                         byte_BC9D:	dc.b 4
0000BC68 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC6D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC72 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC77 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC7C 06                         byte_BCB2:	dc.b 6
0000BC7D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC82 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC87 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC8C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC91 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BC96 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BC9B 08                         byte_BCD1:	dc.b 8
0000BC9C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BCA1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BCA6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BCAB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BCB0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BCB5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BCBA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BCBF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BCC4 08                         byte_BCFA:	dc.b 8
0000BCC5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BCCA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BCCF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BCD4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BCD9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BCDE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BCE3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BCE8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BCED F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BCF2 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BCF8 00                         		even
0000BCF8 00                         		even
0000BCF8                            
0000BCF8                            ; ===========================================================================
0000BCF8                            ; ---------------------------------------------------------------------------
0000BCF8                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BCF8                            ; ---------------------------------------------------------------------------
0000BCF8                            
0000BCF8                            Obj32:					; XREF: Obj_Index
0000BCF8 7000                       		moveq	#0,d0
0000BCFA 1028 0024                  		move.b	$24(a0),d0
0000BCFE 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BD02 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BD06                            ; ===========================================================================
0000BD06 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BD08 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BD0A                            ; ===========================================================================
0000BD0A                            
0000BD0A                            Obj32_Main:				; XREF: Obj32_Index
0000BD0A 5428 0024                  		addq.b	#2,$24(a0)
0000BD0E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BD16 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BD1C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BD22 6700                       		beq.s	loc_BD60
0000BD24 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BD2A                            
0000BD2A                            loc_BD60:
0000BD2A 117C 0004 0001             		move.b	#4,1(a0)
0000BD30 117C 0010 0019             		move.b	#$10,$19(a0)
0000BD36 117C 0004 0018             		move.b	#4,$18(a0)
0000BD3C 5668 000C                  		addq.w	#3,$C(a0)
0000BD40                            
0000BD40                            Obj32_Pressed:				; XREF: Obj32_Index
0000BD40 4A28 0001                  		tst.b	1(a0)
0000BD44 6A00                       		bpl.s	Obj32_Display
0000BD46 323C 001B                  		move.w	#$1B,d1
0000BD4A 343C 0005                  		move.w	#5,d2
0000BD4E 363C 0005                  		move.w	#5,d3
0000BD52 3828 0008                  		move.w	8(a0),d4
0000BD56 6100 0000                  		bsr.w	SolidObject
0000BD5A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BD60 1028 0028                  		move.b	$28(a0),d0
0000BD64 0240 000F                  		andi.w	#$F,d0
0000BD68 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BD6C 47F3 0000                  		lea	(a3,d0.w),a3
0000BD70 7600                       		moveq	#0,d3
0000BD72 0828 0006 0028             		btst	#6,$28(a0)
0000BD78 6700                       		beq.s	loc_BDB2
0000BD7A 7607                       		moveq	#7,d3
0000BD7C                            
0000BD7C                            loc_BDB2:
0000BD7C 4A28 0028                  		tst.b	$28(a0)
0000BD80 6A00                       		bpl.s	loc_BDBE
0000BD82 6100 0000                  		bsr.w	Obj32_MZBlock
0000BD86 6600                       		bne.s	loc_BDC8
0000BD88                            
0000BD88                            loc_BDBE:
0000BD88 4A28 0025                  		tst.b	$25(a0)
0000BD8C 6600                       		bne.s	loc_BDC8
0000BD8E 0793                       		bclr	d3,(a3)
0000BD90 6000                       		bra.s	loc_BDDE
0000BD92                            ; ===========================================================================
0000BD92                            
0000BD92                            loc_BDC8:
0000BD92 4A13                       		tst.b	(a3)
0000BD94 6600                       		bne.s	loc_BDD6
0000BD96 303C 00CD                  		move.w	#$CD,d0
0000BD9A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play switch sound
0000BDA0                            
0000BDA0                            loc_BDD6:
0000BDA0 07D3                       		bset	d3,(a3)
0000BDA2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BDA8                            
0000BDA8                            loc_BDDE:
0000BDA8 0828 0005 0028             		btst	#5,$28(a0)
0000BDAE 6700                       		beq.s	Obj32_Display
0000BDB0 5328 001E                  		subq.b	#1,$1E(a0)
0000BDB4 6A00                       		bpl.s	Obj32_Display
0000BDB6 117C 0007 001E             		move.b	#7,$1E(a0)
0000BDBC 0868 0001 001A             		bchg	#1,$1A(a0)
0000BDC2                            
0000BDC2                            Obj32_Display:
0000BDC2 6100 0000                  		bsr.w	DisplaySprite
0000BDC6 3028 0008                  		move.w	8(a0),d0
0000BDCA 0240 FF80                  		andi.w	#$FF80,d0
0000BDCE 3238 F700                  		move.w	($FFFFF700).w,d1
0000BDD2 0441 0080                  		subi.w	#$80,d1
0000BDD6 0241 FF80                  		andi.w	#$FF80,d1
0000BDDA 9041                       		sub.w	d1,d0
0000BDDC 0C40 0280                  		cmpi.w	#$280,d0
0000BDE0 6200 0000                  		bhi.w	Obj32_Delete
0000BDE4 4E75                       		rts	
0000BDE6                            ; ===========================================================================
0000BDE6                            
0000BDE6                            Obj32_Delete:
0000BDE6 6100 0000                  		bsr.w	DeleteObject
0000BDEA 4E75                       		rts	
0000BDEC                            
0000BDEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDEC                            
0000BDEC                            
0000BDEC                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BDEC 3F03                       		move.w	d3,-(sp)
0000BDEE 3428 0008                  		move.w	8(a0),d2
0000BDF2 3628 000C                  		move.w	$C(a0),d3
0000BDF6 0442 0010                  		subi.w	#$10,d2
0000BDFA 5143                       		subq.w	#8,d3
0000BDFC 383C 0020                  		move.w	#$20,d4
0000BE00 3A3C 0010                  		move.w	#$10,d5
0000BE04 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BE08 3C3C 005F                  		move.w	#$5F,d6
0000BE0C                            
0000BE0C                            Obj32_MZLoop:
0000BE0C 4A29 0001                  		tst.b	1(a1)
0000BE10 6A00                       		bpl.s	loc_BE4E
0000BE12 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BE16 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BE18                            
0000BE18                            loc_BE4E:
0000BE18 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BE1C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BE20                            
0000BE20 361F                       		move.w	(sp)+,d3
0000BE22 7000                       		moveq	#0,d0
0000BE24                            
0000BE24                            locret_BE5A:
0000BE24 4E75                       		rts	
0000BE26                            ; ===========================================================================
0000BE26 1010                       Obj32_MZData:	dc.b $10, $10
0000BE28                            ; ===========================================================================
0000BE28                            
0000BE28                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BE28 7001                       		moveq	#1,d0
0000BE2A 0240 003F                  		andi.w	#$3F,d0
0000BE2E D040                       		add.w	d0,d0
0000BE30 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BE34 121A                       		move.b	(a2)+,d1
0000BE36 4881                       		ext.w	d1
0000BE38 3029 0008                  		move.w	8(a1),d0
0000BE3C 9041                       		sub.w	d1,d0
0000BE3E 9042                       		sub.w	d2,d0
0000BE40 6400                       		bcc.s	loc_BE80
0000BE42 D241                       		add.w	d1,d1
0000BE44 D041                       		add.w	d1,d0
0000BE46 6500                       		bcs.s	loc_BE84
0000BE48 60CE                       		bra.s	loc_BE4E
0000BE4A                            ; ===========================================================================
0000BE4A                            
0000BE4A                            loc_BE80:
0000BE4A B044                       		cmp.w	d4,d0
0000BE4C 62CA                       		bhi.s	loc_BE4E
0000BE4E                            
0000BE4E                            loc_BE84:
0000BE4E 121A                       		move.b	(a2)+,d1
0000BE50 4881                       		ext.w	d1
0000BE52 3029 000C                  		move.w	$C(a1),d0
0000BE56 9041                       		sub.w	d1,d0
0000BE58 9043                       		sub.w	d3,d0
0000BE5A 6400                       		bcc.s	loc_BE9A
0000BE5C D241                       		add.w	d1,d1
0000BE5E D041                       		add.w	d1,d0
0000BE60 6500                       		bcs.s	loc_BE9E
0000BE62 60B4                       		bra.s	loc_BE4E
0000BE64                            ; ===========================================================================
0000BE64                            
0000BE64                            loc_BE9A:
0000BE64 B045                       		cmp.w	d5,d0
0000BE66 62B0                       		bhi.s	loc_BE4E
0000BE68                            
0000BE68                            loc_BE9E:
0000BE68 361F                       		move.w	(sp)+,d3
0000BE6A 7001                       		moveq	#1,d0
0000BE6C 4E75                       		rts	
0000BE6E                            ; End of function Obj32_MZBlock
0000BE6E                            
0000BE6E                            ; ===========================================================================
0000BE6E                            ; ---------------------------------------------------------------------------
0000BE6E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BE6E                            ; ---------------------------------------------------------------------------
0000BE6E                            Map_obj32:
0000BE6E                            	include "_maps\obj32.asm"
0000BE6E                            ; ---------------------------------------------------------------------------
0000BE6E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BE6E                            ; ---------------------------------------------------------------------------
0000BE6E 0000                       		dc.w byte_BEAC-Map_obj32
0000BE70 0000                       		dc.w byte_BEB7-Map_obj32
0000BE72 0000                       		dc.w byte_BEC2-Map_obj32
0000BE74 0000                       		dc.w byte_BEB7-Map_obj32
0000BE76 02                         byte_BEAC:	dc.b 2
0000BE77 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BE7C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BE81 02                         byte_BEB7:	dc.b 2
0000BE82 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BE87 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BE8C 02                         byte_BEC2:	dc.b 2
0000BE8D F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BE92 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BE97 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BE9C                            		even
0000BE9C                            		even
0000BE9C                            
0000BE9C                            ; ===========================================================================
0000BE9C                            ; ---------------------------------------------------------------------------
0000BE9C                            ; Object 33 - pushable blocks (MZ, LZ)
0000BE9C                            ; ---------------------------------------------------------------------------
0000BE9C                            
0000BE9C                            Obj33:					; XREF: Obj_Index
0000BE9C 7000                       		moveq	#0,d0
0000BE9E 1028 0024                  		move.b	$24(a0),d0
0000BEA2 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BEA6 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BEAA                            ; ===========================================================================
0000BEAA 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BEAC 0000                       		dc.w loc_BF6E-Obj33_Index
0000BEAE 0000                       		dc.w loc_C02C-Obj33_Index
0000BEB0                            
0000BEB0 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BEB2 4001                       		dc.b $40, 1
0000BEB4                            ; ===========================================================================
0000BEB4                            
0000BEB4                            Obj33_Main:				; XREF: Obj33_Index
0000BEB4 5428 0024                  		addq.b	#2,$24(a0)
0000BEB8 117C 000F 0016             		move.b	#$F,$16(a0)
0000BEBE 117C 000F 0017             		move.b	#$F,$17(a0)
0000BEC4 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BECC 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BED2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BED8 6600                       		bne.s	loc_BF16
0000BEDA 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BEE0                            
0000BEE0                            loc_BF16:
0000BEE0 117C 0004 0001             		move.b	#4,1(a0)
0000BEE6 117C 0003 0018             		move.b	#3,$18(a0)
0000BEEC 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BEF2 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BEF8 7000                       		moveq	#0,d0
0000BEFA 1028 0028                  		move.b	$28(a0),d0
0000BEFE D040                       		add.w	d0,d0
0000BF00 0240 000E                  		andi.w	#$E,d0
0000BF04 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000BF08 115A 0019                  		move.b	(a2)+,$19(a0)
0000BF0C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BF10 4A28 0028                  		tst.b	$28(a0)
0000BF14 6700                       		beq.s	Obj33_ChkGone
0000BF16 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000BF1C                            
0000BF1C                            Obj33_ChkGone:
0000BF1C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BF20 7000                       		moveq	#0,d0
0000BF22 1028 0023                  		move.b	$23(a0),d0
0000BF26 6700                       		beq.s	loc_BF6E
0000BF28 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BF2E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BF34 6600 0000                  		bne.w	DeleteObject
0000BF38                            
0000BF38                            loc_BF6E:				; XREF: Obj33_Index
0000BF38 4A28 0032                  		tst.b	$32(a0)
0000BF3C 6600 0000                  		bne.w	loc_C046
0000BF40 7200                       		moveq	#0,d1
0000BF42 1228 0019                  		move.b	$19(a0),d1
0000BF46 0641 000B                  		addi.w	#$B,d1
0000BF4A 343C 0010                  		move.w	#$10,d2
0000BF4E 363C 0011                  		move.w	#$11,d3
0000BF52 3828 0008                  		move.w	8(a0),d4
0000BF56 6100 0000                  		bsr.w	loc_C186
0000BF5A 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000BF60 6600                       		bne.s	loc_BFC6	; if not, branch
0000BF62 08A8 0007 0028             		bclr	#7,$28(a0)
0000BF68 3028 0008                  		move.w	8(a0),d0
0000BF6C 0C40 0A20                  		cmpi.w	#$A20,d0
0000BF70 6500                       		bcs.s	loc_BFC6
0000BF72 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000BF76 6400                       		bcc.s	loc_BFC6
0000BF78 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000BF7C 0440 001C                  		subi.w	#$1C,d0
0000BF80 3140 000C                  		move.w	d0,$C(a0)
0000BF84 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000BF8A 08E8 0007 0028             		bset	#7,$28(a0)
0000BF90                            
0000BF90                            loc_BFC6:
0000BF90 3028 0008                  		move.w	8(a0),d0
0000BF94 0240 FF80                  		andi.w	#$FF80,d0
0000BF98 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF9C 0441 0080                  		subi.w	#$80,d1
0000BFA0 0241 FF80                  		andi.w	#$FF80,d1
0000BFA4 9041                       		sub.w	d1,d0
0000BFA6 0C40 0280                  		cmpi.w	#$280,d0
0000BFAA 6200                       		bhi.s	loc_BFE6
0000BFAC 6000 0000                  		bra.w	DisplaySprite
0000BFB0                            ; ===========================================================================
0000BFB0                            
0000BFB0                            loc_BFE6:
0000BFB0 3028 0034                  		move.w	$34(a0),d0
0000BFB4 0240 FF80                  		andi.w	#$FF80,d0
0000BFB8 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFBC 0441 0080                  		subi.w	#$80,d1
0000BFC0 0241 FF80                  		andi.w	#$FF80,d1
0000BFC4 9041                       		sub.w	d1,d0
0000BFC6 0C40 0280                  		cmpi.w	#$280,d0
0000BFCA 6200                       		bhi.s	loc_C016
0000BFCC 3168 0034 0008             		move.w	$34(a0),8(a0)
0000BFD2 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000BFD8 117C 0004 0024             		move.b	#4,$24(a0)
0000BFDE 6000                       		bra.s	loc_C02C
0000BFE0                            ; ===========================================================================
0000BFE0                            
0000BFE0                            loc_C016:
0000BFE0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BFE4 7000                       		moveq	#0,d0
0000BFE6 1028 0023                  		move.b	$23(a0),d0
0000BFEA 6700                       		beq.s	loc_C028
0000BFEC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000BFF2                            
0000BFF2                            loc_C028:
0000BFF2 6000 0000                  		bra.w	DeleteObject
0000BFF6                            ; ===========================================================================
0000BFF6                            
0000BFF6                            loc_C02C:				; XREF: Obj33_Index
0000BFF6 6100 0000                  		bsr.w	ChkObjOnScreen2
0000BFFA 6700                       		beq.s	locret_C044
0000BFFC 117C 0002 0024             		move.b	#2,$24(a0)
0000C002 4228 0032                  		clr.b	$32(a0)
0000C006 4268 0010                  		clr.w	$10(a0)
0000C00A 4268 0012                  		clr.w	$12(a0)
0000C00E                            
0000C00E                            locret_C044:
0000C00E 4E75                       		rts	
0000C010                            ; ===========================================================================
0000C010                            
0000C010                            loc_C046:				; XREF: loc_BF6E
0000C010 3F28 0008                  		move.w	8(a0),-(sp)
0000C014 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C01A 6400                       		bcc.s	loc_C056
0000C01C 6100 0000                  		bsr.w	SpeedToPos
0000C020                            
0000C020                            loc_C056:
0000C020 0828 0001 0022             		btst	#1,$22(a0)
0000C026 6700                       		beq.s	loc_C0A0
0000C028 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C02E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C034 4A41                       		tst.w	d1
0000C036 6A00 0000                  		bpl.w	loc_C09E
0000C03A D368 000C                  		add.w	d1,$C(a0)
0000C03E 4268 0012                  		clr.w	$12(a0)
0000C042 08A8 0001 0022             		bclr	#1,$22(a0)
0000C048 3011                       		move.w	(a1),d0
0000C04A 0240 03FF                  		andi.w	#$3FF,d0
0000C04E 0C40 016A                  		cmpi.w	#$16A,d0
0000C052 6500                       		bcs.s	loc_C09E
0000C054 3028 0030                  		move.w	$30(a0),d0
0000C058 E640                       		asr.w	#3,d0
0000C05A 3140 0010                  		move.w	d0,$10(a0)
0000C05E 117C 0001 0032             		move.b	#1,$32(a0)
0000C064 4268 000E                  		clr.w	$E(a0)
0000C068                            
0000C068                            loc_C09E:
0000C068 6000                       		bra.s	loc_C0E6
0000C06A                            ; ===========================================================================
0000C06A                            
0000C06A                            loc_C0A0:
0000C06A 4A68 0010                  		tst.w	$10(a0)
0000C06E 6700 0000                  		beq.w	loc_C0D6
0000C072 6B00                       		bmi.s	loc_C0BC
0000C074 7600                       		moveq	#0,d3
0000C076 1628 0019                  		move.b	$19(a0),d3
0000C07A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C080 4A41                       		tst.w	d1		; has block touched a wall?
0000C082 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C084 6000                       		bra.s	loc_C0E6
0000C086                            ; ===========================================================================
0000C086                            
0000C086                            loc_C0BC:
0000C086 7600                       		moveq	#0,d3
0000C088 1628 0019                  		move.b	$19(a0),d3
0000C08C 4643                       		not.w	d3
0000C08E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C094 4A41                       		tst.w	d1		; has block touched a wall?
0000C096 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C098 6000                       		bra.s	loc_C0E6
0000C09A                            ; ===========================================================================
0000C09A                            
0000C09A                            Obj33_StopPush:
0000C09A 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C09E 6000                       		bra.s	loc_C0E6
0000C0A0                            ; ===========================================================================
0000C0A0                            
0000C0A0                            loc_C0D6:
0000C0A0 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C0A8 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C0AE 6400                       		bcc.s	loc_C104
0000C0B0                            
0000C0B0                            loc_C0E6:
0000C0B0 7200                       		moveq	#0,d1
0000C0B2 1228 0019                  		move.b	$19(a0),d1
0000C0B6 0641 000B                  		addi.w	#$B,d1
0000C0BA 343C 0010                  		move.w	#$10,d2
0000C0BE 363C 0011                  		move.w	#$11,d3
0000C0C2 381F                       		move.w	(sp)+,d4
0000C0C4 6100 0000                  		bsr.w	loc_C186
0000C0C8 6100                       		bsr.s	Obj33_ChkLava
0000C0CA 6000 FEC4                  		bra.w	loc_BFC6
0000C0CE                            ; ===========================================================================
0000C0CE                            
0000C0CE                            loc_C104:
0000C0CE 381F                       		move.w	(sp)+,d4
0000C0D0 43F8 D000                  		lea	($FFFFD000).w,a1
0000C0D4 08A9 0003 0022             		bclr	#3,$22(a1)
0000C0DA 08A8 0003 0022             		bclr	#3,$22(a0)
0000C0E0 6000 FECE                  		bra.w	loc_BFE6
0000C0E4                            ; ===========================================================================
0000C0E4                            
0000C0E4                            Obj33_ChkLava:
0000C0E4 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C0EA 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C0EC 343C FFE0                  		move.w	#-$20,d2
0000C0F0 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C0F6 6700                       		beq.s	Obj33_LoadLava
0000C0F8 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C0FE 6700                       		beq.s	Obj33_LoadLava
0000C100 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C106 6700                       		beq.s	Obj33_LoadLava
0000C108 4E75                       		rts	
0000C10A                            ; ===========================================================================
0000C10A                            
0000C10A                            Obj33_ChkLava2:
0000C10A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C110 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C112 343C 0020                  		move.w	#$20,d2
0000C116 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C11C 6700                       		beq.s	Obj33_LoadLava
0000C11E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C124 6700                       		beq.s	Obj33_LoadLava
0000C126                            
0000C126                            Obj33_NoLava:
0000C126 4E75                       		rts	
0000C128                            ; ===========================================================================
0000C128                            
0000C128                            Obj33_LoadLava:
0000C128 6100 0000                  		bsr.w	SingleObjLoad
0000C12C 6600                       		bne.s	locret_C184
0000C12E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C132 3368 0008 0008             		move.w	8(a0),8(a1)
0000C138 D569 0008                  		add.w	d2,8(a1)
0000C13C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C142 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C148 2348 003C                  		move.l	a0,$3C(a1)
0000C14C                            
0000C14C                            locret_C184:
0000C14C 4E75                       		rts	
0000C14E                            ; ===========================================================================
0000C14E                            
0000C14E                            loc_C186:				; XREF: loc_BF6E
0000C14E 1028 0025                  		move.b	$25(a0),d0
0000C152 6700 0000                  		beq.w	loc_C218
0000C156 5500                       		subq.b	#2,d0
0000C158 6600                       		bne.s	loc_C1AA
0000C15A 6100 B458                  		bsr.w	ExitPlatform
0000C15E 0829 0003 0022             		btst	#3,$22(a1)
0000C164 6600                       		bne.s	loc_C1A4
0000C166 4228 0025                  		clr.b	$25(a0)
0000C16A 4E75                       		rts	
0000C16C                            ; ===========================================================================
0000C16C                            
0000C16C                            loc_C1A4:
0000C16C 3404                       		move.w	d4,d2
0000C16E 6000 B9A2                  		bra.w	MvSonicOnPtfm
0000C172                            ; ===========================================================================
0000C172                            
0000C172                            loc_C1AA:
0000C172 5500                       		subq.b	#2,d0
0000C174 6600                       		bne.s	loc_C1F2
0000C176 6100 0000                  		bsr.w	SpeedToPos
0000C17A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C180 4EB9 0000 0000             		jsr	ObjHitFloor
0000C186 4A41                       		tst.w	d1
0000C188 6A00 0000                  		bpl.w	locret_C1F0
0000C18C D368 000C                  		add.w	d1,$C(a0)
0000C190 4268 0012                  		clr.w	$12(a0)
0000C194 4228 0025                  		clr.b	$25(a0)
0000C198 3011                       		move.w	(a1),d0
0000C19A 0240 03FF                  		andi.w	#$3FF,d0
0000C19E 0C40 016A                  		cmpi.w	#$16A,d0
0000C1A2 6500                       		bcs.s	locret_C1F0
0000C1A4 3028 0030                  		move.w	$30(a0),d0
0000C1A8 E640                       		asr.w	#3,d0
0000C1AA 3140 0010                  		move.w	d0,$10(a0)
0000C1AE 117C 0001 0032             		move.b	#1,$32(a0)
0000C1B4 4268 000E                  		clr.w	$E(a0)
0000C1B8                            
0000C1B8                            locret_C1F0:
0000C1B8 4E75                       		rts	
0000C1BA                            ; ===========================================================================
0000C1BA                            
0000C1BA                            loc_C1F2:
0000C1BA 6100 0000                  		bsr.w	SpeedToPos
0000C1BE 3028 0008                  		move.w	8(a0),d0
0000C1C2 0240 000C                  		andi.w	#$C,d0
0000C1C6 6600 0000                  		bne.w	locret_C2E4
0000C1CA 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C1D0 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C1D6 4268 0010                  		clr.w	$10(a0)
0000C1DA 5528 0025                  		subq.b	#2,$25(a0)
0000C1DE 4E75                       		rts	
0000C1E0                            ; ===========================================================================
0000C1E0                            
0000C1E0                            loc_C218:
0000C1E0 6100 0000                  		bsr.w	loc_FAC8
0000C1E4 4A44                       		tst.w	d4
0000C1E6 6700 0000                  		beq.w	locret_C2E4
0000C1EA 6B00 0000                  		bmi.w	locret_C2E4
0000C1EE 4A28 0032                  		tst.b	$32(a0)
0000C1F2 6700                       		beq.s	loc_C230
0000C1F4 6000 0000                  		bra.w	locret_C2E4
0000C1F8                            ; ===========================================================================
0000C1F8                            
0000C1F8                            loc_C230:
0000C1F8 4A40                       		tst.w	d0
0000C1FA 6700 0000                  		beq.w	locret_C2E4
0000C1FE 6B00                       		bmi.s	loc_C268
0000C200 0829 0000 0022             		btst	#0,$22(a1)
0000C206 6600 0000                  		bne.w	locret_C2E4
0000C20A 3F00                       		move.w	d0,-(sp)
0000C20C 7600                       		moveq	#0,d3
0000C20E 1628 0019                  		move.b	$19(a0),d3
0000C212 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C218 301F                       		move.w	(sp)+,d0
0000C21A 4A41                       		tst.w	d1
0000C21C 6B00 0000                  		bmi.w	locret_C2E4
0000C220 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C228 7001                       		moveq	#1,d0
0000C22A 323C 0040                  		move.w	#$40,d1
0000C22E 6000                       		bra.s	loc_C294
0000C230                            ; ===========================================================================
0000C230                            
0000C230                            loc_C268:
0000C230 0829 0000 0022             		btst	#0,$22(a1)
0000C236 6700                       		beq.s	locret_C2E4
0000C238 3F00                       		move.w	d0,-(sp)
0000C23A 7600                       		moveq	#0,d3
0000C23C 1628 0019                  		move.b	$19(a0),d3
0000C240 4643                       		not.w	d3
0000C242 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C248 301F                       		move.w	(sp)+,d0
0000C24A 4A41                       		tst.w	d1
0000C24C 6B00                       		bmi.s	locret_C2E4
0000C24E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C256 70FF                       		moveq	#-1,d0
0000C258 323C FFC0                  		move.w	#-$40,d1
0000C25C                            
0000C25C                            loc_C294:
0000C25C 43F8 D000                  		lea	($FFFFD000).w,a1
0000C260 D169 0008                  		add.w	d0,8(a1)
0000C264 3341 0014                  		move.w	d1,$14(a1)
0000C268 337C 0000 0010             		move.w	#0,$10(a1)
0000C26E 3F00                       		move.w	d0,-(sp)
0000C270 303C 00A7                  		move.w	#$A7,d0
0000C274 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C27A 301F                       		move.w	(sp)+,d0
0000C27C 4A28 0028                  		tst.b	$28(a0)
0000C280 6B00                       		bmi.s	locret_C2E4
0000C282 3F00                       		move.w	d0,-(sp)
0000C284 4EB9 0000 0000             		jsr	ObjHitFloor
0000C28A 301F                       		move.w	(sp)+,d0
0000C28C 0C41 0004                  		cmpi.w	#4,d1
0000C290 6F00                       		ble.s	loc_C2E0
0000C292 317C 0400 0010             		move.w	#$400,$10(a0)
0000C298 4A40                       		tst.w	d0
0000C29A 6A00                       		bpl.s	loc_C2D8
0000C29C 4468 0010                  		neg.w	$10(a0)
0000C2A0                            
0000C2A0                            loc_C2D8:
0000C2A0 117C 0006 0025             		move.b	#6,$25(a0)
0000C2A6 6000                       		bra.s	locret_C2E4
0000C2A8                            ; ===========================================================================
0000C2A8                            
0000C2A8                            loc_C2E0:
0000C2A8 D368 000C                  		add.w	d1,$C(a0)
0000C2AC                            
0000C2AC                            locret_C2E4:
0000C2AC 4E75                       		rts	
0000C2AE                            ; ===========================================================================
0000C2AE                            ; ---------------------------------------------------------------------------
0000C2AE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C2AE                            ; ---------------------------------------------------------------------------
0000C2AE                            Map_obj33:
0000C2AE                            	include "_maps\obj33.asm"
0000C2AE                            ; ---------------------------------------------------------------------------
0000C2AE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C2AE                            ; ---------------------------------------------------------------------------
0000C2AE 0000                       		dc.w byte_C2EA-Map_obj33
0000C2B0 0000                       		dc.w byte_C2F0-Map_obj33
0000C2B2 01                         byte_C2EA:	dc.b 1
0000C2B3 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C2B8 04                         byte_C2F0:	dc.b 4
0000C2B9 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C2BE F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C2C3 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C2C8 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C2CE 00                         		even
0000C2CE 00                         		even
0000C2CE                            
0000C2CE                            ; ===========================================================================
0000C2CE                            ; ---------------------------------------------------------------------------
0000C2CE                            ; Object 34 - zone title cards
0000C2CE                            ; ---------------------------------------------------------------------------
0000C2CE                            
0000C2CE                            Obj34:					; XREF: Obj_Index
0000C2CE 7000                       		moveq	#0,d0
0000C2D0 1028 0024                  		move.b	$24(a0),d0
0000C2D4 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C2D8 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C2DC                            ; ===========================================================================
0000C2DC 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C2DE 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C2E0 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C2E2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C2E4                            ; ===========================================================================
0000C2E4                            
0000C2E4                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C2E4 2248                       		movea.l	a0,a1
0000C2E6 7000                       		moveq	#0,d0
0000C2E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C2EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C2F2 6600                       		bne.s	Obj34_CheckFZ
0000C2F4 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C2F6                            
0000C2F6                            Obj34_CheckFZ:
0000C2F6 3400                       		move.w	d0,d2
0000C2F8 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C2FE 6600                       		bne.s	Obj34_LoadConfig
0000C300 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C302 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C304                            
0000C304                            Obj34_LoadConfig:
0000C304 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C30A E948                       		lsl.w	#4,d0
0000C30C D6C0                       		adda.w	d0,a3
0000C30E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C314 7203                       		moveq	#3,d1
0000C316                            
0000C316                            Obj34_Loop:
0000C316 12BC 0034                  		move.b	#$34,0(a1)
0000C31A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C31E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C322 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C326 335A 000A                  		move.w	(a2)+,$A(a1)
0000C32A 135A 0024                  		move.b	(a2)+,$24(a1)
0000C32E 101A                       		move.b	(a2)+,d0
0000C330 6600                       		bne.s	Obj34_ActNumber
0000C332 1002                       		move.b	d2,d0
0000C334                            
0000C334                            Obj34_ActNumber:
0000C334 0C00 0007                  		cmpi.b	#7,d0
0000C338 6600                       		bne.s	Obj34_MakeSprite
0000C33A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C33E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C344 6600                       		bne.s	Obj34_MakeSprite
0000C346 5300                       		subq.b	#1,d0
0000C348                            
0000C348                            Obj34_MakeSprite:
0000C348 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C34C 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C354 337C 8580 0002             		move.w	#$8580,2(a1)
0000C35A 137C 0078 0019             		move.b	#$78,$19(a1)
0000C360 137C 0000 0001             		move.b	#0,1(a1)
0000C366 137C 0000 0018             		move.b	#0,$18(a1)
0000C36C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C372 43E9 0040                  		lea	$40(a1),a1	; next object
0000C376 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C37A                            
0000C37A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C37A 7210                       		moveq	#$10,d1		; set horizontal speed
0000C37C 3028 0030                  		move.w	$30(a0),d0
0000C380 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C384 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C386 6C00                       		bge.s	Obj34_Move
0000C388 4441                       		neg.w	d1
0000C38A                            
0000C38A                            Obj34_Move:
0000C38A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C38E                            
0000C38E                            loc_C3C8:
0000C38E 3028 0008                  		move.w	8(a0),d0
0000C392 6B00                       		bmi.s	locret_C3D8
0000C394 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C398 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C39A 6000 0000                  		bra.w	DisplaySprite
0000C39E                            ; ===========================================================================
0000C39E                            
0000C39E                            locret_C3D8:
0000C39E 4E75                       		rts	
0000C3A0                            ; ===========================================================================
0000C3A0                            
0000C3A0                            Obj34_Wait:				; XREF: Obj34_Index
0000C3A0 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C3A4 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C3A6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C3AA 6000 0000                  		bra.w	DisplaySprite
0000C3AE                            ; ===========================================================================
0000C3AE                            
0000C3AE                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C3AE 4A28 0001                  		tst.b	1(a0)
0000C3B2 6A00                       		bpl.s	Obj34_ChangeArt
0000C3B4 7220                       		moveq	#$20,d1
0000C3B6 3028 0032                  		move.w	$32(a0),d0
0000C3BA B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C3BE 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C3C0 6C00                       		bge.s	Obj34_Move2
0000C3C2 4441                       		neg.w	d1
0000C3C4                            
0000C3C4                            Obj34_Move2:
0000C3C4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C3C8 3028 0008                  		move.w	8(a0),d0
0000C3CC 6B00                       		bmi.s	locret_C412
0000C3CE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C3D2 6400                       		bcc.s	locret_C412	; if yes, branch
0000C3D4 6000 0000                  		bra.w	DisplaySprite
0000C3D8                            ; ===========================================================================
0000C3D8                            
0000C3D8                            locret_C412:
0000C3D8 4E75                       		rts	
0000C3DA                            ; ===========================================================================
0000C3DA                            
0000C3DA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C3DA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C3E0 6600                       		bne.s	Obj34_Delete
0000C3E2 7002                       		moveq	#2,d0
0000C3E4 4EB9 0000 1540             		jsr	(LoadPLC).l	; load explosion patterns
0000C3EA 7000                       		moveq	#0,d0
0000C3EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3F0 0640 0015                  		addi.w	#$15,d0
0000C3F4 4EB9 0000 1540             		jsr	(LoadPLC).l	; load animal patterns
0000C3FA                            
0000C3FA                            Obj34_Delete:
0000C3FA 6000 0000                  		bra.w	DeleteObject
0000C3FE                            ; ===========================================================================
0000C3FE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C400 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C402 00E4                       		dc.w $E4
0000C404 0206                       		dc.b 2,	6
0000C406 00EA                       		dc.w $EA
0000C408 0207                       		dc.b 2,	7
0000C40A 00E0                       		dc.w $E0
0000C40C 020A                       		dc.b 2,	$A
0000C40E                            ; ---------------------------------------------------------------------------
0000C40E                            ; Title	card configuration data
0000C40E                            ; Format:
0000C40E                            ; 4 bytes per item (YYYY XXXX)
0000C40E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C40E                            ; ---------------------------------------------------------------------------
0000C40E 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C41E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C42E 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C43E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C44E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C45E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C46E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C47E                            ; ===========================================================================
0000C47E                            ; ---------------------------------------------------------------------------
0000C47E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C47E                            ; ---------------------------------------------------------------------------
0000C47E                            
0000C47E                            Obj39:					; XREF: Obj_Index
0000C47E 7000                       		moveq	#0,d0
0000C480 1028 0024                  		move.b	$24(a0),d0
0000C484 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C488 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C48C                            ; ===========================================================================
0000C48C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C48E 0000                       		dc.w loc_C50C-Obj39_Index
0000C490 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C492                            ; ===========================================================================
0000C492                            
0000C492                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C492 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C496 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C498 4E75                       		rts	
0000C49A                            ; ===========================================================================
0000C49A                            
0000C49A                            Obj39_Main:
0000C49A 5428 0024                  		addq.b	#2,$24(a0)
0000C49E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C4A4 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C4AA 6700                       		beq.s	loc_C4EC	; if not, branch
0000C4AC 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C4B2                            
0000C4B2                            loc_C4EC:
0000C4B2 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C4B8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C4C0 317C 855E 0002             		move.w	#$855E,2(a0)
0000C4C6 117C 0000 0001             		move.b	#0,1(a0)
0000C4CC 117C 0000 0018             		move.b	#0,$18(a0)
0000C4D2                            
0000C4D2                            loc_C50C:				; XREF: Obj39_Index
0000C4D2 7210                       		moveq	#$10,d1		; set horizontal speed
0000C4D4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C4DA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C4DC 6500                       		bcs.s	Obj39_Move
0000C4DE 4441                       		neg.w	d1
0000C4E0                            
0000C4E0                            Obj39_Move:
0000C4E0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4E4 6000 0000                  		bra.w	DisplaySprite
0000C4E8                            ; ===========================================================================
0000C4E8                            
0000C4E8                            Obj39_SetWait:				; XREF: Obj39_Main
0000C4E8 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C4EE 5428 0024                  		addq.b	#2,$24(a0)
0000C4F2 4E75                       		rts	
0000C4F4                            ; ===========================================================================
0000C4F4                            
0000C4F4                            Obj39_Wait:				; XREF: Obj39_Index
0000C4F4 1038 F605                  		move.b	($FFFFF605).w,d0
0000C4F8 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C4FC 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C4FE 0828 0000 001A             		btst	#0,$1A(a0)
0000C504 6600                       		bne.s	Obj39_Display
0000C506 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C50A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C50C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C510 6000 0000                  		bra.w	DisplaySprite
0000C514                            ; ===========================================================================
0000C514                            
0000C514                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C514 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C518 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C51A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C520 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C524 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C526 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C52C 6000                       		bra.s	Obj39_Display
0000C52E                            ; ===========================================================================
0000C52E                            
0000C52E                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C52E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C534                            
0000C534                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C534 6000 0000                  		bra.w	DisplaySprite
0000C538                            ; ===========================================================================
0000C538                            ; ---------------------------------------------------------------------------
0000C538                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C538                            ; ---------------------------------------------------------------------------
0000C538                            
0000C538                            Obj3A:					; XREF: Obj_Index
0000C538 7000                       		moveq	#0,d0
0000C53A 1028 0024                  		move.b	$24(a0),d0
0000C53E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C542 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C546                            ; ===========================================================================
0000C546 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C548 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C54A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C54C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C54E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C550 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C552 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C554 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C556 0000                       		dc.w loc_C766-Obj3A_Index
0000C558                            ; ===========================================================================
0000C558                            
0000C558                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C558 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C55C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C55E 4E75                       		rts	
0000C560                            ; ===========================================================================
0000C560                            
0000C560                            Obj3A_Main:
0000C560 2248                       		movea.l	a0,a1
0000C562 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C568 7206                       		moveq	#6,d1
0000C56A                            
0000C56A                            Obj3A_Loop:
0000C56A 12BC 003A                  		move.b	#$3A,0(a1)
0000C56E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C572 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C576 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C57A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C57E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C582 101A                       		move.b	(a2)+,d0
0000C584 0C00 0006                  		cmpi.b	#6,d0
0000C588 6600                       		bne.s	loc_C5CA
0000C58A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C58E                            
0000C58E                            loc_C5CA:
0000C58E 1340 001A                  		move.b	d0,$1A(a1)
0000C592 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C59A 337C 8580 0002             		move.w	#$8580,2(a1)
0000C5A0 137C 0000 0001             		move.b	#0,1(a1)
0000C5A6 43E9 0040                  		lea	$40(a1),a1
0000C5AA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C5AE                            
0000C5AE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C5AE 7210                       		moveq	#$10,d1		; set horizontal speed
0000C5B0 3028 0030                  		move.w	$30(a0),d0
0000C5B4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C5B8 6700                       		beq.s	loc_C61A	; if yes, branch
0000C5BA 6C00                       		bge.s	Obj3A_Move
0000C5BC 4441                       		neg.w	d1
0000C5BE                            
0000C5BE                            Obj3A_Move:
0000C5BE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5C2                            
0000C5C2                            loc_C5FE:				; XREF: loc_C61A
0000C5C2 3028 0008                  		move.w	8(a0),d0
0000C5C6 6B00                       		bmi.s	locret_C60E
0000C5C8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C5CC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C5CE 6000 0000                  		bra.w	DisplaySprite
0000C5D2                            ; ===========================================================================
0000C5D2                            
0000C5D2                            locret_C60E:
0000C5D2 4E75                       		rts	
0000C5D4                            ; ===========================================================================
0000C5D4                            
0000C5D4                            loc_C610:				; XREF: loc_C61A
0000C5D4 117C 000E 0024             		move.b	#$E,$24(a0)
0000C5DA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C5DE                            ; ===========================================================================
0000C5DE                            
0000C5DE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C5DE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C5E4 67EE                       		beq.s	loc_C610
0000C5E6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C5EC 66D4                       		bne.s	loc_C5FE
0000C5EE 5428 0024                  		addq.b	#2,$24(a0)
0000C5F2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C5F8                            
0000C5F8                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C5F8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C5FC 6600                       		bne.s	Obj3A_Display
0000C5FE 5428 0024                  		addq.b	#2,$24(a0)
0000C602                            
0000C602                            Obj3A_Display:
0000C602 6000 0000                  		bra.w	DisplaySprite
0000C606                            ; ===========================================================================
0000C606                            
0000C606                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C606 6100 0000                  		bsr.w	DisplaySprite
0000C60A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C610 7000                       		moveq	#0,d0
0000C612 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C616 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C618 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C61C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C622                            
0000C622                            Obj3A_RingBonus:
0000C622 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C626 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C628 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C62C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C632                            
0000C632                            Obj3A_ChkBonus:
0000C632 4A40                       		tst.w	d0		; is there any bonus?
0000C634 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C636 303C 00C5                  		move.w	#$C5,d0
0000C63A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C640 5428 0024                  		addq.b	#2,$24(a0)
0000C644 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C64A 6600                       		bne.s	Obj3A_SetDelay
0000C64C 5828 0024                  		addq.b	#4,$24(a0)
0000C650                            
0000C650                            Obj3A_SetDelay:
0000C650 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C656                            
0000C656                            locret_C692:
0000C656 4E75                       		rts	
0000C658                            ; ===========================================================================
0000C658                            
0000C658                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C658 4EB9 0000 0000             		jsr	AddPoints
0000C65E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C662 0200 0003                  		andi.b	#3,d0
0000C666 66EE                       		bne.s	locret_C692
0000C668 303C 00CD                  		move.w	#$CD,d0
0000C66C 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C672                            ; ===========================================================================
0000C672                            
0000C672                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C672 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C676 0240 0007                  		andi.w	#7,d0
0000C67A E748                       		lsl.w	#3,d0
0000C67C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C680 0241 0003                  		andi.w	#3,d1
0000C684 D241                       		add.w	d1,d1
0000C686 D041                       		add.w	d1,d0
0000C688 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C68C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C690 4A40                       		tst.w	d0
0000C692 6600                       		bne.s	Obj3A_ChkSS
0000C694 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C69A 6000                       		bra.s	Obj3A_Display2
0000C69C                            ; ===========================================================================
0000C69C                            
0000C69C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C69C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C6A0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C6A4 6700                       		beq.s	loc_C6EA	; if not, branch
0000C6A6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C6AC 6000                       		bra.s	Obj3A_Display2
0000C6AE                            ; ===========================================================================
0000C6AE                            
0000C6AE                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C6AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C6B4                            
0000C6B4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C6B4 6000 0000                  		bra.w	DisplaySprite
0000C6B8                            ; ===========================================================================
0000C6B8                            ; ---------------------------------------------------------------------------
0000C6B8                            ; Level	order array
0000C6B8                            ; ---------------------------------------------------------------------------
0000C6B8                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C6E8                            		even
0000C6E8                            ; ===========================================================================
0000C6E8                            
0000C6E8                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C6E8 7220                       		moveq	#$20,d1		; set horizontal speed
0000C6EA 3028 0032                  		move.w	$32(a0),d0
0000C6EE B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C6F2 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C6F4 6C00                       		bge.s	Obj3A_Move2
0000C6F6 4441                       		neg.w	d1
0000C6F8                            
0000C6F8                            Obj3A_Move2:
0000C6F8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6FC 3028 0008                  		move.w	8(a0),d0
0000C700 6B00                       		bmi.s	locret_C748
0000C702 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C706 6400                       		bcc.s	locret_C748	; if yes, branch
0000C708 6000 0000                  		bra.w	DisplaySprite
0000C70C                            ; ===========================================================================
0000C70C                            
0000C70C                            locret_C748:
0000C70C 4E75                       		rts	
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C70E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C714 6600 0000                  		bne.w	DeleteObject
0000C718 5428 0024                  		addq.b	#2,$24(a0)
0000C71C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C720 303C 0093                  		move.w	#$93,d0
0000C724 4EF9 0000 12C6             		jmp	(PlaySound).l	; play FZ music
0000C72A                            ; ===========================================================================
0000C72A                            
0000C72A                            loc_C766:				; XREF: Obj3A_Index
0000C72A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C72E 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C734 6700 0000                  		beq.w	DeleteObject
0000C738 4E75                       		rts	
0000C73A                            ; ===========================================================================
0000C73A 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C740 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C742 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C748 0201                       		dc.b 2,	1
0000C74A 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C750 0206                       		dc.b 2,	6
0000C752 0520 0120 00EC             		dc.w $520, $120, $EC
0000C758 0202                       		dc.b 2,	2
0000C75A 0540 0120 00FC             		dc.w $540, $120, $FC
0000C760 0203                       		dc.b 2,	3
0000C762 0560 0120 010C             		dc.w $560, $120, $10C
0000C768 0204                       		dc.b 2,	4
0000C76A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C770 0205                       		dc.b 2,	5
0000C772                            ; ===========================================================================
0000C772                            ; ---------------------------------------------------------------------------
0000C772                            ; Object 7E - special stage results screen
0000C772                            ; ---------------------------------------------------------------------------
0000C772                            
0000C772                            Obj7E:					; XREF: Obj_Index
0000C772 7000                       		moveq	#0,d0
0000C774 1028 0024                  		move.b	$24(a0),d0
0000C778 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C77C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C780                            ; ===========================================================================
0000C780 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C782 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C784 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C786 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C788 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C78A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C78C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C78E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C790 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C792 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C794 0000                       		dc.w loc_C91A-Obj7E_Index
0000C796                            ; ===========================================================================
0000C796                            
0000C796                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C796 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C79A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C79C 4E75                       		rts	
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            Obj7E_Main:
0000C79E 2248                       		movea.l	a0,a1
0000C7A0 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C7A6 7203                       		moveq	#3,d1
0000C7A8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C7AE 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C7B0 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C7B2                            
0000C7B2                            Obj7E_Loop:
0000C7B2 12BC 007E                  		move.b	#$7E,0(a1)
0000C7B6 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C7BA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C7BE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C7C2 135A 0024                  		move.b	(a2)+,$24(a1)
0000C7C6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C7CA 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C7D2 337C 8580 0002             		move.w	#$8580,2(a1)
0000C7D8 137C 0000 0001             		move.b	#0,1(a1)
0000C7DE 43E9 0040                  		lea	$40(a1),a1
0000C7E2 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C7E6                            
0000C7E6 7007                       		moveq	#7,d0
0000C7E8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C7EC 6700                       		beq.s	loc_C842
0000C7EE 7000                       		moveq	#0,d0
0000C7F0 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C7F4 6600                       		bne.s	loc_C842	; if not, branch
0000C7F6 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C7F8 317C 0018 0008             		move.w	#$18,8(a0)
0000C7FE 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C804                            
0000C804                            loc_C842:
0000C804 1140 001A                  		move.b	d0,$1A(a0)
0000C808                            
0000C808                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C808 7210                       		moveq	#$10,d1		; set horizontal speed
0000C80A 3028 0030                  		move.w	$30(a0),d0
0000C80E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C812 6700                       		beq.s	loc_C86C	; if yes, branch
0000C814 6C00                       		bge.s	Obj7E_Move
0000C816 4441                       		neg.w	d1
0000C818                            
0000C818                            Obj7E_Move:
0000C818 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C81C                            
0000C81C                            loc_C85A:				; XREF: loc_C86C
0000C81C 3028 0008                  		move.w	8(a0),d0
0000C820 6B00                       		bmi.s	locret_C86A
0000C822 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C826 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C828 6000 0000                  		bra.w	DisplaySprite
0000C82C                            ; ===========================================================================
0000C82C                            
0000C82C                            locret_C86A:
0000C82C 4E75                       		rts	
0000C82E                            ; ===========================================================================
0000C82E                            
0000C82E                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C82E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C834 66E6                       		bne.s	loc_C85A
0000C836 5428 0024                  		addq.b	#2,$24(a0)
0000C83A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C840 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C846                            
0000C846                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C846 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C84A 6600                       		bne.s	Obj7E_Display
0000C84C 5428 0024                  		addq.b	#2,$24(a0)
0000C850                            
0000C850                            Obj7E_Display:
0000C850 6000 0000                  		bra.w	DisplaySprite
0000C854                            ; ===========================================================================
0000C854                            
0000C854                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C854 6100 0000                  		bsr.w	DisplaySprite
0000C858 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C85E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C862 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C864 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C86A 700A                       		moveq	#10,d0		; add 10 to score
0000C86C 4EB9 0000 0000             		jsr	AddPoints
0000C872 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C876 0200 0003                  		andi.b	#3,d0
0000C87A 6600                       		bne.s	locret_C8EA
0000C87C 303C 00CD                  		move.w	#$CD,d0
0000C880 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C886                            ; ===========================================================================
0000C886                            
0000C886                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C886 303C 00C5                  		move.w	#$C5,d0
0000C88A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C890 5428 0024                  		addq.b	#2,$24(a0)
0000C894 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C89A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C8A0 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C8A2 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C8A8 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C8AC                            
0000C8AC                            locret_C8EA:
0000C8AC 4E75                       		rts	
0000C8AE                            ; ===========================================================================
0000C8AE                            
0000C8AE                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C8AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C8B4 6000 0000                  		bra.w	DisplaySprite
0000C8B8                            ; ===========================================================================
0000C8B8                            
0000C8B8                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C8B8 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C8BE 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C8C4 303C 00BF                  		move.w	#$BF,d0
0000C8C8 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play continues music
0000C8CE 5428 0024                  		addq.b	#2,$24(a0)
0000C8D2 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C8D8 6000 0000                  		bra.w	DisplaySprite
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            loc_C91A:				; XREF: Obj7E_Index
0000C8DC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C8E0 0200 000F                  		andi.b	#$F,d0
0000C8E4 6600                       		bne.s	Obj7E_Display2
0000C8E6 0868 0000 001A             		bchg	#0,$1A(a0)
0000C8EC                            
0000C8EC                            Obj7E_Display2:
0000C8EC 6000 0000                  		bra.w	DisplaySprite
0000C8F0                            ; ===========================================================================
0000C8F0 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C8F6 0200                       		dc.b 2,	0		; rountine number, frame number
0000C8F8 0320 0120 0118             		dc.w $320, $120, $118
0000C8FE 0201                       		dc.b 2,	1
0000C900 0360 0120 0128             		dc.w $360, $120, $128
0000C906 0202                       		dc.b 2,	2
0000C908 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000C90E 0203                       		dc.b 2,	3
0000C910 03A0 0120 0138             		dc.w $3A0, $120, $138
0000C916 0206                       		dc.b 2,	6
0000C918                            ; ===========================================================================
0000C918                            ; ---------------------------------------------------------------------------
0000C918                            ; Object 7F - chaos emeralds from the special stage results screen
0000C918                            ; ---------------------------------------------------------------------------
0000C918                            
0000C918                            Obj7F:					; XREF: Obj_Index
0000C918 7000                       		moveq	#0,d0
0000C91A 1028 0024                  		move.b	$24(a0),d0
0000C91E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000C922 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000C926                            ; ===========================================================================
0000C926 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000C928 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000C92A                            
0000C92A                            ; ---------------------------------------------------------------------------
0000C92A                            ; X-axis positions for chaos emeralds
0000C92A                            ; ---------------------------------------------------------------------------
0000C92A 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000C936                            ; ===========================================================================
0000C936                            
0000C936                            Obj7F_Main:				; XREF: Obj7F_Index
0000C936 2248                       		movea.l	a0,a1
0000C938 45F9 0000 C92A             		lea	(Obj7F_PosData).l,a2
0000C93E 7400                       		moveq	#0,d2
0000C940 7200                       		moveq	#0,d1
0000C942 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000C946 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000C948 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000C94C                            
0000C94C                            Obj7F_Loop:
0000C94C 12BC 007F                  		move.b	#$7F,0(a1)
0000C950 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000C954 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000C95A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000C95E 1633 2000                  		move.b	(a3,d2.w),d3
0000C962 1343 001A                  		move.b	d3,$1A(a1)
0000C966 1343 001C                  		move.b	d3,$1C(a1)
0000C96A 5202                       		addq.b	#1,d2
0000C96C 5429 0024                  		addq.b	#2,$24(a1)
0000C970 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000C978 337C 8541 0002             		move.w	#$8541,2(a1)
0000C97E 137C 0000 0001             		move.b	#0,1(a1)
0000C984 43E9 0040                  		lea	$40(a1),a1	; next object
0000C988 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000C98C                            
0000C98C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000C98C 1028 001A                  		move.b	$1A(a0),d0
0000C990 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000C996 0C00 0006                  		cmpi.b	#6,d0
0000C99A 6600                       		bne.s	Obj7F_Display
0000C99C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000C9A2                            
0000C9A2                            Obj7F_Display:
0000C9A2 6000 0000                  		bra.w	DisplaySprite
0000C9A6                            ; ===========================================================================
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            ; Sprite mappings - zone title cards
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000C9A8 0000                       		dc.w byte_CA2C-Map_obj34
0000C9AA 0000                       		dc.w byte_CA5A-Map_obj34
0000C9AC 0000                       		dc.w byte_CA7A-Map_obj34
0000C9AE 0000                       		dc.w byte_CAA8-Map_obj34
0000C9B0 0000                       		dc.w byte_CADC-Map_obj34
0000C9B2 0000                       		dc.w byte_CB10-Map_obj34
0000C9B4 0000                       		dc.w byte_CB26-Map_obj34
0000C9B6 0000                       		dc.w byte_CB31-Map_obj34
0000C9B8 0000                       		dc.w byte_CB3C-Map_obj34
0000C9BA 0000                       		dc.w byte_CB47-Map_obj34
0000C9BC 0000                       		dc.w byte_CB8A-Map_obj34
0000C9BE                            ; Vladikcomper: Title Cards mappins data moved to files to perform easy 
0000C9BE                            ;               mappings editing for S1 Hacking Studio 
0000C9BE                            byte_C9FE:      incbin   "ttlcards\0.bin"
0000C9FB                            byte_CA2C:      incbin   "ttlcards\1.bin"
0000CA10                            byte_CA5A:	incbin   "ttlcards\2.bin" ; 6-dc0
0000CA2A                            byte_CA7A:	incbin   "ttlcards\3.bin"
0000CA53                            byte_CAA8:	incbin   "ttlcards\4.bin" ; A-dc0
0000CA86                            byte_CADC:	incbin   "ttlcards\5.bin" ; A-dc0
0000CAB9 04                         byte_CB10:	dc.b 4			; ZONE
0000CABA F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CABF F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CAC4 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CAC9 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CACE 00                         		dc.b 0
0000CACF 02                         byte_CB26:	dc.b 2			; ACT 1
0000CAD0 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAD5 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CADA 02                         byte_CB31:	dc.b 2			; ACT 2
0000CADB 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAE0 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CAE5 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CAE6 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAEB F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CAF0 0D                         byte_CB47:	dc.b $D			; Oval
0000CAF1 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CAF6 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CAFB EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CB00 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CB05 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CB0A 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CB0F 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CB14 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CB19 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CB1E F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CB23 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CB28 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CB2D 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CB32 00                         		dc.b 0
0000CB33                            byte_CB8A:	incbin   "ttlcards\6.bin"
0000CB4E 00                         		even
0000CB4E                            ; ---------------------------------------------------------------------------
0000CB4E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CB4E                            ; ---------------------------------------------------------------------------
0000CB4E                            Map_obj39:
0000CB4E                            	include "_maps\obj39.asm"
0000CB4E                            ; ---------------------------------------------------------------------------
0000CB4E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CB4E                            ; ---------------------------------------------------------------------------
0000CB4E 0000                       		dc.w byte_CBAC-Map_obj39
0000CB50 0000                       		dc.w byte_CBB7-Map_obj39
0000CB52 0000                       		dc.w byte_CBC2-Map_obj39
0000CB54 0000                       		dc.w byte_CBCD-Map_obj39
0000CB56 02                         byte_CBAC:	dc.b 2
0000CB57 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CB5C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CB61 02                         byte_CBB7:	dc.b 2
0000CB62 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CB67 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CB6C 02                         byte_CBC2:	dc.b 2
0000CB6D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CB72 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CB77 02                         byte_CBCD:	dc.b 2
0000CB78 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CB7D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CB82                            		even
0000CB82                            		even
0000CB82                            
0000CB82                            ; ---------------------------------------------------------------------------
0000CB82                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CB82                            ; ---------------------------------------------------------------------------
0000CB82 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CB84 0000                       		dc.w byte_CC13-Map_obj3A
0000CB86 0000                       		dc.w byte_CC32-Map_obj3A
0000CB88 0000                       		dc.w byte_CC51-Map_obj3A
0000CB8A 0000                       		dc.w byte_CC75-Map_obj3A
0000CB8C FF6E                       		dc.w byte_CB47-Map_obj3A
0000CB8E FF4D                       		dc.w byte_CB26-Map_obj3A
0000CB90 FF58                       		dc.w byte_CB31-Map_obj3A
0000CB92 FF63                       		dc.w byte_CB3C-Map_obj3A
0000CB94 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000CB95 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000CB9A F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000CB9F F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000CBA4 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000CBA9 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000CBAE F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000CBB3 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000CBB8 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000CBBD 06                         byte_CC13:	dc.b 6			; PASSED
0000CBBE F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CBC3 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CBC8 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CBCD F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CBD2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CBD7 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CBDC 06                         byte_CC32:	dc.b 6			; SCORE
0000CBDD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CBE2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CBE7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CBEC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CBF1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CBF6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CBFB 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CBFC F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CC01 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CC06 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CC0B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CC10 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CC15 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CC1A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CC1F 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CC20 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CC25 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CC2A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CC2F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CC34 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CC39 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CC3E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CC44 00                         		even
0000CC44                            ; ---------------------------------------------------------------------------
0000CC44                            ; Sprite mappings - special stage results screen
0000CC44                            ; ---------------------------------------------------------------------------
0000CC44 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CC46 0000                       		dc.w byte_CCEE-Map_obj7E
0000CC48 0000                       		dc.w byte_CD0D-Map_obj7E
0000CC4A FEAC                       		dc.w byte_CB47-Map_obj7E
0000CC4C 0000                       		dc.w byte_CD31-Map_obj7E
0000CC4E 0000                       		dc.w byte_CD46-Map_obj7E
0000CC50 0000                       		dc.w byte_CD5B-Map_obj7E
0000CC52 0000                       		dc.w byte_CD6B-Map_obj7E
0000CC54 0000                       		dc.w byte_CDA8-Map_obj7E
0000CC56 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CC57 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CC5C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CC61 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CC66 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CC6B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CC70 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CC75 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CC7A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CC7F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CC84 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CC89 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CC8E F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CC93 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CC98 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CC99 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CC9E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CCA3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CCA8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CCAD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CCB2 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CCB7 07                         byte_CD0D:	dc.b 7
0000CCB8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CCBD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CCC2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CCC7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CCCC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CCD1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CCD6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CCDB 04                         byte_CD31:	dc.b 4
0000CCDC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCE1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCE6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CCEB F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CCF0 04                         byte_CD46:	dc.b 4
0000CCF1 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCF6 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCFB F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CD00 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CD05 03                         byte_CD5B:	dc.b 3
0000CD06 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CD0B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CD10 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CD15 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CD16 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CD1B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CD20 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CD25 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CD2A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CD2F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CD34 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CD39 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CD3E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CD43 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CD48 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CD4D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CD52 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CD53 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CD58 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CD5D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CD62 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CD67 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CD6C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CD71 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CD76 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CD7B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CD80 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CD85 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CD8A F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CD8F F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CD94 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CD99 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CD9E                            		even
0000CD9E                            ; ---------------------------------------------------------------------------
0000CD9E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CD9E                            ; ---------------------------------------------------------------------------
0000CD9E                            Map_obj7F:
0000CD9E                            	include "_maps\obj7F.asm"
0000CD9E                            ; ---------------------------------------------------------------------------
0000CD9E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CD9E                            ; ---------------------------------------------------------------------------
0000CD9E 0000                       		dc.w byte_CE02-Map_obj7F
0000CDA0 0000                       		dc.w byte_CE08-Map_obj7F
0000CDA2 0000                       		dc.w byte_CE0E-Map_obj7F
0000CDA4 0000                       		dc.w byte_CE14-Map_obj7F
0000CDA6 0000                       		dc.w byte_CE1A-Map_obj7F
0000CDA8 0000                       		dc.w byte_CE20-Map_obj7F
0000CDAA 0000                       		dc.w byte_CE26-Map_obj7F
0000CDAC 01                         byte_CE02:	dc.b 1
0000CDAD F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CDB2 01                         byte_CE08:	dc.b 1
0000CDB3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CDB8 01                         byte_CE0E:	dc.b 1
0000CDB9 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CDBE 01                         byte_CE14:	dc.b 1
0000CDBF F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CDC4 01                         byte_CE1A:	dc.b 1
0000CDC5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CDCA 01                         byte_CE20:	dc.b 1
0000CDCB F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CDD0 00                         byte_CE26:	dc.b 0			; Blank frame
0000CDD2 00                         		even
0000CDD2 00                         		even
0000CDD2                            
0000CDD2                            ; ===========================================================================
0000CDD2                            ; ---------------------------------------------------------------------------
0000CDD2                            ; Object 36 - spikes
0000CDD2                            ; ---------------------------------------------------------------------------
0000CDD2                            
0000CDD2                            Obj36:					; XREF: Obj_Index
0000CDD2 7000                       		moveq	#0,d0
0000CDD4 1028 0024                  		move.b	$24(a0),d0
0000CDD8 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CDDC 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CDE0                            ; ===========================================================================
0000CDE0 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CDE2 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CDE4                            
0000CDE4 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CDE6 0110                       		dc.b 1,	$10
0000CDE8 0204                       		dc.b 2,	4
0000CDEA 031C                       		dc.b 3,	$1C
0000CDEC 0440                       		dc.b 4,	$40
0000CDEE 0510                       		dc.b 5,	$10
0000CDF0                            ; ===========================================================================
0000CDF0                            
0000CDF0                            Obj36_Main:				; XREF: Obj36_Index
0000CDF0 5428 0024                  		addq.b	#2,$24(a0)
0000CDF4 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CDFC 317C 051B 0002             		move.w	#$51B,2(a0)
0000CE02 0028 0004 0001             		ori.b	#4,1(a0)
0000CE08 117C 0004 0018             		move.b	#4,$18(a0)
0000CE0E 1028 0028                  		move.b	$28(a0),d0
0000CE12 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CE18 0240 00F0                  		andi.w	#$F0,d0
0000CE1C 43F9 0000 CDE4             		lea	(Obj36_Var).l,a1
0000CE22 E648                       		lsr.w	#3,d0
0000CE24 D2C0                       		adda.w	d0,a1
0000CE26 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CE2A 1159 0019                  		move.b	(a1)+,$19(a0)
0000CE2E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CE34 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CE3A                            
0000CE3A                            Obj36_Solid:				; XREF: Obj36_Index
0000CE3A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CE3E 343C 0004                  		move.w	#4,d2
0000CE42 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CE48 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CE4A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CE50 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CE52 343C 0014                  		move.w	#$14,d2
0000CE56                            
0000CE56                            ; Spikes types $1x and $5x face	sideways
0000CE56                            
0000CE56                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CE56 323C 001B                  		move.w	#$1B,d1
0000CE5A 3602                       		move.w	d2,d3
0000CE5C 5243                       		addq.w	#1,d3
0000CE5E 3828 0008                  		move.w	8(a0),d4
0000CE62 6100 0000                  		bsr.w	SolidObject
0000CE66 0828 0003 0022             		btst	#3,$22(a0)
0000CE6C 6600                       		bne.s	Obj36_Display
0000CE6E 0C44 0001                  		cmpi.w	#1,d4
0000CE72 6700                       		beq.s	Obj36_Hurt
0000CE74 6000                       		bra.s	Obj36_Display
0000CE76                            ; ===========================================================================
0000CE76                            
0000CE76                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000CE76                            
0000CE76                            Obj36_Upright:				; XREF: Obj36_Solid
0000CE76 7200                       		moveq	#0,d1
0000CE78 1228 0019                  		move.b	$19(a0),d1
0000CE7C 0641 000B                  		addi.w	#$B,d1
0000CE80 343C 0010                  		move.w	#$10,d2
0000CE84 363C 0011                  		move.w	#$11,d3
0000CE88 3828 0008                  		move.w	8(a0),d4
0000CE8C 6100 0000                  		bsr.w	SolidObject
0000CE90 0828 0003 0022             		btst	#3,$22(a0)
0000CE96 6600                       		bne.s	Obj36_Hurt
0000CE98 4A44                       		tst.w	d4
0000CE9A 6A00                       		bpl.s	Obj36_Display
0000CE9C                            
0000CE9C                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000CE9C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000CEA0 6600                       		bne.s	Obj36_Display	; if yes, branch
0000CEA2 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000CEA6 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000CEA8 2F08                       		move.l	a0,-(sp)
0000CEAA 2448                       		movea.l	a0,a2
0000CEAC 41F8 D000                  		lea	($FFFFD000).w,a0
0000CEB0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CEB6 6400                       		bcc.s	loc_CF20
0000CEB8 2628 000C                  		move.l	$C(a0),d3
0000CEBC 3028 0012                  		move.w	$12(a0),d0
0000CEC0 48C0                       		ext.l	d0
0000CEC2 E180                       		asl.l	#8,d0
0000CEC4 9680                       		sub.l	d0,d3
0000CEC6 2143 000C                  		move.l	d3,$C(a0)
0000CECA 4EB9 0000 0000             		jsr	HurtSonic
0000CED0                            
0000CED0                            loc_CF20:
0000CED0 205F                       		movea.l	(sp)+,a0
0000CED2                            
0000CED2                            Obj36_Display:
0000CED2 6100 0000                  		bsr.w	DisplaySprite
0000CED6 3028 0030                  		move.w	$30(a0),d0
0000CEDA 0240 FF80                  		andi.w	#$FF80,d0
0000CEDE 3238 F700                  		move.w	($FFFFF700).w,d1
0000CEE2 0441 0080                  		subi.w	#$80,d1
0000CEE6 0241 FF80                  		andi.w	#$FF80,d1
0000CEEA 9041                       		sub.w	d1,d0
0000CEEC 0C40 0280                  		cmpi.w	#$280,d0
0000CEF0 6200 0000                  		bhi.w	DeleteObject
0000CEF4 4E75                       		rts	
0000CEF6                            ; ===========================================================================
0000CEF6                            
0000CEF6                            Obj36_Type0x:				; XREF: Obj36_Solid
0000CEF6 7000                       		moveq	#0,d0
0000CEF8 1028 0028                  		move.b	$28(a0),d0
0000CEFC D040                       		add.w	d0,d0
0000CEFE 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000CF02 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000CF06                            ; ===========================================================================
0000CF06 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000CF08 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000CF0A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000CF0C                            ; ===========================================================================
0000CF0C                            
0000CF0C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000CF0C 4E75                       		rts			; don't move the object
0000CF0E                            ; ===========================================================================
0000CF0E                            
0000CF0E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000CF0E 6100 0000                  		bsr.w	Obj36_Wait
0000CF12 7000                       		moveq	#0,d0
0000CF14 1028 0034                  		move.b	$34(a0),d0
0000CF18 D068 0032                  		add.w	$32(a0),d0
0000CF1C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000CF20 4E75                       		rts	
0000CF22                            ; ===========================================================================
0000CF22                            
0000CF22                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000CF22 6100 0000                  		bsr.w	Obj36_Wait
0000CF26 7000                       		moveq	#0,d0
0000CF28 1028 0034                  		move.b	$34(a0),d0
0000CF2C D068 0030                  		add.w	$30(a0),d0
0000CF30 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000CF34 4E75                       		rts	
0000CF36                            ; ===========================================================================
0000CF36                            
0000CF36                            Obj36_Wait:
0000CF36 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000CF3A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000CF3C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000CF40 6600                       		bne.s	locret_CFE6
0000CF42 4A28 0001                  		tst.b	1(a0)
0000CF46 6A00                       		bpl.s	locret_CFE6
0000CF48 303C 00B6                  		move.w	#$B6,d0
0000CF4C 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000CF52 6000                       		bra.s	locret_CFE6
0000CF54                            ; ===========================================================================
0000CF54                            
0000CF54                            loc_CFA4:
0000CF54 4A68 0036                  		tst.w	$36(a0)
0000CF58 6700                       		beq.s	loc_CFC6
0000CF5A 0468 0800 0034             		subi.w	#$800,$34(a0)
0000CF60 6400                       		bcc.s	locret_CFE6
0000CF62 317C 0000 0034             		move.w	#0,$34(a0)
0000CF68 317C 0000 0036             		move.w	#0,$36(a0)
0000CF6E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000CF74 6000                       		bra.s	locret_CFE6
0000CF76                            ; ===========================================================================
0000CF76                            
0000CF76                            loc_CFC6:
0000CF76 0668 0800 0034             		addi.w	#$800,$34(a0)
0000CF7C 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000CF82 6500                       		bcs.s	locret_CFE6
0000CF84 317C 2000 0034             		move.w	#$2000,$34(a0)
0000CF8A 317C 0001 0036             		move.w	#1,$36(a0)
0000CF90 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000CF96                            
0000CF96                            locret_CFE6:
0000CF96 4E75                       		rts	
0000CF98                            ; ===========================================================================
0000CF98                            ; ---------------------------------------------------------------------------
0000CF98                            ; Sprite mappings - spikes
0000CF98                            ; ---------------------------------------------------------------------------
0000CF98                            Map_obj36:
0000CF98                            	include "_maps\obj36.asm"
0000CF98                            ; ---------------------------------------------------------------------------
0000CF98                            ; Sprite mappings - spikes
0000CF98                            ; ---------------------------------------------------------------------------
0000CF98 0000                       		dc.w byte_CFF4-Map_obj36
0000CF9A 0000                       		dc.w byte_D004-Map_obj36
0000CF9C 0000                       		dc.w byte_D014-Map_obj36
0000CF9E 0000                       		dc.w byte_D01A-Map_obj36
0000CFA0 0000                       		dc.w byte_D02A-Map_obj36
0000CFA2 0000                       		dc.w byte_D049-Map_obj36
0000CFA4 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000CFA5 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000CFAA F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFAF F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000CFB4 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000CFB5 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000CFBA FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000CFBF 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000CFC4 01                         byte_D014:	dc.b 1			; 1 spike
0000CFC5 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFCA 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000CFCB F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000CFD0 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFD5 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000CFDA 06                         byte_D02A:	dc.b 6			; 6 spikes
0000CFDB F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000CFE0 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000CFE5 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000CFEA F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000CFEF F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000CFF4 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000CFF9 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000CFFA FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D000 00                         		even
0000D000 00                         		even
0000D000                            
0000D000                            ; ===========================================================================
0000D000                            ; ---------------------------------------------------------------------------
0000D000                            ; Object 3B - purple rock (GHZ)
0000D000                            ; ---------------------------------------------------------------------------
0000D000                            
0000D000                            Obj3B:					; XREF: Obj_Index
0000D000 7000                       		moveq	#0,d0
0000D002 1028 0024                  		move.b	$24(a0),d0
0000D006 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D00A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D00E                            ; ===========================================================================
0000D00E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D010 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D012                            ; ===========================================================================
0000D012                            
0000D012                            Obj3B_Main:				; XREF: Obj3B_Index
0000D012 5428 0024                  		addq.b	#2,$24(a0)
0000D016 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D01E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D024 117C 0004 0001             		move.b	#4,1(a0)
0000D02A 117C 0013 0019             		move.b	#$13,$19(a0)
0000D030 117C 0004 0018             		move.b	#4,$18(a0)
0000D036                            
0000D036                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D036 323C 001B                  		move.w	#$1B,d1
0000D03A 343C 0010                  		move.w	#$10,d2
0000D03E 363C 0010                  		move.w	#$10,d3
0000D042 3828 0008                  		move.w	8(a0),d4
0000D046 6100 0000                  		bsr.w	SolidObject
0000D04A 6100 0000                  		bsr.w	DisplaySprite
0000D04E 3028 0008                  		move.w	8(a0),d0
0000D052 0240 FF80                  		andi.w	#$FF80,d0
0000D056 3238 F700                  		move.w	($FFFFF700).w,d1
0000D05A 0441 0080                  		subi.w	#$80,d1
0000D05E 0241 FF80                  		andi.w	#$FF80,d1
0000D062 9041                       		sub.w	d1,d0
0000D064 0C40 0280                  		cmpi.w	#$280,d0
0000D068 6200 0000                  		bhi.w	DeleteObject
0000D06C 4E75                       		rts	
0000D06E                            ; ===========================================================================
0000D06E                            ; ---------------------------------------------------------------------------
0000D06E                            ; Object 49 - waterfall	sound effect (GHZ)
0000D06E                            ; ---------------------------------------------------------------------------
0000D06E                            
0000D06E                            Obj49:					; XREF: Obj_Index
0000D06E 7000                       		moveq	#0,d0
0000D070 1028 0024                  		move.b	$24(a0),d0
0000D074 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D078 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D07C                            ; ===========================================================================
0000D07C 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D07E 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D080                            ; ===========================================================================
0000D080                            
0000D080                            Obj49_Main:				; XREF: Obj49_Index
0000D080 5428 0024                  		addq.b	#2,$24(a0)
0000D084 117C 0004 0001             		move.b	#4,1(a0)
0000D08A                            
0000D08A                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D08A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D08E 0200 003F                  		andi.b	#$3F,d0
0000D092 6600                       		bne.s	Obj49_ChkDel
0000D094 303C 00D0                  		move.w	#$D0,d0
0000D098 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D09E                            
0000D09E                            Obj49_ChkDel:
0000D09E 3028 0008                  		move.w	8(a0),d0
0000D0A2 0240 FF80                  		andi.w	#$FF80,d0
0000D0A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0AA 0441 0080                  		subi.w	#$80,d1
0000D0AE 0241 FF80                  		andi.w	#$FF80,d1
0000D0B2 9041                       		sub.w	d1,d0
0000D0B4 0C40 0280                  		cmpi.w	#$280,d0
0000D0B8 6200 0000                  		bhi.w	DeleteObject
0000D0BC 4E75                       		rts	
0000D0BE                            ; ===========================================================================
0000D0BE                            ; ---------------------------------------------------------------------------
0000D0BE                            ; Sprite mappings - purple rock	(GHZ)
0000D0BE                            ; ---------------------------------------------------------------------------
0000D0BE                            Map_obj3B:
0000D0BE                            	include "_maps\obj3B.asm"
0000D0BE                            ; ---------------------------------------------------------------------------
0000D0BE                            ; Sprite mappings - purple rock	(GHZ)
0000D0BE                            ; ---------------------------------------------------------------------------
0000D0BE 0000                       		dc.w byte_D110-Map_obj3B
0000D0C0 02                         byte_D110:	dc.b 2
0000D0C1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D0C6 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D0CC 00                         		even
0000D0CC 00                         		even
0000D0CC                            
0000D0CC                            ; ===========================================================================
0000D0CC                            ; ---------------------------------------------------------------------------
0000D0CC                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D0CC                            ; ---------------------------------------------------------------------------
0000D0CC                            
0000D0CC                            Obj3C:					; XREF: Obj_Index
0000D0CC 7000                       		moveq	#0,d0
0000D0CE 1028 0024                  		move.b	$24(a0),d0
0000D0D2 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D0D6 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D0DA 6000 0000                  		bra.w	MarkObjGone
0000D0DE                            ; ===========================================================================
0000D0DE 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D0E0 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D0E2 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D0E4                            ; ===========================================================================
0000D0E4                            
0000D0E4                            Obj3C_Main:				; XREF: Obj3C_Index
0000D0E4 5428 0024                  		addq.b	#2,$24(a0)
0000D0E8 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D0F0 317C 450F 0002             		move.w	#$450F,2(a0)
0000D0F6 117C 0004 0001             		move.b	#4,1(a0)
0000D0FC 117C 0010 0019             		move.b	#$10,$19(a0)
0000D102 117C 0004 0018             		move.b	#4,$18(a0)
0000D108 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D10E                            
0000D10E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D10E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D114 323C 001B                  		move.w	#$1B,d1
0000D118 343C 0020                  		move.w	#$20,d2
0000D11C 363C 0020                  		move.w	#$20,d3
0000D120 3828 0008                  		move.w	8(a0),d4
0000D124 6100 0000                  		bsr.w	SolidObject
0000D128 0828 0005 0022             		btst	#5,$22(a0)
0000D12E 6600                       		bne.s	Obj3C_ChkRoll
0000D130                            
0000D130                            locret_D180:
0000D130 4E75                       		rts	
0000D132                            ; ===========================================================================
0000D132                            
0000D132                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D132 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D138 66F6                       		bne.s	locret_D180	; if not, branch
0000D13A 3028 0030                  		move.w	$30(a0),d0
0000D13E 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D140 4440                       		neg.w	d0
0000D142                            
0000D142                            Obj3C_ChkSpeed:
0000D142 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D146 65E8                       		bcs.s	locret_D180	; if not, branch
0000D148 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D14E 5869 0008                  		addq.w	#4,8(a1)
0000D152 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D158 3028 0008                  		move.w	8(a0),d0
0000D15C B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D160 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D162 5169 0008                  		subq.w	#8,8(a1)
0000D166 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D16C                            
0000D16C                            Obj3C_Smash:
0000D16C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D172 08A8 0005 0022             		bclr	#5,$22(a0)
0000D178 08A9 0005 0022             		bclr	#5,$22(a1)
0000D17E 7207                       		moveq	#7,d1		; load 8 fragments
0000D180 343C 0070                  		move.w	#$70,d2
0000D184 6100                       		bsr.s	SmashObject
0000D186                            
0000D186                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D186 6100 0000                  		bsr.w	SpeedToPos
0000D18A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D190 6100 0000                  		bsr.w	DisplaySprite
0000D194 4A28 0001                  		tst.b	1(a0)
0000D198 6A00 0000                  		bpl.w	DeleteObject
0000D19C 4E75                       		rts	
0000D19E                            
0000D19E                            ; ---------------------------------------------------------------------------
0000D19E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D19E                            ; ---------------------------------------------------------------------------
0000D19E                            
0000D19E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D19E                            
0000D19E                            
0000D19E                            SmashObject:				; XREF: Obj3C_Smash
0000D19E 7000                       		moveq	#0,d0
0000D1A0 1028 001A                  		move.b	$1A(a0),d0
0000D1A4 D040                       		add.w	d0,d0
0000D1A6 2668 0004                  		movea.l	4(a0),a3
0000D1AA D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D1AE 524B                       		addq.w	#1,a3
0000D1B0 08E8 0005 0001             		bset	#5,1(a0)
0000D1B6 1810                       		move.b	0(a0),d4
0000D1B8 1A28 0001                  		move.b	1(a0),d5
0000D1BC 2248                       		movea.l	a0,a1
0000D1BE 6000                       		bra.s	Smash_LoadFrag
0000D1C0                            ; ===========================================================================
0000D1C0                            
0000D1C0                            Smash_Loop:
0000D1C0 6100 0000                  		bsr.w	SingleObjLoad
0000D1C4 6600                       		bne.s	Smash_PlaySnd
0000D1C6 5A4B                       		addq.w	#5,a3
0000D1C8                            
0000D1C8                            Smash_LoadFrag:				; XREF: SmashObject
0000D1C8 137C 0004 0024             		move.b	#4,$24(a1)
0000D1CE 1284                       		move.b	d4,0(a1)
0000D1D0 234B 0004                  		move.l	a3,4(a1)
0000D1D4 1345 0001                  		move.b	d5,1(a1)
0000D1D8 3368 0008 0008             		move.w	8(a0),8(a1)
0000D1DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D1E4 3368 0002 0002             		move.w	2(a0),2(a1)
0000D1EA 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D1F0 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D1F6 335C 0010                  		move.w	(a4)+,$10(a1)
0000D1FA 335C 0012                  		move.w	(a4)+,$12(a1)
0000D1FE B3C8                       		cmpa.l	a0,a1
0000D200 6400                       		bcc.s	loc_D268
0000D202 2F08                       		move.l	a0,-(sp)
0000D204 2049                       		movea.l	a1,a0
0000D206 6100 0000                  		bsr.w	SpeedToPos
0000D20A D568 0012                  		add.w	d2,$12(a0)
0000D20E 205F                       		movea.l	(sp)+,a0
0000D210 6100 0000                  		bsr.w	DisplaySprite2
0000D214                            
0000D214                            loc_D268:
0000D214 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D218                            
0000D218                            Smash_PlaySnd:
0000D218 303C 00CB                  		move.w	#$CB,d0
0000D21C 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D222                            ; End of function SmashObject
0000D222                            
0000D222                            ; ===========================================================================
0000D222                            ; Smashed block	fragment speeds
0000D222                            ;
0000D222 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D226 0600 FF00                  		dc.w $600, $FF00
0000D22A 0600 0100                  		dc.w $600, $100
0000D22E 0400 0500                  		dc.w $400, $500
0000D232 0600 FA00                  		dc.w $600, $FA00
0000D236 0800 FE00                  		dc.w $800, $FE00
0000D23A 0800 0200                  		dc.w $800, $200
0000D23E 0600 0600                  		dc.w $600, $600
0000D242                            
0000D242 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D246 F800 FE00                  		dc.w $F800, $FE00
0000D24A F800 0200                  		dc.w $F800, $200
0000D24E FA00 0600                  		dc.w $FA00, $600
0000D252 FC00 FB00                  		dc.w $FC00, $FB00
0000D256 FA00 FF00                  		dc.w $FA00, $FF00
0000D25A FA00 0100                  		dc.w $FA00, $100
0000D25E FC00 0500                  		dc.w $FC00, $500
0000D262                            ; ---------------------------------------------------------------------------
0000D262                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D262                            ; ---------------------------------------------------------------------------
0000D262                            Map_obj3C:
0000D262                            	include "_maps\obj3C.asm"
0000D262                            ; ---------------------------------------------------------------------------
0000D262                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D262                            ; ---------------------------------------------------------------------------
0000D262 0000                       		dc.w byte_D2BC-Map_obj3C
0000D264 0000                       		dc.w byte_D2E5-Map_obj3C
0000D266 0000                       		dc.w byte_D30E-Map_obj3C
0000D268 08                         byte_D2BC:	dc.b 8
0000D269 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D26E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D273 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D278 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D27D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D282 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D287 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D28C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D291 08                         byte_D2E5:	dc.b 8
0000D292 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D297 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D29C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D2A1 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D2A6 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D2AB F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D2B0 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D2B5 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D2BA 08                         byte_D30E:	dc.b 8
0000D2BB E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D2C0 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D2C5 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D2CA 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D2CF E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D2D4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D2D9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D2DE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D2E4 00                         		even
0000D2E4 00                         		even
0000D2E4                            
0000D2E4                            ; ---------------------------------------------------------------------------
0000D2E4                            ; Object code loading subroutine
0000D2E4                            ; ---------------------------------------------------------------------------
0000D2E4                            
0000D2E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2E4                            
0000D2E4                            
0000D2E4                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D2E4 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D2E8 7E7F                       		moveq	#$7F,d7
0000D2EA 7000                       		moveq	#0,d0
0000D2EC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D2F2 6400                       		bcc.s	loc_D362
0000D2F4                            
0000D2F4                            loc_D348:
0000D2F4 1010                       		move.b	(a0),d0		; load object number from RAM
0000D2F6 6700                       		beq.s	loc_D358
0000D2F8 D040                       		add.w	d0,d0
0000D2FA D040                       		add.w	d0,d0
0000D2FC 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D300 4E91                       		jsr	(a1)		; run the object's code
0000D302 7000                       		moveq	#0,d0
0000D304                            
0000D304                            loc_D358:
0000D304 41E8 0040                  		lea	$40(a0),a0	; next object
0000D308 51CF FFEA                  		dbf	d7,loc_D348
0000D30C 4E75                       		rts	
0000D30E                            ; ===========================================================================
0000D30E                            
0000D30E                            loc_D362:
0000D30E 7E1F                       		moveq	#$1F,d7
0000D310 61E2                       		bsr.s	loc_D348
0000D312 7E5F                       		moveq	#$5F,d7
0000D314                            
0000D314                            loc_D368:
0000D314 7000                       		moveq	#0,d0
0000D316 1010                       		move.b	(a0),d0
0000D318 6700                       		beq.s	loc_D378
0000D31A 4A28 0001                  		tst.b	1(a0)
0000D31E 6A00                       		bpl.s	loc_D378
0000D320 6100 0000                  		bsr.w	DisplaySprite
0000D324                            
0000D324                            loc_D378:
0000D324 41E8 0040                  		lea	$40(a0),a0
0000D328                            
0000D328                            loc_D37C:
0000D328 51CF FFEA                  		dbf	d7,loc_D368
0000D32C 4E75                       		rts	
0000D32E                            ; End of function ObjectsLoad
0000D32E                            
0000D32E                            ; ===========================================================================
0000D32E                            ; ---------------------------------------------------------------------------
0000D32E                            ; Object pointers
0000D32E                            ; ---------------------------------------------------------------------------
0000D32E                            Obj_Index:
0000D32E                            	include "_inc\Object pointers.asm"
0000D32E                            ; ---------------------------------------------------------------------------
0000D32E                            ; Object pointers
0000D32E                            ; ---------------------------------------------------------------------------
0000D32E 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D33E 0000 0000 0000 0000 0000+  	dc.l Spin_Dash_dust, ObjectFall, ObjectFall, Obj08
0000D34E 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D35E 0000 0000 0000 A5F0 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D36E 0000 7320 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D37E 0000 7946 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D38E 0000 8194 0000 81FC 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D39E 0000 8846 0000 8B34 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D3AE 0000 0000 0000 97B8 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D3BE 0000 9AFA 0000 A0E6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D3CE 0000 93F0 0000 891C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D3DE 0000 AC78 0000 A2D6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D3EE 0000 B64A 0000 BCF8 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D3FE 0000 B1AE 0000 CDD2 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D40E 0000 C47E 0000 C538 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D41E 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D42E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D43E 0000 B966 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D44E 0000 D06E 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D45E 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D46E 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D47E 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D48E 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D49E 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D4AE 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D4BE 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D4CE 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D4DE 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D4EE 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D4FE 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D50E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D51E 0000 0000 0000 C772 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D52E 0000 4F5A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D53E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D54E 0000 5614 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D54E 0000 5614 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D55E                            
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D55E                            ; ---------------------------------------------------------------------------
0000D55E                            
0000D55E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D55E                            
0000D55E                            
0000D55E                            ObjectFall:
0000D55E 2428 0008                  		move.l	8(a0),d2
0000D562 2628 000C                  		move.l	$C(a0),d3
0000D566 3028 0010                  		move.w	$10(a0),d0
0000D56A 48C0                       		ext.l	d0
0000D56C E180                       		asl.l	#8,d0
0000D56E D480                       		add.l	d0,d2
0000D570 3028 0012                  		move.w	$12(a0),d0
0000D574 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D57A 48C0                       		ext.l	d0
0000D57C E180                       		asl.l	#8,d0
0000D57E D680                       		add.l	d0,d3
0000D580 2142 0008                  		move.l	d2,8(a0)
0000D584 2143 000C                  		move.l	d3,$C(a0)
0000D588 4E75                       		rts	
0000D58A                            ; End of function ObjectFall
0000D58A                            
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            ; Subroutine translating object	speed to update	object position
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            
0000D58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D58A                            
0000D58A                            
0000D58A                            SpeedToPos:
0000D58A 2428 0008                  		move.l	8(a0),d2
0000D58E 2628 000C                  		move.l	$C(a0),d3
0000D592 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D596 48C0                       		ext.l	d0
0000D598 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D59A D480                       		add.l	d0,d2		; add to x-axis	position
0000D59C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D5A0 48C0                       		ext.l	d0
0000D5A2 E180                       		asl.l	#8,d0		; multiply by $100
0000D5A4 D680                       		add.l	d0,d3		; add to y-axis	position
0000D5A6 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D5AA 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D5AE 4E75                       		rts	
0000D5B0                            ; End of function SpeedToPos
0000D5B0                            
0000D5B0                            ; ---------------------------------------------------------------------------
0000D5B0                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D5B0                            ; ---------------------------------------------------------------------------
0000D5B0                            
0000D5B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5B0                            
0000D5B0                            
0000D5B0                            DisplaySprite:
0000D5B0 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D5B4 3028 0018                  		move.w	$18(a0),d0
0000D5B8 E248                       		lsr.w	#1,d0
0000D5BA 0240 0380                  		andi.w	#$380,d0
0000D5BE D2C0                       		adda.w	d0,a1
0000D5C0 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D5C4 6400                       		bcc.s	locret_D620
0000D5C6 5451                       		addq.w	#2,(a1)
0000D5C8 D2D1                       		adda.w	(a1),a1
0000D5CA 3288                       		move.w	a0,(a1)
0000D5CC                            
0000D5CC                            locret_D620:
0000D5CC 4E75                       		rts	
0000D5CE                            ; End of function DisplaySprite
0000D5CE                            
0000D5CE                            ; ---------------------------------------------------------------------------
0000D5CE                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D5CE                            ; ---------------------------------------------------------------------------
0000D5CE                            
0000D5CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5CE                            
0000D5CE                            
0000D5CE                            DisplaySprite2:
0000D5CE 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D5D2 3029 0018                  		move.w	$18(a1),d0
0000D5D6 E248                       		lsr.w	#1,d0
0000D5D8 0240 0380                  		andi.w	#$380,d0
0000D5DC D4C0                       		adda.w	d0,a2
0000D5DE 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D5E2 6400                       		bcc.s	locret_D63E
0000D5E4 5452                       		addq.w	#2,(a2)
0000D5E6 D4D2                       		adda.w	(a2),a2
0000D5E8 3489                       		move.w	a1,(a2)
0000D5EA                            
0000D5EA                            locret_D63E:
0000D5EA 4E75                       		rts	
0000D5EC                            ; End of function DisplaySprite2
0000D5EC                            
0000D5EC                            ; ---------------------------------------------------------------------------
0000D5EC                            ; Subroutine to	delete an object
0000D5EC                            ; ---------------------------------------------------------------------------
0000D5EC                            
0000D5EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5EC                            
0000D5EC                            
0000D5EC                            DeleteObject:
0000D5EC 2248                       		movea.l	a0,a1
0000D5EE                            
0000D5EE                            DeleteObject2:
0000D5EE 7200                       		moveq	#0,d1
0000D5F0 700F                       		moveq	#$F,d0
0000D5F2                            
0000D5F2                            loc_D646:
0000D5F2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D5F4 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D5F8 4E75                       		rts	
0000D5FA                            ; End of function DeleteObject
0000D5FA                            
0000D5FA                            ; ===========================================================================
0000D5FA 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D5FE 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D602 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D606 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D60A                            ; ---------------------------------------------------------------------------
0000D60A                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D60A                            ; ---------------------------------------------------------------------------
0000D60A                            
0000D60A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D60A                            
0000D60A                            
0000D60A                            BuildSprites:				; XREF: TitleScreen; et al
0000D60A 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D60E 7A00                       		moveq	#0,d5
0000D610 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D614 7E07                       		moveq	#7,d7
0000D616                            
0000D616                            loc_D66A:
0000D616 4A54                       		tst.w	(a4)
0000D618 6700 0000                  		beq.w	loc_D72E
0000D61C 7C02                       		moveq	#2,d6
0000D61E                            
0000D61E                            loc_D672:
0000D61E 3074 6000                  		movea.w	(a4,d6.w),a0
0000D622 4A10                       		tst.b	(a0)
0000D624 6700 0000                  		beq.w	loc_D726
0000D628 08A8 0007 0001             		bclr	#7,1(a0)
0000D62E 1028 0001                  		move.b	1(a0),d0
0000D632 1800                       		move.b	d0,d4
0000D634 0240 000C                  		andi.w	#$C,d0
0000D638 6700                       		beq.s	loc_D6DE
0000D63A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D63E 7000                       		moveq	#0,d0
0000D640 1028 0019                  		move.b	$19(a0),d0
0000D644 3628 0008                  		move.w	8(a0),d3
0000D648 9651                       		sub.w	(a1),d3
0000D64A 3203                       		move.w	d3,d1
0000D64C D240                       		add.w	d0,d1
0000D64E 6B00 0000                  		bmi.w	loc_D726
0000D652 3203                       		move.w	d3,d1
0000D654 9240                       		sub.w	d0,d1
0000D656 0C41 0140                  		cmpi.w	#$140,d1
0000D65A 6C00                       		bge.s	loc_D726
0000D65C 0643 0080                  		addi.w	#$80,d3
0000D660 0804 0004                  		btst	#4,d4
0000D664 6700                       		beq.s	loc_D6E8
0000D666 7000                       		moveq	#0,d0
0000D668 1028 0016                  		move.b	$16(a0),d0
0000D66C 3428 000C                  		move.w	$C(a0),d2
0000D670 9469 0004                  		sub.w	4(a1),d2
0000D674 3202                       		move.w	d2,d1
0000D676 D240                       		add.w	d0,d1
0000D678 6B00                       		bmi.s	loc_D726
0000D67A 3202                       		move.w	d2,d1
0000D67C 9240                       		sub.w	d0,d1
0000D67E 0C41 00E0                  		cmpi.w	#$E0,d1
0000D682 6C00                       		bge.s	loc_D726
0000D684 0642 0080                  		addi.w	#$80,d2
0000D688 6000                       		bra.s	loc_D700
0000D68A                            ; ===========================================================================
0000D68A                            
0000D68A                            loc_D6DE:
0000D68A 3428 000A                  		move.w	$A(a0),d2
0000D68E 3628 0008                  		move.w	8(a0),d3
0000D692 6000                       		bra.s	loc_D700
0000D694                            ; ===========================================================================
0000D694                            
0000D694                            loc_D6E8:
0000D694 3428 000C                  		move.w	$C(a0),d2
0000D698 9469 0004                  		sub.w	4(a1),d2
0000D69C 0642 0080                  		addi.w	#$80,d2
0000D6A0 0C42 0060                  		cmpi.w	#$60,d2
0000D6A4 6500                       		bcs.s	loc_D726
0000D6A6 0C42 0180                  		cmpi.w	#$180,d2
0000D6AA 6400                       		bcc.s	loc_D726
0000D6AC                            
0000D6AC                            loc_D700:
0000D6AC 2268 0004                  		movea.l	4(a0),a1
0000D6B0 7200                       		moveq	#0,d1
0000D6B2 0804 0005                  		btst	#5,d4
0000D6B6 6600                       		bne.s	loc_D71C
0000D6B8 1228 001A                  		move.b	$1A(a0),d1
0000D6BC D201                       		add.b	d1,d1
0000D6BE D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D6C2 1219                       		move.b	(a1)+,d1
0000D6C4 5301                       		subq.b	#1,d1
0000D6C6 6B00                       		bmi.s	loc_D720
0000D6C8                            
0000D6C8                            loc_D71C:
0000D6C8 6100 0000                  		bsr.w	sub_D750
0000D6CC                            
0000D6CC                            loc_D720:
0000D6CC 08E8 0007 0001             		bset	#7,1(a0)
0000D6D2                            
0000D6D2                            loc_D726:
0000D6D2 5446                       		addq.w	#2,d6
0000D6D4 5554                       		subq.w	#2,(a4)
0000D6D6 6600 FF46                  		bne.w	loc_D672
0000D6DA                            
0000D6DA                            loc_D72E:
0000D6DA 49EC 0080                  		lea	$80(a4),a4
0000D6DE 51CF FF36                  		dbf	d7,loc_D66A
0000D6E2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D6E6 0C05 0050                  		cmpi.b	#$50,d5
0000D6EA 6700                       		beq.s	loc_D748
0000D6EC 24BC 0000 0000             		move.l	#0,(a2)
0000D6F2 4E75                       		rts	
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            loc_D748:
0000D6F4 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D6FA 4E75                       		rts	
0000D6FC                            ; End of function BuildSprites
0000D6FC                            
0000D6FC                            
0000D6FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6FC                            
0000D6FC                            
0000D6FC                            sub_D750:				; XREF: BuildSprites
0000D6FC 3668 0002                  		movea.w	2(a0),a3
0000D700 0804 0000                  		btst	#0,d4
0000D704 6600                       		bne.s	loc_D796
0000D706 0804 0001                  		btst	#1,d4
0000D70A 6600 0000                  		bne.w	loc_D7E4
0000D70E                            ; End of function sub_D750
0000D70E                            
0000D70E                            
0000D70E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D70E                            
0000D70E                            
0000D70E                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D70E 0C05 0050                  		cmpi.b	#$50,d5
0000D712 6700                       		beq.s	locret_D794
0000D714 1019                       		move.b	(a1)+,d0
0000D716 4880                       		ext.w	d0
0000D718 D042                       		add.w	d2,d0
0000D71A 34C0                       		move.w	d0,(a2)+
0000D71C 14D9                       		move.b	(a1)+,(a2)+
0000D71E 5205                       		addq.b	#1,d5
0000D720 14C5                       		move.b	d5,(a2)+
0000D722 1019                       		move.b	(a1)+,d0
0000D724 E148                       		lsl.w	#8,d0
0000D726 1019                       		move.b	(a1)+,d0
0000D728 D04B                       		add.w	a3,d0
0000D72A 34C0                       		move.w	d0,(a2)+
0000D72C 1019                       		move.b	(a1)+,d0
0000D72E 4880                       		ext.w	d0
0000D730 D043                       		add.w	d3,d0
0000D732 0240 01FF                  		andi.w	#$1FF,d0
0000D736 6600                       		bne.s	loc_D78E
0000D738 5240                       		addq.w	#1,d0
0000D73A                            
0000D73A                            loc_D78E:
0000D73A 34C0                       		move.w	d0,(a2)+
0000D73C 51C9 FFD0                  		dbf	d1,sub_D762
0000D740                            
0000D740                            locret_D794:
0000D740 4E75                       		rts	
0000D742                            ; End of function sub_D762
0000D742                            
0000D742                            ; ===========================================================================
0000D742                            
0000D742                            loc_D796:
0000D742 0804 0001                  		btst	#1,d4
0000D746 6600 0000                  		bne.w	loc_D82A
0000D74A                            
0000D74A                            loc_D79E:
0000D74A 0C05 0050                  		cmpi.b	#$50,d5
0000D74E 6700                       		beq.s	locret_D7E2
0000D750 1019                       		move.b	(a1)+,d0
0000D752 4880                       		ext.w	d0
0000D754 D042                       		add.w	d2,d0
0000D756 34C0                       		move.w	d0,(a2)+
0000D758 1819                       		move.b	(a1)+,d4
0000D75A 14C4                       		move.b	d4,(a2)+
0000D75C 5205                       		addq.b	#1,d5
0000D75E 14C5                       		move.b	d5,(a2)+
0000D760 1019                       		move.b	(a1)+,d0
0000D762 E148                       		lsl.w	#8,d0
0000D764 1019                       		move.b	(a1)+,d0
0000D766 D04B                       		add.w	a3,d0
0000D768 0A40 0800                  		eori.w	#$800,d0
0000D76C 34C0                       		move.w	d0,(a2)+
0000D76E 1019                       		move.b	(a1)+,d0
0000D770 4880                       		ext.w	d0
0000D772 4440                       		neg.w	d0
0000D774 D804                       		add.b	d4,d4
0000D776 0244 0018                  		andi.w	#$18,d4
0000D77A 5044                       		addq.w	#8,d4
0000D77C 9044                       		sub.w	d4,d0
0000D77E D043                       		add.w	d3,d0
0000D780 0240 01FF                  		andi.w	#$1FF,d0
0000D784 6600                       		bne.s	loc_D7DC
0000D786 5240                       		addq.w	#1,d0
0000D788                            
0000D788                            loc_D7DC:
0000D788 34C0                       		move.w	d0,(a2)+
0000D78A 51C9 FFBE                  		dbf	d1,loc_D79E
0000D78E                            
0000D78E                            locret_D7E2:
0000D78E 4E75                       		rts	
0000D790                            ; ===========================================================================
0000D790                            
0000D790                            loc_D7E4:				; XREF: sub_D750
0000D790 0C05 0050                  		cmpi.b	#$50,d5
0000D794 6700                       		beq.s	locret_D828
0000D796 1019                       		move.b	(a1)+,d0
0000D798 1811                       		move.b	(a1),d4
0000D79A 4880                       		ext.w	d0
0000D79C 4440                       		neg.w	d0
0000D79E E70C                       		lsl.b	#3,d4
0000D7A0 0244 0018                  		andi.w	#$18,d4
0000D7A4 5044                       		addq.w	#8,d4
0000D7A6 9044                       		sub.w	d4,d0
0000D7A8 D042                       		add.w	d2,d0
0000D7AA 34C0                       		move.w	d0,(a2)+
0000D7AC 14D9                       		move.b	(a1)+,(a2)+
0000D7AE 5205                       		addq.b	#1,d5
0000D7B0 14C5                       		move.b	d5,(a2)+
0000D7B2 1019                       		move.b	(a1)+,d0
0000D7B4 E148                       		lsl.w	#8,d0
0000D7B6 1019                       		move.b	(a1)+,d0
0000D7B8 D04B                       		add.w	a3,d0
0000D7BA 0A40 1000                  		eori.w	#$1000,d0
0000D7BE 34C0                       		move.w	d0,(a2)+
0000D7C0 1019                       		move.b	(a1)+,d0
0000D7C2 4880                       		ext.w	d0
0000D7C4 D043                       		add.w	d3,d0
0000D7C6 0240 01FF                  		andi.w	#$1FF,d0
0000D7CA 6600                       		bne.s	loc_D822
0000D7CC 5240                       		addq.w	#1,d0
0000D7CE                            
0000D7CE                            loc_D822:
0000D7CE 34C0                       		move.w	d0,(a2)+
0000D7D0 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D7D4                            
0000D7D4                            locret_D828:
0000D7D4 4E75                       		rts	
0000D7D6                            ; ===========================================================================
0000D7D6                            
0000D7D6                            loc_D82A:
0000D7D6 0C05 0050                  		cmpi.b	#$50,d5
0000D7DA 6700                       		beq.s	locret_D87C
0000D7DC 1019                       		move.b	(a1)+,d0
0000D7DE 1811                       		move.b	(a1),d4
0000D7E0 4880                       		ext.w	d0
0000D7E2 4440                       		neg.w	d0
0000D7E4 E70C                       		lsl.b	#3,d4
0000D7E6 0244 0018                  		andi.w	#$18,d4
0000D7EA 5044                       		addq.w	#8,d4
0000D7EC 9044                       		sub.w	d4,d0
0000D7EE D042                       		add.w	d2,d0
0000D7F0 34C0                       		move.w	d0,(a2)+
0000D7F2 1819                       		move.b	(a1)+,d4
0000D7F4 14C4                       		move.b	d4,(a2)+
0000D7F6 5205                       		addq.b	#1,d5
0000D7F8 14C5                       		move.b	d5,(a2)+
0000D7FA 1019                       		move.b	(a1)+,d0
0000D7FC E148                       		lsl.w	#8,d0
0000D7FE 1019                       		move.b	(a1)+,d0
0000D800 D04B                       		add.w	a3,d0
0000D802 0A40 1800                  		eori.w	#$1800,d0
0000D806 34C0                       		move.w	d0,(a2)+
0000D808 1019                       		move.b	(a1)+,d0
0000D80A 4880                       		ext.w	d0
0000D80C 4440                       		neg.w	d0
0000D80E D804                       		add.b	d4,d4
0000D810 0244 0018                  		andi.w	#$18,d4
0000D814 5044                       		addq.w	#8,d4
0000D816 9044                       		sub.w	d4,d0
0000D818 D043                       		add.w	d3,d0
0000D81A 0240 01FF                  		andi.w	#$1FF,d0
0000D81E 6600                       		bne.s	loc_D876
0000D820 5240                       		addq.w	#1,d0
0000D822                            
0000D822                            loc_D876:
0000D822 34C0                       		move.w	d0,(a2)+
0000D824 51C9 FFB0                  		dbf	d1,loc_D82A
0000D828                            
0000D828                            locret_D87C:
0000D828 4E75                       		rts	
0000D82A                            ; ---------------------------------------------------------------------------
0000D82A                            ; Subroutine to	check if an object is on the screen
0000D82A                            ; ---------------------------------------------------------------------------
0000D82A                            
0000D82A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D82A                            
0000D82A                            
0000D82A                            ChkObjOnScreen:
0000D82A 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D82E 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D832 6B00                       		bmi.s	NotOnScreen
0000D834 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D838 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D83A                            
0000D83A 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D83E 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D842 6B00                       		bmi.s	NotOnScreen
0000D844 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D848 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D84A                            
0000D84A 7000                       		moveq	#0,d0		; set flag to 0
0000D84C 4E75                       		rts	
0000D84E                            ; ===========================================================================
0000D84E                            
0000D84E                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D84E 7001                       		moveq	#1,d0		; set flag to 1
0000D850 4E75                       		rts	
0000D852                            ; End of function ChkObjOnScreen
0000D852                            
0000D852                            
0000D852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D852                            
0000D852                            
0000D852                            ChkObjOnScreen2:
0000D852 7200                       		moveq	#0,d1
0000D854 1228 0019                  		move.b	$19(a0),d1
0000D858 3028 0008                  		move.w	8(a0),d0
0000D85C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D860 D041                       		add.w	d1,d0
0000D862 6B00                       		bmi.s	NotOnScreen2
0000D864 D241                       		add.w	d1,d1
0000D866 9041                       		sub.w	d1,d0
0000D868 0C40 0140                  		cmpi.w	#320,d0
0000D86C 6C00                       		bge.s	NotOnScreen2
0000D86E                            
0000D86E 3228 000C                  		move.w	$C(a0),d1
0000D872 9278 F704                  		sub.w	($FFFFF704).w,d1
0000D876 6B00                       		bmi.s	NotOnScreen2
0000D878 0C41 00E0                  		cmpi.w	#224,d1
0000D87C 6C00                       		bge.s	NotOnScreen2
0000D87E                            
0000D87E 7000                       		moveq	#0,d0
0000D880 4E75                       		rts	
0000D882                            ; ===========================================================================
0000D882                            
0000D882                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000D882 7001                       		moveq	#1,d0
0000D884 4E75                       		rts	
0000D886                            ; End of function ChkObjOnScreen2
0000D886                            
0000D886                            ; ---------------------------------------------------------------------------
0000D886                            ; Subroutine to	load a level's objects
0000D886                            ; ---------------------------------------------------------------------------
0000D886                            
0000D886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D886                            
0000D886                            
0000D886                            ObjPosLoad:				; XREF: Level; et al
0000D886 7000                       		moveq	#0,d0
0000D888 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000D88C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000D890 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000D894                            ; End of function ObjPosLoad
0000D894                            
0000D894                            ; ===========================================================================
0000D894 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000D896 0000                       		dc.w OPL_Next-OPL_Index
0000D898                            ; ===========================================================================
0000D898                            
0000D898                            OPL_Main:				; XREF: OPL_Index
0000D898 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000D89C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000D8A0 ED08                       		lsl.b	#6,d0
0000D8A2 E848                       		lsr.w	#4,d0
0000D8A4 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000D8AA 2248                       		movea.l	a0,a1
0000D8AC D0F0 0000                  		adda.w	(a0,d0.w),a0
0000D8B0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D8B4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D8B8 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000D8BC 21C9 F778                  		move.l	a1,($FFFFF778).w
0000D8C0 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000D8C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D8C8 34FC 0101                  		move.w	#$101,(a2)+
0000D8CC 303C 005E                  		move.w	#$5E,d0
0000D8D0                            
0000D8D0                            OPL_ClrList:
0000D8D0 429A                       		clr.l	(a2)+
0000D8D2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000D8D6                            
0000D8D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D8DA 7400                       		moveq	#0,d2
0000D8DC 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D8E0 0446 0080                  		subi.w	#$80,d6
0000D8E4 6400                       		bcc.s	loc_D93C
0000D8E6 7C00                       		moveq	#0,d6
0000D8E8                            
0000D8E8                            loc_D93C:
0000D8E8 0246 FF80                  		andi.w	#$FF80,d6
0000D8EC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D8F0                            
0000D8F0                            loc_D944:
0000D8F0 BC50                       		cmp.w	(a0),d6
0000D8F2 6300                       		bls.s	loc_D956
0000D8F4 4A28 0004                  		tst.b	4(a0)
0000D8F8 6A00                       		bpl.s	loc_D952
0000D8FA 1412                       		move.b	(a2),d2
0000D8FC 5212                       		addq.b	#1,(a2)
0000D8FE                            
0000D8FE                            loc_D952:
0000D8FE 5C48                       		addq.w	#6,a0
0000D900 60EE                       		bra.s	loc_D944
0000D902                            ; ===========================================================================
0000D902                            
0000D902                            loc_D956:
0000D902 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D906 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D90A 0446 0080                  		subi.w	#$80,d6
0000D90E 6500                       		bcs.s	loc_D976
0000D910                            
0000D910                            loc_D964:
0000D910 BC50                       		cmp.w	(a0),d6
0000D912 6300                       		bls.s	loc_D976
0000D914 4A28 0004                  		tst.b	4(a0)
0000D918 6A00                       		bpl.s	loc_D972
0000D91A 522A 0001                  		addq.b	#1,1(a2)
0000D91E                            
0000D91E                            loc_D972:
0000D91E 5C48                       		addq.w	#6,a0
0000D920 60EE                       		bra.s	loc_D964
0000D922                            ; ===========================================================================
0000D922                            
0000D922                            loc_D976:
0000D922 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D926 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000D92C                            
0000D92C                            OPL_Next:				; XREF: OPL_Index
0000D92C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D930 7400                       		moveq	#0,d2
0000D932 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D936 0246 FF80                  		andi.w	#$FF80,d6
0000D93A BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000D93E 6700 0000                  		beq.w	locret_DA3A
0000D942 6C00                       		bge.s	loc_D9F6
0000D944 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000D948 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D94C 0446 0080                  		subi.w	#$80,d6
0000D950 6500                       		bcs.s	loc_D9D2
0000D952                            
0000D952                            loc_D9A6:
0000D952 BC68 FFFA                  		cmp.w	-6(a0),d6
0000D956 6C00                       		bge.s	loc_D9D2
0000D958 5D48                       		subq.w	#6,a0
0000D95A 4A28 0004                  		tst.b	4(a0)
0000D95E 6A00                       		bpl.s	loc_D9BC
0000D960 532A 0001                  		subq.b	#1,1(a2)
0000D964 142A 0001                  		move.b	1(a2),d2
0000D968                            
0000D968                            loc_D9BC:
0000D968 6100 0000                  		bsr.w	loc_DA3C
0000D96C 6600                       		bne.s	loc_D9C6
0000D96E 5D48                       		subq.w	#6,a0
0000D970 60E0                       		bra.s	loc_D9A6
0000D972                            ; ===========================================================================
0000D972                            
0000D972                            loc_D9C6:
0000D972 4A28 0004                  		tst.b	4(a0)
0000D976 6A00                       		bpl.s	loc_D9D0
0000D978 522A 0001                  		addq.b	#1,1(a2)
0000D97C                            
0000D97C                            loc_D9D0:
0000D97C 5C48                       		addq.w	#6,a0
0000D97E                            
0000D97E                            loc_D9D2:
0000D97E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D982 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D986 0646 0300                  		addi.w	#$300,d6
0000D98A                            
0000D98A                            loc_D9DE:
0000D98A BC68 FFFA                  		cmp.w	-6(a0),d6
0000D98E 6E00                       		bgt.s	loc_D9F0
0000D990 4A28 FFFE                  		tst.b	-2(a0)
0000D994 6A00                       		bpl.s	loc_D9EC
0000D996 5312                       		subq.b	#1,(a2)
0000D998                            
0000D998                            loc_D9EC:
0000D998 5D48                       		subq.w	#6,a0
0000D99A 60EE                       		bra.s	loc_D9DE
0000D99C                            ; ===========================================================================
0000D99C                            
0000D99C                            loc_D9F0:
0000D99C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9A0 4E75                       		rts	
0000D9A2                            ; ===========================================================================
0000D9A2                            
0000D9A2                            loc_D9F6:
0000D9A2 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000D9A6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D9AA 0646 0280                  		addi.w	#$280,d6
0000D9AE                            
0000D9AE                            loc_DA02:
0000D9AE BC50                       		cmp.w	(a0),d6
0000D9B0 6300                       		bls.s	loc_DA16
0000D9B2 4A28 0004                  		tst.b	4(a0)
0000D9B6 6A00                       		bpl.s	loc_DA10
0000D9B8 1412                       		move.b	(a2),d2
0000D9BA 5212                       		addq.b	#1,(a2)
0000D9BC                            
0000D9BC                            loc_DA10:
0000D9BC 6100 0000                  		bsr.w	loc_DA3C
0000D9C0 67EC                       		beq.s	loc_DA02
0000D9C2                            
0000D9C2                            loc_DA16:
0000D9C2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9C6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D9CA 0446 0300                  		subi.w	#$300,d6
0000D9CE 6500                       		bcs.s	loc_DA36
0000D9D0                            
0000D9D0                            loc_DA24:
0000D9D0 BC50                       		cmp.w	(a0),d6
0000D9D2 6300                       		bls.s	loc_DA36
0000D9D4 4A28 0004                  		tst.b	4(a0)
0000D9D8 6A00                       		bpl.s	loc_DA32
0000D9DA 522A 0001                  		addq.b	#1,1(a2)
0000D9DE                            
0000D9DE                            loc_DA32:
0000D9DE 5C48                       		addq.w	#6,a0
0000D9E0 60EE                       		bra.s	loc_DA24
0000D9E2                            ; ===========================================================================
0000D9E2                            
0000D9E2                            loc_DA36:
0000D9E2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D9E6                            
0000D9E6                            locret_DA3A:
0000D9E6 4E75                       		rts	
0000D9E8                            ; ===========================================================================
0000D9E8                            
0000D9E8                            loc_DA3C:
0000D9E8 4A28 0004                  		tst.b	4(a0)
0000D9EC 6A00                       		bpl.s	OPL_MakeItem
0000D9EE 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000D9F4 6700                       		beq.s	OPL_MakeItem
0000D9F6 5C48                       		addq.w	#6,a0
0000D9F8 7000                       		moveq	#0,d0
0000D9FA 4E75                       		rts	
0000D9FC                            ; ===========================================================================
0000D9FC                            
0000D9FC                            OPL_MakeItem:
0000D9FC 6100 0000                  		bsr.w	SingleObjLoad
0000DA00 6600                       		bne.s	locret_DA8A
0000DA02 3358 0008                  		move.w	(a0)+,8(a1)
0000DA06 3018                       		move.w	(a0)+,d0
0000DA08 3200                       		move.w	d0,d1
0000DA0A 0240 0FFF                  		andi.w	#$FFF,d0
0000DA0E 3340 000C                  		move.w	d0,$C(a1)
0000DA12 E559                       		rol.w	#2,d1
0000DA14 0201 0003                  		andi.b	#3,d1
0000DA18 1341 0001                  		move.b	d1,1(a1)
0000DA1C 1341 0022                  		move.b	d1,$22(a1)
0000DA20 1018                       		move.b	(a0)+,d0
0000DA22 6A00                       		bpl.s	loc_DA80
0000DA24 0200 007F                  		andi.b	#$7F,d0
0000DA28 1342 0023                  		move.b	d2,$23(a1)
0000DA2C                            
0000DA2C                            loc_DA80:
0000DA2C 1280                       		move.b	d0,0(a1)
0000DA2E 1358 0028                  		move.b	(a0)+,$28(a1)
0000DA32 7000                       		moveq	#0,d0
0000DA34                            
0000DA34                            locret_DA8A:
0000DA34 4E75                       		rts	
0000DA36                            ; ---------------------------------------------------------------------------
0000DA36                            ; Single object	loading	subroutine
0000DA36                            ; ---------------------------------------------------------------------------
0000DA36                            
0000DA36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA36                            
0000DA36                            
0000DA36                            SingleObjLoad:
0000DA36 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DA3A 303C 005F                  		move.w	#$5F,d0
0000DA3E                            
0000DA3E                            loc_DA94:
0000DA3E 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DA40 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DA42 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DA46 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DA4A                            
0000DA4A                            locret_DAA0:
0000DA4A 4E75                       		rts	
0000DA4C                            ; End of function SingleObjLoad
0000DA4C                            
0000DA4C                            
0000DA4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA4C                            
0000DA4C                            
0000DA4C                            SingleObjLoad2:
0000DA4C 2248                       		movea.l	a0,a1
0000DA4E 303C F000                  		move.w	#-$1000,d0
0000DA52 9048                       		sub.w	a0,d0
0000DA54 EC48                       		lsr.w	#6,d0
0000DA56 5340                       		subq.w	#1,d0
0000DA58 6500                       		bcs.s	locret_DABC
0000DA5A                            
0000DA5A                            loc_DAB0:
0000DA5A 4A11                       		tst.b	(a1)
0000DA5C 6700                       		beq.s	locret_DABC
0000DA5E 43E9 0040                  		lea	$40(a1),a1
0000DA62 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DA66                            
0000DA66                            locret_DABC:
0000DA66 4E75                       		rts	
0000DA68                            ; End of function SingleObjLoad2
0000DA68                            
0000DA68                            ; ===========================================================================
0000DA68                            ; ---------------------------------------------------------------------------
0000DA68                            ; Object 41 - springs
0000DA68                            ; ---------------------------------------------------------------------------
0000DA68                            
0000DA68                            Obj41:					; XREF: Obj_Index
0000DA68 7000                       		moveq	#0,d0
0000DA6A 1028 0024                  		move.b	$24(a0),d0
0000DA6E 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DA72 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DA76 6100 FB38                  		bsr.w	DisplaySprite
0000DA7A 3028 0008                  		move.w	8(a0),d0
0000DA7E 0240 FF80                  		andi.w	#$FF80,d0
0000DA82 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA86 0441 0080                  		subi.w	#$80,d1
0000DA8A 0241 FF80                  		andi.w	#$FF80,d1
0000DA8E 9041                       		sub.w	d1,d0
0000DA90 0C40 0280                  		cmpi.w	#$280,d0
0000DA94 6200 FB56                  		bhi.w	DeleteObject
0000DA98 4E75                       		rts	
0000DA9A                            ; ===========================================================================
0000DA9A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DA9C 0000                       		dc.w Obj41_Up-Obj41_Index
0000DA9E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DAA0 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DAA2 0000                       		dc.w Obj41_LR-Obj41_Index
0000DAA4 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DAA6 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DAA8 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DAAA 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DAAC 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DAAE                            
0000DAAE F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DAB0 F600                       		dc.w -$A00		; power	of yellow spring
0000DAB2                            ; ===========================================================================
0000DAB2                            
0000DAB2                            Obj41_Main:				; XREF: Obj41_Index
0000DAB2 5428 0024                  		addq.b	#2,$24(a0)
0000DAB6 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DABE 317C 0523 0002             		move.w	#$523,2(a0)
0000DAC4 0028 0004 0001             		ori.b	#4,1(a0)
0000DACA 117C 0010 0019             		move.b	#$10,$19(a0)
0000DAD0 117C 0004 0018             		move.b	#4,$18(a0)
0000DAD6 1028 0028                  		move.b	$28(a0),d0
0000DADA 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DADE 6700                       		beq.s	loc_DB54	; if not, branch
0000DAE0 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DAE6 117C 0001 001C             		move.b	#1,$1C(a0)
0000DAEC 117C 0003 001A             		move.b	#3,$1A(a0)
0000DAF2 317C 0533 0002             		move.w	#$533,2(a0)
0000DAF8 117C 0008 0019             		move.b	#8,$19(a0)
0000DAFE                            
0000DAFE                            loc_DB54:
0000DAFE 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DB02 6700                       		beq.s	loc_DB66	; if not, branch
0000DB04 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DB0A 08E8 0001 0022             		bset	#1,$22(a0)
0000DB10                            
0000DB10                            loc_DB66:
0000DB10 0800 0001                  		btst	#1,d0
0000DB14 6700                       		beq.s	loc_DB72
0000DB16 08E8 0005 0002             		bset	#5,2(a0)
0000DB1C                            
0000DB1C                            loc_DB72:
0000DB1C 0240 000F                  		andi.w	#$F,d0
0000DB20 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DB26 4E75                       		rts	
0000DB28                            ; ===========================================================================
0000DB28                            
0000DB28                            Obj41_Up:				; XREF: Obj41_Index
0000DB28 323C 001B                  		move.w	#$1B,d1
0000DB2C 343C 0008                  		move.w	#8,d2
0000DB30 363C 0010                  		move.w	#$10,d3
0000DB34 3828 0008                  		move.w	8(a0),d4
0000DB38 6100 0000                  		bsr.w	SolidObject
0000DB3C 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DB40 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DB42 4E75                       		rts	
0000DB44                            ; ===========================================================================
0000DB44                            
0000DB44                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DB44 5428 0024                  		addq.b	#2,$24(a0)
0000DB48 5069 000C                  		addq.w	#8,$C(a1)
0000DB4C 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DB52 08E9 0001 0022             		bset	#1,$22(a1)
0000DB58 08A9 0003 0022             		bclr	#3,$22(a1)
0000DB5E 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DB64 137C 0002 0024             		move.b	#2,$24(a1)
0000DB6A 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB70 4228 0025                  		clr.b	$25(a0)
0000DB74 303C 00CC                  		move.w	#$CC,d0
0000DB78 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play spring sound
0000DB7E                            
0000DB7E                            Obj41_AniUp:				; XREF: Obj41_Index
0000DB7E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DB84 6000 CB66                  		bra.w	AnimateSprite
0000DB88                            ; ===========================================================================
0000DB88                            
0000DB88                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DB88 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DB8E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DB92 4E75                       		rts	
0000DB94                            ; ===========================================================================
0000DB94                            
0000DB94                            Obj41_LR:				; XREF: Obj41_Index
0000DB94 323C 0013                  		move.w	#$13,d1
0000DB98 343C 000E                  		move.w	#$E,d2
0000DB9C 363C 000F                  		move.w	#$F,d3
0000DBA0 3828 0008                  		move.w	8(a0),d4
0000DBA4 6100 0000                  		bsr.w	SolidObject
0000DBA8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DBAE 6600                       		bne.s	loc_DC0C
0000DBB0 117C 0008 0024             		move.b	#8,$24(a0)
0000DBB6                            
0000DBB6                            loc_DC0C:
0000DBB6 0828 0005 0022             		btst	#5,$22(a0)
0000DBBC 6600                       		bne.s	Obj41_BounceLR
0000DBBE 4E75                       		rts	
0000DBC0                            ; ===========================================================================
0000DBC0                            
0000DBC0                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DBC0 5428 0024                  		addq.b	#2,$24(a0)
0000DBC4 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DBCA 5069 0008                  		addq.w	#8,8(a1)
0000DBCE 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DBD4 6600                       		bne.s	loc_DC36	; if yes, branch
0000DBD6 0469 0010 0008             		subi.w	#$10,8(a1)
0000DBDC 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DBE0                            
0000DBE0                            loc_DC36:
0000DBE0 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DBE6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBEC 0869 0000 0022             		bchg	#0,$22(a1)
0000DBF2 0829 0002 0022             		btst	#2,$22(a1)
0000DBF8 6600                       		bne.s	loc_DC56
0000DBFA 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DC00                            
0000DC00                            loc_DC56:
0000DC00 08A8 0005 0022             		bclr	#5,$22(a0)
0000DC06 08A9 0005 0022             		bclr	#5,$22(a1)
0000DC0C 303C 00CC                  		move.w	#$CC,d0
0000DC10 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC16                            
0000DC16                            Obj41_AniLR:				; XREF: Obj41_Index
0000DC16 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC1C 6000 CACE                  		bra.w	AnimateSprite
0000DC20                            ; ===========================================================================
0000DC20                            
0000DC20                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DC20 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DC26 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DC2A 4E75                       		rts	
0000DC2C                            ; ===========================================================================
0000DC2C                            
0000DC2C                            Obj41_Dwn:				; XREF: Obj41_Index
0000DC2C 323C 001B                  		move.w	#$1B,d1
0000DC30 343C 0008                  		move.w	#8,d2
0000DC34 363C 0010                  		move.w	#$10,d3
0000DC38 3828 0008                  		move.w	8(a0),d4
0000DC3C 6100 0000                  		bsr.w	SolidObject
0000DC40 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DC46 6600                       		bne.s	loc_DCA4
0000DC48 117C 000E 0024             		move.b	#$E,$24(a0)
0000DC4E                            
0000DC4E                            loc_DCA4:
0000DC4E 4A28 0025                  		tst.b	$25(a0)
0000DC52 6600                       		bne.s	locret_DCAE
0000DC54 4A44                       		tst.w	d4
0000DC56 6B00                       		bmi.s	Obj41_BounceDwn
0000DC58                            
0000DC58                            locret_DCAE:
0000DC58 4E75                       		rts	
0000DC5A                            ; ===========================================================================
0000DC5A                            
0000DC5A                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DC5A 5428 0024                  		addq.b	#2,$24(a0)
0000DC5E 5169 000C                  		subq.w	#8,$C(a1)
0000DC62 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DC68 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DC6C 08E9 0001 0022             		bset	#1,$22(a1)
0000DC72 08A9 0003 0022             		bclr	#3,$22(a1)
0000DC78 137C 0002 0024             		move.b	#2,$24(a1)
0000DC7E 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC84 4228 0025                  		clr.b	$25(a0)
0000DC88 303C 00CC                  		move.w	#$CC,d0
0000DC8C 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC92                            
0000DC92                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DC92 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC98 6000 CA52                  		bra.w	AnimateSprite
0000DC9C                            ; ===========================================================================
0000DC9C                            
0000DC9C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DC9C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DCA2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DCA6 4E75                       		rts	
0000DCA8                            ; ===========================================================================
0000DCA8                            Ani_obj41:
0000DCA8                            	include "_anim\obj41.asm"
0000DCA8                            ; ---------------------------------------------------------------------------
0000DCA8                            ; Animation script - springs
0000DCA8                            ; ---------------------------------------------------------------------------
0000DCA8 0000                       		dc.w byte_DD02-Ani_obj41
0000DCAA 0000                       		dc.w byte_DD0E-Ani_obj41
0000DCAC 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DCB8 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DCC4                            		even
0000DCC4                            		even
0000DCC4                            
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            ; Sprite mappings - springs
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            Map_obj41:
0000DCC4                            	include "_maps\obj41.asm"
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            ; Sprite mappings - springs
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4 0000                       		dc.w byte_DD26-Map_obj41
0000DCC6 0000                       		dc.w byte_DD31-Map_obj41
0000DCC8 0000                       		dc.w byte_DD37-Map_obj41
0000DCCA 0000                       		dc.w byte_DD47-Map_obj41
0000DCCC 0000                       		dc.w byte_DD4D-Map_obj41
0000DCCE 0000                       		dc.w byte_DD53-Map_obj41
0000DCD0 02                         byte_DD26:	dc.b 2
0000DCD1 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DCD6 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DCDB 01                         byte_DD31:	dc.b 1
0000DCDC 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DCE1 03                         byte_DD37:	dc.b 3
0000DCE2 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DCE7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DCEC 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DCF1 01                         byte_DD47:	dc.b 1
0000DCF2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DCF7 01                         byte_DD4D:	dc.b 1
0000DCF8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DCFD 04                         byte_DD53:	dc.b 4
0000DCFE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DD03 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DD08 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DD0D 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DD12                            		even
0000DD12                            		even
0000DD12                            
0000DD12                            ; ===========================================================================
0000DD12                            ; ---------------------------------------------------------------------------
0000DD12                            ; Object 42 - Newtron enemy (GHZ)
0000DD12                            ; ---------------------------------------------------------------------------
0000DD12                            
0000DD12                            Obj42:					; XREF: Obj_Index
0000DD12 7000                       		moveq	#0,d0
0000DD14 1028 0024                  		move.b	$24(a0),d0
0000DD18 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DD1C 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DD20                            ; ===========================================================================
0000DD20 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DD22 0000                       		dc.w Obj42_Action-Obj42_Index
0000DD24 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DD26                            ; ===========================================================================
0000DD26                            
0000DD26                            Obj42_Main:				; XREF: Obj42_Index
0000DD26 5428 0024                  		addq.b	#2,$24(a0)
0000DD2A 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DD32 317C 049B 0002             		move.w	#$49B,2(a0)
0000DD38 117C 0004 0001             		move.b	#4,1(a0)
0000DD3E 117C 0004 0018             		move.b	#4,$18(a0)
0000DD44 117C 0014 0019             		move.b	#$14,$19(a0)
0000DD4A 117C 0010 0016             		move.b	#$10,$16(a0)
0000DD50 117C 0008 0017             		move.b	#8,$17(a0)
0000DD56                            
0000DD56                            Obj42_Action:				; XREF: Obj42_Index
0000DD56 7000                       		moveq	#0,d0
0000DD58 1028 0025                  		move.b	$25(a0),d0
0000DD5C 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DD60 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DD64 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DD6A 6100 C980                  		bsr.w	AnimateSprite
0000DD6E 6000 0000                  		bra.w	MarkObjGone
0000DD72                            ; ===========================================================================
0000DD72 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DD74 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DD76 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DD78 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DD7A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DD7C                            ; ===========================================================================
0000DD7C                            
0000DD7C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DD7C 08E8 0000 0022             		bset	#0,$22(a0)
0000DD82 3038 D008                  		move.w	($FFFFD008).w,d0
0000DD86 9068 0008                  		sub.w	8(a0),d0
0000DD8A 6400                       		bcc.s	loc_DDEA
0000DD8C 4440                       		neg.w	d0
0000DD8E 08A8 0000 0022             		bclr	#0,$22(a0)
0000DD94                            
0000DD94                            loc_DDEA:
0000DD94 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DD98 6400                       		bcc.s	locret_DE12	; if not, branch
0000DD9A 5428 0025                  		addq.b	#2,$25(a0)
0000DD9E 117C 0001 001C             		move.b	#1,$1C(a0)
0000DDA4 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DDA8 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DDAA 317C 249B 0002             		move.w	#$249B,2(a0)
0000DDB0 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DDB6 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DDBC                            
0000DDBC                            locret_DE12:
0000DDBC 4E75                       		rts	
0000DDBE                            ; ===========================================================================
0000DDBE                            
0000DDBE                            Obj42_Type00:				; XREF: Obj42_Index2
0000DDBE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DDC4 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DDC6 08E8 0000 0022             		bset	#0,$22(a0)
0000DDCC 3038 D008                  		move.w	($FFFFD008).w,d0
0000DDD0 9068 0008                  		sub.w	8(a0),d0
0000DDD4 6400                       		bcc.s	locret_DE32
0000DDD6 08A8 0000 0022             		bclr	#0,$22(a0)
0000DDDC                            
0000DDDC                            locret_DE32:
0000DDDC 4E75                       		rts	
0000DDDE                            ; ===========================================================================
0000DDDE                            
0000DDDE                            Obj42_Fall:				; XREF: Obj42_Type00
0000DDDE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DDE4 6600                       		bne.s	loc_DE42
0000DDE6 117C 000C 0020             		move.b	#$C,$20(a0)
0000DDEC                            
0000DDEC                            loc_DE42:
0000DDEC 6100 F770                  		bsr.w	ObjectFall
0000DDF0 6100 0000                  		bsr.w	ObjHitFloor
0000DDF4 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DDF6 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DDF8 D368 000C                  		add.w	d1,$C(a0)
0000DDFC 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DE02 5428 0025                  		addq.b	#2,$25(a0)
0000DE06 117C 0002 001C             		move.b	#2,$1C(a0)
0000DE0C 0828 0005 0002             		btst	#5,2(a0)
0000DE12 6700                       		beq.s	Obj42_Move
0000DE14 5228 001C                  		addq.b	#1,$1C(a0)
0000DE18                            
0000DE18                            Obj42_Move:
0000DE18 117C 000D 0020             		move.b	#$D,$20(a0)
0000DE1E 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DE24 0828 0000 0022             		btst	#0,$22(a0)
0000DE2A 6600                       		bne.s	locret_DE86
0000DE2C 4468 0010                  		neg.w	$10(a0)
0000DE30                            
0000DE30                            locret_DE86:
0000DE30 4E75                       		rts	
0000DE32                            ; ===========================================================================
0000DE32                            
0000DE32                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DE32 6100 F756                  		bsr.w	SpeedToPos
0000DE36 6100 0000                  		bsr.w	ObjHitFloor
0000DE3A 0C41 FFF8                  		cmpi.w	#-8,d1
0000DE3E 6D00                       		blt.s	loc_DEA2
0000DE40 0C41 000C                  		cmpi.w	#$C,d1
0000DE44 6C00                       		bge.s	loc_DEA2
0000DE46 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DE4A 4E75                       		rts	
0000DE4C                            ; ===========================================================================
0000DE4C                            
0000DE4C                            loc_DEA2:
0000DE4C 5428 0025                  		addq.b	#2,$25(a0)
0000DE50 4E75                       		rts	
0000DE52                            ; ===========================================================================
0000DE52                            
0000DE52                            Obj42_Speed:				; XREF: Obj42_Index2
0000DE52 6100 F736                  		bsr.w	SpeedToPos
0000DE56 4E75                       		rts	
0000DE58                            ; ===========================================================================
0000DE58                            
0000DE58                            Obj42_Type01:				; XREF: Obj42_Index2
0000DE58 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DE5E 6600                       		bne.s	Obj42_FireMissile
0000DE60 117C 000C 0020             		move.b	#$C,$20(a0)
0000DE66                            
0000DE66                            Obj42_FireMissile:
0000DE66 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DE6C 6600                       		bne.s	locret_DF14
0000DE6E 4A28 0032                  		tst.b	$32(a0)
0000DE72 6600                       		bne.s	locret_DF14
0000DE74 117C 0001 0032             		move.b	#1,$32(a0)
0000DE7A 6100 FBBA                  		bsr.w	SingleObjLoad
0000DE7E 6600                       		bne.s	locret_DF14
0000DE80 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000DE84 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DE90 5169 000C                  		subq.w	#8,$C(a1)
0000DE94 337C 0200 0010             		move.w	#$200,$10(a1)
0000DE9A 303C 0014                  		move.w	#$14,d0
0000DE9E 0828 0000 0022             		btst	#0,$22(a0)
0000DEA4 6600                       		bne.s	loc_DF04
0000DEA6 4440                       		neg.w	d0
0000DEA8 4469 0010                  		neg.w	$10(a1)
0000DEAC                            
0000DEAC                            loc_DF04:
0000DEAC D169 0008                  		add.w	d0,8(a1)
0000DEB0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000DEB6 137C 0001 0028             		move.b	#1,$28(a1)
0000DEBC                            
0000DEBC                            locret_DF14:
0000DEBC 4E75                       		rts	
0000DEBE                            ; ===========================================================================
0000DEBE                            
0000DEBE                            Obj42_Delete:				; XREF: Obj42_Index
0000DEBE 6000 F72C                  		bra.w	DeleteObject
0000DEC2                            ; ===========================================================================
0000DEC2                            Ani_obj42:
0000DEC2                            	include "_anim\obj42.asm"
0000DEC2                            ; ---------------------------------------------------------------------------
0000DEC2                            ; Animation script - Newtron enemy
0000DEC2                            ; ---------------------------------------------------------------------------
0000DEC2 0000                       		dc.w byte_DF24-Ani_obj42
0000DEC4 0000                       		dc.w byte_DF28-Ani_obj42
0000DEC6 0000                       		dc.w byte_DF30-Ani_obj42
0000DEC8 0000                       		dc.w byte_DF34-Ani_obj42
0000DECA 0000                       		dc.w byte_DF38-Ani_obj42
0000DECC 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000DED0 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000DED8 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000DEDC 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000DEE0 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000DEEA                            		even
0000DEEA                            		even
0000DEEA                            
0000DEEA                            ; ---------------------------------------------------------------------------
0000DEEA                            ; Sprite mappings - Newtron enemy (GHZ)
0000DEEA                            ; ---------------------------------------------------------------------------
0000DEEA                            Map_obj42:
0000DEEA                            	include "_maps\obj42.asm"
0000DEEA                            ; ---------------------------------------------------------------------------
0000DEEA                            ; Sprite mappings - Newtron enemy (GHZ)
0000DEEA                            ; ---------------------------------------------------------------------------
0000DEEA 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000DEEE 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000DEF2 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000DEF6 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000DEFA 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000DEFE 0000                       		dc.w byte_DFF8-Map_obj42
0000DF00 03                         byte_DF58:	dc.b 3
0000DF01 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000DF06 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000DF0B FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000DF10 03                         byte_DF68:	dc.b 3
0000DF11 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000DF16 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF1B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000DF20 03                         byte_DF78:	dc.b 3
0000DF21 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000DF26 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF2B FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000DF30 04                         byte_DF88:	dc.b 4
0000DF31 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000DF36 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF3B FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000DF40 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000DF45 03                         byte_DF9D:	dc.b 3
0000DF46 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000DF4B FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000DF50 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000DF55 02                         byte_DFAD:	dc.b 2
0000DF56 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF5B F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF60 03                         byte_DFB8:	dc.b 3
0000DF61 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF66 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF6B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000DF70 03                         byte_DFC8:	dc.b 3
0000DF71 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF76 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF7B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000DF80 03                         byte_DFD8:	dc.b 3
0000DF81 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF86 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF8B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000DF90 03                         byte_DFE8:	dc.b 3
0000DF91 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF96 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF9B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000DFA0 00                         byte_DFF8:	dc.b 0
0000DFA2 00                         		even
0000DFA2 00                         		even
0000DFA2                            
0000DFA2                            ; ===========================================================================
0000DFA2                            ; ---------------------------------------------------------------------------
0000DFA2                            ; Object 43 - Roller enemy (SYZ)
0000DFA2                            ; ---------------------------------------------------------------------------
0000DFA2                            
0000DFA2                            Obj43:					; XREF: Obj_Index
0000DFA2 7000                       		moveq	#0,d0
0000DFA4 1028 0024                  		move.b	$24(a0),d0
0000DFA8 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000DFAC 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000DFB0                            ; ===========================================================================
0000DFB0 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000DFB2 0000                       		dc.w Obj43_Action-Obj43_Index
0000DFB4                            ; ===========================================================================
0000DFB4                            
0000DFB4                            Obj43_Main:				; XREF: Obj43_Index
0000DFB4 117C 000E 0016             		move.b	#$E,$16(a0)
0000DFBA 117C 0008 0017             		move.b	#8,$17(a0)
0000DFC0 6100 F59C                  		bsr.w	ObjectFall
0000DFC4 6100 0000                  		bsr.w	ObjHitFloor
0000DFC8 4A41                       		tst.w	d1
0000DFCA 6A00                       		bpl.s	locret_E052
0000DFCC D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000DFD0 317C 0000 0012             		move.w	#0,$12(a0)
0000DFD6 5428 0024                  		addq.b	#2,$24(a0)
0000DFDA 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000DFE2 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000DFE8 117C 0004 0001             		move.b	#4,1(a0)
0000DFEE 117C 0004 0018             		move.b	#4,$18(a0)
0000DFF4 117C 0010 0019             		move.b	#$10,$19(a0)
0000DFFA                            
0000DFFA                            locret_E052:
0000DFFA 4E75                       		rts	
0000DFFC                            ; ===========================================================================
0000DFFC                            
0000DFFC                            Obj43_Action:				; XREF: Obj43_Index
0000DFFC 7000                       		moveq	#0,d0
0000DFFE 1028 0025                  		move.b	$25(a0),d0
0000E002 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E006 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E00A 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E010 6100 C6DA                  		bsr.w	AnimateSprite
0000E014 3028 0008                  		move.w	8(a0),d0
0000E018 0240 FF80                  		andi.w	#$FF80,d0
0000E01C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E020 0441 0080                  		subi.w	#$80,d1
0000E024 0241 FF80                  		andi.w	#$FF80,d1
0000E028 9041                       		sub.w	d1,d0
0000E02A 0C40 0280                  		cmpi.w	#$280,d0
0000E02E 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E032 6000 F57C                  		bra.w	DisplaySprite
0000E036                            ; ===========================================================================
0000E036                            
0000E036                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E036 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E03A 7000                       		moveq	#0,d0
0000E03C 1028 0023                  		move.b	$23(a0),d0
0000E040 6700                       		beq.s	Obj43_Delete
0000E042 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E048                            
0000E048                            Obj43_Delete:
0000E048 6000 F5A2                  		bra.w	DeleteObject
0000E04C                            ; ===========================================================================
0000E04C 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E04E 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E050 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E052 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E054                            ; ===========================================================================
0000E054                            
0000E054                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E054 3038 D008                  		move.w	($FFFFD008).w,d0
0000E058 0440 0100                  		subi.w	#$100,d0
0000E05C 6500                       		bcs.s	loc_E0D2
0000E05E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E062 6500                       		bcs.s	loc_E0D2
0000E064 5828 0025                  		addq.b	#4,$25(a0)
0000E068 117C 0002 001C             		move.b	#2,$1C(a0)
0000E06E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E074 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E07A                            
0000E07A                            loc_E0D2:
0000E07A 588F                       		addq.l	#4,sp
0000E07C 4E75                       		rts	
0000E07E                            ; ===========================================================================
0000E07E                            
0000E07E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E07E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E084 6700                       		beq.s	loc_E0F8
0000E086 5368 0030                  		subq.w	#1,$30(a0)
0000E08A 6A00                       		bpl.s	locret_E0F6
0000E08C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E092 317C 0700 0010             		move.w	#$700,$10(a0)
0000E098 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E09E                            
0000E09E                            locret_E0F6:
0000E09E 4E75                       		rts	
0000E0A0                            ; ===========================================================================
0000E0A0                            
0000E0A0                            loc_E0F8:
0000E0A0 5428 0025                  		addq.b	#2,$25(a0)
0000E0A4 4E75                       		rts	
0000E0A6                            ; ===========================================================================
0000E0A6                            
0000E0A6                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E0A6 6100 0000                  		bsr.w	Obj43_Stop
0000E0AA 6100 F4DE                  		bsr.w	SpeedToPos
0000E0AE 6100 0000                  		bsr.w	ObjHitFloor
0000E0B2 0C41 FFF8                  		cmpi.w	#-8,d1
0000E0B6 6D00                       		blt.s	Obj43_Jump
0000E0B8 0C41 000C                  		cmpi.w	#$C,d1
0000E0BC 6C00                       		bge.s	Obj43_Jump
0000E0BE D368 000C                  		add.w	d1,$C(a0)
0000E0C2 4E75                       		rts	
0000E0C4                            ; ===========================================================================
0000E0C4                            
0000E0C4                            Obj43_Jump:
0000E0C4 5428 0025                  		addq.b	#2,$25(a0)
0000E0C8 08E8 0000 0032             		bset	#0,$32(a0)
0000E0CE 6700                       		beq.s	locret_E12E
0000E0D0 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E0D6                            
0000E0D6                            locret_E12E:
0000E0D6 4E75                       		rts	
0000E0D8                            ; ===========================================================================
0000E0D8                            
0000E0D8                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E0D8 6100 F484                  		bsr.w	ObjectFall
0000E0DC 4A68 0012                  		tst.w	$12(a0)
0000E0E0 6B00                       		bmi.s	locret_E150
0000E0E2 6100 0000                  		bsr.w	ObjHitFloor
0000E0E6 4A41                       		tst.w	d1
0000E0E8 6A00                       		bpl.s	locret_E150
0000E0EA D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E0EE 5528 0025                  		subq.b	#2,$25(a0)
0000E0F2 317C 0000 0012             		move.w	#0,$12(a0)
0000E0F8                            
0000E0F8                            locret_E150:
0000E0F8 4E75                       		rts	
0000E0FA                            
0000E0FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0FA                            
0000E0FA                            
0000E0FA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E0FA 4A28 0032                  		tst.b	$32(a0)
0000E0FE 6B00                       		bmi.s	locret_E188
0000E100 3038 D008                  		move.w	($FFFFD008).w,d0
0000E104 0440 0030                  		subi.w	#$30,d0
0000E108 9068 0008                  		sub.w	8(a0),d0
0000E10C 6400                       		bcc.s	locret_E188
0000E10E 117C 0000 001C             		move.b	#0,$1C(a0)
0000E114 117C 000E 0020             		move.b	#$E,$20(a0)
0000E11A 4268 0010                  		clr.w	$10(a0)
0000E11E 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E124 117C 0002 0025             		move.b	#2,$25(a0)
0000E12A 08E8 0007 0032             		bset	#7,$32(a0)
0000E130                            
0000E130                            locret_E188:
0000E130 4E75                       		rts	
0000E132                            ; End of function Obj43_Stop
0000E132                            
0000E132                            ; ===========================================================================
0000E132                            Ani_obj43:
0000E132                            	include "_anim\obj43.asm"
0000E132                            ; ---------------------------------------------------------------------------
0000E132                            ; Animation script - Roller enemy
0000E132                            ; ---------------------------------------------------------------------------
0000E132 0000                       		dc.w byte_E190-Ani_obj43
0000E134 0000                       		dc.w byte_E196-Ani_obj43
0000E136 0000                       		dc.w byte_E19C-Ani_obj43
0000E138 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E13E 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E144 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E14A 00                         		even
0000E14A 00                         		even
0000E14A                            
0000E14A                            ; ---------------------------------------------------------------------------
0000E14A                            ; Sprite mappings - Roller enemy (SYZ)
0000E14A                            ; ---------------------------------------------------------------------------
0000E14A                            Map_obj43:
0000E14A                            	include "_maps\obj43.asm"
0000E14A                            ; ---------------------------------------------------------------------------
0000E14A                            ; Sprite mappings - Roller enemy (SYZ)
0000E14A                            ; ---------------------------------------------------------------------------
0000E14A 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E14E 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E152 0000                       		dc.w byte_E1CE-Map_obj43
0000E154 02                         byte_E1AC:	dc.b 2
0000E155 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E15A F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E15F 02                         byte_E1B7:	dc.b 2
0000E160 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E165 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E16A 01                         byte_E1C2:	dc.b 1
0000E16B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E170 01                         byte_E1C8:	dc.b 1
0000E171 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E176 01                         byte_E1CE:	dc.b 1
0000E177 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E17C                            		even
0000E17C                            		even
0000E17C                            
0000E17C                            ; ===========================================================================
0000E17C                            ; ---------------------------------------------------------------------------
0000E17C                            ; Object 44 - walls (GHZ)
0000E17C                            ; ---------------------------------------------------------------------------
0000E17C                            
0000E17C                            Obj44:					; XREF: Obj_Index
0000E17C 7000                       		moveq	#0,d0
0000E17E 1028 0024                  		move.b	$24(a0),d0
0000E182 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E186 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E18A                            ; ===========================================================================
0000E18A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E18C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E18E 0000                       		dc.w Obj44_Display-Obj44_Index
0000E190                            ; ===========================================================================
0000E190                            
0000E190                            Obj44_Main:				; XREF: Obj44_Index
0000E190 5428 0024                  		addq.b	#2,$24(a0)
0000E194 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E19C 317C 434C 0002             		move.w	#$434C,2(a0)
0000E1A2 0028 0004 0001             		ori.b	#4,1(a0)
0000E1A8 117C 0008 0019             		move.b	#8,$19(a0)
0000E1AE 117C 0006 0018             		move.b	#6,$18(a0)
0000E1B4 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E1BA 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E1C0 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E1C2 5428 0024                  		addq.b	#2,$24(a0)
0000E1C6 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E1C8                            ; ===========================================================================
0000E1C8                            
0000E1C8                            Obj44_Solid:				; XREF: Obj44_Index
0000E1C8 323C 0013                  		move.w	#$13,d1
0000E1CC 343C 0028                  		move.w	#$28,d2
0000E1D0 6100 A878                  		bsr.w	Obj44_SolidWall
0000E1D4                            
0000E1D4                            Obj44_Display:				; XREF: Obj44_Index
0000E1D4 6100 F3DA                  		bsr.w	DisplaySprite
0000E1D8 3028 0008                  		move.w	8(a0),d0
0000E1DC 0240 FF80                  		andi.w	#$FF80,d0
0000E1E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1E4 0441 0080                  		subi.w	#$80,d1
0000E1E8 0241 FF80                  		andi.w	#$FF80,d1
0000E1EC 9041                       		sub.w	d1,d0
0000E1EE 0C40 0280                  		cmpi.w	#$280,d0
0000E1F2 6200 F3F8                  		bhi.w	DeleteObject
0000E1F6 4E75                       		rts	
0000E1F8                            ; ===========================================================================
0000E1F8                            ; ---------------------------------------------------------------------------
0000E1F8                            ; Sprite mappings - walls (GHZ)
0000E1F8                            ; ---------------------------------------------------------------------------
0000E1F8                            Map_obj44:
0000E1F8                            	include "_maps\obj44.asm"
0000E1F8                            ; ---------------------------------------------------------------------------
0000E1F8                            ; Sprite mappings - walls (GHZ)
0000E1F8                            ; ---------------------------------------------------------------------------
0000E1F8 0000                       		dc.w byte_E256-Map_obj44
0000E1FA 0000                       		dc.w byte_E26B-Map_obj44
0000E1FC 0000                       		dc.w byte_E280-Map_obj44
0000E1FE 04                         byte_E256:	dc.b 4
0000E1FF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E204 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E209 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E20E 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E213 04                         byte_E26B:	dc.b 4
0000E214 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E219 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E21E 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E223 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E228 04                         byte_E280:	dc.b 4
0000E229 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E22E F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E233 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E238 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E23E 00                         		even
0000E23E 00                         		even
0000E23E                            
0000E23E                            ; ===========================================================================
0000E23E                            ; ---------------------------------------------------------------------------
0000E23E                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E23E                            ; ---------------------------------------------------------------------------
0000E23E                            
0000E23E                            Obj13:					; XREF: Obj_Index
0000E23E 7000                       		moveq	#0,d0
0000E240 1028 0024                  		move.b	$24(a0),d0
0000E244 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E248 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E24C 6000 0000                  		bra.w	Obj14_ChkDel
0000E250                            ; ===========================================================================
0000E250 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E252 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E254                            ; ---------------------------------------------------------------------------
0000E254                            ;
0000E254                            ; Lava ball production rates
0000E254                            ;
0000E254 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E25A                            ; ===========================================================================
0000E25A                            
0000E25A                            Obj13_Main:				; XREF: Obj13_Index
0000E25A 5428 0024                  		addq.b	#2,$24(a0)
0000E25E 1028 0028                  		move.b	$28(a0),d0
0000E262 E848                       		lsr.w	#4,d0
0000E264 0240 000F                  		andi.w	#$F,d0
0000E268 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E26E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E274 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E27A                            
0000E27A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E27A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E27E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E280 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E286 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E28A 6600                       		bne.s	locret_E302
0000E28C 6100 F7A8                  		bsr.w	SingleObjLoad
0000E290 6600                       		bne.s	locret_E302
0000E292 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E296 3368 0008 0008             		move.w	8(a0),8(a1)
0000E29C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E2A2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E2A8                            
0000E2A8                            locret_E302:
0000E2A8 4E75                       		rts	
0000E2AA                            ; ===========================================================================
0000E2AA                            ; ---------------------------------------------------------------------------
0000E2AA                            ; Object 14 - lava balls (MZ, SLZ)
0000E2AA                            ; ---------------------------------------------------------------------------
0000E2AA                            
0000E2AA                            Obj14:					; XREF: Obj_Index
0000E2AA 7000                       		moveq	#0,d0
0000E2AC 1028 0024                  		move.b	$24(a0),d0
0000E2B0 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E2B4 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E2B8 6000 F2F6                  		bra.w	DisplaySprite
0000E2BC                            ; ===========================================================================
0000E2BC 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E2BE 0000                       		dc.w Obj14_Action-Obj14_Index
0000E2C0 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E2C2                            
0000E2C2 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E2CC 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E2D4                            ; ===========================================================================
0000E2D4                            
0000E2D4                            Obj14_Main:				; XREF: Obj14_Index
0000E2D4 5428 0024                  		addq.b	#2,$24(a0)
0000E2D8 117C 0008 0016             		move.b	#8,$16(a0)
0000E2DE 117C 0008 0017             		move.b	#8,$17(a0)
0000E2E4 217C 0000 B33E 0004        		move.l	#Map_obj14,4(a0)
0000E2EC 317C 0345 0002             		move.w	#$345,2(a0)
0000E2F2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E2F8 6600                       		bne.s	loc_E35A
0000E2FA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E300                            
0000E300                            loc_E35A:
0000E300 117C 0004 0001             		move.b	#4,1(a0)
0000E306 117C 0003 0018             		move.b	#3,$18(a0)
0000E30C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E312 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E318 4A28 0029                  		tst.b	$29(a0)
0000E31C 6700                       		beq.s	Obj14_SetSpeed
0000E31E 5428 0018                  		addq.b	#2,$18(a0)
0000E322                            
0000E322                            Obj14_SetSpeed:
0000E322 7000                       		moveq	#0,d0
0000E324 1028 0028                  		move.b	$28(a0),d0
0000E328 D040                       		add.w	d0,d0
0000E32A 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E330 117C 0008 0019             		move.b	#8,$19(a0)
0000E336 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E33C 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E33E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E344 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E34A 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E350 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E356                            
0000E356                            Obj14_PlaySnd:
0000E356 303C 00AE                  		move.w	#$AE,d0
0000E35A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E360                            
0000E360                            Obj14_Action:				; XREF: Obj14_Index
0000E360 7000                       		moveq	#0,d0
0000E362 1028 0028                  		move.b	$28(a0),d0
0000E366 D040                       		add.w	d0,d0
0000E368 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E36C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E370 6100 F218                  		bsr.w	SpeedToPos
0000E374 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E37A 6100 C370                  		bsr.w	AnimateSprite
0000E37E                            
0000E37E                            Obj14_ChkDel:				; XREF: Obj13
0000E37E 3028 0008                  		move.w	8(a0),d0
0000E382 0240 FF80                  		andi.w	#$FF80,d0
0000E386 3238 F700                  		move.w	($FFFFF700).w,d1
0000E38A 0441 0080                  		subi.w	#$80,d1
0000E38E 0241 FF80                  		andi.w	#$FF80,d1
0000E392 9041                       		sub.w	d1,d0
0000E394 0C40 0280                  		cmpi.w	#$280,d0
0000E398 6200 F252                  		bhi.w	DeleteObject
0000E39C 4E75                       		rts	
0000E39E                            ; ===========================================================================
0000E39E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E3A2 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E3A6 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E3AA 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E3AE 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E3B0                            ; ===========================================================================
0000E3B0                            ; lavaball types 00-03 fly up and fall back down
0000E3B0                            
0000E3B0                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E3B0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E3B6 3028 0030                  		move.w	$30(a0),d0
0000E3BA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E3BE 6400                       		bcc.s	loc_E41E	; if not, branch
0000E3C0 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E3C4                            
0000E3C4                            loc_E41E:
0000E3C4 08A8 0001 0022             		bclr	#1,$22(a0)
0000E3CA 4A68 0012                  		tst.w	$12(a0)
0000E3CE 6A00                       		bpl.s	locret_E430
0000E3D0 08E8 0001 0022             		bset	#1,$22(a0)
0000E3D6                            
0000E3D6                            locret_E430:
0000E3D6 4E75                       		rts	
0000E3D8                            ; ===========================================================================
0000E3D8                            ; lavaball type	04 flies up until it hits the ceiling
0000E3D8                            
0000E3D8                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E3D8 08E8 0001 0022             		bset	#1,$22(a0)
0000E3DE 6100 0000                  		bsr.w	ObjHitCeiling
0000E3E2 4A41                       		tst.w	d1
0000E3E4 6A00                       		bpl.s	locret_E452
0000E3E6 117C 0008 0028             		move.b	#8,$28(a0)
0000E3EC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3F2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E3F8                            
0000E3F8                            locret_E452:
0000E3F8 4E75                       		rts	
0000E3FA                            ; ===========================================================================
0000E3FA                            ; lavaball type	05 falls down until it hits the	floor
0000E3FA                            
0000E3FA                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E3FA 08A8 0001 0022             		bclr	#1,$22(a0)
0000E400 6100 0000                  		bsr.w	ObjHitFloor
0000E404 4A41                       		tst.w	d1
0000E406 6A00                       		bpl.s	locret_E474
0000E408 117C 0008 0028             		move.b	#8,$28(a0)
0000E40E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E414 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E41A                            
0000E41A                            locret_E474:
0000E41A 4E75                       		rts	
0000E41C                            ; ===========================================================================
0000E41C                            ; lavaball types 06-07 move sideways
0000E41C                            
0000E41C                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E41C 08E8 0000 0022             		bset	#0,$22(a0)
0000E422 76F8                       		moveq	#-8,d3
0000E424 6100 0000                  		bsr.w	ObjHitWallLeft
0000E428 4A41                       		tst.w	d1
0000E42A 6A00                       		bpl.s	locret_E498
0000E42C 117C 0008 0028             		move.b	#8,$28(a0)
0000E432 117C 0003 001C             		move.b	#3,$1C(a0)
0000E438 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E43E                            
0000E43E                            locret_E498:
0000E43E 4E75                       		rts	
0000E440                            ; ===========================================================================
0000E440                            
0000E440                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E440 08A8 0000 0022             		bclr	#0,$22(a0)
0000E446 7608                       		moveq	#8,d3
0000E448 6100 0000                  		bsr.w	ObjHitWallRight
0000E44C 4A41                       		tst.w	d1
0000E44E 6A00                       		bpl.s	locret_E4BC
0000E450 117C 0008 0028             		move.b	#8,$28(a0)
0000E456 117C 0003 001C             		move.b	#3,$1C(a0)
0000E45C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E462                            
0000E462                            locret_E4BC:
0000E462 4E75                       		rts	
0000E464                            ; ===========================================================================
0000E464                            
0000E464                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E464 4E75                       		rts	
0000E466                            ; ===========================================================================
0000E466                            
0000E466                            Obj14_Delete:				; XREF: Obj14_Index
0000E466 6000 F184                  		bra.w	DeleteObject
0000E46A                            ; ===========================================================================
0000E46A                            Ani_obj14:
0000E46A                            	include "_anim\obj14.asm"
0000E46A                            ; ---------------------------------------------------------------------------
0000E46A                            ; Animation script - lava balls
0000E46A                            ; ---------------------------------------------------------------------------
0000E46A 0000                       		dc.w byte_E4CC-Ani_obj14
0000E46C 0000                       		dc.w byte_E4D2-Ani_obj14
0000E46E 0000                       		dc.w byte_E4D6-Ani_obj14
0000E470 0000                       		dc.w byte_E4DC-Ani_obj14
0000E472 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E478 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E47C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E482 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E486                            		even
0000E486                            		even
0000E486                            
0000E486                            ; ===========================================================================
0000E486                            ; ---------------------------------------------------------------------------
0000E486                            ; Object 6D - flame thrower (SBZ)
0000E486                            ; ---------------------------------------------------------------------------
0000E486                            
0000E486                            Obj6D:					; XREF: Obj_Index
0000E486 7000                       		moveq	#0,d0
0000E488 1028 0024                  		move.b	$24(a0),d0
0000E48C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E490 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E494                            ; ===========================================================================
0000E494 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E496 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E498                            ; ===========================================================================
0000E498                            
0000E498                            Obj6D_Main:				; XREF: Obj6D_Index
0000E498 5428 0024                  		addq.b	#2,$24(a0)
0000E49C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E4A4 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E4AA 0028 0004 0001             		ori.b	#4,1(a0)
0000E4B0 117C 0001 0018             		move.b	#1,$18(a0)
0000E4B6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E4BC 117C 000C 0019             		move.b	#$C,$19(a0)
0000E4C2 1028 0028                  		move.b	$28(a0),d0
0000E4C6 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E4CA D040                       		add.w	d0,d0		; multiply by 2
0000E4CC 3140 0030                  		move.w	d0,$30(a0)
0000E4D0 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E4D4 1028 0028                  		move.b	$28(a0),d0
0000E4D8 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E4DC EB48                       		lsl.w	#5,d0		; multiply by $20
0000E4DE 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E4E2 117C 000A 0036             		move.b	#$A,$36(a0)
0000E4E8 0828 0001 0022             		btst	#1,$22(a0)
0000E4EE 6700                       		beq.s	Obj6D_Action
0000E4F0 117C 0002 001C             		move.b	#2,$1C(a0)
0000E4F6 117C 0015 0036             		move.b	#$15,$36(a0)
0000E4FC                            
0000E4FC                            Obj6D_Action:				; XREF: Obj6D_Index
0000E4FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E500 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E502 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E508 0868 0000 001C             		bchg	#0,$1C(a0)
0000E50E 6700                       		beq.s	loc_E57A
0000E510 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E516 303C 00B3                  		move.w	#$B3,d0
0000E51A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play flame sound
0000E520                            
0000E520                            loc_E57A:
0000E520 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E526 6100 C1C4                  		bsr.w	AnimateSprite
0000E52A 117C 0000 0020             		move.b	#0,$20(a0)
0000E530 1028 0036                  		move.b	$36(a0),d0
0000E534 B028 001A                  		cmp.b	$1A(a0),d0
0000E538 6600                       		bne.s	Obj6D_ChkDel
0000E53A 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E540                            
0000E540                            Obj6D_ChkDel:
0000E540 3028 0008                  		move.w	8(a0),d0
0000E544 0240 FF80                  		andi.w	#$FF80,d0
0000E548 3238 F700                  		move.w	($FFFFF700).w,d1
0000E54C 0441 0080                  		subi.w	#$80,d1
0000E550 0241 FF80                  		andi.w	#$FF80,d1
0000E554 9041                       		sub.w	d1,d0
0000E556 0C40 0280                  		cmpi.w	#$280,d0
0000E55A 6200 F090                  		bhi.w	DeleteObject
0000E55E 6000 F050                  		bra.w	DisplaySprite
0000E562                            ; ===========================================================================
0000E562                            Ani_obj6D:
0000E562                            	include "_anim\obj6D.asm"
0000E562                            ; ---------------------------------------------------------------------------
0000E562                            ; Animation script - flamethrower (SBZ)
0000E562                            ; ---------------------------------------------------------------------------
0000E562 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E564 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E566 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E568 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E56A 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E578 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E582 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E590 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E59A                            		even
0000E59A                            		even
0000E59A                            
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            ; Sprite mappings - flame thrower (SBZ)
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            Map_obj6D:
0000E59A                            	include "_maps\obj6D.asm"
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            ; Sprite mappings - flame thrower (SBZ)
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E59E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E5A2 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E5A6 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E5AA 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E5AE 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E5B2 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E5B6 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E5BA 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E5BE 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E5C2 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E5C6 01                         byte_E620:	dc.b 1
0000E5C7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5CC 02                         byte_E626:	dc.b 2
0000E5CD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5D2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5D7 02                         byte_E631:	dc.b 2
0000E5D8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E5DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5E2 03                         byte_E63C:	dc.b 3
0000E5E3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E5E8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5F2 03                         byte_E64C:	dc.b 3
0000E5F3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E5F8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E5FD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E602 04                         byte_E65C:	dc.b 4
0000E603 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E608 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E60D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E612 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E617 04                         byte_E671:	dc.b 4
0000E618 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E61D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E622 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E627 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E62C 05                         byte_E686:	dc.b 5
0000E62D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E632 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E637 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E63C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E641 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E646 05                         byte_E6A0:	dc.b 5
0000E647 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E64C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E651 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E656 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E65B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E660 06                         byte_E6BA:	dc.b 6
0000E661 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E666 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E66B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E670 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E675 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E67A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E67F 06                         byte_E6D9:	dc.b 6
0000E680 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E685 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E68A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E68F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E694 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E699 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E69E 01                         byte_E6F8:	dc.b 1
0000E69F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6A4 02                         byte_E6FE:	dc.b 2
0000E6A5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6AA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6AF 02                         byte_E709:	dc.b 2
0000E6B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6B5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6BA 03                         byte_E714:	dc.b 3
0000E6BB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6C0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6C5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6CA 03                         byte_E724:	dc.b 3
0000E6CB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6D0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6D5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6DA 04                         byte_E734:	dc.b 4
0000E6DB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E6E0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6E5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6EA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6EF 04                         byte_E749:	dc.b 4
0000E6F0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E6F5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6FA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6FF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E704 05                         byte_E75E:	dc.b 5
0000E705 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E70A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E70F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E714 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E719 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E71E 05                         byte_E778:	dc.b 5
0000E71F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E724 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E729 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E72E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E733 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E738 06                         byte_E792:	dc.b 6
0000E739 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E73E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E743 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E748 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E74D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E752 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E757 06                         byte_E7B1:	dc.b 6
0000E758 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E75D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E762 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E767 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E76C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E771 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E776                            		even
0000E776                            		even
0000E776                            
0000E776                            ; ===========================================================================
0000E776                            ; ---------------------------------------------------------------------------
0000E776                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E776                            ; ---------------------------------------------------------------------------
0000E776                            
0000E776                            Obj46:					; XREF: Obj_Index
0000E776 7000                       		moveq	#0,d0
0000E778 1028 0024                  		move.b	$24(a0),d0
0000E77C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E780 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E784                            ; ===========================================================================
0000E784 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E786 0000                       		dc.w Obj46_Action-Obj46_Index
0000E788                            ; ===========================================================================
0000E788                            
0000E788                            Obj46_Main:				; XREF: Obj46_Index
0000E788 5428 0024                  		addq.b	#2,$24(a0)
0000E78C 117C 000F 0016             		move.b	#$F,$16(a0)
0000E792 117C 000F 0017             		move.b	#$F,$17(a0)
0000E798 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E7A0 317C 4000 0002             		move.w	#$4000,2(a0)
0000E7A6 117C 0004 0001             		move.b	#4,1(a0)
0000E7AC 117C 0003 0018             		move.b	#3,$18(a0)
0000E7B2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E7BE 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E7C4                            
0000E7C4                            Obj46_Action:				; XREF: Obj46_Index
0000E7C4 4A28 0001                  		tst.b	1(a0)
0000E7C8 6A00                       		bpl.s	Obj46_ChkDel
0000E7CA 7000                       		moveq	#0,d0
0000E7CC 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E7D0 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E7D4 D040                       		add.w	d0,d0
0000E7D6 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E7DA 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E7DE 323C 001B                  		move.w	#$1B,d1
0000E7E2 343C 0010                  		move.w	#$10,d2
0000E7E6 363C 0011                  		move.w	#$11,d3
0000E7EA 3828 0008                  		move.w	8(a0),d4
0000E7EE 6100 0000                  		bsr.w	SolidObject
0000E7F2                            
0000E7F2                            Obj46_ChkDel:
0000E7F2 6100 EDBC                  		bsr.w	DisplaySprite
0000E7F6 3028 0008                  		move.w	8(a0),d0
0000E7FA 0240 FF80                  		andi.w	#$FF80,d0
0000E7FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E802 0441 0080                  		subi.w	#$80,d1
0000E806 0241 FF80                  		andi.w	#$FF80,d1
0000E80A 9041                       		sub.w	d1,d0
0000E80C 0C40 0280                  		cmpi.w	#$280,d0
0000E810 6200 EDDA                  		bhi.w	DeleteObject
0000E814 4E75                       		rts	
0000E816                            ; ===========================================================================
0000E816 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E818 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E81A 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E81C 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E81E 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E820                            ; ===========================================================================
0000E820                            
0000E820                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E820 4E75                       		rts	
0000E822                            ; ===========================================================================
0000E822                            
0000E822                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E822 3038 D008                  		move.w	($FFFFD008).w,d0
0000E826 9068 0008                  		sub.w	8(a0),d0
0000E82A 6400                       		bcc.s	loc_E888
0000E82C 4440                       		neg.w	d0
0000E82E                            
0000E82E                            loc_E888:
0000E82E 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E832 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E834 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E83A                            
0000E83A                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E83A 7000                       		moveq	#0,d0
0000E83C 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E840 0828 0003 0028             		btst	#3,$28(a0)
0000E846 6700                       		beq.s	loc_E8A8
0000E848 4440                       		neg.w	d0
0000E84A 0640 0010                  		addi.w	#$10,d0
0000E84E                            
0000E84E                            loc_E8A8:
0000E84E 3228 0030                  		move.w	$30(a0),d1
0000E852 9240                       		sub.w	d0,d1
0000E854 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E858 4E75                       		rts	
0000E85A                            ; ===========================================================================
0000E85A                            
0000E85A                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E85A 6100 ED2E                  		bsr.w	SpeedToPos
0000E85E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E864 6100 0000                  		bsr.w	ObjHitFloor
0000E868 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E86A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E86E D368 000C                  		add.w	d1,$C(a0)
0000E872 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000E876 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E87C 117C 0004 0028             		move.b	#4,$28(a0)
0000E882 3011                       		move.w	(a1),d0
0000E884 0240 03FF                  		andi.w	#$3FF,d0
0000E888 0C40 02E8                  		cmpi.w	#$2E8,d0
0000E88C 6400                       		bcc.s	locret_E8EE
0000E88E 117C 0000 0028             		move.b	#0,$28(a0)
0000E894                            
0000E894                            locret_E8EE:
0000E894 4E75                       		rts	
0000E896                            ; ===========================================================================
0000E896                            
0000E896                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000E896 7000                       		moveq	#0,d0
0000E898 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E89C E648                       		lsr.w	#3,d0
0000E89E 3228 0030                  		move.w	$30(a0),d1
0000E8A2 9240                       		sub.w	d0,d1
0000E8A4 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000E8A8 4E75                       		rts	
0000E8AA                            ; ===========================================================================
0000E8AA                            ; ---------------------------------------------------------------------------
0000E8AA                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E8AA                            ; ---------------------------------------------------------------------------
0000E8AA                            Map_obj46:
0000E8AA                            	include "_maps\obj46.asm"
0000E8AA                            ; ---------------------------------------------------------------------------
0000E8AA                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E8AA                            ; ---------------------------------------------------------------------------
0000E8AA 0000                       		dc.w byte_E906-Map_obj46
0000E8AC 01                         byte_E906:	dc.b 1
0000E8AD F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000E8B2                            		even
0000E8B2                            		even
0000E8B2                            
0000E8B2                            ; ===========================================================================
0000E8B2                            ; ---------------------------------------------------------------------------
0000E8B2                            ; Object 12 - lamp (SYZ)
0000E8B2                            ; ---------------------------------------------------------------------------
0000E8B2                            
0000E8B2                            Obj12:					; XREF: Obj_Index
0000E8B2 7000                       		moveq	#0,d0
0000E8B4 1028 0024                  		move.b	$24(a0),d0
0000E8B8 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000E8BC 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000E8C0                            ; ===========================================================================
0000E8C0 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000E8C2 0000                       		dc.w Obj12_Animate-Obj12_Index
0000E8C4                            ; ===========================================================================
0000E8C4                            
0000E8C4                            Obj12_Main:				; XREF: Obj12_Index
0000E8C4 5428 0024                  		addq.b	#2,$24(a0)
0000E8C8 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000E8D0 317C 0000 0002             		move.w	#0,2(a0)
0000E8D6 117C 0004 0001             		move.b	#4,1(a0)
0000E8DC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8E2 117C 0006 0018             		move.b	#6,$18(a0)
0000E8E8                            
0000E8E8                            Obj12_Animate:				; XREF: Obj12_Index
0000E8E8 5328 001E                  		subq.b	#1,$1E(a0)
0000E8EC 6A00                       		bpl.s	Obj12_ChkDel
0000E8EE 117C 0007 001E             		move.b	#7,$1E(a0)
0000E8F4 5228 001A                  		addq.b	#1,$1A(a0)
0000E8F8 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000E8FE 6500                       		bcs.s	Obj12_ChkDel
0000E900 117C 0000 001A             		move.b	#0,$1A(a0)
0000E906                            
0000E906                            Obj12_ChkDel:
0000E906 3028 0008                  		move.w	8(a0),d0
0000E90A 0240 FF80                  		andi.w	#$FF80,d0
0000E90E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E912 0441 0080                  		subi.w	#$80,d1
0000E916 0241 FF80                  		andi.w	#$FF80,d1
0000E91A 9041                       		sub.w	d1,d0
0000E91C 0C40 0280                  		cmpi.w	#$280,d0
0000E920 6200 ECCA                  		bhi.w	DeleteObject
0000E924 6000 EC8A                  		bra.w	DisplaySprite
0000E928                            ; ===========================================================================
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            ; Sprite mappings - lamp (SYZ)
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            Map_obj12:
0000E928                            	include "_maps\obj12.asm"
0000E928                            ; ---------------------------------------------------------------------------
0000E928                            ; Sprite mappings - lamp (SYZ)
0000E928                            ; ---------------------------------------------------------------------------
0000E928 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000E92C 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000E930 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000E934 02                         byte_E98E:	dc.b 2
0000E935 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000E93A 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000E93F 02                         byte_E999:	dc.b 2
0000E940 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000E945 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000E94A 02                         byte_E9A4:	dc.b 2
0000E94B F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000E950 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000E955 02                         byte_E9AF:	dc.b 2
0000E956 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000E95B 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000E960 02                         byte_E9BA:	dc.b 2
0000E961 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000E966 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000E96B 02                         byte_E9C5:	dc.b 2
0000E96C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000E971 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000E976                            		even
0000E976                            		even
0000E976                            
0000E976                            ; ===========================================================================
0000E976                            ; ---------------------------------------------------------------------------
0000E976                            ; Object 47 - pinball bumper (SYZ)
0000E976                            ; ---------------------------------------------------------------------------
0000E976                            
0000E976                            Obj47:					; XREF: Obj_Index
0000E976 7000                       		moveq	#0,d0
0000E978 1028 0024                  		move.b	$24(a0),d0
0000E97C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000E980 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000E984                            ; ===========================================================================
0000E984 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000E986 0000                       		dc.w Obj47_Hit-Obj47_Index
0000E988                            ; ===========================================================================
0000E988                            
0000E988                            Obj47_Main:				; XREF: Obj47_Index
0000E988 5428 0024                  		addq.b	#2,$24(a0)
0000E98C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000E994 317C 0380 0002             		move.w	#$380,2(a0)
0000E99A 117C 0004 0001             		move.b	#4,1(a0)
0000E9A0 117C 0010 0019             		move.b	#$10,$19(a0)
0000E9A6 117C 0001 0018             		move.b	#1,$18(a0)
0000E9AC 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000E9B2                            
0000E9B2                            Obj47_Hit:				; XREF: Obj47_Index
0000E9B2 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000E9B6 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000E9BA 4228 0021                  		clr.b	$21(a0)
0000E9BE 43F8 D000                  		lea	($FFFFD000).w,a1
0000E9C2 3228 0008                  		move.w	8(a0),d1
0000E9C6 3428 000C                  		move.w	$C(a0),d2
0000E9CA 9269 0008                  		sub.w	8(a1),d1
0000E9CE 9469 000C                  		sub.w	$C(a1),d2
0000E9D2 4EB9 0000 2C88             		jsr	(CalcAngle).l
0000E9D8 4EB9 0000 29BA             		jsr	(CalcSine).l
0000E9DE C3FC F900                  		muls.w	#-$700,d1
0000E9E2 E081                       		asr.l	#8,d1
0000E9E4 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000E9E8 C1FC F900                  		muls.w	#-$700,d0
0000E9EC E080                       		asr.l	#8,d0
0000E9EE 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000E9F2 08E9 0001 0022             		bset	#1,$22(a1)
0000E9F8 08A9 0004 0022             		bclr	#4,$22(a1)
0000E9FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000EA04 4229 003C                  		clr.b	$3C(a1)
0000EA08 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA0E 303C 00B4                  		move.w	#$B4,d0
0000EA12 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EA18 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA1C 7000                       		moveq	#0,d0
0000EA1E 1028 0023                  		move.b	$23(a0),d0
0000EA22 6700                       		beq.s	Obj47_Score
0000EA24 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EA2A 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EA2C 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EA30                            
0000EA30                            Obj47_Score:
0000EA30 7001                       		moveq	#1,d0
0000EA32 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EA38 6100 EFFC                  		bsr.w	SingleObjLoad
0000EA3C 6600                       		bne.s	Obj47_Display
0000EA3E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EA42 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA48 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA4E 137C 0004 001A             		move.b	#4,$1A(a1)
0000EA54                            
0000EA54                            Obj47_Display:
0000EA54 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EA5A 6100 BC90                  		bsr.w	AnimateSprite
0000EA5E 3028 0008                  		move.w	8(a0),d0
0000EA62 0240 FF80                  		andi.w	#$FF80,d0
0000EA66 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA6A 0441 0080                  		subi.w	#$80,d1
0000EA6E 0241 FF80                  		andi.w	#$FF80,d1
0000EA72 9041                       		sub.w	d1,d0
0000EA74 0C40 0280                  		cmpi.w	#$280,d0
0000EA78 6200                       		bhi.s	Obj47_ChkHit
0000EA7A 6000 EB34                  		bra.w	DisplaySprite
0000EA7E                            ; ===========================================================================
0000EA7E                            
0000EA7E                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EA7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA82 7000                       		moveq	#0,d0
0000EA84 1028 0023                  		move.b	$23(a0),d0
0000EA88 6700                       		beq.s	Obj47_Delete
0000EA8A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA90                            
0000EA90                            Obj47_Delete:
0000EA90 6000 EB5A                  		bra.w	DeleteObject
0000EA94                            ; ===========================================================================
0000EA94                            Ani_obj47:
0000EA94                            	include "_anim\obj47.asm"
0000EA94                            ; ---------------------------------------------------------------------------
0000EA94                            ; Animation script - flamethrower (SBZ)
0000EA94                            ; ---------------------------------------------------------------------------
0000EA94 0000                       		dc.w byte_EAF4-Ani_obj47
0000EA96 0000                       		dc.w byte_EAF8-Ani_obj47
0000EA98 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EA9C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EAA4                            		even
0000EAA4                            		even
0000EAA4                            
0000EAA4                            ; ---------------------------------------------------------------------------
0000EAA4                            ; Sprite mappings - pinball bumper (SYZ)
0000EAA4                            ; ---------------------------------------------------------------------------
0000EAA4                            Map_obj47:
0000EAA4                            	include "_maps\obj47.asm"
0000EAA4                            ; ---------------------------------------------------------------------------
0000EAA4                            ; Sprite mappings - pinball bumper (SYZ)
0000EAA4                            ; ---------------------------------------------------------------------------
0000EAA4 0000                       		dc.w byte_EB06-Map_obj47
0000EAA6 0000                       		dc.w byte_EB11-Map_obj47
0000EAA8 0000                       		dc.w byte_EB1C-Map_obj47
0000EAAA 02                         byte_EB06:	dc.b 2
0000EAAB F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EAB0 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EAB5 02                         byte_EB11:	dc.b 2
0000EAB6 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EABB F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EAC0 02                         byte_EB1C:	dc.b 2
0000EAC1 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EAC6 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EACC 00                         		even
0000EACC 00                         		even
0000EACC                            
0000EACC                            ; ===========================================================================
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC                            ; Object 0D - signpost at the end of a level
0000EACC                            ; ---------------------------------------------------------------------------
0000EACC                            
0000EACC                            Obj0D:					; XREF: Obj_Index
0000EACC 7000                       		moveq	#0,d0
0000EACE 1028 0024                  		move.b	$24(a0),d0
0000EAD2 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EAD6 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EADA 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EAE0 6100 BC0A                  		bsr.w	AnimateSprite
0000EAE4 6100 EACA                  		bsr.w	DisplaySprite
0000EAE8 3028 0008                  		move.w	8(a0),d0
0000EAEC 0240 FF80                  		andi.w	#$FF80,d0
0000EAF0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAF4 0441 0080                  		subi.w	#$80,d1
0000EAF8 0241 FF80                  		andi.w	#$FF80,d1
0000EAFC 9041                       		sub.w	d1,d0
0000EAFE 0C40 0280                  		cmpi.w	#$280,d0
0000EB02 6200 EAE8                  		bhi.w	DeleteObject
0000EB06 4E75                       		rts	
0000EB08                            ; ===========================================================================
0000EB08 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EB0A 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EB0C 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EB0E 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EB10 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EB12                            ; ===========================================================================
0000EB12                            
0000EB12                            Obj0D_Main:				; XREF: Obj0D_Index
0000EB12 5428 0024                  		addq.b	#2,$24(a0)
0000EB16 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EB1E 317C 0680 0002             		move.w	#$680,2(a0)
0000EB24 117C 0004 0001             		move.b	#4,1(a0)
0000EB2A 117C 0018 0019             		move.b	#$18,$19(a0)
0000EB30 117C 0004 0018             		move.b	#4,$18(a0)
0000EB36                            
0000EB36                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EB36 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB3A 9068 0008                  		sub.w	8(a0),d0
0000EB3E 6500                       		bcs.s	locret_EBBA
0000EB40 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EB44 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EB46 303C 00CF                  		move.w	#$CF,d0
0000EB4A 4EB9 0000 12C6             		jsr	(PlaySound).l	; play signpost	sound
0000EB50 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EB54 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EB5A 5428 0024                  		addq.b	#2,$24(a0)
0000EB5E                            
0000EB5E                            locret_EBBA:
0000EB5E 4E75                       		rts	
0000EB60                            ; ===========================================================================
0000EB60                            
0000EB60                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EB60 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EB64 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EB66 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EB6C 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EB70 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EB76 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EB78 5428 0024                  		addq.b	#2,$24(a0)
0000EB7C                            
0000EB7C                            Obj0D_Sparkle:
0000EB7C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EB80 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EB82 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000EB88 7000                       		moveq	#0,d0
0000EB8A 1028 0034                  		move.b	$34(a0),d0
0000EB8E 5428 0034                  		addq.b	#2,$34(a0)
0000EB92 0228 000E 0034             		andi.b	#$E,$34(a0)
0000EB98 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000EB9C 6100 EE98                  		bsr.w	SingleObjLoad
0000EBA0 6600                       		bne.s	locret_EC42
0000EBA2 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000EBA6 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000EBAC 101A                       		move.b	(a2)+,d0
0000EBAE 4880                       		ext.w	d0
0000EBB0 D068 0008                  		add.w	8(a0),d0
0000EBB4 3340 0008                  		move.w	d0,8(a1)
0000EBB8 101A                       		move.b	(a2)+,d0
0000EBBA 4880                       		ext.w	d0
0000EBBC D068 000C                  		add.w	$C(a0),d0
0000EBC0 3340 000C                  		move.w	d0,$C(a1)
0000EBC4 237C 0000 9F60 0004        		move.l	#Map_obj25,4(a1)
0000EBCC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000EBD2 137C 0004 0001             		move.b	#4,1(a1)
0000EBD8 137C 0002 0018             		move.b	#2,$18(a1)
0000EBDE 137C 0008 0019             		move.b	#8,$19(a1)
0000EBE4                            
0000EBE4                            locret_EC42:
0000EBE4 4E75                       		rts	
0000EBE6                            ; ===========================================================================
0000EBE6 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000EBE8 0808                       		dc.b	8,   8
0000EBEA F000                       		dc.b -$10,   0
0000EBEC 18F8                       		dc.b  $18,  -8
0000EBEE 00F8                       		dc.b	0,  -8
0000EBF0 1000                       		dc.b  $10,   0
0000EBF2 E808                       		dc.b -$18,   8
0000EBF4 1810                       		dc.b  $18, $10
0000EBF6                            ; ===========================================================================
0000EBF6                            
0000EBF6                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000EBF6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000EBFA 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000EBFE 0838 0001 D022             		btst	#1,($FFFFD022).w
0000EC04 6600                       		bne.s	loc_EC70
0000EC06 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000EC0C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EC12                            
0000EC12                            loc_EC70:
0000EC12 4A38 D000                  		tst.b	($FFFFD000).w
0000EC16 6700                       		beq.s	loc_EC86
0000EC18 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC1C 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EC20 0641 0128                  		addi.w	#$128,d1
0000EC24 B041                       		cmp.w	d1,d0
0000EC26 6500                       		bcs.s	locret_ECEE
0000EC28                            
0000EC28                            loc_EC86:
0000EC28 5428 0024                  		addq.b	#2,$24(a0)
0000EC2C                            
0000EC2C                            ; ---------------------------------------------------------------------------
0000EC2C                            ; Subroutine to	set up bonuses at the end of an	act
0000EC2C                            ; ---------------------------------------------------------------------------
0000EC2C                            
0000EC2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC2C                            
0000EC2C                            
0000EC2C                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EC2C 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EC30 6600                       		bne.s	locret_ECEE
0000EC32 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EC38 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EC3C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EC40 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000EC46 7010                       		moveq	#$10,d0
0000EC48 4EB9 0000 1572             		jsr	(LoadPLC2).l	; load title card patterns
0000EC4E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000EC54 7000                       		moveq	#0,d0
0000EC56 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000EC5A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000EC5E 7200                       		moveq	#0,d1
0000EC60 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000EC64 D041                       		add.w	d1,d0		; add up your time
0000EC66 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000EC6A 7214                       		moveq	#$14,d1
0000EC6C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000EC6E 6500                       		bcs.s	loc_ECD0	; if not, branch
0000EC70 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000EC72                            
0000EC72                            loc_ECD0:
0000EC72 D040                       		add.w	d0,d0
0000EC74 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EC7A 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EC7E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EC82 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EC86 303C 0099                  		move.w	#$99,d0
0000EC8A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EC90                            
0000EC90                            locret_ECEE:
0000EC90 4E75                       		rts	
0000EC92                            ; End of function GotThroughAct
0000EC92                            
0000EC92                            ; ===========================================================================
0000EC92 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000ECA6 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000ECBC                            ; ===========================================================================
0000ECBC                            
0000ECBC                            locret_ED1A:				; XREF: Obj0D_Index
0000ECBC 4E75                       		rts	
0000ECBE                            ; ===========================================================================
0000ECBE                            Ani_obj0D:
0000ECBE                            	include "_anim\obj0D.asm"
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE                            ; Animation script - signpost
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE 0000                       		dc.w byte_ED24-Ani_obj0D
0000ECC0 0000                       		dc.w byte_ED28-Ani_obj0D
0000ECC2 0000                       		dc.w byte_ED2E-Ani_obj0D
0000ECC4 0000                       		dc.w byte_ED34-Ani_obj0D
0000ECC6 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000ECCA 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000ECD0 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000ECD6 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000ECDA 00                         		even
0000ECDA 00                         		even
0000ECDA                            
0000ECDA                            ; ---------------------------------------------------------------------------
0000ECDA                            ; Sprite mappings - signpost
0000ECDA                            ; ---------------------------------------------------------------------------
0000ECDA                            Map_obj0D:
0000ECDA                            	include "_maps\obj0D.asm"
0000ECDA                            ; ---------------------------------------------------------------------------
0000ECDA                            ; Sprite mappings - signpost
0000ECDA                            ; ---------------------------------------------------------------------------
0000ECDA 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000ECDE 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000ECE2 0000                       		dc.w byte_ED73-Map_obj0D
0000ECE4 03                         byte_ED42:	dc.b 3
0000ECE5 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000ECEA F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000ECEF 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ECF4 02                         byte_ED52:	dc.b 2
0000ECF5 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000ECFA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ECFF 02                         byte_ED5D:	dc.b 2
0000ED00 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000ED05 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000ED0A 02                         byte_ED68:	dc.b 2
0000ED0B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000ED10 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000ED15 03                         byte_ED73:	dc.b 3
0000ED16 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000ED1B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000ED20 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ED26 00                         		even
0000ED26 00                         		even
0000ED26                            
0000ED26                            ; ===========================================================================
0000ED26                            ; ---------------------------------------------------------------------------
0000ED26                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000ED26                            ; ---------------------------------------------------------------------------
0000ED26                            
0000ED26                            Obj4C:					; XREF: Obj_Index
0000ED26 7000                       		moveq	#0,d0
0000ED28 1028 0024                  		move.b	$24(a0),d0
0000ED2C 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000ED30 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000ED34 6000 0000                  		bra.w	Obj4D_ChkDel
0000ED38                            ; ===========================================================================
0000ED38 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000ED3A 0000                       		dc.w loc_EDCC-Obj4C_Index
0000ED3C 0000                       		dc.w loc_EE3E-Obj4C_Index
0000ED3E 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000ED40 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000ED42 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000ED44                            ; ===========================================================================
0000ED44                            
0000ED44                            Obj4C_Main:				; XREF: Obj4C_Index
0000ED44 5428 0024                  		addq.b	#2,$24(a0)
0000ED48 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000ED50 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000ED56 117C 0004 0001             		move.b	#4,1(a0)
0000ED5C 117C 0001 0018             		move.b	#1,$18(a0)
0000ED62 117C 0038 0019             		move.b	#$38,$19(a0)
0000ED68 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000ED6E                            
0000ED6E                            loc_EDCC:				; XREF: Obj4C_Index
0000ED6E 5368 0032                  		subq.w	#1,$32(a0)
0000ED72 6A00                       		bpl.s	locret_EDF0
0000ED74 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000ED7A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000ED7E 3228 000C                  		move.w	$C(a0),d1
0000ED82 B041                       		cmp.w	d1,d0
0000ED84 6400                       		bcc.s	locret_EDF0
0000ED86 0441 0170                  		subi.w	#$170,d1
0000ED8A B041                       		cmp.w	d1,d0
0000ED8C 6500                       		bcs.s	locret_EDF0
0000ED8E 5428 0024                  		addq.b	#2,$24(a0)
0000ED92                            
0000ED92                            locret_EDF0:
0000ED92 4E75                       		rts	
0000ED94                            ; ===========================================================================
0000ED94                            
0000ED94                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000ED94 5428 0024                  		addq.b	#2,$24(a0)
0000ED98 6100 ECB2                  		bsr.w	SingleObjLoad2
0000ED9C 6600                       		bne.s	loc_EE18
0000ED9E 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EDA2 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDAE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EDB4 2348 003C                  		move.l	a0,$3C(a1)
0000EDB8                            
0000EDB8                            loc_EE18:
0000EDB8 117C 0001 001C             		move.b	#1,$1C(a0)
0000EDBE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EDC2 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EDC4 117C 0004 001C             		move.b	#4,$1C(a0)
0000EDCA 6000                       		bra.s	Obj4C_Display
0000EDCC                            ; ===========================================================================
0000EDCC                            
0000EDCC                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EDCC 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EDD0 08E9 0001 0022             		bset	#1,$22(a1)
0000EDD6 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EDDC 6000                       		bra.s	Obj4C_Display
0000EDDE                            ; ===========================================================================
0000EDDE                            
0000EDDE                            loc_EE3E:				; XREF: Obj4C_Index
0000EDDE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EDE2 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EDE4 5428 0024                  		addq.b	#2,$24(a0)
0000EDE8 4E75                       		rts	
0000EDEA                            ; ===========================================================================
0000EDEA                            
0000EDEA                            Obj4C_Display:				; XREF: Obj4C_Index
0000EDEA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EDF0 6100 B8FA                  		bsr.w	AnimateSprite
0000EDF4 6100 E7BA                  		bsr.w	DisplaySprite
0000EDF8 4E75                       		rts	
0000EDFA                            ; ===========================================================================
0000EDFA                            
0000EDFA                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EDFA 117C 0000 001C             		move.b	#0,$1C(a0)
0000EE00 117C 0002 0024             		move.b	#2,$24(a0)
0000EE06 4A28 0028                  		tst.b	$28(a0)
0000EE0A 6700 E7E0                  		beq.w	DeleteObject
0000EE0E 4E75                       		rts	
0000EE10                            ; ===========================================================================
0000EE10                            ; ---------------------------------------------------------------------------
0000EE10                            ; Object 4D - lava geyser / lavafall (MZ)
0000EE10                            ; ---------------------------------------------------------------------------
0000EE10                            
0000EE10                            Obj4D:					; XREF: Obj_Index
0000EE10 7000                       		moveq	#0,d0
0000EE12 1028 0024                  		move.b	$24(a0),d0
0000EE16 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EE1A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EE1E 6000 E790                  		bra.w	DisplaySprite
0000EE22                            ; ===========================================================================
0000EE22 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EE24 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EE26 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EE28 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EE2A                            
0000EE2A FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EE2E                            ; ===========================================================================
0000EE2E                            
0000EE2E                            Obj4D_Main:				; XREF: Obj4D_Index
0000EE2E 5428 0024                  		addq.b	#2,$24(a0)
0000EE32 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE38 4A28 0028                  		tst.b	$28(a0)
0000EE3C 6700                       		beq.s	loc_EEA4
0000EE3E 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EE44                            
0000EE44                            loc_EEA4:
0000EE44 7000                       		moveq	#0,d0
0000EE46 1028 0028                  		move.b	$28(a0),d0
0000EE4A D040                       		add.w	d0,d0
0000EE4C 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EE52 2248                       		movea.l	a0,a1
0000EE54 7201                       		moveq	#1,d1
0000EE56 6100                       		bsr.s	Obj4D_MakeLava
0000EE58 6000                       		bra.s	loc_EF10
0000EE5A                            ; ===========================================================================
0000EE5A                            
0000EE5A                            Obj4D_Loop:
0000EE5A 6100 EBF0                  		bsr.w	SingleObjLoad2
0000EE5E 6600                       		bne.s	loc_EF0A
0000EE60                            
0000EE60                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EE60 12BC 004D                  		move.b	#$4D,0(a1)
0000EE64 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000EE6C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000EE72 137C 0004 0001             		move.b	#4,1(a1)
0000EE78 137C 0020 0019             		move.b	#$20,$19(a1)
0000EE7E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EE84 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EE8A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EE90 137C 0001 0018             		move.b	#1,$18(a1)
0000EE96 137C 0005 001C             		move.b	#5,$1C(a1)
0000EE9C 4A28 0028                  		tst.b	$28(a0)
0000EEA0 6700                       		beq.s	loc_EF0A
0000EEA2 137C 0002 001C             		move.b	#2,$1C(a1)
0000EEA8                            
0000EEA8                            loc_EF0A:
0000EEA8 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000EEAC 4E75                       		rts	
0000EEAE                            ; ===========================================================================
0000EEAE                            
0000EEAE                            loc_EF10:				; XREF: Obj4D_Main
0000EEAE 0669 0060 000C             		addi.w	#$60,$C(a1)
0000EEB4 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EEBA 0669 0060 0030             		addi.w	#$60,$30(a1)
0000EEC0 137C 0093 0020             		move.b	#$93,$20(a1)
0000EEC6 137C 0080 0016             		move.b	#$80,$16(a1)
0000EECC 08E9 0004 0001             		bset	#4,1(a1)
0000EED2 5829 0024                  		addq.b	#4,$24(a1)
0000EED6 2348 003C                  		move.l	a0,$3C(a1)
0000EEDA 4A28 0028                  		tst.b	$28(a0)
0000EEDE 6700                       		beq.s	Obj4D_PlaySnd
0000EEE0 7200                       		moveq	#0,d1
0000EEE2 6100 FF76                  		bsr.w	Obj4D_Loop
0000EEE6 5429 0024                  		addq.b	#2,$24(a1)
0000EEEA 08E9 0004 0002             		bset	#4,2(a1)
0000EEF0 0669 0100 000C             		addi.w	#$100,$C(a1)
0000EEF6 137C 0000 0018             		move.b	#0,$18(a1)
0000EEFC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EF02 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000EF08 117C 0000 0028             		move.b	#0,$28(a0)
0000EF0E                            
0000EF0E                            Obj4D_PlaySnd:
0000EF0E 303C 00C8                  		move.w	#$C8,d0
0000EF12 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EF18                            
0000EF18                            Obj4D_Action:				; XREF: Obj4D_Index
0000EF18 7000                       		moveq	#0,d0
0000EF1A 1028 0028                  		move.b	$28(a0),d0
0000EF1E D040                       		add.w	d0,d0
0000EF20 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000EF24 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000EF28 6100 E660                  		bsr.w	SpeedToPos
0000EF2C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EF32 6100 B7B8                  		bsr.w	AnimateSprite
0000EF36                            
0000EF36                            Obj4D_ChkDel:				; XREF: Obj4C
0000EF36 3028 0008                  		move.w	8(a0),d0
0000EF3A 0240 FF80                  		andi.w	#$FF80,d0
0000EF3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF42 0441 0080                  		subi.w	#$80,d1
0000EF46 0241 FF80                  		andi.w	#$FF80,d1
0000EF4A 9041                       		sub.w	d1,d0
0000EF4C 0C40 0280                  		cmpi.w	#$280,d0
0000EF50 6200 E69A                  		bhi.w	DeleteObject
0000EF54 4E75                       		rts	
0000EF56                            ; ===========================================================================
0000EF56 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000EF58 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000EF5A                            ; ===========================================================================
0000EF5A                            
0000EF5A                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000EF5A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000EF60 3028 0030                  		move.w	$30(a0),d0
0000EF64 B068 000C                  		cmp.w	$C(a0),d0
0000EF68 6400                       		bcc.s	locret_EFDA
0000EF6A 5828 0024                  		addq.b	#4,$24(a0)
0000EF6E 2268 003C                  		movea.l	$3C(a0),a1
0000EF72 137C 0003 001C             		move.b	#3,$1C(a1)
0000EF78                            
0000EF78                            locret_EFDA:
0000EF78 4E75                       		rts	
0000EF7A                            ; ===========================================================================
0000EF7A                            
0000EF7A                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000EF7A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000EF80 3028 0030                  		move.w	$30(a0),d0
0000EF84 B068 000C                  		cmp.w	$C(a0),d0
0000EF88 6400                       		bcc.s	locret_EFFA
0000EF8A 5828 0024                  		addq.b	#4,$24(a0)
0000EF8E 2268 003C                  		movea.l	$3C(a0),a1
0000EF92 137C 0001 001C             		move.b	#1,$1C(a1)
0000EF98                            
0000EF98                            locret_EFFA:
0000EF98 4E75                       		rts	
0000EF9A                            ; ===========================================================================
0000EF9A                            
0000EF9A                            loc_EFFC:				; XREF: Obj4D_Index
0000EF9A 2268 003C                  		movea.l	$3C(a0),a1
0000EF9E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000EFA4 6700 0000                  		beq.w	Obj4D_Delete
0000EFA8 3029 000C                  		move.w	$C(a1),d0
0000EFAC 0640 0060                  		addi.w	#$60,d0
0000EFB0 3140 000C                  		move.w	d0,$C(a0)
0000EFB4 9068 0030                  		sub.w	$30(a0),d0
0000EFB8 4440                       		neg.w	d0
0000EFBA 7208                       		moveq	#8,d1
0000EFBC 0C40 0040                  		cmpi.w	#$40,d0
0000EFC0 6C00                       		bge.s	loc_F026
0000EFC2 720B                       		moveq	#$B,d1
0000EFC4                            
0000EFC4                            loc_F026:
0000EFC4 0C40 0080                  		cmpi.w	#$80,d0
0000EFC8 6F00                       		ble.s	loc_F02E
0000EFCA 720E                       		moveq	#$E,d1
0000EFCC                            
0000EFCC                            loc_F02E:
0000EFCC 5328 001E                  		subq.b	#1,$1E(a0)
0000EFD0 6A00                       		bpl.s	loc_F04C
0000EFD2 117C 0007 001E             		move.b	#7,$1E(a0)
0000EFD8 5228 001B                  		addq.b	#1,$1B(a0)
0000EFDC 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000EFE2 6500                       		bcs.s	loc_F04C
0000EFE4 117C 0000 001B             		move.b	#0,$1B(a0)
0000EFEA                            
0000EFEA                            loc_F04C:
0000EFEA 1028 001B                  		move.b	$1B(a0),d0
0000EFEE D001                       		add.b	d1,d0
0000EFF0 1140 001A                  		move.b	d0,$1A(a0)
0000EFF4 6000 FF40                  		bra.w	Obj4D_ChkDel
0000EFF8                            ; ===========================================================================
0000EFF8                            
0000EFF8                            Obj4D_Delete:				; XREF: Obj4D_Index
0000EFF8 6000 E5F2                  		bra.w	DeleteObject
0000EFFC                            ; ===========================================================================
0000EFFC                            ; ---------------------------------------------------------------------------
0000EFFC                            ; Object 4E - advancing	wall of	lava (MZ)
0000EFFC                            ; ---------------------------------------------------------------------------
0000EFFC                            
0000EFFC                            Obj4E:					; XREF: Obj_Index
0000EFFC 7000                       		moveq	#0,d0
0000EFFE 1028 0024                  		move.b	$24(a0),d0
0000F002 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F006 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F00A                            ; ===========================================================================
0000F00A 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F00C 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F00E 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F010 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F012 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F014                            ; ===========================================================================
0000F014                            
0000F014                            Obj4E_Main:				; XREF: Obj4E_Index
0000F014 5828 0024                  		addq.b	#4,$24(a0)
0000F018 2248                       		movea.l	a0,a1
0000F01A 7201                       		moveq	#1,d1
0000F01C 6000                       		bra.s	Obj4E_Main2
0000F01E                            ; ===========================================================================
0000F01E                            
0000F01E                            Obj4E_Loop:
0000F01E 6100 EA2C                  		bsr.w	SingleObjLoad2
0000F022 6600                       		bne.s	loc_F0C8
0000F024                            
0000F024                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F024 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F028 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F030 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F036 137C 0004 0001             		move.b	#4,1(a1)
0000F03C 137C 0050 0019             		move.b	#$50,$19(a1)
0000F042 3368 0008 0008             		move.w	8(a0),8(a1)
0000F048 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F04E 137C 0001 0018             		move.b	#1,$18(a1)
0000F054 137C 0000 001C             		move.b	#0,$1C(a1)
0000F05A 137C 0094 0020             		move.b	#$94,$20(a1)
0000F060 2348 003C                  		move.l	a0,$3C(a1)
0000F064                            
0000F064                            loc_F0C8:
0000F064 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F068                            
0000F068 5C29 0024                  		addq.b	#6,$24(a1)
0000F06C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F072                            
0000F072                            Obj4E_Action:				; XREF: Obj4E_Index
0000F072 3038 D008                  		move.w	($FFFFD008).w,d0
0000F076 9068 0008                  		sub.w	8(a0),d0
0000F07A 6400                       		bcc.s	Obj4E_ChkSonic
0000F07C 4440                       		neg.w	d0
0000F07E                            
0000F07E                            Obj4E_ChkSonic:
0000F07E 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F082 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F084 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F088 9068 000C                  		sub.w	$C(a0),d0
0000F08C 6400                       		bcc.s	loc_F0F4
0000F08E 4440                       		neg.w	d0
0000F090                            
0000F090                            loc_F0F4:
0000F090 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F094 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F096 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F09C 6000                       		bra.s	Obj4E_Solid
0000F09E                            ; ===========================================================================
0000F09E                            
0000F09E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F09E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F0A2 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F0A4 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F0AA 5528 0024                  		subq.b	#2,$24(a0)
0000F0AE                            
0000F0AE                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F0AE 323C 002B                  		move.w	#$2B,d1
0000F0B2 343C 0018                  		move.w	#$18,d2
0000F0B6 3602                       		move.w	d2,d3
0000F0B8 5243                       		addq.w	#1,d3
0000F0BA 3828 0008                  		move.w	8(a0),d4
0000F0BE 1028 0024                  		move.b	$24(a0),d0
0000F0C2 3F00                       		move.w	d0,-(sp)
0000F0C4 6100 0000                  		bsr.w	SolidObject
0000F0C8 301F                       		move.w	(sp)+,d0
0000F0CA 1140 0024                  		move.b	d0,$24(a0)
0000F0CE 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F0D4 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F0D6 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F0DA 4228 0036                  		clr.b	$36(a0)
0000F0DE                            
0000F0DE                            Obj4E_Animate:
0000F0DE 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F0E4 6100 B606                  		bsr.w	AnimateSprite
0000F0E8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F0EE 6400                       		bcc.s	Obj4E_ChkDel
0000F0F0 6100 E498                  		bsr.w	SpeedToPos
0000F0F4                            
0000F0F4                            Obj4E_ChkDel:
0000F0F4 6100 E4BA                  		bsr.w	DisplaySprite
0000F0F8 4A28 0036                  		tst.b	$36(a0)
0000F0FC 6600                       		bne.s	locret_F17E
0000F0FE 3028 0008                  		move.w	8(a0),d0
0000F102 0240 FF80                  		andi.w	#$FF80,d0
0000F106 3238 F700                  		move.w	($FFFFF700).w,d1
0000F10A 0441 0080                  		subi.w	#$80,d1
0000F10E 0241 FF80                  		andi.w	#$FF80,d1
0000F112 9041                       		sub.w	d1,d0
0000F114 0C40 0280                  		cmpi.w	#$280,d0
0000F118 6200                       		bhi.s	Obj4E_ChkGone
0000F11A                            
0000F11A                            locret_F17E:
0000F11A 4E75                       		rts	
0000F11C                            ; ===========================================================================
0000F11C                            
0000F11C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F11C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F120 7000                       		moveq	#0,d0
0000F122 1028 0023                  		move.b	$23(a0),d0
0000F126 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F12C 117C 0008 0024             		move.b	#8,$24(a0)
0000F132 4E75                       		rts	
0000F134                            ; ===========================================================================
0000F134                            
0000F134                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F134 2268 003C                  		movea.l	$3C(a0),a1
0000F138 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F13E 6700                       		beq.s	Obj4E_Delete
0000F140 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F146 0468 0080 0008             		subi.w	#$80,8(a0)
0000F14C 6000 E462                  		bra.w	DisplaySprite
0000F150                            ; ===========================================================================
0000F150                            
0000F150                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F150 6000 E49A                  		bra.w	DeleteObject
0000F154                            ; ===========================================================================
0000F154                            ; ---------------------------------------------------------------------------
0000F154                            ; Object 54 - invisible	lava tag (MZ)
0000F154                            ; ---------------------------------------------------------------------------
0000F154                            
0000F154                            Obj54:					; XREF: Obj_Index
0000F154 7000                       		moveq	#0,d0
0000F156 1028 0024                  		move.b	$24(a0),d0
0000F15A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F15E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F162                            ; ===========================================================================
0000F162 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F164 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F166                            
0000F166 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F16A                            ; ===========================================================================
0000F16A                            
0000F16A                            Obj54_Main:				; XREF: Obj54_Index
0000F16A 5428 0024                  		addq.b	#2,$24(a0)
0000F16E 7000                       		moveq	#0,d0
0000F170 1028 0028                  		move.b	$28(a0),d0
0000F174 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F17A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F182 117C 0084 0001             		move.b	#$84,1(a0)
0000F188                            
0000F188                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F188 3028 0008                  		move.w	8(a0),d0
0000F18C 0240 FF80                  		andi.w	#$FF80,d0
0000F190 3238 F700                  		move.w	($FFFFF700).w,d1
0000F194 0441 0080                  		subi.w	#$80,d1
0000F198 0241 FF80                  		andi.w	#$FF80,d1
0000F19C 9041                       		sub.w	d1,d0
0000F19E 6B00 E44C                  		bmi.w	DeleteObject
0000F1A2 0C40 0280                  		cmpi.w	#$280,d0
0000F1A6 6200 E444                  		bhi.w	DeleteObject
0000F1AA 4E75                       		rts	
0000F1AC                            ; ===========================================================================
0000F1AC                            ; ---------------------------------------------------------------------------
0000F1AC                            ; Sprite mappings - invisible lava tag (MZ)
0000F1AC                            ; ---------------------------------------------------------------------------
0000F1AC                            Map_obj54:
0000F1AC                            	include "_maps\obj54.asm"
0000F1AC                            ; ---------------------------------------------------------------------------
0000F1AC                            ; Sprite mappings - invisible lava tag (MZ)
0000F1AC                            ; ---------------------------------------------------------------------------
0000F1AC 0000                       		dc.w byte_F212-Map_obj54
0000F1AE 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F1B0 00                         		even
0000F1B0 00                         		even
0000F1B0                            
0000F1B0                            Ani_obj4C:
0000F1B0                            	include "_anim\obj4C.asm"
0000F1B0                            ; ---------------------------------------------------------------------------
0000F1B0                            ; Animation script - geyser of lava (MZ)
0000F1B0                            ; ---------------------------------------------------------------------------
0000F1B0 0000                       		dc.w byte_F220-Ani_obj4C
0000F1B2 0000                       		dc.w byte_F22A-Ani_obj4C
0000F1B4 0000                       		dc.w byte_F22E-Ani_obj4C
0000F1B6 0000                       		dc.w byte_F232-Ani_obj4C
0000F1B8 0000                       		dc.w byte_F23A-Ani_obj4C
0000F1BA 0000                       		dc.w byte_F23E-Ani_obj4C
0000F1BC 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F1C6 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F1CA 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F1CE 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F1D6 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F1DA 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F1DE                            		even
0000F1DE                            		even
0000F1DE                            
0000F1DE                            Ani_obj4E:
0000F1DE                            	include "_anim\obj4E.asm"
0000F1DE                            ; ---------------------------------------------------------------------------
0000F1DE                            ; Animation script - advancing wall of lava (MZ)
0000F1DE                            ; ---------------------------------------------------------------------------
0000F1DE 0000                       		dc.w byte_F244-Ani_obj4E
0000F1E0 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F1E6                            		even
0000F1E6                            		even
0000F1E6                            
0000F1E6                            ; ---------------------------------------------------------------------------
0000F1E6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F1E6                            ; ---------------------------------------------------------------------------
0000F1E6                            Map_obj4C:
0000F1E6                            	include "_maps\obj4C.asm"
0000F1E6                            ; ---------------------------------------------------------------------------
0000F1E6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F1E6                            ; ---------------------------------------------------------------------------
0000F1E6 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F1EA 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F1EE 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F1F2 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F1F6 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F1FA 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F1FE 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F202 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F206 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F20A 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F20E 02                         byte_F272:	dc.b 2
0000F20F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F214 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F219 02                         byte_F27D:	dc.b 2
0000F21A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F21F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F224 04                         byte_F288:	dc.b 4
0000F225 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F22A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F22F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F234 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F239 04                         byte_F29D:	dc.b 4
0000F23A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F23F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F244 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F249 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F24E 06                         byte_F2B2:	dc.b 6
0000F24F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F254 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F259 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F25E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F263 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F268 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F26D 06                         byte_F2D1:	dc.b 6
0000F26E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F273 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F278 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F27D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F282 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F287 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F28C 02                         byte_F2F0:	dc.b 2
0000F28D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F292 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F297 02                         byte_F2FB:	dc.b 2
0000F298 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F29D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F2A2 0A                         byte_F306:	dc.b $A
0000F2A3 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F2A8 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F2AD B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F2B2 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F2B7 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F2BC D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F2C1 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F2C6 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F2CB 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F2D0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F2D5 0A                         byte_F339:	dc.b $A
0000F2D6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F2DB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F2E0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F2E5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F2EA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F2EF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F2F4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F2F9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F2FE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F303 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F308 0A                         byte_F36C:	dc.b $A
0000F309 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F30E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F313 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F318 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F31D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F322 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F327 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F32C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F331 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F336 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F33B 06                         byte_F39F:	dc.b 6
0000F33C 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F341 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F346 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F34B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F350 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F355 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F35A 06                         byte_F3BE:	dc.b 6
0000F35B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F360 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F365 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F36A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F36F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F374 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F379 06                         byte_F3DD:	dc.b 6
0000F37A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F37F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F384 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F389 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F38E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F393 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F398 10                         byte_F3FC:	dc.b $10
0000F399 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F39E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F3A3 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F3A8 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F3AD D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F3B2 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F3B7 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F3BC F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F3C1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F3C6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F3CB 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F3D0 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F3D5 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F3DA 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F3DF 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F3E4 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F3E9 10                         byte_F44D:	dc.b $10
0000F3EA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F3EF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F3F4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F3F9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F3FE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F403 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F408 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F40D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F412 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F417 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F41C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F421 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F426 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F42B 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F430 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F435 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F43A 10                         byte_F49E:	dc.b $10
0000F43B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F440 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F445 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F44A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F44F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F454 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F459 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F45E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F463 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F468 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F46D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F472 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F477 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F47C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F481 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F486 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F48B 06                         byte_F4EF:	dc.b 6
0000F48C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F491 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F496 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F49B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F4A0 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F4A5 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F4AA 06                         byte_F50E:	dc.b 6
0000F4AB E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F4B0 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F4B5 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F4BA E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F4BF D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F4C4 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F4C9 00                         byte_F52D:	dc.b 0
0000F4CA                            		even
0000F4CA                            		even
0000F4CA                            
0000F4CA                            ; ---------------------------------------------------------------------------
0000F4CA                            ; Sprite mappings - advancing wall of lava (MZ)
0000F4CA                            ; ---------------------------------------------------------------------------
0000F4CA                            Map_obj4E:
0000F4CA                            	include "_maps\obj4E.asm"
0000F4CA                            ; ---------------------------------------------------------------------------
0000F4CA                            ; Sprite mappings - advancing wall of lava (MZ)
0000F4CA                            ; ---------------------------------------------------------------------------
0000F4CA 0000                       		dc.w byte_F538-Map_obj4E
0000F4CC 0000                       		dc.w byte_F566-Map_obj4E
0000F4CE 0000                       		dc.w byte_F594-Map_obj4E
0000F4D0 0000                       		dc.w byte_F5C2-Map_obj4E
0000F4D2 0000                       		dc.w byte_F5F0-Map_obj4E
0000F4D4 09                         byte_F538:	dc.b 9
0000F4D5 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F4DA 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F4DF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F4E4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F4E9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F4EE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F4F3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F4F8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F4FD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F502 09                         byte_F566:	dc.b 9
0000F503 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F508 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F50D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F512 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F517 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F51C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F521 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F526 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F52B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F530 09                         byte_F594:	dc.b 9
0000F531 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F536 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F53B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F540 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F545 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F54A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F54F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F554 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F559 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F55E 09                         byte_F5C2:	dc.b 9
0000F55F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F564 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F569 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F56E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F573 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F578 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F57D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F582 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F587 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F58C 08                         byte_F5F0:	dc.b 8
0000F58D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F592 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F597 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F59C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F5A1 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F5A6 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F5AB E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F5B0 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F5B6 00                         		even
0000F5B6 00                         		even
0000F5B6                            
0000F5B6                            ; ===========================================================================
0000F5B6                            ; ---------------------------------------------------------------------------
0000F5B6                            ; Object 40 - Moto Bug enemy (GHZ)
0000F5B6                            ; ---------------------------------------------------------------------------
0000F5B6                            
0000F5B6                            Obj40:					; XREF: Obj_Index
0000F5B6 7000                       		moveq	#0,d0
0000F5B8 1028 0024                  		move.b	$24(a0),d0
0000F5BC 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F5C0 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F5C4                            ; ===========================================================================
0000F5C4 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F5C6 0000                       		dc.w Obj40_Action-Obj40_Index
0000F5C8 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F5CA 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F5CC                            ; ===========================================================================
0000F5CC                            
0000F5CC                            Obj40_Main:				; XREF: Obj40_Index
0000F5CC 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F5D4 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F5DA 117C 0004 0001             		move.b	#4,1(a0)
0000F5E0 117C 0004 0018             		move.b	#4,$18(a0)
0000F5E6 117C 0014 0019             		move.b	#$14,$19(a0)
0000F5EC 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F5F0 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F5F2 117C 000E 0016             		move.b	#$E,$16(a0)
0000F5F8 117C 0008 0017             		move.b	#8,$17(a0)
0000F5FE 117C 000C 0020             		move.b	#$C,$20(a0)
0000F604 6100 DF58                  		bsr.w	ObjectFall
0000F608 4EB9 0000 0000             		jsr	ObjHitFloor
0000F60E 4A41                       		tst.w	d1
0000F610 6A00                       		bpl.s	locret_F68A
0000F612 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F616 317C 0000 0012             		move.w	#0,$12(a0)
0000F61C 5428 0024                  		addq.b	#2,$24(a0)
0000F620 0868 0000 0022             		bchg	#0,$22(a0)
0000F626                            
0000F626                            locret_F68A:
0000F626 4E75                       		rts	
0000F628                            ; ===========================================================================
0000F628                            
0000F628                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F628 5828 0024                  		addq.b	#4,$24(a0)
0000F62C 6000 0000                  		bra.w	Obj40_Animate
0000F630                            ; ===========================================================================
0000F630                            
0000F630                            Obj40_Action:				; XREF: Obj40_Index
0000F630 7000                       		moveq	#0,d0
0000F632 1028 0025                  		move.b	$25(a0),d0
0000F636 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F63A 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F63E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F644 6100 B0A6                  		bsr.w	AnimateSprite
0000F648                            
0000F648                            ; ---------------------------------------------------------------------------
0000F648                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F648                            ; ---------------------------------------------------------------------------
0000F648                            
0000F648                            MarkObjGone:
0000F648 3028 0008                  		move.w	8(a0),d0
0000F64C 0240 FF80                  		andi.w	#$FF80,d0
0000F650 3238 F700                  		move.w	($FFFFF700).w,d1
0000F654 0441 0080                  		subi.w	#$80,d1
0000F658 0241 FF80                  		andi.w	#$FF80,d1
0000F65C 9041                       		sub.w	d1,d0
0000F65E 0C40 0280                  		cmpi.w	#$280,d0
0000F662 6200 0000                  		bhi.w	Mark_ChkGone
0000F666 6000 DF48                  		bra.w	DisplaySprite
0000F66A                            ; ===========================================================================
0000F66A                            
0000F66A                            Mark_ChkGone:
0000F66A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F66E 7000                       		moveq	#0,d0
0000F670 1028 0023                  		move.b	$23(a0),d0
0000F674 6700                       		beq.s	Mark_Delete
0000F676 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F67C                            
0000F67C                            Mark_Delete:
0000F67C 6000 DF6E                  		bra.w	DeleteObject
0000F680                            
0000F680                            ; ===========================================================================
0000F680 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F682 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F684                            ; ===========================================================================
0000F684                            
0000F684                            Obj40_Move:				; XREF: Obj40_Index2
0000F684 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F688 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F68A 5428 0025                  		addq.b	#2,$25(a0)
0000F68E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F694 117C 0001 001C             		move.b	#1,$1C(a0)
0000F69A 0868 0000 0022             		bchg	#0,$22(a0)
0000F6A0 6600                       		bne.s	locret_F70A
0000F6A2 4468 0010                  		neg.w	$10(a0)		; change direction
0000F6A6                            
0000F6A6                            locret_F70A:
0000F6A6 4E75                       		rts	
0000F6A8                            ; ===========================================================================
0000F6A8                            
0000F6A8                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F6A8 6100 DEE0                  		bsr.w	SpeedToPos
0000F6AC 4EB9 0000 0000             		jsr	ObjHitFloor
0000F6B2 0C41 FFF8                  		cmpi.w	#-8,d1
0000F6B6 6D00                       		blt.s	Obj40_Pause
0000F6B8 0C41 000C                  		cmpi.w	#$C,d1
0000F6BC 6C00                       		bge.s	Obj40_Pause
0000F6BE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F6C2 5328 0033                  		subq.b	#1,$33(a0)
0000F6C6 6A00                       		bpl.s	locret_F756
0000F6C8 117C 000F 0033             		move.b	#$F,$33(a0)
0000F6CE 6100 E366                  		bsr.w	SingleObjLoad
0000F6D2 6600                       		bne.s	locret_F756
0000F6D4 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F6D8 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6E4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F6EA 137C 0002 001C             		move.b	#2,$1C(a1)
0000F6F0                            
0000F6F0                            locret_F756:
0000F6F0 4E75                       		rts	
0000F6F2                            ; ===========================================================================
0000F6F2                            
0000F6F2                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F6F2 5528 0025                  		subq.b	#2,$25(a0)
0000F6F6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F6FC 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F702 117C 0000 001C             		move.b	#0,$1C(a0)
0000F708 4E75                       		rts	
0000F70A                            ; ===========================================================================
0000F70A                            
0000F70A                            Obj40_Animate:				; XREF: Obj40_Index
0000F70A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F710 6100 AFDA                  		bsr.w	AnimateSprite
0000F714 6000 DE9A                  		bra.w	DisplaySprite
0000F718                            ; ===========================================================================
0000F718                            
0000F718                            Obj40_Delete:				; XREF: Obj40_Index
0000F718 6000 DED2                  		bra.w	DeleteObject
0000F71C                            ; ===========================================================================
0000F71C                            Ani_obj40:
0000F71C                            	include "_anim\obj40.asm"
0000F71C                            ; ---------------------------------------------------------------------------
0000F71C                            ; Animation script - Motobug enemy
0000F71C                            ; ---------------------------------------------------------------------------
0000F71C 0000                       		dc.w byte_F788-Ani_obj40
0000F71E 0000                       		dc.w byte_F78C-Ani_obj40
0000F720 0000                       		dc.w byte_F792-Ani_obj40
0000F722 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F726 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F72C 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F73A                            		even
0000F73A                            		even
0000F73A                            
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            Map_obj40:
0000F73A                            	include "_maps\obj40.asm"
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F73E 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F742 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F746 0000                       		dc.w byte_F804-Map_obj40
0000F748 04                         byte_F7AE:	dc.b 4
0000F749 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F74E 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F753 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F758 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F75D 04                         byte_F7C3:	dc.b 4
0000F75E F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F763 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F768 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F76D 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F772 05                         byte_F7D8:	dc.b 5
0000F773 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F778 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F77D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F782 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F787 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F78C 01                         byte_F7F2:	dc.b 1
0000F78D FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F792 01                         byte_F7F8:	dc.b 1
0000F793 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F798 01                         byte_F7FE:	dc.b 1
0000F799 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F79E 00                         byte_F804:	dc.b 0
0000F7A0 00                         		even
0000F7A0 00                         		even
0000F7A0                            
0000F7A0                            ; ===========================================================================
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            ; Object 4F - blank
0000F7A0                            ; ---------------------------------------------------------------------------
0000F7A0                            
0000F7A0                            Obj4F:					; XREF: Obj_Index
0000F7A0 4E75                       		rts	
0000F7A2                            
0000F7A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7A2                            
0000F7A2                            
0000F7A2                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F7A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F7A6 D047                       		add.w	d7,d0
0000F7A8 0240 0003                  		andi.w	#3,d0
0000F7AC 6600                       		bne.s	loc_F836
0000F7AE 7600                       		moveq	#0,d3
0000F7B0 1628 0019                  		move.b	$19(a0),d3
0000F7B4 4A68 0010                  		tst.w	$10(a0)
0000F7B8 6B00                       		bmi.s	loc_F82C
0000F7BA 6100 0000                  		bsr.w	ObjHitWallRight
0000F7BE 4A41                       		tst.w	d1
0000F7C0 6A00                       		bpl.s	loc_F836
0000F7C2                            
0000F7C2                            loc_F828:
0000F7C2 7001                       		moveq	#1,d0
0000F7C4 4E75                       		rts	
0000F7C6                            ; ===========================================================================
0000F7C6                            
0000F7C6                            loc_F82C:
0000F7C6 4643                       		not.w	d3
0000F7C8 6100 0000                  		bsr.w	ObjHitWallLeft
0000F7CC 4A41                       		tst.w	d1
0000F7CE 6BF2                       		bmi.s	loc_F828
0000F7D0                            
0000F7D0                            loc_F836:
0000F7D0 7000                       		moveq	#0,d0
0000F7D2 4E75                       		rts	
0000F7D4                            ; End of function Obj50_ChkWall
0000F7D4                            
0000F7D4                            ; ===========================================================================
0000F7D4                            ; ---------------------------------------------------------------------------
0000F7D4                            ; Object 50 - Yadrin enemy (SYZ)
0000F7D4                            ; ---------------------------------------------------------------------------
0000F7D4                            
0000F7D4                            Obj50:					; XREF: Obj_Index
0000F7D4 7000                       		moveq	#0,d0
0000F7D6 1028 0024                  		move.b	$24(a0),d0
0000F7DA 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F7DE 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F7E2                            ; ===========================================================================
0000F7E2 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F7E4 0000                       		dc.w Obj50_Action-Obj50_Index
0000F7E6                            ; ===========================================================================
0000F7E6                            
0000F7E6                            Obj50_Main:				; XREF: Obj50_Index
0000F7E6 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F7EE 317C 247B 0002             		move.w	#$247B,2(a0)
0000F7F4 117C 0004 0001             		move.b	#4,1(a0)
0000F7FA 117C 0004 0018             		move.b	#4,$18(a0)
0000F800 117C 0014 0019             		move.b	#$14,$19(a0)
0000F806 117C 0011 0016             		move.b	#$11,$16(a0)
0000F80C 117C 0008 0017             		move.b	#8,$17(a0)
0000F812 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F818 6100 DD44                  		bsr.w	ObjectFall
0000F81C 6100 0000                  		bsr.w	ObjHitFloor
0000F820 4A41                       		tst.w	d1
0000F822 6A00                       		bpl.s	locret_F89E
0000F824 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F828 317C 0000 0012             		move.w	#0,$12(a0)
0000F82E 5428 0024                  		addq.b	#2,$24(a0)
0000F832 0868 0000 0022             		bchg	#0,$22(a0)
0000F838                            
0000F838                            locret_F89E:
0000F838 4E75                       		rts	
0000F83A                            ; ===========================================================================
0000F83A                            
0000F83A                            Obj50_Action:				; XREF: Obj50_Index
0000F83A 7000                       		moveq	#0,d0
0000F83C 1028 0025                  		move.b	$25(a0),d0
0000F840 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F844 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F848 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F84E 6100 AE9C                  		bsr.w	AnimateSprite
0000F852 6000 FDF4                  		bra.w	MarkObjGone
0000F856                            ; ===========================================================================
0000F856 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F858 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F85A                            ; ===========================================================================
0000F85A                            
0000F85A                            Obj50_Move:				; XREF: Obj50_Index2
0000F85A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F85E 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F860 5428 0025                  		addq.b	#2,$25(a0)
0000F864 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000F86A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F870 0868 0000 0022             		bchg	#0,$22(a0)
0000F876 6600                       		bne.s	locret_F8E2
0000F878 4468 0010                  		neg.w	$10(a0)		; change direction
0000F87C                            
0000F87C                            locret_F8E2:
0000F87C 4E75                       		rts	
0000F87E                            ; ===========================================================================
0000F87E                            
0000F87E                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000F87E 6100 DD0A                  		bsr.w	SpeedToPos
0000F882 6100 0000                  		bsr.w	ObjHitFloor
0000F886 0C41 FFF8                  		cmpi.w	#-8,d1
0000F88A 6D00                       		blt.s	Obj50_Pause
0000F88C 0C41 000C                  		cmpi.w	#$C,d1
0000F890 6C00                       		bge.s	Obj50_Pause
0000F892 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000F896 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000F89A 6600                       		bne.s	Obj50_Pause
0000F89C 4E75                       		rts	
0000F89E                            ; ===========================================================================
0000F89E                            
0000F89E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000F89E 5528 0025                  		subq.b	#2,$25(a0)
0000F8A2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F8A8 317C 0000 0010             		move.w	#0,$10(a0)
0000F8AE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8B4 4E75                       		rts	
0000F8B6                            ; ===========================================================================
0000F8B6                            Ani_obj50:
0000F8B6                            	include "_anim\obj50.asm"
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            ; Animation script - Yadrin enemy
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6 0000                       		dc.w byte_F920-Ani_obj50
0000F8B8 0000                       		dc.w byte_F924-Ani_obj50
0000F8BA 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000F8BE 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000F8C8                            		even
0000F8C8                            		even
0000F8C8                            
0000F8C8                            ; ---------------------------------------------------------------------------
0000F8C8                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F8C8                            ; ---------------------------------------------------------------------------
0000F8C8                            Map_obj50:
0000F8C8                            	include "_maps\obj50.asm"
0000F8C8                            ; ---------------------------------------------------------------------------
0000F8C8                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F8C8                            ; ---------------------------------------------------------------------------
0000F8C8 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000F8CC 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000F8D0 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000F8D4 05                         byte_F93A:	dc.b 5
0000F8D5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F8DA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F8DF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8E4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F8E9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F8EE 05                         byte_F954:	dc.b 5
0000F8EF F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000F8F4 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000F8F9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8FE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F903 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F908 05                         byte_F96E:	dc.b 5
0000F909 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000F90E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000F913 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F918 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F91D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F922 05                         byte_F988:	dc.b 5
0000F923 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F928 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F92D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F932 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F937 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F93C 05                         byte_F9A2:	dc.b 5
0000F93D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000F942 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000F947 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F94C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F951 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F956 05                         byte_F9BC:	dc.b 5
0000F957 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000F95C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000F961 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F966 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F96B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F970                            		even
0000F970                            		even
0000F970                            
0000F970                            ; ---------------------------------------------------------------------------
0000F970                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000F970                            ;
0000F970                            ; variables:
0000F970                            ; d1 = width
0000F970                            ; d2 = height /	2 (when	jumping)
0000F970                            ; d3 = height /	2 (when	walking)
0000F970                            ; d4 = x-axis position
0000F970                            ; ---------------------------------------------------------------------------
0000F970                            
0000F970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F970                            
0000F970                            
0000F970                            SolidObject:
0000F970 4A28 0025                  		tst.b	$25(a0)
0000F974 6700 0000                  		beq.w	loc_FAC8
0000F978 3401                       		move.w	d1,d2
0000F97A D442                       		add.w	d2,d2
0000F97C 43F8 D000                  		lea	($FFFFD000).w,a1
0000F980 0829 0001 0022             		btst	#1,$22(a1)
0000F986 6600                       		bne.s	loc_F9FE
0000F988 3029 0008                  		move.w	8(a1),d0
0000F98C 9068 0008                  		sub.w	8(a0),d0
0000F990 D041                       		add.w	d1,d0
0000F992 6B00                       		bmi.s	loc_F9FE
0000F994 B042                       		cmp.w	d2,d0
0000F996 6500                       		bcs.s	loc_FA12
0000F998                            
0000F998                            loc_F9FE:
0000F998 08A9 0003 0022             		bclr	#3,$22(a1)
0000F99E 08A8 0003 0022             		bclr	#3,$22(a0)
0000F9A4 4228 0025                  		clr.b	$25(a0)
0000F9A8 7800                       		moveq	#0,d4
0000F9AA 4E75                       		rts	
0000F9AC                            ; ===========================================================================
0000F9AC                            
0000F9AC                            loc_FA12:
0000F9AC 3404                       		move.w	d4,d2
0000F9AE 6100 8162                  		bsr.w	MvSonicOnPtfm
0000F9B2 7800                       		moveq	#0,d4
0000F9B4 4E75                       		rts	
0000F9B6                            ; ===========================================================================
0000F9B6                            
0000F9B6                            SolidObject71:				; XREF: Obj71_Solid
0000F9B6 4A28 0025                  		tst.b	$25(a0)
0000F9BA 6700 0000                  		beq.w	loc_FAD0
0000F9BE 3401                       		move.w	d1,d2
0000F9C0 D442                       		add.w	d2,d2
0000F9C2 43F8 D000                  		lea	($FFFFD000).w,a1
0000F9C6 0829 0001 0022             		btst	#1,$22(a1)
0000F9CC 6600                       		bne.s	loc_FA44
0000F9CE 3029 0008                  		move.w	8(a1),d0
0000F9D2 9068 0008                  		sub.w	8(a0),d0
0000F9D6 D041                       		add.w	d1,d0
0000F9D8 6B00                       		bmi.s	loc_FA44
0000F9DA B042                       		cmp.w	d2,d0
0000F9DC 6500                       		bcs.s	loc_FA58
0000F9DE                            
0000F9DE                            loc_FA44:
0000F9DE 08A9 0003 0022             		bclr	#3,$22(a1)
0000F9E4 08A8 0003 0022             		bclr	#3,$22(a0)
0000F9EA 4228 0025                  		clr.b	$25(a0)
0000F9EE 7800                       		moveq	#0,d4
0000F9F0 4E75                       		rts	
0000F9F2                            ; ===========================================================================
0000F9F2                            
0000F9F2                            loc_FA58:
0000F9F2 3404                       		move.w	d4,d2
0000F9F4 6100 811C                  		bsr.w	MvSonicOnPtfm
0000F9F8 7800                       		moveq	#0,d4
0000F9FA 4E75                       		rts	
0000F9FC                            ; ===========================================================================
0000F9FC                            
0000F9FC                            SolidObject2F:				; XREF: Obj2F_Solid
0000F9FC 43F8 D000                  		lea	($FFFFD000).w,a1
0000FA00 4A28 0001                  		tst.b	1(a0)
0000FA04 6A00 0000                  		bpl.w	loc_FB92
0000FA08 3029 0008                  		move.w	8(a1),d0
0000FA0C 9068 0008                  		sub.w	8(a0),d0
0000FA10 D041                       		add.w	d1,d0
0000FA12 6B00 0000                  		bmi.w	loc_FB92
0000FA16 3601                       		move.w	d1,d3
0000FA18 D643                       		add.w	d3,d3
0000FA1A B043                       		cmp.w	d3,d0
0000FA1C 6200 0000                  		bhi.w	loc_FB92
0000FA20 3A00                       		move.w	d0,d5
0000FA22 0828 0000 0001             		btst	#0,1(a0)
0000FA28 6700                       		beq.s	loc_FA94
0000FA2A 4645                       		not.w	d5
0000FA2C DA43                       		add.w	d3,d5
0000FA2E                            
0000FA2E                            loc_FA94:
0000FA2E E24D                       		lsr.w	#1,d5
0000FA30 7600                       		moveq	#0,d3
0000FA32 1632 5000                  		move.b	(a2,d5.w),d3
0000FA36 9612                       		sub.b	(a2),d3
0000FA38 3A28 000C                  		move.w	$C(a0),d5
0000FA3C 9A43                       		sub.w	d3,d5
0000FA3E 1629 0016                  		move.b	$16(a1),d3
0000FA42 4883                       		ext.w	d3
0000FA44 D443                       		add.w	d3,d2
0000FA46 3629 000C                  		move.w	$C(a1),d3
0000FA4A 9645                       		sub.w	d5,d3
0000FA4C 5843                       		addq.w	#4,d3
0000FA4E D642                       		add.w	d2,d3
0000FA50 6B00 0000                  		bmi.w	loc_FB92
0000FA54 3802                       		move.w	d2,d4
0000FA56 D844                       		add.w	d4,d4
0000FA58 B644                       		cmp.w	d4,d3
0000FA5A 6400 0000                  		bcc.w	loc_FB92
0000FA5E 6000 0000                  		bra.w	loc_FB0E
0000FA62                            ; ===========================================================================
0000FA62                            
0000FA62                            loc_FAC8:
0000FA62 4A28 0001                  		tst.b	1(a0)
0000FA66 6A00 0000                  		bpl.w	loc_FB92
0000FA6A                            
0000FA6A                            loc_FAD0:
0000FA6A 43F8 D000                  		lea	($FFFFD000).w,a1
0000FA6E 3029 0008                  		move.w	8(a1),d0
0000FA72 9068 0008                  		sub.w	8(a0),d0
0000FA76 D041                       		add.w	d1,d0
0000FA78 6B00 0000                  		bmi.w	loc_FB92
0000FA7C 3601                       		move.w	d1,d3
0000FA7E D643                       		add.w	d3,d3
0000FA80 B043                       		cmp.w	d3,d0
0000FA82 6200 0000                  		bhi.w	loc_FB92
0000FA86 1629 0016                  		move.b	$16(a1),d3
0000FA8A 4883                       		ext.w	d3
0000FA8C D443                       		add.w	d3,d2
0000FA8E 3629 000C                  		move.w	$C(a1),d3
0000FA92 9668 000C                  		sub.w	$C(a0),d3
0000FA96 5843                       		addq.w	#4,d3
0000FA98 D642                       		add.w	d2,d3
0000FA9A 6B00 0000                  		bmi.w	loc_FB92
0000FA9E 3802                       		move.w	d2,d4
0000FAA0 D844                       		add.w	d4,d4
0000FAA2 B644                       		cmp.w	d4,d3
0000FAA4 6400 0000                  		bcc.w	loc_FB92
0000FAA8                            
0000FAA8                            loc_FB0E:
0000FAA8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FAAC 6B00 0000                  		bmi.w	loc_FB92
0000FAB0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FAB6 6400 0000                  		bcc.w	loc_FB92
0000FABA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FABE 6600 0000                  		bne.w	loc_FBAC
0000FAC2 3A00                       		move.w	d0,d5
0000FAC4 B240                       		cmp.w	d0,d1
0000FAC6 6400                       		bcc.s	loc_FB36
0000FAC8 D241                       		add.w	d1,d1
0000FACA 9041                       		sub.w	d1,d0
0000FACC 3A00                       		move.w	d0,d5
0000FACE 4445                       		neg.w	d5
0000FAD0                            
0000FAD0                            loc_FB36:
0000FAD0 3203                       		move.w	d3,d1
0000FAD2 B443                       		cmp.w	d3,d2
0000FAD4 6400                       		bcc.s	loc_FB44
0000FAD6 5943                       		subq.w	#4,d3
0000FAD8 9644                       		sub.w	d4,d3
0000FADA 3203                       		move.w	d3,d1
0000FADC 4441                       		neg.w	d1
0000FADE                            
0000FADE                            loc_FB44:
0000FADE BA41                       		cmp.w	d1,d5
0000FAE0 6200 0000                  		bhi.w	loc_FBB0
0000FAE4 0C41 0004                  		cmpi.w	#4,d1
0000FAE8 6300                       		bls.s	loc_FB8C
0000FAEA 4A40                       		tst.w	d0
0000FAEC 6700                       		beq.s	loc_FB70
0000FAEE 6B00                       		bmi.s	loc_FB5E
0000FAF0 4A69 0010                  		tst.w	$10(a1)
0000FAF4 6B00                       		bmi.s	loc_FB70
0000FAF6 6000                       		bra.s	loc_FB64
0000FAF8                            ; ===========================================================================
0000FAF8                            
0000FAF8                            loc_FB5E:
0000FAF8 4A69 0010                  		tst.w	$10(a1)
0000FAFC 6A00                       		bpl.s	loc_FB70
0000FAFE                            
0000FAFE                            loc_FB64:
0000FAFE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FB04 337C 0000 0010             		move.w	#0,$10(a1)
0000FB0A                            
0000FB0A                            loc_FB70:
0000FB0A 9169 0008                  		sub.w	d0,8(a1)
0000FB0E 0829 0001 0022             		btst	#1,$22(a1)
0000FB14 6600                       		bne.s	loc_FB8C
0000FB16 08E9 0005 0022             		bset	#5,$22(a1)
0000FB1C 08E8 0005 0022             		bset	#5,$22(a0)
0000FB22 7801                       		moveq	#1,d4
0000FB24 4E75                       		rts	
0000FB26                            ; ===========================================================================
0000FB26                            
0000FB26                            loc_FB8C:
0000FB26 6100                       		bsr.s	loc_FBA0
0000FB28 7801                       		moveq	#1,d4
0000FB2A 4E75                       		rts	
0000FB2C                            ; ===========================================================================
0000FB2C                            
0000FB2C                            loc_FB92:
0000FB2C 0828 0005 0022             		btst	#5,$22(a0)
0000FB32 6700                       		beq.s	loc_FBAC
0000FB34 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FB3A                            
0000FB3A                            loc_FBA0:
0000FB3A 08A8 0005 0022             		bclr	#5,$22(a0)
0000FB40 08A9 0005 0022             		bclr	#5,$22(a1)
0000FB46                            
0000FB46                            loc_FBAC:
0000FB46 7800                       		moveq	#0,d4
0000FB48 4E75                       		rts	
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            loc_FBB0:
0000FB4A 4A43                       		tst.w	d3
0000FB4C 6B00                       		bmi.s	loc_FBBC
0000FB4E 0C43 0010                  		cmpi.w	#$10,d3
0000FB52 6500                       		bcs.s	loc_FBEE
0000FB54 60D6                       		bra.s	loc_FB92
0000FB56                            ; ===========================================================================
0000FB56                            
0000FB56                            loc_FBBC:
0000FB56 4A69 0012                  		tst.w	$12(a1)
0000FB5A 6700                       		beq.s	loc_FBD6
0000FB5C 6A00                       		bpl.s	loc_FBD2
0000FB5E 4A43                       		tst.w	d3
0000FB60 6A00                       		bpl.s	loc_FBD2
0000FB62 9769 000C                  		sub.w	d3,$C(a1)
0000FB66 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FB6C                            
0000FB6C                            loc_FBD2:
0000FB6C 78FF                       		moveq	#-1,d4
0000FB6E 4E75                       		rts	
0000FB70                            ; ===========================================================================
0000FB70                            
0000FB70                            loc_FBD6:
0000FB70 0829 0001 0022             		btst	#1,$22(a1)
0000FB76 66F4                       		bne.s	loc_FBD2
0000FB78 2F08                       		move.l	a0,-(sp)
0000FB7A 2049                       		movea.l	a1,a0
0000FB7C 4EB9 0000 0000             		jsr	KillSonic
0000FB82 205F                       		movea.l	(sp)+,a0
0000FB84 78FF                       		moveq	#-1,d4
0000FB86 4E75                       		rts	
0000FB88                            ; ===========================================================================
0000FB88                            
0000FB88                            loc_FBEE:
0000FB88 5943                       		subq.w	#4,d3
0000FB8A 7200                       		moveq	#0,d1
0000FB8C 1228 0019                  		move.b	$19(a0),d1
0000FB90 3401                       		move.w	d1,d2
0000FB92 D442                       		add.w	d2,d2
0000FB94 D269 0008                  		add.w	8(a1),d1
0000FB98 9268 0008                  		sub.w	8(a0),d1
0000FB9C 6B00                       		bmi.s	loc_FC28
0000FB9E B242                       		cmp.w	d2,d1
0000FBA0 6400                       		bcc.s	loc_FC28
0000FBA2 4A69 0012                  		tst.w	$12(a1)
0000FBA6 6B00                       		bmi.s	loc_FC28
0000FBA8 9769 000C                  		sub.w	d3,$C(a1)
0000FBAC 5369 000C                  		subq.w	#1,$C(a1)
0000FBB0 6100                       		bsr.s	sub_FC2C
0000FBB2 117C 0002 0025             		move.b	#2,$25(a0)
0000FBB8 08E8 0003 0022             		bset	#3,$22(a0)
0000FBBE 78FF                       		moveq	#-1,d4
0000FBC0 4E75                       		rts	
0000FBC2                            ; ===========================================================================
0000FBC2                            
0000FBC2                            loc_FC28:
0000FBC2 7800                       		moveq	#0,d4
0000FBC4 4E75                       		rts	
0000FBC6                            ; End of function SolidObject
0000FBC6                            
0000FBC6                            
0000FBC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBC6                            
0000FBC6                            
0000FBC6                            sub_FC2C:				; XREF: SolidObject
0000FBC6 0829 0003 0022             		btst	#3,$22(a1)
0000FBCC 6700                       		beq.s	loc_FC4E
0000FBCE 7000                       		moveq	#0,d0
0000FBD0 1029 003D                  		move.b	$3D(a1),d0
0000FBD4 ED48                       		lsl.w	#6,d0
0000FBD6 0680 00FF D000             		addi.l	#$FFD000,d0
0000FBDC 2440                       		movea.l	d0,a2
0000FBDE 08AA 0003 0022             		bclr	#3,$22(a2)
0000FBE4 422A 0025                  		clr.b	$25(a2)
0000FBE8                            
0000FBE8                            loc_FC4E:
0000FBE8 3008                       		move.w	a0,d0
0000FBEA 0440 D000                  		subi.w	#-$3000,d0
0000FBEE EC48                       		lsr.w	#6,d0
0000FBF0 0240 007F                  		andi.w	#$7F,d0
0000FBF4 1340 003D                  		move.b	d0,$3D(a1)
0000FBF8 137C 0000 0026             		move.b	#0,$26(a1)
0000FBFE 337C 0000 0012             		move.w	#0,$12(a1)
0000FC04 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FC0A 0829 0001 0022             		btst	#1,$22(a1)
0000FC10 6700                       		beq.s	loc_FC84
0000FC12 2F08                       		move.l	a0,-(sp)
0000FC14 2049                       		movea.l	a1,a0
0000FC16 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FC1C 205F                       		movea.l	(sp)+,a0
0000FC1E                            
0000FC1E                            loc_FC84:
0000FC1E 08E9 0003 0022             		bset	#3,$22(a1)
0000FC24 08E8 0003 0022             		bset	#3,$22(a0)
0000FC2A 4E75                       		rts	
0000FC2C                            ; End of function sub_FC2C
0000FC2C                            
0000FC2C                            ; ===========================================================================
0000FC2C                            ; ---------------------------------------------------------------------------
0000FC2C                            ; Object 51 - smashable	green block (MZ)
0000FC2C                            ; ---------------------------------------------------------------------------
0000FC2C                            
0000FC2C                            Obj51:					; XREF: Obj_Index
0000FC2C 7000                       		moveq	#0,d0
0000FC2E 1028 0024                  		move.b	$24(a0),d0
0000FC32 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FC36 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FC3A 6000 FA0C                  		bra.w	MarkObjGone
0000FC3E                            ; ===========================================================================
0000FC3E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FC40 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FC42 0000                       		dc.w Obj51_Display-Obj51_Index
0000FC44                            ; ===========================================================================
0000FC44                            
0000FC44                            Obj51_Main:				; XREF: Obj51_Index
0000FC44 5428 0024                  		addq.b	#2,$24(a0)
0000FC48 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FC50 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FC56 117C 0004 0001             		move.b	#4,1(a0)
0000FC5C 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC62 117C 0004 0018             		move.b	#4,$18(a0)
0000FC68 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FC6E                            
0000FC6E                            Obj51_Solid:				; XREF: Obj51_Index
0000FC6E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FC74 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FC7A 323C 001B                  		move.w	#$1B,d1
0000FC7E 343C 0010                  		move.w	#$10,d2
0000FC82 363C 0011                  		move.w	#$11,d3
0000FC86 3828 0008                  		move.w	8(a0),d4
0000FC8A 6100 FCE4                  		bsr.w	SolidObject
0000FC8E 0828 0003 0022             		btst	#3,$22(a0)
0000FC94 6600                       		bne.s	Obj51_Smash
0000FC96                            
0000FC96                            locret_FCFC:
0000FC96 4E75                       		rts	
0000FC98                            ; ===========================================================================
0000FC98                            
0000FC98                            Obj51_Smash:				; XREF: Obj51_Solid
0000FC98 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FC9E 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FCA0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FCA6 08E9 0002 0022             		bset	#2,$22(a1)
0000FCAC 137C 000E 0016             		move.b	#$E,$16(a1)
0000FCB2 137C 0007 0017             		move.b	#7,$17(a1)
0000FCB8 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCBE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FCC4 08E9 0001 0022             		bset	#1,$22(a1)
0000FCCA 08A9 0003 0022             		bclr	#3,$22(a1)
0000FCD0 137C 0002 0024             		move.b	#2,$24(a1)
0000FCD6 08A8 0003 0022             		bclr	#3,$22(a0)
0000FCDC 4228 0025                  		clr.b	$25(a0)
0000FCE0 117C 0001 001A             		move.b	#1,$1A(a0)
0000FCE6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FCEC 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FCEE 343C 0038                  		move.w	#$38,d2
0000FCF2 6100 D4AA                  		bsr.w	SmashObject
0000FCF6 6100 DD3E                  		bsr.w	SingleObjLoad
0000FCFA 6600                       		bne.s	Obj51_Display
0000FCFC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FD00 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD0C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FD10 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FD14 0C42 0006                  		cmpi.w	#6,d2
0000FD18 6500                       		bcs.s	Obj51_Bonus
0000FD1A 7406                       		moveq	#6,d2
0000FD1C                            
0000FD1C                            Obj51_Bonus:
0000FD1C 7000                       		moveq	#0,d0
0000FD1E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FD22 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FD28 6500                       		bcs.s	loc_FD98	; if not, branch
0000FD2A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FD2E 740A                       		moveq	#10,d2
0000FD30                            
0000FD30                            loc_FD98:
0000FD30 4EB9 0000 0000             		jsr	AddPoints
0000FD36 E24A                       		lsr.w	#1,d2
0000FD38 1342 001A                  		move.b	d2,$1A(a1)
0000FD3C                            
0000FD3C                            Obj51_Display:				; XREF: Obj51_Index
0000FD3C 6100 D84C                  		bsr.w	SpeedToPos
0000FD40 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FD46 6100 D868                  		bsr.w	DisplaySprite
0000FD4A 4A28 0001                  		tst.b	1(a0)
0000FD4E 6A00 D89C                  		bpl.w	DeleteObject
0000FD52 4E75                       		rts	
0000FD54                            ; ===========================================================================
0000FD54 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FD58 FF00 FF00                  		dc.w $FF00, $FF00
0000FD5C 0200 FE00                  		dc.w $200, $FE00
0000FD60 0100 FF00                  		dc.w $100, $FF00
0000FD64                            
0000FD64 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FD6C                            ; ---------------------------------------------------------------------------
0000FD6C                            ; Sprite mappings - smashable green block (MZ)
0000FD6C                            ; ---------------------------------------------------------------------------
0000FD6C                            Map_obj51:
0000FD6C                            	include "_maps\obj51.asm"
0000FD6C                            ; ---------------------------------------------------------------------------
0000FD6C                            ; Sprite mappings - smashable green block (MZ)
0000FD6C                            ; ---------------------------------------------------------------------------
0000FD6C 0000                       		dc.w byte_FDD8-Map_obj51
0000FD6E 0000                       		dc.w byte_FDE3-Map_obj51
0000FD70 02                         byte_FDD8:	dc.b 2
0000FD71 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FD76 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FD7B 04                         byte_FDE3:	dc.b 4
0000FD7C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FD81 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FD86 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FD8B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FD90                            		even
0000FD90                            		even
0000FD90                            
0000FD90                            ; ===========================================================================
0000FD90                            ; ---------------------------------------------------------------------------
0000FD90                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FD90                            ; ---------------------------------------------------------------------------
0000FD90                            
0000FD90                            Obj52:					; XREF: Obj_Index
0000FD90 7000                       		moveq	#0,d0
0000FD92 1028 0024                  		move.b	$24(a0),d0
0000FD96 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FD9A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FD9E                            ; ===========================================================================
0000FD9E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FDA0 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FDA2 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FDA4                            
0000FDA4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FDA6 2001                       		dc.b $20, 1
0000FDA8 2002                       		dc.b $20, 2
0000FDAA 4003                       		dc.b $40, 3
0000FDAC 3004                       		dc.b $30, 4
0000FDAE                            ; ===========================================================================
0000FDAE                            
0000FDAE                            Obj52_Main:				; XREF: Obj52_Index
0000FDAE 5428 0024                  		addq.b	#2,$24(a0)
0000FDB2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FDBA 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FDC0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FDC6 6600                       		bne.s	loc_FE44
0000FDC8 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FDD0 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FDD6 117C 0007 0016             		move.b	#7,$16(a0)
0000FDDC                            
0000FDDC                            loc_FE44:
0000FDDC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FDE2 6600                       		bne.s	loc_FE60
0000FDE4 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FDEA 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FDF0 6700                       		beq.s	loc_FE60	; if yes, branch
0000FDF2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FDF8                            
0000FDF8                            loc_FE60:
0000FDF8 117C 0004 0001             		move.b	#4,1(a0)
0000FDFE 7000                       		moveq	#0,d0
0000FE00 1028 0028                  		move.b	$28(a0),d0
0000FE04 E648                       		lsr.w	#3,d0
0000FE06 0240 001E                  		andi.w	#$1E,d0
0000FE0A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FE0E 115A 0019                  		move.b	(a2)+,$19(a0)
0000FE12 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FE16 117C 0004 0018             		move.b	#4,$18(a0)
0000FE1C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FE22 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FE28 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FE2E                            
0000FE2E                            Obj52_Platform:				; XREF: Obj52_Index
0000FE2E 6100 0000                  		bsr.w	Obj52_Move
0000FE32 7200                       		moveq	#0,d1
0000FE34 1228 0019                  		move.b	$19(a0),d1
0000FE38 4EB9 0000 7440             		jsr	(PlatformObject).l
0000FE3E 6000                       		bra.s	Obj52_ChkDel
0000FE40                            ; ===========================================================================
0000FE40                            
0000FE40                            Obj52_StandOn:				; XREF: Obj52_Index
0000FE40 7200                       		moveq	#0,d1
0000FE42 1228 0019                  		move.b	$19(a0),d1
0000FE46 4EB9 0000 75B4             		jsr	(ExitPlatform).l
0000FE4C 3F28 0008                  		move.w	8(a0),-(sp)
0000FE50 6100 0000                  		bsr.w	Obj52_Move
0000FE54 341F                       		move.w	(sp)+,d2
0000FE56 4EB9 0000 7B1E             		jsr	(MvSonicOnPtfm2).l
0000FE5C                            
0000FE5C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FE5C 3028 0030                  		move.w	$30(a0),d0
0000FE60 0240 FF80                  		andi.w	#$FF80,d0
0000FE64 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE68 0441 0080                  		subi.w	#$80,d1
0000FE6C 0241 FF80                  		andi.w	#$FF80,d1
0000FE70 9041                       		sub.w	d1,d0
0000FE72 0C40 0280                  		cmpi.w	#$280,d0
0000FE76 6200 D774                  		bhi.w	DeleteObject
0000FE7A 6000 D734                  		bra.w	DisplaySprite
0000FE7E                            ; ===========================================================================
0000FE7E                            
0000FE7E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000FE7E 7000                       		moveq	#0,d0
0000FE80 1028 0028                  		move.b	$28(a0),d0
0000FE84 0240 000F                  		andi.w	#$F,d0
0000FE88 D040                       		add.w	d0,d0
0000FE8A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000FE8E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000FE92                            ; ===========================================================================
0000FE92 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000FE96 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000FE9A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000FE9E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000FEA2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000FEA6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000FEA8                            ; ===========================================================================
0000FEA8                            
0000FEA8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000FEA8 4E75                       		rts	
0000FEAA                            ; ===========================================================================
0000FEAA                            
0000FEAA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000FEAA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000FEAE 323C 0060                  		move.w	#$60,d1
0000FEB2 0828 0000 0022             		btst	#0,$22(a0)
0000FEB8 6700                       		beq.s	loc_FF26
0000FEBA 4440                       		neg.w	d0
0000FEBC D041                       		add.w	d1,d0
0000FEBE                            
0000FEBE                            loc_FF26:
0000FEBE 3228 0030                  		move.w	$30(a0),d1
0000FEC2 9240                       		sub.w	d0,d1
0000FEC4 3141 0008                  		move.w	d1,8(a0)
0000FEC8 4E75                       		rts	
0000FECA                            ; ===========================================================================
0000FECA                            
0000FECA                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000FECA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000FED0 6600                       		bne.s	Obj52_02_Wait
0000FED2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000FED6                            
0000FED6                            Obj52_02_Wait:
0000FED6 4E75                       		rts	
0000FED8                            ; ===========================================================================
0000FED8                            
0000FED8                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0000FED8 7600                       		moveq	#0,d3
0000FEDA 1628 0019                  		move.b	$19(a0),d3
0000FEDE 6100 0000                  		bsr.w	ObjHitWallRight
0000FEE2 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FEE4 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0000FEE6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000FEEA 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FEF0 4E75                       		rts	
0000FEF2                            ; ===========================================================================
0000FEF2                            
0000FEF2                            Obj52_03_End:
0000FEF2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0000FEF6 4E75                       		rts	
0000FEF8                            ; ===========================================================================
0000FEF8                            
0000FEF8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0000FEF8 7600                       		moveq	#0,d3
0000FEFA 1628 0019                  		move.b	$19(a0),d3
0000FEFE 6100 0000                  		bsr.w	ObjHitWallRight
0000FF02 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FF04 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0000FF06 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000FF0A 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FF10 4E75                       		rts	
0000FF12                            ; ===========================================================================
0000FF12                            
0000FF12                            Obj52_05_End:
0000FF12 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0000FF16 4E75                       		rts	
0000FF18                            ; ===========================================================================
0000FF18                            
0000FF18                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0000FF18 6100 D670                  		bsr.w	SpeedToPos
0000FF1C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0000FF22 6100 0000                  		bsr.w	ObjHitFloor
0000FF26 4A41                       		tst.w	d1		; has platform hit the floor?
0000FF28 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0000FF2C D368 000C                  		add.w	d1,$C(a0)
0000FF30 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0000FF34 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0000FF38                            
0000FF38                            locret_FFA0:
0000FF38 4E75                       		rts	
0000FF3A                            ; ===========================================================================
0000FF3A                            
0000FF3A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0000FF3A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0000FF3E 6700                       		beq.s	Obj52_07_ChkDel
0000FF40 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0000FF44                            
0000FF44                            Obj52_07_ChkDel:
0000FF44 588F                       		addq.l	#4,sp
0000FF46 3028 0030                  		move.w	$30(a0),d0
0000FF4A 0240 FF80                  		andi.w	#$FF80,d0
0000FF4E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF52 0441 0080                  		subi.w	#$80,d1
0000FF56 0241 FF80                  		andi.w	#$FF80,d1
0000FF5A 9041                       		sub.w	d1,d0
0000FF5C 0C40 0280                  		cmpi.w	#$280,d0
0000FF60 6200 D68A                  		bhi.w	DeleteObject
0000FF64 4E75                       		rts	
0000FF66                            ; ===========================================================================
0000FF66                            
0000FF66                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0000FF66 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0000FF6A 323C 0080                  		move.w	#$80,d1
0000FF6E 0828 0000 0022             		btst	#0,$22(a0)
0000FF74 6700                       		beq.s	loc_FFE2
0000FF76 4440                       		neg.w	d0
0000FF78 D041                       		add.w	d1,d0
0000FF7A                            
0000FF7A                            loc_FFE2:
0000FF7A 3228 0032                  		move.w	$32(a0),d1
0000FF7E 9240                       		sub.w	d0,d1
0000FF80 3141 000C                  		move.w	d1,$C(a0)
0000FF84 4E75                       		rts	
0000FF86                            ; ===========================================================================
0000FF86                            
0000FF86                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0000FF86 7600                       		moveq	#0,d3
0000FF88 1628 0019                  		move.b	$19(a0),d3
0000FF8C D643                       		add.w	d3,d3
0000FF8E 7208                       		moveq	#8,d1
0000FF90 0828 0000 0022             		btst	#0,$22(a0)
0000FF96 6700                       		beq.s	loc_10004
0000FF98 4441                       		neg.w	d1
0000FF9A 4443                       		neg.w	d3
0000FF9C                            
0000FF9C                            loc_10004:
0000FF9C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0000FFA0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0000FFA2 3028 0008                  		move.w	8(a0),d0
0000FFA6 9068 0030                  		sub.w	$30(a0),d0
0000FFAA B043                       		cmp.w	d3,d0
0000FFAC 6700                       		beq.s	Obj52_0A_Wait
0000FFAE D368 0008                  		add.w	d1,8(a0)	; move platform
0000FFB2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            Obj52_0A_Wait:
0000FFBA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0000FFBE 6600                       		bne.s	locret_1002E	; if time remains, branch
0000FFC0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0000FFC6                            
0000FFC6                            locret_1002E:
0000FFC6 4E75                       		rts	
0000FFC8                            ; ===========================================================================
0000FFC8                            
0000FFC8                            Obj52_0A_Back:
0000FFC8 3028 0008                  		move.w	8(a0),d0
0000FFCC 9068 0030                  		sub.w	$30(a0),d0
0000FFD0 6700                       		beq.s	Obj52_0A_Reset
0000FFD2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0000FFD6 4E75                       		rts	
0000FFD8                            ; ===========================================================================
0000FFD8                            
0000FFD8                            Obj52_0A_Reset:
0000FFD8 4268 0036                  		clr.w	$36(a0)
0000FFDC 5328 0028                  		subq.b	#1,$28(a0)
0000FFE0 4E75                       		rts	
0000FFE2                            ; ===========================================================================
0000FFE2                            ; ---------------------------------------------------------------------------
0000FFE2                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000FFE2                            ; ---------------------------------------------------------------------------
0000FFE2                            Map_obj52:
0000FFE2                            	include "_maps\obj52mz.asm"
0000FFE2                            ; ---------------------------------------------------------------------------
0000FFE2                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000FFE2                            ; ---------------------------------------------------------------------------
0000FFE2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0000FFE6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0000FFEA 0000                       		dc.w byte_1008F-Map_obj52
0000FFEC 01                         byte_10054:	dc.b 1
0000FFED F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0000FFF2 02                         byte_1005A:	dc.b 2
0000FFF3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0000FFF8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0000FFFD 04                         byte_10065:	dc.b 4
0000FFFE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010003 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010008 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001000D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010012 04                         byte_1007A:	dc.b 4
00010013 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010018 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001001D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010022 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010027 03                         byte_1008F:	dc.b 3
00010028 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001002D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010032 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010038 00                         		even
00010038 00                         		even
00010038                            
00010038                            ; ---------------------------------------------------------------------------
00010038                            ; Sprite mappings - moving block (LZ)
00010038                            ; ---------------------------------------------------------------------------
00010038                            Map_obj52a:
00010038                            	include "_maps\obj52lz.asm"
00010038                            ; ---------------------------------------------------------------------------
00010038                            ; Sprite mappings - moving block (LZ)
00010038                            ; ---------------------------------------------------------------------------
00010038 0000                       		dc.w byte_100A2-Map_obj52a
0001003A 01                         byte_100A2:	dc.b 1
0001003B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010040                            		even
00010040                            		even
00010040                            
00010040                            ; ===========================================================================
00010040                            ; ---------------------------------------------------------------------------
00010040                            ; Object 55 - Basaran enemy (MZ)
00010040                            ; ---------------------------------------------------------------------------
00010040                            
00010040                            Obj55:					; XREF: Obj_Index
00010040 7000                       		moveq	#0,d0
00010042 1028 0024                  		move.b	$24(a0),d0
00010046 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001004A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001004E                            ; ===========================================================================
0001004E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010050 0000                       		dc.w Obj55_Action-Obj55_Index
00010052                            ; ===========================================================================
00010052                            
00010052                            Obj55_Main:				; XREF: Obj55_Index
00010052 5428 0024                  		addq.b	#2,$24(a0)
00010056 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001005E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010064 117C 0004 0001             		move.b	#4,1(a0)
0001006A 117C 000C 0016             		move.b	#$C,$16(a0)
00010070 117C 0002 0018             		move.b	#2,$18(a0)
00010076 117C 000B 0020             		move.b	#$B,$20(a0)
0001007C 117C 0010 0019             		move.b	#$10,$19(a0)
00010082                            
00010082                            Obj55_Action:				; XREF: Obj55_Index
00010082 7000                       		moveq	#0,d0
00010084 1028 0025                  		move.b	$25(a0),d0
00010088 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001008C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010090 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010096 6100 A654                  		bsr.w	AnimateSprite
0001009A 6000 F5AC                  		bra.w	MarkObjGone
0001009E                            ; ===========================================================================
0001009E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000100A0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000100A2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000100A4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000100A6                            ; ===========================================================================
000100A6                            
000100A6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000100A6 343C 0080                  		move.w	#$80,d2
000100AA 6100 0000                  		bsr.w	Obj55_ChkSonic
000100AE 6400                       		bcc.s	Obj55_NoDrop
000100B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000100B4 3140 0036                  		move.w	d0,$36(a0)
000100B8 9068 000C                  		sub.w	$C(a0),d0
000100BC 6500                       		bcs.s	Obj55_NoDrop
000100BE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000100C2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000100C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000100C8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000100CA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000100CE D007                       		add.b	d7,d0
000100D0 0200 0007                  		andi.b	#7,d0
000100D4 6600                       		bne.s	Obj55_NoDrop
000100D6 117C 0001 001C             		move.b	#1,$1C(a0)
000100DC 5428 0025                  		addq.b	#2,$25(a0)
000100E0                            
000100E0                            Obj55_NoDrop:
000100E0 4E75                       		rts	
000100E2                            ; ===========================================================================
000100E2                            
000100E2                            Obj55_DropFly:				; XREF: Obj55_Index2
000100E2 6100 D4A6                  		bsr.w	SpeedToPos
000100E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000100EC 343C 0080                  		move.w	#$80,d2
000100F0 6100 0000                  		bsr.w	Obj55_ChkSonic
000100F4 3028 0036                  		move.w	$36(a0),d0
000100F8 9068 000C                  		sub.w	$C(a0),d0
000100FC 6500                       		bcs.s	Obj55_ChkDel
000100FE 0C40 0010                  		cmpi.w	#$10,d0
00010102 6400                       		bcc.s	locret_10180
00010104 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010108 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001010E 117C 0002 001C             		move.b	#2,$1C(a0)
00010114 5428 0025                  		addq.b	#2,$25(a0)
00010118                            
00010118                            locret_10180:
00010118 4E75                       		rts	
0001011A                            ; ===========================================================================
0001011A                            
0001011A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001011A 4A28 0001                  		tst.b	1(a0)
0001011E 6A00 D4CC                  		bpl.w	DeleteObject
00010122 4E75                       		rts	
00010124                            ; ===========================================================================
00010124                            
00010124                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010124 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010128 0200 000F                  		andi.b	#$F,d0
0001012C 6600                       		bne.s	loc_101A0
0001012E 303C 00C0                  		move.w	#$C0,d0
00010132 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010138                            
00010138                            loc_101A0:
00010138 6100 D450                  		bsr.w	SpeedToPos
0001013C 3038 D008                  		move.w	($FFFFD008).w,d0
00010140 9068 0008                  		sub.w	8(a0),d0
00010144 6400                       		bcc.s	loc_101B0
00010146 4440                       		neg.w	d0
00010148                            
00010148                            loc_101B0:
00010148 0C40 0080                  		cmpi.w	#$80,d0
0001014C 6500                       		bcs.s	locret_101C6
0001014E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010152 D007                       		add.b	d7,d0
00010154 0200 0007                  		andi.b	#7,d0
00010158 6600                       		bne.s	locret_101C6
0001015A 5428 0025                  		addq.b	#2,$25(a0)
0001015E                            
0001015E                            locret_101C6:
0001015E 4E75                       		rts	
00010160                            ; ===========================================================================
00010160                            
00010160                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010160 6100 D428                  		bsr.w	SpeedToPos
00010164 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001016A 6100 0000                  		bsr.w	ObjHitCeiling
0001016E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010170 6A00                       		bpl.s	locret_101F4	; if not, branch
00010172 9368 000C                  		sub.w	d1,$C(a0)
00010176 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001017C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010180 4268 0012                  		clr.w	$12(a0)
00010184 4228 001C                  		clr.b	$1C(a0)
00010188 4228 0025                  		clr.b	$25(a0)
0001018C                            
0001018C                            locret_101F4:
0001018C 4E75                       		rts	
0001018E                            ; ===========================================================================
0001018E                            
0001018E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001018E 323C 0100                  		move.w	#$100,d1
00010192 08E8 0000 0022             		bset	#0,$22(a0)
00010198 3038 D008                  		move.w	($FFFFD008).w,d0
0001019C 9068 0008                  		sub.w	8(a0),d0
000101A0 6400                       		bcc.s	loc_10214
000101A2 4440                       		neg.w	d0
000101A4 4441                       		neg.w	d1
000101A6 08A8 0000 0022             		bclr	#0,$22(a0)
000101AC                            
000101AC                            loc_10214:
000101AC B042                       		cmp.w	d2,d0
000101AE 4E75                       		rts	
000101B0                            ; ===========================================================================
000101B0 6100 D3D8                  		bsr.w	SpeedToPos
000101B4 6100 D3FA                  		bsr.w	DisplaySprite
000101B8 4A28 0001                  		tst.b	1(a0)
000101BC 6A00 D42E                  		bpl.w	DeleteObject
000101C0 4E75                       		rts	
000101C2                            ; ===========================================================================
000101C2                            Ani_obj55:
000101C2                            	include "_anim\obj55.asm"
000101C2                            ; ---------------------------------------------------------------------------
000101C2                            ; Animation script - Basaran enemy
000101C2                            ; ---------------------------------------------------------------------------
000101C2 0000                       		dc.w byte_10230-Ani_obj55
000101C4 0000                       		dc.w byte_10234-Ani_obj55
000101C6 0000                       		dc.w byte_10238-Ani_obj55
000101C8 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000101CC 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000101D0 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000101D6                            		even
000101D6                            		even
000101D6                            
000101D6                            ; ---------------------------------------------------------------------------
000101D6                            ; Sprite mappings - Basaran enemy (MZ)
000101D6                            ; ---------------------------------------------------------------------------
000101D6                            Map_obj55:
000101D6                            	include "_maps\obj55.asm"
000101D6                            ; ---------------------------------------------------------------------------
000101D6                            ; Sprite mappings - Basaran enemy (MZ)
000101D6                            ; ---------------------------------------------------------------------------
000101D6 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000101DA 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000101DE 01                         byte_10246:	dc.b 1
000101DF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000101E4 03                         byte_1024C:	dc.b 3
000101E5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000101EA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000101EF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000101F4 04                         byte_1025C:	dc.b 4
000101F5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000101FA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000101FF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010204 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010209 04                         byte_10271:	dc.b 4
0001020A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001020F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010214 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010219 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001021E                            		even
0001021E                            		even
0001021E                            
0001021E                            ; ===========================================================================
0001021E                            ; ---------------------------------------------------------------------------
0001021E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001021E                            ; ---------------------------------------------------------------------------
0001021E                            
0001021E                            Obj56:					; XREF: Obj_Index
0001021E 7000                       		moveq	#0,d0
00010220 1028 0024                  		move.b	$24(a0),d0
00010224 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010228 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0001022C                            ; ===========================================================================
0001022C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001022E 0000                       		dc.w Obj56_Action-Obj56_Index
00010230                            
00010230 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010232 2020                       		dc.b  $20, $20
00010234 1020                       		dc.b  $10, $20
00010236 201A                       		dc.b  $20, $1A
00010238 1027                       		dc.b  $10, $27
0001023A 1010                       		dc.b  $10, $10
0001023C 0820                       		dc.b	8, $20
0001023E 4010                       		dc.b  $40, $10
00010240                            ; ===========================================================================
00010240                            
00010240                            Obj56_Main:				; XREF: Obj56_Index
00010240 5428 0024                  		addq.b	#2,$24(a0)
00010244 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001024C 317C 4000 0002             		move.w	#$4000,2(a0)
00010252 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010258 6600                       		bne.s	loc_102C8
0001025A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010260                            
00010260                            loc_102C8:
00010260 117C 0004 0001             		move.b	#4,1(a0)
00010266 117C 0003 0018             		move.b	#3,$18(a0)
0001026C 7000                       		moveq	#0,d0
0001026E 1028 0028                  		move.b	$28(a0),d0
00010272 E648                       		lsr.w	#3,d0
00010274 0240 000E                  		andi.w	#$E,d0
00010278 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001027C 115A 0019                  		move.b	(a2)+,$19(a0)
00010280 1152 0016                  		move.b	(a2),$16(a0)
00010284 E248                       		lsr.w	#1,d0
00010286 1140 001A                  		move.b	d0,$1A(a0)
0001028A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010290 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010296 7000                       		moveq	#0,d0
00010298 1012                       		move.b	(a2),d0
0001029A D040                       		add.w	d0,d0
0001029C 3140 003A                  		move.w	d0,$3A(a0)
000102A0 7000                       		moveq	#0,d0
000102A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000102A8 6700                       		beq.s	loc_10332
000102AA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000102AE 0240 000F                  		andi.w	#$F,d0
000102B2 5140                       		subq.w	#8,d0
000102B4 6500                       		bcs.s	loc_10332
000102B6 E548                       		lsl.w	#2,d0
000102B8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000102BC 45F2 0000                  		lea	(a2,d0.w),a2
000102C0 4A52                       		tst.w	(a2)
000102C2 6A00                       		bpl.s	loc_10332
000102C4 0868 0000 0022             		bchg	#0,$22(a0)
000102CA                            
000102CA                            loc_10332:
000102CA 1028 0028                  		move.b	$28(a0),d0
000102CE 6A00                       		bpl.s	Obj56_Action
000102D0 0200 000F                  		andi.b	#$F,d0
000102D4 1140 003C                  		move.b	d0,$3C(a0)
000102D8 117C 0005 0028             		move.b	#5,$28(a0)
000102DE 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000102E4 6600                       		bne.s	Obj56_ChkGone
000102E6 117C 000C 0028             		move.b	#$C,$28(a0)
000102EC 317C 0080 003A             		move.w	#$80,$3A(a0)
000102F2                            
000102F2                            Obj56_ChkGone:
000102F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000102F6 7000                       		moveq	#0,d0
000102F8 1028 0023                  		move.b	$23(a0),d0
000102FC 6700                       		beq.s	Obj56_Action
000102FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010304 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001030A 6700                       		beq.s	Obj56_Action
0001030C 5228 0028                  		addq.b	#1,$28(a0)
00010310 4268 003A                  		clr.w	$3A(a0)
00010314                            
00010314                            Obj56_Action:				; XREF: Obj56_Index
00010314 3F28 0008                  		move.w	8(a0),-(sp)
00010318 7000                       		moveq	#0,d0
0001031A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001031E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010322 D040                       		add.w	d0,d0
00010324 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010328 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0001032C 381F                       		move.w	(sp)+,d4
0001032E 4A28 0001                  		tst.b	1(a0)
00010332 6A00                       		bpl.s	Obj56_ChkDel
00010334 7200                       		moveq	#0,d1
00010336 1228 0019                  		move.b	$19(a0),d1
0001033A 0641 000B                  		addi.w	#$B,d1
0001033E 7400                       		moveq	#0,d2
00010340 1428 0016                  		move.b	$16(a0),d2
00010344 3602                       		move.w	d2,d3
00010346 5243                       		addq.w	#1,d3
00010348 6100 F626                  		bsr.w	SolidObject
0001034C                            
0001034C                            Obj56_ChkDel:
0001034C 3028 0034                  		move.w	$34(a0),d0
00010350 0240 FF80                  		andi.w	#$FF80,d0
00010354 3238 F700                  		move.w	($FFFFF700).w,d1
00010358 0441 0080                  		subi.w	#$80,d1
0001035C 0241 FF80                  		andi.w	#$FF80,d1
00010360 9041                       		sub.w	d1,d0
00010362 0C40 0280                  		cmpi.w	#$280,d0
00010366 6200 D284                  		bhi.w	DeleteObject
0001036A 6000 D244                  		bra.w	DisplaySprite
0001036E                            ; ===========================================================================
0001036E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010372 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010376 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001037A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001037E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010382 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010386 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001038A                            ; ===========================================================================
0001038A                            
0001038A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001038A 4E75                       		rts	
0001038C                            ; ===========================================================================
0001038C                            
0001038C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001038C 323C 0040                  		move.w	#$40,d1
00010390 7000                       		moveq	#0,d0
00010392 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010396 6000                       		bra.s	Obj56_Move_LR
00010398                            ; ===========================================================================
00010398                            
00010398                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010398 323C 0080                  		move.w	#$80,d1
0001039C 7000                       		moveq	#0,d0
0001039E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000103A2                            
000103A2                            Obj56_Move_LR:
000103A2 0828 0000 0022             		btst	#0,$22(a0)
000103A8 6700                       		beq.s	loc_10416
000103AA 4440                       		neg.w	d0
000103AC D041                       		add.w	d1,d0
000103AE                            
000103AE                            loc_10416:
000103AE 3228 0034                  		move.w	$34(a0),d1
000103B2 9240                       		sub.w	d0,d1
000103B4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000103B8 4E75                       		rts	
000103BA                            ; ===========================================================================
000103BA                            
000103BA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000103BA 323C 0040                  		move.w	#$40,d1
000103BE 7000                       		moveq	#0,d0
000103C0 1038 FE68                  		move.b	($FFFFFE68).w,d0
000103C4 6000                       		bra.s	Obj56_Move_UD
000103C6                            ; ===========================================================================
000103C6                            
000103C6                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000103C6 323C 0080                  		move.w	#$80,d1
000103CA 7000                       		moveq	#0,d0
000103CC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000103D0                            
000103D0                            Obj56_Move_UD:
000103D0 0828 0000 0022             		btst	#0,$22(a0)
000103D6 6700                       		beq.s	loc_10444
000103D8 4440                       		neg.w	d0
000103DA D041                       		add.w	d1,d0
000103DC                            
000103DC                            loc_10444:
000103DC 3228 0030                  		move.w	$30(a0),d1
000103E0 9240                       		sub.w	d0,d1
000103E2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000103E6 4E75                       		rts	
000103E8                            ; ===========================================================================
000103E8                            
000103E8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000103E8 4A28 0038                  		tst.b	$38(a0)
000103EC 6600                       		bne.s	loc_104A4
000103EE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000103F4 6600                       		bne.s	loc_1047A	; if not, branch
000103F6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000103FC 6600                       		bne.s	loc_1047A
000103FE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010402 3038 D008                  		move.w	($FFFFD008).w,d0
00010406 B068 0008                  		cmp.w	8(a0),d0
0001040A 6400                       		bcc.s	loc_1047A
0001040C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010412                            
00010412                            loc_1047A:
00010412 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010416 7000                       		moveq	#0,d0
00010418 1028 003C                  		move.b	$3C(a0),d0
0001041C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010422 6700                       		beq.s	loc_104AE
00010424 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001042A 6600                       		bne.s	loc_1049E	; if not, branch
0001042C 0C00 0003                  		cmpi.b	#3,d0
00010430 6600                       		bne.s	loc_1049E
00010432 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010436                            
00010436                            loc_1049E:
00010436 117C 0001 0038             		move.b	#1,$38(a0)
0001043C                            
0001043C                            loc_104A4:
0001043C 4A68 003A                  		tst.w	$3A(a0)
00010440 6700                       		beq.s	loc_104C8
00010442 5568 003A                  		subq.w	#2,$3A(a0)
00010446                            
00010446                            loc_104AE:
00010446 3028 003A                  		move.w	$3A(a0),d0
0001044A 0828 0000 0022             		btst	#0,$22(a0)
00010450 6700                       		beq.s	loc_104BC
00010452 4440                       		neg.w	d0
00010454                            
00010454                            loc_104BC:
00010454 3228 0030                  		move.w	$30(a0),d1
00010458 D240                       		add.w	d0,d1
0001045A 3141 000C                  		move.w	d1,$C(a0)
0001045E 4E75                       		rts	
00010460                            ; ===========================================================================
00010460                            
00010460                            loc_104C8:
00010460 5228 0028                  		addq.b	#1,$28(a0)
00010464 4228 0038                  		clr.b	$38(a0)
00010468 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001046C 7000                       		moveq	#0,d0
0001046E 1028 0023                  		move.b	$23(a0),d0
00010472 67D2                       		beq.s	loc_104AE
00010474 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001047A 60CA                       		bra.s	loc_104AE
0001047C                            ; ===========================================================================
0001047C                            
0001047C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001047C 4A28 0038                  		tst.b	$38(a0)
00010480 6600                       		bne.s	loc_10500
00010482 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010486 7000                       		moveq	#0,d0
00010488 1028 003C                  		move.b	$3C(a0),d0
0001048C 4A32 0000                  		tst.b	(a2,d0.w)
00010490 6A00                       		bpl.s	loc_10512
00010492 117C 0001 0038             		move.b	#1,$38(a0)
00010498                            
00010498                            loc_10500:
00010498 7000                       		moveq	#0,d0
0001049A 1028 0016                  		move.b	$16(a0),d0
0001049E D040                       		add.w	d0,d0
000104A0 B068 003A                  		cmp.w	$3A(a0),d0
000104A4 6700                       		beq.s	loc_1052C
000104A6 5468 003A                  		addq.w	#2,$3A(a0)
000104AA                            
000104AA                            loc_10512:
000104AA 3028 003A                  		move.w	$3A(a0),d0
000104AE 0828 0000 0022             		btst	#0,$22(a0)
000104B4 6700                       		beq.s	loc_10520
000104B6 4440                       		neg.w	d0
000104B8                            
000104B8                            loc_10520:
000104B8 3228 0030                  		move.w	$30(a0),d1
000104BC D240                       		add.w	d0,d1
000104BE 3141 000C                  		move.w	d1,$C(a0)
000104C2 4E75                       		rts	
000104C4                            ; ===========================================================================
000104C4                            
000104C4                            loc_1052C:
000104C4 5328 0028                  		subq.b	#1,$28(a0)
000104C8 4228 0038                  		clr.b	$38(a0)
000104CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104D0 7000                       		moveq	#0,d0
000104D2 1028 0023                  		move.b	$23(a0),d0
000104D6 67D2                       		beq.s	loc_10512
000104D8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000104DE 60CA                       		bra.s	loc_10512
000104E0                            ; ===========================================================================
000104E0                            
000104E0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000104E0 4A28 0038                  		tst.b	$38(a0)
000104E4 6600                       		bne.s	loc_1055E
000104E6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000104EA 6700                       		beq.s	locret_10578
000104EC 117C 0001 0038             		move.b	#1,$38(a0)
000104F2 4268 003A                  		clr.w	$3A(a0)
000104F6                            
000104F6                            loc_1055E:
000104F6 5268 0008                  		addq.w	#1,8(a0)
000104FA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010500 5268 003A                  		addq.w	#1,$3A(a0)
00010504 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0001050A 6600                       		bne.s	locret_10578
0001050C 4228 0028                  		clr.b	$28(a0)
00010510                            
00010510                            locret_10578:
00010510 4E75                       		rts	
00010512                            ; ===========================================================================
00010512                            
00010512                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010512 4A28 0038                  		tst.b	$38(a0)
00010516 6600                       		bne.s	loc_10598
00010518 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001051C 7000                       		moveq	#0,d0
0001051E 1028 003C                  		move.b	$3C(a0),d0
00010522 0832 0000 0000             		btst	#0,(a2,d0.w)
00010528 6700                       		beq.s	loc_105A2
0001052A 117C 0001 0038             		move.b	#1,$38(a0)
00010530                            
00010530                            loc_10598:
00010530 4A68 003A                  		tst.w	$3A(a0)
00010534 6700                       		beq.s	loc_105C0
00010536 5568 003A                  		subq.w	#2,$3A(a0)
0001053A                            
0001053A                            loc_105A2:
0001053A 3028 003A                  		move.w	$3A(a0),d0
0001053E 0828 0000 0022             		btst	#0,$22(a0)
00010544 6700                       		beq.s	loc_105B4
00010546 4440                       		neg.w	d0
00010548 0640 0080                  		addi.w	#$80,d0
0001054C                            
0001054C                            loc_105B4:
0001054C 3228 0034                  		move.w	$34(a0),d1
00010550 D240                       		add.w	d0,d1
00010552 3141 0008                  		move.w	d1,8(a0)
00010556 4E75                       		rts	
00010558                            ; ===========================================================================
00010558                            
00010558                            loc_105C0:
00010558 5228 0028                  		addq.b	#1,$28(a0)
0001055C 4228 0038                  		clr.b	$38(a0)
00010560 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010564 7000                       		moveq	#0,d0
00010566 1028 0023                  		move.b	$23(a0),d0
0001056A 67CE                       		beq.s	loc_105A2
0001056C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010572 60C6                       		bra.s	loc_105A2
00010574                            ; ===========================================================================
00010574                            
00010574                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010574 4A28 0038                  		tst.b	$38(a0)
00010578 6600                       		bne.s	loc_105F8
0001057A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001057E 7000                       		moveq	#0,d0
00010580 1028 003C                  		move.b	$3C(a0),d0
00010584 4A32 0000                  		tst.b	(a2,d0.w)
00010588 6A00                       		bpl.s	loc_10606
0001058A 117C 0001 0038             		move.b	#1,$38(a0)
00010590                            
00010590                            loc_105F8:
00010590 303C 0080                  		move.w	#$80,d0
00010594 B068 003A                  		cmp.w	$3A(a0),d0
00010598 6700                       		beq.s	loc_10624
0001059A 5468 003A                  		addq.w	#2,$3A(a0)
0001059E                            
0001059E                            loc_10606:
0001059E 3028 003A                  		move.w	$3A(a0),d0
000105A2 0828 0000 0022             		btst	#0,$22(a0)
000105A8 6700                       		beq.s	loc_10618
000105AA 4440                       		neg.w	d0
000105AC 0640 0080                  		addi.w	#$80,d0
000105B0                            
000105B0                            loc_10618:
000105B0 3228 0034                  		move.w	$34(a0),d1
000105B4 D240                       		add.w	d0,d1
000105B6 3141 0008                  		move.w	d1,8(a0)
000105BA 4E75                       		rts	
000105BC                            ; ===========================================================================
000105BC                            
000105BC                            loc_10624:
000105BC 5328 0028                  		subq.b	#1,$28(a0)
000105C0 4228 0038                  		clr.b	$38(a0)
000105C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105C8 7000                       		moveq	#0,d0
000105CA 1028 0023                  		move.b	$23(a0),d0
000105CE 67CE                       		beq.s	loc_10606
000105D0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000105D6 60C6                       		bra.s	loc_10606
000105D8                            ; ===========================================================================
000105D8                            
000105D8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000105D8 323C 0010                  		move.w	#$10,d1
000105DC 7000                       		moveq	#0,d0
000105DE 1038 FE88                  		move.b	($FFFFFE88).w,d0
000105E2 E248                       		lsr.w	#1,d0
000105E4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000105E8 6000                       		bra.s	Obj56_Move_Sqr
000105EA                            ; ===========================================================================
000105EA                            
000105EA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000105EA 323C 0030                  		move.w	#$30,d1
000105EE 7000                       		moveq	#0,d0
000105F0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000105F4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000105F8 6000                       		bra.s	Obj56_Move_Sqr
000105FA                            ; ===========================================================================
000105FA                            
000105FA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000105FA 323C 0050                  		move.w	#$50,d1
000105FE 7000                       		moveq	#0,d0
00010600 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010604 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010608 6000                       		bra.s	Obj56_Move_Sqr
0001060A                            ; ===========================================================================
0001060A                            
0001060A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001060A 323C 0070                  		move.w	#$70,d1
0001060E 7000                       		moveq	#0,d0
00010610 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010614 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010618                            
00010618                            Obj56_Move_Sqr:
00010618 4A43                       		tst.w	d3
0001061A 6600                       		bne.s	loc_1068E
0001061C 5228 0022                  		addq.b	#1,$22(a0)
00010620 0228 0003 0022             		andi.b	#3,$22(a0)
00010626                            
00010626                            loc_1068E:
00010626 1428 0022                  		move.b	$22(a0),d2
0001062A 0202 0003                  		andi.b	#3,d2
0001062E 6600                       		bne.s	loc_106AE
00010630 9041                       		sub.w	d1,d0
00010632 D068 0034                  		add.w	$34(a0),d0
00010636 3140 0008                  		move.w	d0,8(a0)
0001063A 4441                       		neg.w	d1
0001063C D268 0030                  		add.w	$30(a0),d1
00010640 3141 000C                  		move.w	d1,$C(a0)
00010644 4E75                       		rts	
00010646                            ; ===========================================================================
00010646                            
00010646                            loc_106AE:
00010646 5302                       		subq.b	#1,d2
00010648 6600                       		bne.s	loc_106CC
0001064A 5341                       		subq.w	#1,d1
0001064C 9041                       		sub.w	d1,d0
0001064E 4440                       		neg.w	d0
00010650 D068 0030                  		add.w	$30(a0),d0
00010654 3140 000C                  		move.w	d0,$C(a0)
00010658 5241                       		addq.w	#1,d1
0001065A D268 0034                  		add.w	$34(a0),d1
0001065E 3141 0008                  		move.w	d1,8(a0)
00010662 4E75                       		rts	
00010664                            ; ===========================================================================
00010664                            
00010664                            loc_106CC:
00010664 5302                       		subq.b	#1,d2
00010666 6600                       		bne.s	loc_106EA
00010668 5341                       		subq.w	#1,d1
0001066A 9041                       		sub.w	d1,d0
0001066C 4440                       		neg.w	d0
0001066E D068 0034                  		add.w	$34(a0),d0
00010672 3140 0008                  		move.w	d0,8(a0)
00010676 5241                       		addq.w	#1,d1
00010678 D268 0030                  		add.w	$30(a0),d1
0001067C 3141 000C                  		move.w	d1,$C(a0)
00010680 4E75                       		rts	
00010682                            ; ===========================================================================
00010682                            
00010682                            loc_106EA:
00010682 9041                       		sub.w	d1,d0
00010684 D068 0030                  		add.w	$30(a0),d0
00010688 3140 000C                  		move.w	d0,$C(a0)
0001068C 4441                       		neg.w	d1
0001068E D268 0034                  		add.w	$34(a0),d1
00010692 3141 0008                  		move.w	d1,8(a0)
00010696 4E75                       		rts	
00010698                            ; ===========================================================================
00010698                            ; ---------------------------------------------------------------------------
00010698                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010698                            ; ---------------------------------------------------------------------------
00010698                            Map_obj56:
00010698                            	include "_maps\obj56.asm"
00010698                            ; ---------------------------------------------------------------------------
00010698                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010698                            ; ---------------------------------------------------------------------------
00010698 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001069C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000106A0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000106A4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000106A8 01                         byte_10710:	dc.b 1
000106A9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000106AE 04                         byte_10716:	dc.b 4
000106AF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000106B4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000106B9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000106BE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000106C3 02                         byte_1072B:	dc.b 2
000106C4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000106C9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000106CE 04                         byte_10736:	dc.b 4
000106CF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000106D4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000106D9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000106DE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000106E3 03                         byte_1074B:	dc.b 3
000106E4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000106E9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000106EE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000106F3 01                         byte_1075B:	dc.b 1
000106F4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000106F9 02                         byte_10761:	dc.b 2
000106FA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000106FF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010704 04                         byte_1076C:	dc.b 4
00010705 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001070A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001070F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010714 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001071A 00                         		even
0001071A 00                         		even
0001071A                            
0001071A                            ; ===========================================================================
0001071A                            ; ---------------------------------------------------------------------------
0001071A                            ; Object 57 - spiked balls (SYZ, LZ)
0001071A                            ; ---------------------------------------------------------------------------
0001071A                            
0001071A                            Obj57:					; XREF: Obj_Index
0001071A 7000                       		moveq	#0,d0
0001071C 1028 0024                  		move.b	$24(a0),d0
00010720 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010724 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010728                            ; ===========================================================================
00010728 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001072A 0000                       		dc.w Obj57_Move-Obj57_Index
0001072C 0000                       		dc.w Obj57_Display-Obj57_Index
0001072E                            ; ===========================================================================
0001072E                            
0001072E                            Obj57_Main:				; XREF: Obj57_Index
0001072E 5428 0024                  		addq.b	#2,$24(a0)
00010732 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001073A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010740 117C 0004 0001             		move.b	#4,1(a0)
00010746 117C 0004 0018             		move.b	#4,$18(a0)
0001074C 117C 0008 0019             		move.b	#8,$19(a0)
00010752 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010758 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001075E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010764 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001076A 6600                       		bne.s	loc_107E8
0001076C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010772 317C 0310 0002             		move.w	#$310,2(a0)
00010778 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010780                            
00010780                            loc_107E8:
00010780 1228 0028                  		move.b	$28(a0),d1	; get object type
00010784 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010788 4881                       		ext.w	d1
0001078A E741                       		asl.w	#3,d1		; multiply by 8
0001078C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010790 1028 0022                  		move.b	$22(a0),d0
00010794 E418                       		ror.b	#2,d0
00010796 0200 00C0                  		andi.b	#-$40,d0
0001079A 1140 0026                  		move.b	d0,$26(a0)
0001079E 45E8 0029                  		lea	$29(a0),a2
000107A2 1228 0028                  		move.b	$28(a0),d1	; get object type
000107A6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000107AA 14FC 0000                  		move.b	#0,(a2)+
000107AE 3601                       		move.w	d1,d3
000107B0 E94B                       		lsl.w	#4,d3
000107B2 1143 003C                  		move.b	d3,$3C(a0)
000107B6 5341                       		subq.w	#1,d1		; set chain length (type-1)
000107B8 6500                       		bcs.s	loc_10894
000107BA 0828 0003 0028             		btst	#3,$28(a0)
000107C0 6700                       		beq.s	Obj57_MakeChain
000107C2 5341                       		subq.w	#1,d1
000107C4 6500                       		bcs.s	loc_10894
000107C6                            
000107C6                            Obj57_MakeChain:
000107C6 6100 D26E                  		bsr.w	SingleObjLoad
000107CA 6600                       		bne.s	loc_10894
000107CC 5228 0029                  		addq.b	#1,$29(a0)
000107D0 3A09                       		move.w	a1,d5
000107D2 0445 D000                  		subi.w	#-$3000,d5
000107D6 EC4D                       		lsr.w	#6,d5
000107D8 0245 007F                  		andi.w	#$7F,d5
000107DC 14C5                       		move.b	d5,(a2)+
000107DE 137C 0004 0024             		move.b	#4,$24(a1)
000107E4 1290                       		move.b	0(a0),0(a1)
000107E6 2368 0004 0004             		move.l	4(a0),4(a1)
000107EC 3368 0002 0002             		move.w	2(a0),2(a1)
000107F2 1368 0001 0001             		move.b	1(a0),1(a1)
000107F8 1368 0018 0018             		move.b	$18(a0),$18(a1)
000107FE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010804 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001080A 0403 0010                  		subi.b	#$10,d3
0001080E 1343 003C                  		move.b	d3,$3C(a1)
00010812 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010818 6600                       		bne.s	loc_10890
0001081A 4A03                       		tst.b	d3
0001081C 6600                       		bne.s	loc_10890
0001081E 137C 0002 001A             		move.b	#2,$1A(a1)
00010824                            
00010824                            loc_10890:
00010824 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010828                            
00010828                            loc_10894:
00010828 3A08                       		move.w	a0,d5
0001082A 0445 D000                  		subi.w	#-$3000,d5
0001082E EC4D                       		lsr.w	#6,d5
00010830 0245 007F                  		andi.w	#$7F,d5
00010834 14C5                       		move.b	d5,(a2)+
00010836 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001083C 6600                       		bne.s	Obj57_Move
0001083E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010844 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001084A                            
0001084A                            Obj57_Move:				; XREF: Obj57_Index
0001084A 6100 0000                  		bsr.w	Obj57_MoveSub
0001084E 6000 0000                  		bra.w	Obj57_ChkDel
00010852                            ; ===========================================================================
00010852                            
00010852                            Obj57_MoveSub:				; XREF: Obj57_Move
00010852 3028 003E                  		move.w	$3E(a0),d0
00010856 D168 0026                  		add.w	d0,$26(a0)
0001085A 1028 0026                  		move.b	$26(a0),d0
0001085E 4EB9 0000 29BA             		jsr	(CalcSine).l
00010864 3428 0038                  		move.w	$38(a0),d2
00010868 3628 003A                  		move.w	$3A(a0),d3
0001086C 45E8 0029                  		lea	$29(a0),a2
00010870 7C00                       		moveq	#0,d6
00010872 1C1A                       		move.b	(a2)+,d6
00010874                            
00010874                            Obj57_MoveLoop:
00010874 7800                       		moveq	#0,d4
00010876 181A                       		move.b	(a2)+,d4
00010878 ED4C                       		lsl.w	#6,d4
0001087A 0684 00FF D000             		addi.l	#$FFD000,d4
00010880 2244                       		movea.l	d4,a1
00010882 7800                       		moveq	#0,d4
00010884 1829 003C                  		move.b	$3C(a1),d4
00010888 2A04                       		move.l	d4,d5
0001088A C9C0                       		muls.w	d0,d4
0001088C E084                       		asr.l	#8,d4
0001088E CBC1                       		muls.w	d1,d5
00010890 E085                       		asr.l	#8,d5
00010892 D842                       		add.w	d2,d4
00010894 DA43                       		add.w	d3,d5
00010896 3344 000C                  		move.w	d4,$C(a1)
0001089A 3345 0008                  		move.w	d5,8(a1)
0001089E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000108A2 4E75                       		rts	
000108A4                            ; ===========================================================================
000108A4                            
000108A4                            Obj57_ChkDel:				; XREF: Obj57_Move
000108A4 3028 003A                  		move.w	$3A(a0),d0
000108A8 0240 FF80                  		andi.w	#$FF80,d0
000108AC 3238 F700                  		move.w	($FFFFF700).w,d1
000108B0 0441 0080                  		subi.w	#$80,d1
000108B4 0241 FF80                  		andi.w	#$FF80,d1
000108B8 9041                       		sub.w	d1,d0
000108BA 0C40 0280                  		cmpi.w	#$280,d0
000108BE 6200 0000                  		bhi.w	Obj57_Delete
000108C2 6000 CCEC                  		bra.w	DisplaySprite
000108C6                            ; ===========================================================================
000108C6                            
000108C6                            Obj57_Delete:				; XREF: Obj57_ChkDel
000108C6 7400                       		moveq	#0,d2
000108C8 45E8 0029                  		lea	$29(a0),a2
000108CC 141A                       		move.b	(a2)+,d2
000108CE                            
000108CE                            Obj57_DelLoop:
000108CE 7000                       		moveq	#0,d0
000108D0 101A                       		move.b	(a2)+,d0
000108D2 ED48                       		lsl.w	#6,d0
000108D4 0680 00FF D000             		addi.l	#$FFD000,d0
000108DA 2240                       		movea.l	d0,a1
000108DC 6100 CD10                  		bsr.w	DeleteObject2
000108E0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000108E4                            
000108E4 4E75                       		rts	
000108E6                            ; ===========================================================================
000108E6                            
000108E6                            Obj57_Display:				; XREF: Obj57_Index
000108E6 6000 CCC8                  		bra.w	DisplaySprite
000108EA                            ; ===========================================================================
000108EA                            ; ---------------------------------------------------------------------------
000108EA                            ; Sprite mappings - chain of spiked balls (SYZ)
000108EA                            ; ---------------------------------------------------------------------------
000108EA                            Map_obj57:
000108EA                            	include "_maps\obj57syz.asm"
000108EA                            ; ---------------------------------------------------------------------------
000108EA                            ; Sprite mappings - chain of spiked balls (SYZ)
000108EA                            ; ---------------------------------------------------------------------------
000108EA 0000                       		dc.w byte_10958-Map_obj57
000108EC 01                         byte_10958:	dc.b 1
000108ED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000108F2                            		even
000108F2                            		even
000108F2                            
000108F2                            ; ---------------------------------------------------------------------------
000108F2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000108F2                            ; ---------------------------------------------------------------------------
000108F2                            Map_obj57a:
000108F2                            	include "_maps\obj57lz.asm"
000108F2                            ; ---------------------------------------------------------------------------
000108F2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000108F2                            ; ---------------------------------------------------------------------------
000108F2 0000                       		dc.w byte_10964-Map_obj57a
000108F4 0000                       		dc.w byte_1096A-Map_obj57a
000108F6 0000                       		dc.w byte_10970-Map_obj57a
000108F8 01                         byte_10964:	dc.b 1
000108F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000108FE 01                         byte_1096A:	dc.b 1
000108FF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010904 01                         byte_10970:	dc.b 1
00010905 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001090A                            		even
0001090A                            		even
0001090A                            
0001090A                            ; ===========================================================================
0001090A                            ; ---------------------------------------------------------------------------
0001090A                            ; Object 58 - giant spiked balls (SYZ)
0001090A                            ; ---------------------------------------------------------------------------
0001090A                            
0001090A                            Obj58:					; XREF: Obj_Index
0001090A 7000                       		moveq	#0,d0
0001090C 1028 0024                  		move.b	$24(a0),d0
00010910 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010914 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010918                            ; ===========================================================================
00010918 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001091A 0000                       		dc.w Obj58_Move-Obj58_Index
0001091C                            ; ===========================================================================
0001091C                            
0001091C                            Obj58_Main:				; XREF: Obj58_Index
0001091C 5428 0024                  		addq.b	#2,$24(a0)
00010920 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010928 317C 0396 0002             		move.w	#$396,2(a0)
0001092E 117C 0004 0001             		move.b	#4,1(a0)
00010934 117C 0004 0018             		move.b	#4,$18(a0)
0001093A 117C 0018 0019             		move.b	#$18,$19(a0)
00010940 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010946 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001094C 117C 0086 0020             		move.b	#$86,$20(a0)
00010952 1228 0028                  		move.b	$28(a0),d1	; get object type
00010956 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001095A 4881                       		ext.w	d1
0001095C E741                       		asl.w	#3,d1		; multiply by 8
0001095E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010962 1028 0022                  		move.b	$22(a0),d0
00010966 E418                       		ror.b	#2,d0
00010968 0200 00C0                  		andi.b	#$C0,d0
0001096C 1140 0026                  		move.b	d0,$26(a0)
00010970 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010976                            
00010976                            Obj58_Move:				; XREF: Obj58_Index
00010976 7000                       		moveq	#0,d0
00010978 1028 0028                  		move.b	$28(a0),d0	; get object type
0001097C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010980 D040                       		add.w	d0,d0
00010982 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010986 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001098A 3028 003A                  		move.w	$3A(a0),d0
0001098E 0240 FF80                  		andi.w	#$FF80,d0
00010992 3238 F700                  		move.w	($FFFFF700).w,d1
00010996 0441 0080                  		subi.w	#$80,d1
0001099A 0241 FF80                  		andi.w	#$FF80,d1
0001099E 9041                       		sub.w	d1,d0
000109A0 0C40 0280                  		cmpi.w	#$280,d0
000109A4 6200 CC46                  		bhi.w	DeleteObject
000109A8 6000 CC06                  		bra.w	DisplaySprite
000109AC                            ; ===========================================================================
000109AC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000109AE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000109B0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000109B2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000109B4                            ; ===========================================================================
000109B4                            
000109B4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000109B4 4E75                       		rts	
000109B6                            ; ===========================================================================
000109B6                            
000109B6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000109B6 323C 0060                  		move.w	#$60,d1
000109BA 7000                       		moveq	#0,d0
000109BC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000109C0 0828 0000 0022             		btst	#0,$22(a0)
000109C6 6700                       		beq.s	loc_10A38
000109C8 4440                       		neg.w	d0
000109CA D041                       		add.w	d1,d0
000109CC                            
000109CC                            loc_10A38:
000109CC 3228 003A                  		move.w	$3A(a0),d1
000109D0 9240                       		sub.w	d0,d1
000109D2 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109D6 4E75                       		rts	
000109D8                            ; ===========================================================================
000109D8                            
000109D8                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000109D8 323C 0060                  		move.w	#$60,d1
000109DC 7000                       		moveq	#0,d0
000109DE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000109E2 0828 0000 0022             		btst	#0,$22(a0)
000109E8 6700                       		beq.s	loc_10A5C
000109EA 4440                       		neg.w	d0
000109EC 0640 0080                  		addi.w	#$80,d0
000109F0                            
000109F0                            loc_10A5C:
000109F0 3228 0038                  		move.w	$38(a0),d1
000109F4 9240                       		sub.w	d0,d1
000109F6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109FA 4E75                       		rts	
000109FC                            ; ===========================================================================
000109FC                            
000109FC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000109FC 3028 003E                  		move.w	$3E(a0),d0
00010A00 D168 0026                  		add.w	d0,$26(a0)
00010A04 1028 0026                  		move.b	$26(a0),d0
00010A08 4EB9 0000 29BA             		jsr	(CalcSine).l
00010A0E 3428 0038                  		move.w	$38(a0),d2
00010A12 3628 003A                  		move.w	$3A(a0),d3
00010A16 7800                       		moveq	#0,d4
00010A18 1828 003C                  		move.b	$3C(a0),d4
00010A1C 2A04                       		move.l	d4,d5
00010A1E C9C0                       		muls.w	d0,d4
00010A20 E084                       		asr.l	#8,d4
00010A22 CBC1                       		muls.w	d1,d5
00010A24 E085                       		asr.l	#8,d5
00010A26 D842                       		add.w	d2,d4
00010A28 DA43                       		add.w	d3,d5
00010A2A 3144 000C                  		move.w	d4,$C(a0)
00010A2E 3145 0008                  		move.w	d5,8(a0)
00010A32 4E75                       		rts	
00010A34                            ; ===========================================================================
00010A34                            ; ---------------------------------------------------------------------------
00010A34                            ; Sprite mappings - SBZ	spiked ball on a chain
00010A34                            ; ---------------------------------------------------------------------------
00010A34                            Map_obj15b:
00010A34                            	include "_maps\obj15sbz.asm"
00010A34                            ; ---------------------------------------------------------------------------
00010A34                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010A34                            ; ---------------------------------------------------------------------------
00010A34 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010A38 0000                       		dc.w byte_10AC6-Map_obj15b
00010A3A 05                         byte_10AA6:	dc.b 5
00010A3B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010A40 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010A45 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010A4A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010A4F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010A54 01                         byte_10AC0:	dc.b 1
00010A55 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010A5A 02                         byte_10AC6:	dc.b 2
00010A5B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010A60 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010A66 00                         		even
00010A66 00                         		even
00010A66                            
00010A66                            ; ===========================================================================
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            
00010A66                            Obj59:					; XREF: Obj_Index
00010A66 7000                       		moveq	#0,d0
00010A68 1028 0024                  		move.b	$24(a0),d0
00010A6C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010A70 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010A74 3028 0032                  		move.w	$32(a0),d0
00010A78 0240 FF80                  		andi.w	#$FF80,d0
00010A7C 3238 F700                  		move.w	($FFFFF700).w,d1
00010A80 0441 0080                  		subi.w	#$80,d1
00010A84 0241 FF80                  		andi.w	#$FF80,d1
00010A88 9041                       		sub.w	d1,d0
00010A8A 0C40 0280                  		cmpi.w	#$280,d0
00010A8E 6200 CB5C                  		bhi.w	DeleteObject
00010A92 6000 CB1C                  		bra.w	DisplaySprite
00010A96                            ; ===========================================================================
00010A96 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010A98 0000                       		dc.w Obj59_Platform-Obj59_Index
00010A9A 0000                       		dc.w Obj59_Action-Obj59_Index
00010A9C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010A9E                            
00010A9E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010AA0                            
00010AA0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010AA2 2001                       		dc.b $20, 1
00010AA4 3401                       		dc.b $34, 1
00010AA6 1003                       		dc.b $10, 3
00010AA8 2003                       		dc.b $20, 3
00010AAA 3403                       		dc.b $34, 3
00010AAC 1401                       		dc.b $14, 1
00010AAE 2401                       		dc.b $24, 1
00010AB0 2C01                       		dc.b $2C, 1
00010AB2 1403                       		dc.b $14, 3
00010AB4 2403                       		dc.b $24, 3
00010AB6 2C03                       		dc.b $2C, 3
00010AB8 2005                       		dc.b $20, 5
00010ABA 2007                       		dc.b $20, 7
00010ABC 3009                       		dc.b $30, 9
00010ABE                            ; ===========================================================================
00010ABE                            
00010ABE                            Obj59_Main:				; XREF: Obj59_Index
00010ABE 5428 0024                  		addq.b	#2,$24(a0)
00010AC2 7000                       		moveq	#0,d0
00010AC4 1028 0028                  		move.b	$28(a0),d0
00010AC8 6A00                       		bpl.s	Obj59_Main2
00010ACA 5828 0024                  		addq.b	#4,$24(a0)
00010ACE 0240 007F                  		andi.w	#$7F,d0
00010AD2 C0FC 0006                  		mulu.w	#6,d0
00010AD6 3140 003C                  		move.w	d0,$3C(a0)
00010ADA 3140 003E                  		move.w	d0,$3E(a0)
00010ADE 588F                       		addq.l	#4,sp
00010AE0 4E75                       		rts	
00010AE2                            ; ===========================================================================
00010AE2                            
00010AE2                            Obj59_Main2:
00010AE2 E648                       		lsr.w	#3,d0
00010AE4 0240 001E                  		andi.w	#$1E,d0
00010AE8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010AEC 115A 0019                  		move.b	(a2)+,$19(a0)
00010AF0 115A 001A                  		move.b	(a2)+,$1A(a0)
00010AF4 7000                       		moveq	#0,d0
00010AF6 1028 0028                  		move.b	$28(a0),d0
00010AFA D040                       		add.w	d0,d0
00010AFC 0240 001E                  		andi.w	#$1E,d0
00010B00 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010B04 101A                       		move.b	(a2)+,d0
00010B06 E548                       		lsl.w	#2,d0
00010B08 3140 003C                  		move.w	d0,$3C(a0)
00010B0C 115A 0028                  		move.b	(a2)+,$28(a0)
00010B10 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010B18 317C 4000 0002             		move.w	#$4000,2(a0)
00010B1E 117C 0004 0001             		move.b	#4,1(a0)
00010B24 117C 0004 0018             		move.b	#4,$18(a0)
00010B2A 3168 0008 0032             		move.w	8(a0),$32(a0)
00010B30 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B36                            
00010B36                            Obj59_Platform:				; XREF: Obj59_Index
00010B36 7200                       		moveq	#0,d1
00010B38 1228 0019                  		move.b	$19(a0),d1
00010B3C 4EB9 0000 7440             		jsr	(PlatformObject).l
00010B42 6000 0000                  		bra.w	Obj59_Types
00010B46                            ; ===========================================================================
00010B46                            
00010B46                            Obj59_Action:				; XREF: Obj59_Index
00010B46 7200                       		moveq	#0,d1
00010B48 1228 0019                  		move.b	$19(a0),d1
00010B4C 4EB9 0000 75B4             		jsr	(ExitPlatform).l
00010B52 3F28 0008                  		move.w	8(a0),-(sp)
00010B56 6100 0000                  		bsr.w	Obj59_Types
00010B5A 341F                       		move.w	(sp)+,d2
00010B5C 4A10                       		tst.b	0(a0)
00010B5E 6700                       		beq.s	locret_10BD4
00010B60 4EF9 0000 7B1E             		jmp	(MvSonicOnPtfm2).l
00010B66                            ; ===========================================================================
00010B66                            
00010B66                            locret_10BD4:
00010B66 4E75                       		rts	
00010B68                            ; ===========================================================================
00010B68                            
00010B68                            Obj59_Types:
00010B68 7000                       		moveq	#0,d0
00010B6A 1028 0028                  		move.b	$28(a0),d0
00010B6E 0240 000F                  		andi.w	#$F,d0
00010B72 D040                       		add.w	d0,d0
00010B74 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010B78 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010B7C                            ; ===========================================================================
00010B7C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B80 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B84 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B88 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B8C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010B90                            ; ===========================================================================
00010B90                            
00010B90                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010B90 4E75                       		rts	
00010B92                            ; ===========================================================================
00010B92                            
00010B92                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010B92 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010B98 6600                       		bne.s	locret_10C0C
00010B9A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010B9E                            
00010B9E                            locret_10C0C:
00010B9E 4E75                       		rts	
00010BA0                            ; ===========================================================================
00010BA0                            
00010BA0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010BA0 6100 0000                  		bsr.w	Obj59_Move
00010BA4 3028 0034                  		move.w	$34(a0),d0
00010BA8 4440                       		neg.w	d0
00010BAA D068 0030                  		add.w	$30(a0),d0
00010BAE 3140 000C                  		move.w	d0,$C(a0)
00010BB2 4E75                       		rts	
00010BB4                            ; ===========================================================================
00010BB4                            
00010BB4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010BB4 6100 0000                  		bsr.w	Obj59_Move
00010BB8 3028 0034                  		move.w	$34(a0),d0
00010BBC D068 0030                  		add.w	$30(a0),d0
00010BC0 3140 000C                  		move.w	d0,$C(a0)
00010BC4 4E75                       		rts	
00010BC6                            ; ===========================================================================
00010BC6                            
00010BC6                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010BC6 6100 0000                  		bsr.w	Obj59_Move
00010BCA 3028 0034                  		move.w	$34(a0),d0
00010BCE E240                       		asr.w	#1,d0
00010BD0 4440                       		neg.w	d0
00010BD2 D068 0030                  		add.w	$30(a0),d0
00010BD6 3140 000C                  		move.w	d0,$C(a0)
00010BDA 3028 0034                  		move.w	$34(a0),d0
00010BDE D068 0032                  		add.w	$32(a0),d0
00010BE2 3140 0008                  		move.w	d0,8(a0)
00010BE6 4E75                       		rts	
00010BE8                            ; ===========================================================================
00010BE8                            
00010BE8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010BE8 6100 0000                  		bsr.w	Obj59_Move
00010BEC 3028 0034                  		move.w	$34(a0),d0
00010BF0 E240                       		asr.w	#1,d0
00010BF2 D068 0030                  		add.w	$30(a0),d0
00010BF6 3140 000C                  		move.w	d0,$C(a0)
00010BFA 3028 0034                  		move.w	$34(a0),d0
00010BFE 4440                       		neg.w	d0
00010C00 D068 0032                  		add.w	$32(a0),d0
00010C04 3140 0008                  		move.w	d0,8(a0)
00010C08 4E75                       		rts	
00010C0A                            ; ===========================================================================
00010C0A                            
00010C0A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010C0A 6100 0000                  		bsr.w	Obj59_Move
00010C0E 3028 0034                  		move.w	$34(a0),d0
00010C12 4440                       		neg.w	d0
00010C14 D068 0030                  		add.w	$30(a0),d0
00010C18 3140 000C                  		move.w	d0,$C(a0)
00010C1C 4A28 0028                  		tst.b	$28(a0)
00010C20 6700 0000                  		beq.w	loc_10C94
00010C24 4E75                       		rts	
00010C26                            ; ===========================================================================
00010C26                            
00010C26                            loc_10C94:
00010C26 0828 0003 0022             		btst	#3,$22(a0)
00010C2C 6700                       		beq.s	Obj59_Delete
00010C2E 08E9 0001 0022             		bset	#1,$22(a1)
00010C34 08A9 0003 0022             		bclr	#3,$22(a1)
00010C3A 137C 0002 0024             		move.b	#2,$24(a1)
00010C40                            
00010C40                            Obj59_Delete:
00010C40 6000 C9AA                  		bra.w	DeleteObject
00010C44                            
00010C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C44                            
00010C44                            
00010C44                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010C44 3028 0038                  		move.w	$38(a0),d0
00010C48 4A28 003A                  		tst.b	$3A(a0)
00010C4C 6600                       		bne.s	loc_10CC8
00010C4E 0C40 0800                  		cmpi.w	#$800,d0
00010C52 6400                       		bcc.s	loc_10CD0
00010C54 0640 0010                  		addi.w	#$10,d0
00010C58 6000                       		bra.s	loc_10CD0
00010C5A                            ; ===========================================================================
00010C5A                            
00010C5A                            loc_10CC8:
00010C5A 4A40                       		tst.w	d0
00010C5C 6700                       		beq.s	loc_10CD0
00010C5E 0440 0010                  		subi.w	#$10,d0
00010C62                            
00010C62                            loc_10CD0:
00010C62 3140 0038                  		move.w	d0,$38(a0)
00010C66 48C0                       		ext.l	d0
00010C68 E180                       		asl.l	#8,d0
00010C6A D0A8 0034                  		add.l	$34(a0),d0
00010C6E 2140 0034                  		move.l	d0,$34(a0)
00010C72 4840                       		swap	d0
00010C74 3428 003C                  		move.w	$3C(a0),d2
00010C78 B042                       		cmp.w	d2,d0
00010C7A 6300                       		bls.s	loc_10CF0
00010C7C 117C 0001 003A             		move.b	#1,$3A(a0)
00010C82                            
00010C82                            loc_10CF0:
00010C82 D442                       		add.w	d2,d2
00010C84 B042                       		cmp.w	d2,d0
00010C86 6600                       		bne.s	locret_10CFA
00010C88 4228 0028                  		clr.b	$28(a0)
00010C8C                            
00010C8C                            locret_10CFA:
00010C8C 4E75                       		rts	
00010C8E                            ; End of function Obj59_Move
00010C8E                            
00010C8E                            ; ===========================================================================
00010C8E                            
00010C8E                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010C8E 5368 003C                  		subq.w	#1,$3C(a0)
00010C92 6600                       		bne.s	Obj59_ChkDel
00010C94 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010C9A 6100 CD9A                  		bsr.w	SingleObjLoad
00010C9E 6600                       		bne.s	Obj59_ChkDel
00010CA0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010CA4 3368 0008 0008             		move.w	8(a0),8(a1)
00010CAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010CB0 137C 000E 0028             		move.b	#$E,$28(a1)
00010CB6                            
00010CB6                            Obj59_ChkDel:
00010CB6 588F                       		addq.l	#4,sp
00010CB8 3028 0008                  		move.w	8(a0),d0
00010CBC 0240 FF80                  		andi.w	#$FF80,d0
00010CC0 3238 F700                  		move.w	($FFFFF700).w,d1
00010CC4 0441 0080                  		subi.w	#$80,d1
00010CC8 0241 FF80                  		andi.w	#$FF80,d1
00010CCC 9041                       		sub.w	d1,d0
00010CCE 0C40 0280                  		cmpi.w	#$280,d0
00010CD2 6200 C918                  		bhi.w	DeleteObject
00010CD6 4E75                       		rts	
00010CD8                            ; ===========================================================================
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8                            Map_obj59:
00010CD8                            	include "_maps\obj59.asm"
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010CD8                            ; ---------------------------------------------------------------------------
00010CD8 0000                       		dc.w byte_10D4A-Map_obj59
00010CDA 03                         byte_10D4A:	dc.b 3
00010CDB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010CE0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010CE5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010CEA                            		even
00010CEA                            		even
00010CEA                            
00010CEA                            ; ===========================================================================
00010CEA                            ; ---------------------------------------------------------------------------
00010CEA                            ; Object 5A - platforms	moving in circles (SLZ)
00010CEA                            ; ---------------------------------------------------------------------------
00010CEA                            
00010CEA                            Obj5A:					; XREF: Obj_Index
00010CEA 7000                       		moveq	#0,d0
00010CEC 1028 0024                  		move.b	$24(a0),d0
00010CF0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010CF4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010CF8 3028 0032                  		move.w	$32(a0),d0
00010CFC 0240 FF80                  		andi.w	#$FF80,d0
00010D00 3238 F700                  		move.w	($FFFFF700).w,d1
00010D04 0441 0080                  		subi.w	#$80,d1
00010D08 0241 FF80                  		andi.w	#$FF80,d1
00010D0C 9041                       		sub.w	d1,d0
00010D0E 0C40 0280                  		cmpi.w	#$280,d0
00010D12 6200 C8D8                  		bhi.w	DeleteObject
00010D16 6000 C898                  		bra.w	DisplaySprite
00010D1A                            ; ===========================================================================
00010D1A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010D1C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010D1E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010D20                            ; ===========================================================================
00010D20                            
00010D20                            Obj5A_Main:				; XREF: Obj5A_Index
00010D20 5428 0024                  		addq.b	#2,$24(a0)
00010D24 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010D2C 317C 4000 0002             		move.w	#$4000,2(a0)
00010D32 117C 0004 0001             		move.b	#4,1(a0)
00010D38 117C 0004 0018             		move.b	#4,$18(a0)
00010D3E 117C 0018 0019             		move.b	#$18,$19(a0)
00010D44 3168 0008 0032             		move.w	8(a0),$32(a0)
00010D4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D50                            
00010D50                            Obj5A_Platform:				; XREF: Obj5A_Index
00010D50 7200                       		moveq	#0,d1
00010D52 1228 0019                  		move.b	$19(a0),d1
00010D56 4EB9 0000 7440             		jsr	(PlatformObject).l
00010D5C 6000 0000                  		bra.w	Obj5A_Types
00010D60                            ; ===========================================================================
00010D60                            
00010D60                            Obj5A_Action:				; XREF: Obj5A_Index
00010D60 7200                       		moveq	#0,d1
00010D62 1228 0019                  		move.b	$19(a0),d1
00010D66 4EB9 0000 75B4             		jsr	(ExitPlatform).l
00010D6C 3F28 0008                  		move.w	8(a0),-(sp)
00010D70 6100 0000                  		bsr.w	Obj5A_Types
00010D74 341F                       		move.w	(sp)+,d2
00010D76 4EF9 0000 7B1E             		jmp	(MvSonicOnPtfm2).l
00010D7C                            ; ===========================================================================
00010D7C                            
00010D7C                            Obj5A_Types:
00010D7C 7000                       		moveq	#0,d0
00010D7E 1028 0028                  		move.b	$28(a0),d0
00010D82 0240 000C                  		andi.w	#$C,d0
00010D86 E248                       		lsr.w	#1,d0
00010D88 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010D8C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010D90                            ; ===========================================================================
00010D90 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010D92 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010D94                            ; ===========================================================================
00010D94                            
00010D94                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010D94 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010D98 0401 0050                  		subi.b	#$50,d1
00010D9C 4881                       		ext.w	d1
00010D9E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010DA2 0402 0050                  		subi.b	#$50,d2
00010DA6 4882                       		ext.w	d2
00010DA8 0828 0000 0028             		btst	#0,$28(a0)
00010DAE 6700                       		beq.s	loc_10E24
00010DB0 4441                       		neg.w	d1
00010DB2 4442                       		neg.w	d2
00010DB4                            
00010DB4                            loc_10E24:
00010DB4 0828 0001 0028             		btst	#1,$28(a0)
00010DBA 6700                       		beq.s	loc_10E30
00010DBC 4441                       		neg.w	d1
00010DBE C342                       		exg	d1,d2
00010DC0                            
00010DC0                            loc_10E30:
00010DC0 D268 0032                  		add.w	$32(a0),d1
00010DC4 3141 0008                  		move.w	d1,8(a0)
00010DC8 D468 0030                  		add.w	$30(a0),d2
00010DCC 3142 000C                  		move.w	d2,$C(a0)
00010DD0 4E75                       		rts	
00010DD2                            ; ===========================================================================
00010DD2                            
00010DD2                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010DD2 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010DD6 0401 0050                  		subi.b	#$50,d1
00010DDA 4881                       		ext.w	d1
00010DDC 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010DE0 0402 0050                  		subi.b	#$50,d2
00010DE4 4882                       		ext.w	d2
00010DE6 0828 0000 0028             		btst	#0,$28(a0)
00010DEC 6700                       		beq.s	loc_10E62
00010DEE 4441                       		neg.w	d1
00010DF0 4442                       		neg.w	d2
00010DF2                            
00010DF2                            loc_10E62:
00010DF2 0828 0001 0028             		btst	#1,$28(a0)
00010DF8 6700                       		beq.s	loc_10E6E
00010DFA 4441                       		neg.w	d1
00010DFC C342                       		exg	d1,d2
00010DFE                            
00010DFE                            loc_10E6E:
00010DFE 4441                       		neg.w	d1
00010E00 D268 0032                  		add.w	$32(a0),d1
00010E04 3141 0008                  		move.w	d1,8(a0)
00010E08 D468 0030                  		add.w	$30(a0),d2
00010E0C 3142 000C                  		move.w	d2,$C(a0)
00010E10 4E75                       		rts	
00010E12                            ; ===========================================================================
00010E12                            ; ---------------------------------------------------------------------------
00010E12                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010E12                            ; ---------------------------------------------------------------------------
00010E12                            Map_obj5A:
00010E12                            	include "_maps\obj5A.asm"
00010E12                            ; ---------------------------------------------------------------------------
00010E12                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010E12                            ; ---------------------------------------------------------------------------
00010E12 0000                       		dc.w byte_10E84-Map_obj5A
00010E14 02                         byte_10E84:	dc.b 2
00010E15 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010E1A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010E20 00                         		even
00010E20 00                         		even
00010E20                            
00010E20                            ; ===========================================================================
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            ; Object 5B - blocks that form a staircase (SLZ)
00010E20                            ; ---------------------------------------------------------------------------
00010E20                            
00010E20                            Obj5B:					; XREF: Obj_Index
00010E20 7000                       		moveq	#0,d0
00010E22 1028 0024                  		move.b	$24(a0),d0
00010E26 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010E2A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010E2E 3028 0030                  		move.w	$30(a0),d0
00010E32 0240 FF80                  		andi.w	#$FF80,d0
00010E36 3238 F700                  		move.w	($FFFFF700).w,d1
00010E3A 0441 0080                  		subi.w	#$80,d1
00010E3E 0241 FF80                  		andi.w	#$FF80,d1
00010E42 9041                       		sub.w	d1,d0
00010E44 0C40 0280                  		cmpi.w	#$280,d0
00010E48 6200 C7A2                  		bhi.w	DeleteObject
00010E4C 6000 C762                  		bra.w	DisplaySprite
00010E50                            ; ===========================================================================
00010E50 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010E52 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010E54 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010E56                            ; ===========================================================================
00010E56                            
00010E56                            Obj5B_Main:				; XREF: Obj5B_Index
00010E56 5428 0024                  		addq.b	#2,$24(a0)
00010E5A 7638                       		moveq	#$38,d3
00010E5C 7801                       		moveq	#1,d4
00010E5E 0828 0000 0022             		btst	#0,$22(a0)
00010E64 6700                       		beq.s	loc_10EDA
00010E66 763B                       		moveq	#$3B,d3
00010E68 78FF                       		moveq	#-1,d4
00010E6A                            
00010E6A                            loc_10EDA:
00010E6A 3428 0008                  		move.w	8(a0),d2
00010E6E 2248                       		movea.l	a0,a1
00010E70 7203                       		moveq	#3,d1
00010E72 6000                       		bra.s	Obj5B_MakeBlocks
00010E74                            ; ===========================================================================
00010E74                            
00010E74                            Obj5B_Loop:
00010E74 6100 CBD6                  		bsr.w	SingleObjLoad2
00010E78 6600 0000                  		bne.w	Obj5B_Move
00010E7C 137C 0004 0024             		move.b	#4,$24(a1)
00010E82                            
00010E82                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00010E82 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00010E86 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00010E8E 337C 4000 0002             		move.w	#$4000,2(a1)
00010E94 137C 0004 0001             		move.b	#4,1(a1)
00010E9A 137C 0003 0018             		move.b	#3,$18(a1)
00010EA0 137C 0010 0019             		move.b	#$10,$19(a1)
00010EA6 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010EAC 3342 0008                  		move.w	d2,8(a1)
00010EB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010EB6 3368 0008 0030             		move.w	8(a0),$30(a1)
00010EBC 3369 000C 0032             		move.w	$C(a1),$32(a1)
00010EC2 0642 0020                  		addi.w	#$20,d2
00010EC6 1343 0037                  		move.b	d3,$37(a1)
00010ECA 2348 003C                  		move.l	a0,$3C(a1)
00010ECE D604                       		add.b	d4,d3
00010ED0 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00010ED4                            
00010ED4                            Obj5B_Move:				; XREF: Obj5B_Index
00010ED4 7000                       		moveq	#0,d0
00010ED6 1028 0028                  		move.b	$28(a0),d0
00010EDA 0240 0007                  		andi.w	#7,d0
00010EDE D040                       		add.w	d0,d0
00010EE0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00010EE4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00010EE8                            
00010EE8                            Obj5B_Solid:				; XREF: Obj5B_Index
00010EE8 2468 003C                  		movea.l	$3C(a0),a2
00010EEC 7000                       		moveq	#0,d0
00010EEE 1028 0037                  		move.b	$37(a0),d0
00010EF2 1032 0000                  		move.b	(a2,d0.w),d0
00010EF6 D068 0032                  		add.w	$32(a0),d0
00010EFA 3140 000C                  		move.w	d0,$C(a0)
00010EFE 7200                       		moveq	#0,d1
00010F00 1228 0019                  		move.b	$19(a0),d1
00010F04 0641 000B                  		addi.w	#$B,d1
00010F08 343C 0010                  		move.w	#$10,d2
00010F0C 363C 0011                  		move.w	#$11,d3
00010F10 3828 0008                  		move.w	8(a0),d4
00010F14 6100 EA5A                  		bsr.w	SolidObject
00010F18 4A04                       		tst.b	d4
00010F1A 6A00                       		bpl.s	loc_10F92
00010F1C 1544 0036                  		move.b	d4,$36(a2)
00010F20                            
00010F20                            loc_10F92:
00010F20 0828 0003 0022             		btst	#3,$22(a0)
00010F26 6700                       		beq.s	locret_10FA0
00010F28 157C 0001 0036             		move.b	#1,$36(a2)
00010F2E                            
00010F2E                            locret_10FA0:
00010F2E 4E75                       		rts	
00010F30                            ; ===========================================================================
00010F30 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00010F32 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00010F34 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00010F36 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00010F38                            ; ===========================================================================
00010F38                            
00010F38                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00010F38 4A68 0034                  		tst.w	$34(a0)
00010F3C 6600                       		bne.s	loc_10FC0
00010F3E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00010F44 6600                       		bne.s	locret_10FBE
00010F46 317C 001E 0034             		move.w	#$1E,$34(a0)
00010F4C                            
00010F4C                            locret_10FBE:
00010F4C 4E75                       		rts	
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            loc_10FC0:
00010F4E 5368 0034                  		subq.w	#1,$34(a0)
00010F52 66F8                       		bne.s	locret_10FBE
00010F54 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010F58 4E75                       		rts	
00010F5A                            ; ===========================================================================
00010F5A                            
00010F5A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00010F5A 4A68 0034                  		tst.w	$34(a0)
00010F5E 6600                       		bne.s	loc_10FE0
00010F60 4A28 0036                  		tst.b	$36(a0)
00010F64 6A00                       		bpl.s	locret_10FDE
00010F66 317C 003C 0034             		move.w	#$3C,$34(a0)
00010F6C                            
00010F6C                            locret_10FDE:
00010F6C 4E75                       		rts	
00010F6E                            ; ===========================================================================
00010F6E                            
00010F6E                            loc_10FE0:
00010F6E 5368 0034                  		subq.w	#1,$34(a0)
00010F72 6600                       		bne.s	loc_10FEC
00010F74 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010F78 4E75                       		rts	
00010F7A                            ; ===========================================================================
00010F7A                            
00010F7A                            loc_10FEC:
00010F7A 43E8 0038                  		lea	$38(a0),a1
00010F7E 3028 0034                  		move.w	$34(a0),d0
00010F82 E408                       		lsr.b	#2,d0
00010F84 0200 0001                  		andi.b	#1,d0
00010F88 12C0                       		move.b	d0,(a1)+
00010F8A 0A00 0001                  		eori.b	#1,d0
00010F8E 12C0                       		move.b	d0,(a1)+
00010F90 0A00 0001                  		eori.b	#1,d0
00010F94 12C0                       		move.b	d0,(a1)+
00010F96 0A00 0001                  		eori.b	#1,d0
00010F9A 12C0                       		move.b	d0,(a1)+
00010F9C 4E75                       		rts	
00010F9E                            ; ===========================================================================
00010F9E                            
00010F9E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00010F9E 43E8 0038                  		lea	$38(a0),a1
00010FA2 0C11 0080                  		cmpi.b	#$80,(a1)
00010FA6 6700                       		beq.s	locret_11038
00010FA8 5211                       		addq.b	#1,(a1)
00010FAA 7200                       		moveq	#0,d1
00010FAC 1219                       		move.b	(a1)+,d1
00010FAE 4841                       		swap	d1
00010FB0 E289                       		lsr.l	#1,d1
00010FB2 2401                       		move.l	d1,d2
00010FB4 E289                       		lsr.l	#1,d1
00010FB6 2601                       		move.l	d1,d3
00010FB8 D682                       		add.l	d2,d3
00010FBA 4841                       		swap	d1
00010FBC 4842                       		swap	d2
00010FBE 4843                       		swap	d3
00010FC0 12C3                       		move.b	d3,(a1)+
00010FC2 12C2                       		move.b	d2,(a1)+
00010FC4 12C1                       		move.b	d1,(a1)+
00010FC6                            
00010FC6                            locret_11038:
00010FC6 4E75                       		rts	
00010FC8 4E75                       		rts	
00010FCA                            ; ===========================================================================
00010FCA                            ; ---------------------------------------------------------------------------
00010FCA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00010FCA                            ; ---------------------------------------------------------------------------
00010FCA                            Map_obj5B:
00010FCA                            	include "_maps\obj5B.asm"
00010FCA                            ; ---------------------------------------------------------------------------
00010FCA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00010FCA                            ; ---------------------------------------------------------------------------
00010FCA 0000                       		dc.w byte_1103E-Map_obj5B
00010FCC 01                         byte_1103E:	dc.b 1
00010FCD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FD2                            		even
00010FD2                            		even
00010FD2                            
00010FD2                            ; ===========================================================================
00010FD2                            ; ---------------------------------------------------------------------------
00010FD2                            ; Object 5C - metal girders in foreground (SLZ)
00010FD2                            ; ---------------------------------------------------------------------------
00010FD2                            
00010FD2                            Obj5C:					; XREF: Obj_Index
00010FD2 7000                       		moveq	#0,d0
00010FD4 1028 0024                  		move.b	$24(a0),d0
00010FD8 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00010FDC 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00010FE0                            ; ===========================================================================
00010FE0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00010FE2 0000                       		dc.w Obj5C_Display-Obj5C_Index
00010FE4                            ; ===========================================================================
00010FE4                            
00010FE4                            Obj5C_Main:				; XREF: Obj5C_Index
00010FE4 5428 0024                  		addq.b	#2,$24(a0)
00010FE8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00010FF0 317C 83CC 0002             		move.w	#$83CC,2(a0)
00010FF6 117C 0010 0019             		move.b	#$10,$19(a0)
00010FFC                            
00010FFC                            Obj5C_Display:				; XREF: Obj5C_Index
00010FFC 2238 F700                  		move.l	($FFFFF700).w,d1
00011000 D281                       		add.l	d1,d1
00011002 4841                       		swap	d1
00011004 4441                       		neg.w	d1
00011006 3141 0008                  		move.w	d1,8(a0)
0001100A 2238 F704                  		move.l	($FFFFF704).w,d1
0001100E D281                       		add.l	d1,d1
00011010 4841                       		swap	d1
00011012 0241 003F                  		andi.w	#$3F,d1
00011016 4441                       		neg.w	d1
00011018 0641 0100                  		addi.w	#$100,d1
0001101C 3141 000A                  		move.w	d1,$A(a0)
00011020 6000 C58E                  		bra.w	DisplaySprite
00011024                            ; ===========================================================================
00011024                            ; ---------------------------------------------------------------------------
00011024                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011024                            ; ---------------------------------------------------------------------------
00011024                            Map_obj5C:
00011024                            	include "_maps\obj5C.asm"
00011024                            ; ---------------------------------------------------------------------------
00011024                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011024                            ; ---------------------------------------------------------------------------
00011024 0000                       		dc.w byte_11098-Map_obj5C
00011026 09                         byte_11098:	dc.b 9
00011027 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001102C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011031 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011036 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001103B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011040 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011045 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001104A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001104F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011054                            		even
00011054                            		even
00011054                            
00011054                            ; ===========================================================================
00011054                            ; ---------------------------------------------------------------------------
00011054                            ; Object 1B - water surface (LZ)
00011054                            ; ---------------------------------------------------------------------------
00011054                            
00011054                            Obj1B:					; XREF: Obj_Index
00011054 7000                       		moveq	#0,d0
00011056 1028 0024                  		move.b	$24(a0),d0
0001105A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001105E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011062                            ; ===========================================================================
00011062 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011064 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011066                            ; ===========================================================================
00011066                            
00011066                            Obj1B_Main:				; XREF: Obj1B_Index
00011066 5428 0024                  		addq.b	#2,$24(a0)
0001106A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011072 317C C300 0002             		move.w	#$C300,2(a0)
00011078 117C 0004 0001             		move.b	#4,1(a0)
0001107E 117C 0080 0019             		move.b	#$80,$19(a0)
00011084 3168 0008 0030             		move.w	8(a0),$30(a0)
0001108A                            
0001108A                            Obj1B_Action:				; XREF: Obj1B_Index
0001108A 3238 F700                  		move.w	($FFFFF700).w,d1
0001108E 0241 FFE0                  		andi.w	#$FFE0,d1
00011092 D268 0030                  		add.w	$30(a0),d1
00011096 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001109C 6700                       		beq.s	loc_11114
0001109E 0641 0020                  		addi.w	#$20,d1
000110A2                            
000110A2                            loc_11114:
000110A2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000110A6 3238 F646                  		move.w	($FFFFF646).w,d1
000110AA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000110AE 4A28 0032                  		tst.b	$32(a0)
000110B2 6600                       		bne.s	Obj1B_Animate
000110B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000110BA 6700                       		beq.s	loc_1114A	; if not, branch
000110BC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000110C0 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000110C6 6000                       		bra.s	Obj1B_Display
000110C8                            ; ===========================================================================
000110C8                            
000110C8                            Obj1B_Animate:				; XREF: loc_11114
000110C8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000110CC 6600                       		bne.s	Obj1B_Display	; if yes, branch
000110CE 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000110D4 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000110D8                            
000110D8                            loc_1114A:				; XREF: loc_11114
000110D8 5328 001E                  		subq.b	#1,$1E(a0)
000110DC 6A00                       		bpl.s	Obj1B_Display
000110DE 117C 0007 001E             		move.b	#7,$1E(a0)
000110E4 5228 001A                  		addq.b	#1,$1A(a0)
000110E8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000110EE 6500                       		bcs.s	Obj1B_Display
000110F0 117C 0000 001A             		move.b	#0,$1A(a0)
000110F6                            
000110F6                            Obj1B_Display:
000110F6 6000 C4B8                  		bra.w	DisplaySprite
000110FA                            ; ===========================================================================
000110FA                            ; ---------------------------------------------------------------------------
000110FA                            ; Sprite mappings - water surface (LZ)
000110FA                            ; ---------------------------------------------------------------------------
000110FA                            Map_obj1B:
000110FA                            	include "_maps\obj1B.asm"
000110FA                            ; ---------------------------------------------------------------------------
000110FA                            ; Sprite mappings - water surface (LZ)
000110FA                            ; ---------------------------------------------------------------------------
000110FA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000110FE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011102 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011106 03                         byte_11178:	dc.b 3
00011107 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001110C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011111 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011116 03                         byte_11188:	dc.b 3
00011117 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001111C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011121 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011126 03                         byte_11198:	dc.b 3
00011127 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001112C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011131 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011136 06                         byte_111A8:	dc.b 6
00011137 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001113C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011141 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011146 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001114B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011150 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011155 06                         byte_111C7:	dc.b 6
00011156 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001115B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011160 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011165 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001116A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001116F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011174 06                         byte_111E6:	dc.b 6
00011175 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001117A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001117F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011184 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011189 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001118E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011194 00                         		even
00011194 00                         		even
00011194                            
00011194                            ; ===========================================================================
00011194                            ; ---------------------------------------------------------------------------
00011194                            ; Object 0B - pole that	breaks (LZ)
00011194                            ; ---------------------------------------------------------------------------
00011194                            
00011194                            Obj0B:					; XREF: Obj_Index
00011194 7000                       		moveq	#0,d0
00011196 1028 0024                  		move.b	$24(a0),d0
0001119A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001119E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000111A2                            ; ===========================================================================
000111A2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000111A4 0000                       		dc.w Obj0B_Action-Obj0B_Index
000111A6 0000                       		dc.w Obj0B_Display-Obj0B_Index
000111A8                            ; ===========================================================================
000111A8                            
000111A8                            Obj0B_Main:				; XREF: Obj0B_Index
000111A8 5428 0024                  		addq.b	#2,$24(a0)
000111AC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000111B4 317C 43DE 0002             		move.w	#$43DE,2(a0)
000111BA 117C 0004 0001             		move.b	#4,1(a0)
000111C0 117C 0008 0019             		move.b	#8,$19(a0)
000111C6 117C 0004 0018             		move.b	#4,$18(a0)
000111CC 117C 00E1 0020             		move.b	#$E1,$20(a0)
000111D2 7000                       		moveq	#0,d0
000111D4 1028 0028                  		move.b	$28(a0),d0	; get object type
000111D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000111DC 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000111E0                            
000111E0                            Obj0B_Action:				; XREF: Obj0B_Index
000111E0 4A28 0032                  		tst.b	$32(a0)
000111E4 6700                       		beq.s	Obj0B_Grab
000111E6 4A68 0030                  		tst.w	$30(a0)
000111EA 6700                       		beq.s	Obj0B_MoveUp
000111EC 5368 0030                  		subq.w	#1,$30(a0)
000111F0 6600                       		bne.s	Obj0B_MoveUp
000111F2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000111F8 6000                       		bra.s	Obj0B_Release
000111FA                            ; ===========================================================================
000111FA                            
000111FA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000111FA 43F8 D000                  		lea	($FFFFD000).w,a1
000111FE 3028 000C                  		move.w	$C(a0),d0
00011202 0440 0018                  		subi.w	#$18,d0
00011206 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001120C 6700                       		beq.s	Obj0B_MoveDown
0001120E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011212 B069 000C                  		cmp.w	$C(a1),d0
00011216 6500                       		bcs.s	Obj0B_MoveDown
00011218 3340 000C                  		move.w	d0,$C(a1)
0001121C                            
0001121C                            Obj0B_MoveDown:
0001121C 0640 0024                  		addi.w	#$24,d0
00011220 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011226 6700                       		beq.s	Obj0B_LetGo
00011228 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001122C B069 000C                  		cmp.w	$C(a1),d0
00011230 6400                       		bcc.s	Obj0B_LetGo
00011232 3340 000C                  		move.w	d0,$C(a1)
00011236                            
00011236                            Obj0B_LetGo:
00011236 1038 F603                  		move.b	($FFFFF603).w,d0
0001123A 0240 0070                  		andi.w	#$70,d0
0001123E 6700                       		beq.s	Obj0B_Display
00011240                            
00011240                            Obj0B_Release:				; XREF: Obj0B_Action
00011240 4228 0020                  		clr.b	$20(a0)
00011244 5428 0024                  		addq.b	#2,$24(a0)
00011248 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001124C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011250 4228 0032                  		clr.b	$32(a0)
00011254 6000                       		bra.s	Obj0B_Display
00011256                            ; ===========================================================================
00011256                            
00011256                            Obj0B_Grab:				; XREF: Obj0B_Action
00011256 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001125A 6700                       		beq.s	Obj0B_Display	; if not, branch
0001125C 43F8 D000                  		lea	($FFFFD000).w,a1
00011260 3028 0008                  		move.w	8(a0),d0
00011264 0640 0014                  		addi.w	#$14,d0
00011268 B069 0008                  		cmp.w	8(a1),d0
0001126C 6400                       		bcc.s	Obj0B_Display
0001126E 4228 0021                  		clr.b	$21(a0)
00011272 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011278 6400                       		bcc.s	Obj0B_Display
0001127A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001127E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011282 3028 0008                  		move.w	8(a0),d0
00011286 0640 0014                  		addi.w	#$14,d0
0001128A 3340 0008                  		move.w	d0,8(a1)
0001128E 08A9 0000 0022             		bclr	#0,$22(a1)
00011294 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001129A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000112A0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000112A6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000112AC                            
000112AC                            Obj0B_Display:				; XREF: Obj0B_Index
000112AC 6000 E39A                  		bra.w	MarkObjGone
000112B0                            ; ===========================================================================
000112B0                            ; ---------------------------------------------------------------------------
000112B0                            ; Sprite mappings - pole that breaks (LZ)
000112B0                            ; ---------------------------------------------------------------------------
000112B0                            Map_obj0B:
000112B0                            	include "_maps\obj0B.asm"
000112B0                            ; ---------------------------------------------------------------------------
000112B0                            ; Sprite mappings - pole that breaks (LZ)
000112B0                            ; ---------------------------------------------------------------------------
000112B0 0000                       		dc.w byte_11326-Map_obj0B
000112B2 0000                       		dc.w byte_11331-Map_obj0B
000112B4 02                         byte_11326:	dc.b 2			; normal pole
000112B5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000112BA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000112BF 04                         byte_11331:	dc.b 4			; broken pole
000112C0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000112C5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000112CA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000112CF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000112D4                            		even
000112D4                            		even
000112D4                            
000112D4                            ; ===========================================================================
000112D4                            ; ---------------------------------------------------------------------------
000112D4                            ; Object 0C - flapping door (LZ)
000112D4                            ; ---------------------------------------------------------------------------
000112D4                            
000112D4                            Obj0C:					; XREF: Obj_Index
000112D4 7000                       		moveq	#0,d0
000112D6 1028 0024                  		move.b	$24(a0),d0
000112DA 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000112DE 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000112E2                            ; ===========================================================================
000112E2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000112E4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000112E6                            ; ===========================================================================
000112E6                            
000112E6                            Obj0C_Main:				; XREF: Obj0C_Index
000112E6 5428 0024                  		addq.b	#2,$24(a0)
000112EA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000112F2 317C 4328 0002             		move.w	#$4328,2(a0)
000112F8 0028 0004 0001             		ori.b	#4,1(a0)
000112FE 117C 0028 0019             		move.b	#$28,$19(a0)
00011304 7000                       		moveq	#0,d0
00011306 1028 0028                  		move.b	$28(a0),d0	; get object type
0001130A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001130E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011312                            
00011312                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011312 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011316 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011318 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001131E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011324 4A28 0001                  		tst.b	1(a0)
00011328 6A00                       		bpl.s	Obj0C_Solid
0001132A 303C 00BB                  		move.w	#$BB,d0
0001132E 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play door sound
00011334                            
00011334                            Obj0C_Solid:
00011334 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001133A 6100 93B0                  		bsr.w	AnimateSprite
0001133E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011342 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011346 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011348 3038 D008                  		move.w	($FFFFD008).w,d0
0001134C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011350 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011352 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011358 323C 0013                  		move.w	#$13,d1
0001135C 343C 0020                  		move.w	#$20,d2
00011360 3602                       		move.w	d2,d3
00011362 5243                       		addq.w	#1,d3
00011364 3828 0008                  		move.w	8(a0),d4
00011368 6100 E606                  		bsr.w	SolidObject	; make the door	solid
0001136C                            
0001136C                            Obj0C_Display:
0001136C 6000 E2DA                  		bra.w	MarkObjGone
00011370                            ; ===========================================================================
00011370                            Ani_obj0C:
00011370                            	include "_anim\obj0C.asm"
00011370                            ; ---------------------------------------------------------------------------
00011370                            ; Animation script - flapping door (LZ)
00011370                            ; ---------------------------------------------------------------------------
00011370 0000                       		dc.w byte_113E6-Ani_obj0C
00011372 0000                       		dc.w byte_113EC-Ani_obj0C
00011374 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001137A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011380                            		even
00011380                            		even
00011380                            
00011380                            ; ---------------------------------------------------------------------------
00011380                            ; Sprite mappings - flapping door (LZ)
00011380                            ; ---------------------------------------------------------------------------
00011380                            Map_obj0C:
00011380                            	include "_maps\obj0C.asm"
00011380                            ; ---------------------------------------------------------------------------
00011380                            ; Sprite mappings - flapping door (LZ)
00011380                            ; ---------------------------------------------------------------------------
00011380 0000                       		dc.w byte_113F8-Map_obj0C
00011382 0000                       		dc.w byte_11403-Map_obj0C
00011384 0000                       		dc.w byte_1140E-Map_obj0C
00011386 02                         byte_113F8:	dc.b 2
00011387 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001138C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011391 02                         byte_11403:	dc.b 2
00011392 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011397 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001139C 02                         byte_1140E:	dc.b 2
0001139D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000113A2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000113A8 00                         		even
000113A8 00                         		even
000113A8                            
000113A8                            ; ===========================================================================
000113A8                            ; ---------------------------------------------------------------------------
000113A8                            ; Object 71 - invisible	solid blocks
000113A8                            ; ---------------------------------------------------------------------------
000113A8                            
000113A8                            Obj71:					; XREF: Obj_Index
000113A8 7000                       		moveq	#0,d0
000113AA 1028 0024                  		move.b	$24(a0),d0
000113AE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000113B2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000113B6                            ; ===========================================================================
000113B6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000113B8 0000                       		dc.w Obj71_Solid-Obj71_Index
000113BA                            ; ===========================================================================
000113BA                            
000113BA                            Obj71_Main:				; XREF: Obj71_Index
000113BA 5428 0024                  		addq.b	#2,$24(a0)
000113BE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000113C6 317C 8680 0002             		move.w	#$8680,2(a0)
000113CC 0028 0004 0001             		ori.b	#4,1(a0)
000113D2 1028 0028                  		move.b	$28(a0),d0	; get object type
000113D6 1200                       		move.b	d0,d1
000113D8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000113DC 0640 0010                  		addi.w	#$10,d0
000113E0 E248                       		lsr.w	#1,d0
000113E2 1140 0019                  		move.b	d0,$19(a0)	; set object width
000113E6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000113EA 5241                       		addq.w	#1,d1
000113EC E749                       		lsl.w	#3,d1
000113EE 1141 0016                  		move.b	d1,$16(a0)	; set object height
000113F2                            
000113F2                            Obj71_Solid:				; XREF: Obj71_Index
000113F2 6100 C436                  		bsr.w	ChkObjOnScreen
000113F6 6600                       		bne.s	Obj71_ChkDel
000113F8 7200                       		moveq	#0,d1
000113FA 1228 0019                  		move.b	$19(a0),d1
000113FE 0641 000B                  		addi.w	#$B,d1
00011402 7400                       		moveq	#0,d2
00011404 1428 0016                  		move.b	$16(a0),d2
00011408 3602                       		move.w	d2,d3
0001140A 5243                       		addq.w	#1,d3
0001140C 3828 0008                  		move.w	8(a0),d4
00011410 6100 E5A4                  		bsr.w	SolidObject71
00011414                            
00011414                            Obj71_ChkDel:
00011414 3028 0008                  		move.w	8(a0),d0
00011418 0240 FF80                  		andi.w	#$FF80,d0
0001141C 3238 F700                  		move.w	($FFFFF700).w,d1
00011420 0441 0080                  		subi.w	#$80,d1
00011424 0241 FF80                  		andi.w	#$FF80,d1
00011428 9041                       		sub.w	d1,d0
0001142A 0C40 0280                  		cmpi.w	#$280,d0
0001142E 6200                       		bhi.s	Obj71_Delete
00011430 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011434 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011436 4EFA C178                  		jmp	DisplaySprite	; if yes, display the object
0001143A                            ; ===========================================================================
0001143A                            
0001143A                            Obj71_NoDisplay:
0001143A 4E75                       		rts	
0001143C                            ; ===========================================================================
0001143C                            
0001143C                            Obj71_Delete:
0001143C 4EFA C1AE                  		jmp	DeleteObject
00011440                            ; ===========================================================================
00011440                            ; ---------------------------------------------------------------------------
00011440                            ; Sprite mappings - invisible solid blocks
00011440                            ; ---------------------------------------------------------------------------
00011440                            Map_obj71:
00011440                            	include "_maps\obj71.asm"
00011440                            ; ---------------------------------------------------------------------------
00011440                            ; Sprite mappings - invisible solid blocks
00011440                            ; ---------------------------------------------------------------------------
00011440 0000                       		dc.w byte_114BC-Map_obj71
00011442 0000                       		dc.w byte_114D1-Map_obj71
00011444 0000                       		dc.w byte_114E6-Map_obj71
00011446 04                         byte_114BC:	dc.b 4
00011447 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001144C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011451 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011456 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001145B 04                         byte_114D1:	dc.b 4
0001145C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011461 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011466 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001146B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011470 04                         byte_114E6:	dc.b 4
00011471 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011476 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001147B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011480 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011486 00                         		even
00011486 00                         		even
00011486                            
00011486                            ; ===========================================================================
00011486                            ; ---------------------------------------------------------------------------
00011486                            ; Object 5D - fans (SLZ)
00011486                            ; ---------------------------------------------------------------------------
00011486                            
00011486                            Obj5D:					; XREF: Obj_Index
00011486 7000                       		moveq	#0,d0
00011488 1028 0024                  		move.b	$24(a0),d0
0001148C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011490 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011494                            ; ===========================================================================
00011494 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011496 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011498                            ; ===========================================================================
00011498                            
00011498                            Obj5D_Main:				; XREF: Obj5D_Index
00011498 5428 0024                  		addq.b	#2,$24(a0)
0001149C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000114A4 317C 43A0 0002             		move.w	#$43A0,2(a0)
000114AA 0028 0004 0001             		ori.b	#4,1(a0)
000114B0 117C 0010 0019             		move.b	#$10,$19(a0)
000114B6 117C 0004 0018             		move.b	#4,$18(a0)
000114BC                            
000114BC                            Obj5D_Delay:				; XREF: Obj5D_Index
000114BC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000114C2 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000114C4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000114C8 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000114CA 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000114D0 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000114D6 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000114D8 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000114DE                            
000114DE                            Obj5D_Blow:
000114DE 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000114E2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000114E6 43F8 D000                  		lea	($FFFFD000).w,a1
000114EA 3029 0008                  		move.w	8(a1),d0
000114EE 9068 0008                  		sub.w	8(a0),d0
000114F2 0828 0000 0022             		btst	#0,$22(a0)
000114F8 6600                       		bne.s	Obj5D_ChkSonic
000114FA 4440                       		neg.w	d0
000114FC                            
000114FC                            Obj5D_ChkSonic:
000114FC 0640 0050                  		addi.w	#$50,d0
00011500 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011504 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011506 3229 000C                  		move.w	$C(a1),d1
0001150A 0641 0060                  		addi.w	#$60,d1
0001150E 9268 000C                  		sub.w	$C(a0),d1
00011512 6500                       		bcs.s	Obj5D_Animate
00011514 0C41 0070                  		cmpi.w	#$70,d1
00011518 6400                       		bcc.s	Obj5D_Animate
0001151A 0440 0050                  		subi.w	#$50,d0
0001151E 6400                       		bcc.s	loc_1159A
00011520 4640                       		not.w	d0
00011522 D040                       		add.w	d0,d0
00011524                            
00011524                            loc_1159A:
00011524 0640 0060                  		addi.w	#$60,d0
00011528 0828 0000 0022             		btst	#0,$22(a0)
0001152E 6600                       		bne.s	loc_115A8
00011530 4440                       		neg.w	d0
00011532                            
00011532                            loc_115A8:
00011532 4400                       		neg.b	d0
00011534 E840                       		asr.w	#4,d0
00011536 0828 0000 0028             		btst	#0,$28(a0)
0001153C 6700                       		beq.s	Obj5D_MoveSonic
0001153E 4440                       		neg.w	d0
00011540                            
00011540                            Obj5D_MoveSonic:
00011540 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011544                            
00011544                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011544 5328 001E                  		subq.b	#1,$1E(a0)
00011548 6A00                       		bpl.s	Obj5D_ChkDel
0001154A 117C 0000 001E             		move.b	#0,$1E(a0)
00011550 5228 001B                  		addq.b	#1,$1B(a0)
00011554 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0001155A 6500                       		bcs.s	loc_115D8
0001155C 117C 0000 001B             		move.b	#0,$1B(a0)
00011562                            
00011562                            loc_115D8:
00011562 7000                       		moveq	#0,d0
00011564 0828 0000 0028             		btst	#0,$28(a0)
0001156A 6700                       		beq.s	loc_115E4
0001156C 7002                       		moveq	#2,d0
0001156E                            
0001156E                            loc_115E4:
0001156E D028 001B                  		add.b	$1B(a0),d0
00011572 1140 001A                  		move.b	d0,$1A(a0)
00011576                            
00011576                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011576 6100 C038                  		bsr.w	DisplaySprite
0001157A 3028 0008                  		move.w	8(a0),d0
0001157E 0240 FF80                  		andi.w	#$FF80,d0
00011582 3238 F700                  		move.w	($FFFFF700).w,d1
00011586 0441 0080                  		subi.w	#$80,d1
0001158A 0241 FF80                  		andi.w	#$FF80,d1
0001158E 9041                       		sub.w	d1,d0
00011590 0C40 0280                  		cmpi.w	#$280,d0
00011594 6200 C056                  		bhi.w	DeleteObject
00011598 4E75                       		rts	
0001159A                            ; ===========================================================================
0001159A                            ; ---------------------------------------------------------------------------
0001159A                            ; Sprite mappings - fans (SLZ)
0001159A                            ; ---------------------------------------------------------------------------
0001159A                            Map_obj5D:
0001159A                            	include "_maps\obj5D.asm"
0001159A                            ; ---------------------------------------------------------------------------
0001159A                            ; Sprite mappings - fans (SLZ)
0001159A                            ; ---------------------------------------------------------------------------
0001159A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001159E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000115A2 0000                       		dc.w byte_1161A-Map_obj5D
000115A4 02                         byte_1161A:	dc.b 2
000115A5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000115AA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000115AF 02                         byte_11625:	dc.b 2
000115B0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000115B5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000115BA 02                         byte_11630:	dc.b 2
000115BB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000115C0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000115C6 00                         		even
000115C6 00                         		even
000115C6                            
000115C6                            ; ===========================================================================
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            ; Object 5E - seesaws (SLZ)
000115C6                            ; ---------------------------------------------------------------------------
000115C6                            
000115C6                            Obj5E:					; XREF: Obj_Index
000115C6 7000                       		moveq	#0,d0
000115C8 1028 0024                  		move.b	$24(a0),d0
000115CC 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000115D0 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000115D4 3028 0030                  		move.w	$30(a0),d0
000115D8 0240 FF80                  		andi.w	#$FF80,d0
000115DC 3238 F700                  		move.w	($FFFFF700).w,d1
000115E0 0441 0080                  		subi.w	#$80,d1
000115E4 0241 FF80                  		andi.w	#$FF80,d1
000115E8 9041                       		sub.w	d1,d0
000115EA 6B00 C000                  		bmi.w	DeleteObject
000115EE 0C40 0280                  		cmpi.w	#$280,d0
000115F2 6200 BFF8                  		bhi.w	DeleteObject
000115F6 6000 BFB8                  		bra.w	DisplaySprite
000115FA                            ; ===========================================================================
000115FA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000115FC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000115FE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011600 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011602 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011604 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011606                            ; ===========================================================================
00011606                            
00011606                            Obj5E_Main:				; XREF: Obj5E_Index
00011606 5428 0024                  		addq.b	#2,$24(a0)
0001160A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011612 317C 0374 0002             		move.w	#$374,2(a0)
00011618 0028 0004 0001             		ori.b	#4,1(a0)
0001161E 117C 0004 0018             		move.b	#4,$18(a0)
00011624 117C 0030 0019             		move.b	#$30,$19(a0)
0001162A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011630 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011634 6600                       		bne.s	loc_116D2	; if not, branch
00011636 6100 C414                  		bsr.w	SingleObjLoad2
0001163A 6600                       		bne.s	loc_116D2
0001163C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011640 5C29 0024                  		addq.b	#6,$24(a1)
00011644 3368 0008 0008             		move.w	8(a0),8(a1)
0001164A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011650 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011656 2348 003C                  		move.l	a0,$3C(a1)
0001165A                            
0001165A                            loc_116D2:
0001165A 0828 0000 0022             		btst	#0,$22(a0)
00011660 6700                       		beq.s	loc_116E0
00011662 117C 0002 001A             		move.b	#2,$1A(a0)
00011668                            
00011668                            loc_116E0:
00011668 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001166E                            
0001166E                            Obj5E_Slope:				; XREF: Obj5E_Index
0001166E 1228 003A                  		move.b	$3A(a0),d1
00011672 6100 0000                  		bsr.w	loc_11766
00011676 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001167C 0828 0000 001A             		btst	#0,$1A(a0)
00011682 6700                       		beq.s	loc_11702
00011684 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001168A                            
0001168A                            loc_11702:
0001168A 43F8 D000                  		lea	($FFFFD000).w,a1
0001168E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011694 323C 0030                  		move.w	#$30,d1
00011698 4EB9 0000 7514             		jsr	(SlopeObject).l
0001169E 4E75                       		rts	
000116A0                            ; ===========================================================================
000116A0                            
000116A0                            Obj5E_Slope2:				; XREF: Obj5E_Index
000116A0 6100 0000                  		bsr.w	loc_1174A
000116A4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000116AA 0828 0000 001A             		btst	#0,$1A(a0)
000116B0 6700                       		beq.s	loc_11730
000116B2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000116B8                            
000116B8                            loc_11730:
000116B8 323C 0030                  		move.w	#$30,d1
000116BC 4EB9 0000 75B4             		jsr	(ExitPlatform).l
000116C2 323C 0030                  		move.w	#$30,d1
000116C6 3428 0008                  		move.w	8(a0),d2
000116CA 4EB9 0000 8512             		jsr	SlopeObject2
000116D0 4E75                       		rts	
000116D2                            ; ===========================================================================
000116D2                            
000116D2                            loc_1174A:				; XREF: Obj5E_Slope2
000116D2 7202                       		moveq	#2,d1
000116D4 43F8 D000                  		lea	($FFFFD000).w,a1
000116D8 3028 0008                  		move.w	8(a0),d0
000116DC 9069 0008                  		sub.w	8(a1),d0
000116E0 6400                       		bcc.s	loc_1175E
000116E2 4440                       		neg.w	d0
000116E4 7200                       		moveq	#0,d1
000116E6                            
000116E6                            loc_1175E:
000116E6 0C40 0008                  		cmpi.w	#8,d0
000116EA 6400                       		bcc.s	loc_11766
000116EC 7201                       		moveq	#1,d1
000116EE                            
000116EE                            loc_11766:
000116EE 1028 001A                  		move.b	$1A(a0),d0
000116F2 B001                       		cmp.b	d1,d0
000116F4 6700                       		beq.s	locret_11790
000116F6 6400                       		bcc.s	loc_11772
000116F8 5400                       		addq.b	#2,d0
000116FA                            
000116FA                            loc_11772:
000116FA 5300                       		subq.b	#1,d0
000116FC 1140 001A                  		move.b	d0,$1A(a0)
00011700 1141 003A                  		move.b	d1,$3A(a0)
00011704 08A8 0000 0001             		bclr	#0,1(a0)
0001170A 0828 0001 001A             		btst	#1,$1A(a0)
00011710 6700                       		beq.s	locret_11790
00011712 08E8 0000 0001             		bset	#0,1(a0)
00011718                            
00011718                            locret_11790:
00011718 4E75                       		rts	
0001171A                            ; ===========================================================================
0001171A                            
0001171A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001171A 5428 0024                  		addq.b	#2,$24(a0)
0001171E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011726 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001172C 0028 0004 0001             		ori.b	#4,1(a0)
00011732 117C 0004 0018             		move.b	#4,$18(a0)
00011738 117C 008B 0020             		move.b	#$8B,$20(a0)
0001173E 117C 000C 0019             		move.b	#$C,$19(a0)
00011744 3168 0008 0030             		move.w	8(a0),$30(a0)
0001174A 0668 0028 0008             		addi.w	#$28,8(a0)
00011750 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011756 117C 0001 001A             		move.b	#1,$1A(a0)
0001175C 0828 0000 0022             		btst	#0,$22(a0)
00011762 6700                       		beq.s	Obj5E_MoveSpike
00011764 0468 0050 0008             		subi.w	#$50,8(a0)
0001176A 117C 0002 003A             		move.b	#2,$3A(a0)
00011770                            
00011770                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011770 2268 003C                  		movea.l	$3C(a0),a1
00011774 7000                       		moveq	#0,d0
00011776 1028 003A                  		move.b	$3A(a0),d0
0001177A 9029 003A                  		sub.b	$3A(a1),d0
0001177E 6700                       		beq.s	loc_1183E
00011780 6400                       		bcc.s	loc_117FC
00011782 4400                       		neg.b	d0
00011784                            
00011784                            loc_117FC:
00011784 323C F7E8                  		move.w	#-$818,d1
00011788 343C FEEC                  		move.w	#-$114,d2
0001178C 0C00 0001                  		cmpi.b	#1,d0
00011790 6700                       		beq.s	loc_11822
00011792 323C F510                  		move.w	#-$AF0,d1
00011796 343C FF34                  		move.w	#-$CC,d2
0001179A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000117A0 6D00                       		blt.s	loc_11822
000117A2 323C F200                  		move.w	#-$E00,d1
000117A6 343C FF60                  		move.w	#-$A0,d2
000117AA                            
000117AA                            loc_11822:
000117AA 3141 0012                  		move.w	d1,$12(a0)
000117AE 3142 0010                  		move.w	d2,$10(a0)
000117B2 3028 0008                  		move.w	8(a0),d0
000117B6 9068 0030                  		sub.w	$30(a0),d0
000117BA 6400                       		bcc.s	loc_11838
000117BC 4468 0010                  		neg.w	$10(a0)
000117C0                            
000117C0                            loc_11838:
000117C0 5428 0024                  		addq.b	#2,$24(a0)
000117C4 6000                       		bra.s	Obj5E_SpikeFall
000117C6                            ; ===========================================================================
000117C6                            
000117C6                            loc_1183E:				; XREF: Obj5E_MoveSpike
000117C6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000117CC 7000                       		moveq	#0,d0
000117CE 1029 001A                  		move.b	$1A(a1),d0
000117D2 343C 0028                  		move.w	#$28,d2
000117D6 3228 0008                  		move.w	8(a0),d1
000117DA 9268 0030                  		sub.w	$30(a0),d1
000117DE 6400                       		bcc.s	loc_1185C
000117E0 4442                       		neg.w	d2
000117E2 5440                       		addq.w	#2,d0
000117E4                            
000117E4                            loc_1185C:
000117E4 D040                       		add.w	d0,d0
000117E6 3228 0034                  		move.w	$34(a0),d1
000117EA D272 0000                  		add.w	(a2,d0.w),d1
000117EE 3141 000C                  		move.w	d1,$C(a0)
000117F2 D468 0030                  		add.w	$30(a0),d2
000117F6 3142 0008                  		move.w	d2,8(a0)
000117FA 4268 000E                  		clr.w	$E(a0)
000117FE 4268 000A                  		clr.w	$A(a0)
00011802 4E75                       		rts	
00011804                            ; ===========================================================================
00011804                            
00011804                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011804 4A68 0012                  		tst.w	$12(a0)
00011808 6A00                       		bpl.s	loc_1189A
0001180A 6100 BD52                  		bsr.w	ObjectFall
0001180E 3028 0034                  		move.w	$34(a0),d0
00011812 0440 002F                  		subi.w	#$2F,d0
00011816 B068 000C                  		cmp.w	$C(a0),d0
0001181A 6E00                       		bgt.s	locret_11898
0001181C 6100 BD40                  		bsr.w	ObjectFall
00011820                            
00011820                            locret_11898:
00011820 4E75                       		rts	
00011822                            ; ===========================================================================
00011822                            
00011822                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011822 6100 BD3A                  		bsr.w	ObjectFall
00011826 2268 003C                  		movea.l	$3C(a0),a1
0001182A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011830 7000                       		moveq	#0,d0
00011832 1029 001A                  		move.b	$1A(a1),d0
00011836 3228 0008                  		move.w	8(a0),d1
0001183A 9268 0030                  		sub.w	$30(a0),d1
0001183E 6400                       		bcc.s	loc_118BA
00011840 5440                       		addq.w	#2,d0
00011842                            
00011842                            loc_118BA:
00011842 D040                       		add.w	d0,d0
00011844 3228 0034                  		move.w	$34(a0),d1
00011848 D272 0000                  		add.w	(a2,d0.w),d1
0001184C B268 000C                  		cmp.w	$C(a0),d1
00011850 6E00                       		bgt.s	locret_11938
00011852 2268 003C                  		movea.l	$3C(a0),a1
00011856 7202                       		moveq	#2,d1
00011858 4A68 0010                  		tst.w	$10(a0)
0001185C 6B00                       		bmi.s	Obj5E_Spring
0001185E 7200                       		moveq	#0,d1
00011860                            
00011860                            Obj5E_Spring:
00011860 1341 003A                  		move.b	d1,$3A(a1)
00011864 1141 003A                  		move.b	d1,$3A(a0)
00011868 B229 001A                  		cmp.b	$1A(a1),d1
0001186C 6700                       		beq.s	loc_1192C
0001186E 08A9 0003 0022             		bclr	#3,$22(a1)
00011874 6700                       		beq.s	loc_1192C
00011876 4229 0025                  		clr.b	$25(a1)
0001187A 137C 0002 0024             		move.b	#2,$24(a1)
00011880 45F8 D000                  		lea	($FFFFD000).w,a2
00011884 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001188A 446A 0012                  		neg.w	$12(a2)
0001188E 08EA 0001 0022             		bset	#1,$22(a2)
00011894 08AA 0003 0022             		bclr	#3,$22(a2)
0001189A 422A 003C                  		clr.b	$3C(a2)
0001189E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000118A4 157C 0002 0024             		move.b	#2,$24(a2)
000118AA 303C 00CC                  		move.w	#$CC,d0
000118AE 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play spring sound
000118B4                            
000118B4                            loc_1192C:
000118B4 4268 0010                  		clr.w	$10(a0)
000118B8 4268 0012                  		clr.w	$12(a0)
000118BC 5528 0024                  		subq.b	#2,$24(a0)
000118C0                            
000118C0                            locret_11938:
000118C0 4E75                       		rts	
000118C2                            ; ===========================================================================
000118C2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000118CC                            
000118CC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000118FC                            		even
000118FC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001192C                            		even
0001192C                            ; ---------------------------------------------------------------------------
0001192C                            ; Sprite mappings - seesaws (SLZ)
0001192C                            ; ---------------------------------------------------------------------------
0001192C                            Map_obj5E:
0001192C                            	include "_maps\obj5E.asm"
0001192C                            ; ---------------------------------------------------------------------------
0001192C                            ; Sprite mappings - seesaws (SLZ)
0001192C                            ; ---------------------------------------------------------------------------
0001192C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011930 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011934 07                         byte_119AC:	dc.b 7
00011935 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001193A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001193F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011944 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011949 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001194E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011953 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011958 04                         byte_119D0:	dc.b 4
00011959 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001195E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011963 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011968 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001196E 00                         		even
0001196E 00                         		even
0001196E                            
0001196E                            ; ---------------------------------------------------------------------------
0001196E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001196E                            ; ---------------------------------------------------------------------------
0001196E                            Map_obj5Ea:
0001196E                            	include "_maps\obj5Eballs.asm"
0001196E                            ; ---------------------------------------------------------------------------
0001196E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001196E                            ; ---------------------------------------------------------------------------
0001196E 0000                       		dc.w byte_119EA-Map_obj5Ea
00011970 0000                       		dc.w byte_119F0-Map_obj5Ea
00011972 01                         byte_119EA:	dc.b 1
00011973 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011978 01                         byte_119F0:	dc.b 1
00011979 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001197E                            		even
0001197E                            		even
0001197E                            
0001197E                            ; ===========================================================================
0001197E                            ; ---------------------------------------------------------------------------
0001197E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001197E                            ; ---------------------------------------------------------------------------
0001197E                            
0001197E                            Obj5F:					; XREF: Obj_Index
0001197E 7000                       		moveq	#0,d0
00011980 1028 0024                  		move.b	$24(a0),d0
00011984 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011988 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001198C                            ; ===========================================================================
0001198C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001198E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011990 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011992 0000                       		dc.w Obj5F_End-Obj5F_Index
00011994                            ; ===========================================================================
00011994                            
00011994                            Obj5F_Main:				; XREF: Obj5F_Index
00011994 5428 0024                  		addq.b	#2,$24(a0)
00011998 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000119A0 317C 0400 0002             		move.w	#$400,2(a0)
000119A6 0028 0004 0001             		ori.b	#4,1(a0)
000119AC 117C 0003 0018             		move.b	#3,$18(a0)
000119B2 117C 000C 0019             		move.b	#$C,$19(a0)
000119B8 1028 0028                  		move.b	$28(a0),d0
000119BC 6700                       		beq.s	loc_11A3C
000119BE 1140 0024                  		move.b	d0,$24(a0)
000119C2 4E75                       		rts	
000119C4                            ; ===========================================================================
000119C4                            
000119C4                            loc_11A3C:
000119C4 117C 009A 0020             		move.b	#$9A,$20(a0)
000119CA 0868 0000 0022             		bchg	#0,$22(a0)
000119D0                            
000119D0                            Obj5F_Action:				; XREF: Obj5F_Index
000119D0 7000                       		moveq	#0,d0
000119D2 1028 0025                  		move.b	$25(a0),d0
000119D6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000119DA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000119DE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000119E4 6100 8D06                  		bsr.w	AnimateSprite
000119E8 6000 DC5E                  		bra.w	MarkObjGone
000119EC                            ; ===========================================================================
000119EC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000119EE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000119F0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000119F2                            ; ===========================================================================
000119F2                            
000119F2                            Obj5F_Walk:				; XREF: Obj5F_Index2
000119F2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000119F6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000119FA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000119FC 5428 0025                  		addq.b	#2,$25(a0)
00011A00 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011A06 317C 0010 0010             		move.w	#$10,$10(a0)
00011A0C 117C 0001 001C             		move.b	#1,$1C(a0)
00011A12 0868 0000 0022             		bchg	#0,$22(a0)
00011A18 6700                       		beq.s	locret_11A96
00011A1A 4468 0010                  		neg.w	$10(a0)		; change direction
00011A1E                            
00011A1E                            locret_11A96:
00011A1E 4E75                       		rts	
00011A20                            ; ===========================================================================
00011A20                            
00011A20                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011A20 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011A24 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A28 6B00                       		bmi.s	loc_11AA8
00011A2A 6100 BB5E                  		bsr.w	SpeedToPos
00011A2E 4E75                       		rts	
00011A30                            ; ===========================================================================
00011A30                            
00011A30                            loc_11AA8:
00011A30 5528 0025                  		subq.b	#2,$25(a0)
00011A34 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011A3A 4268 0010                  		clr.w	$10(a0)		; stop walking
00011A3E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011A44 4E75                       		rts	
00011A46                            ; ===========================================================================
00011A46                            
00011A46                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011A46 5368 0030                  		subq.w	#1,$30(a0)
00011A4A 6A00                       		bpl.s	locret_11AD0
00011A4C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011A50 117C 0000 0024             		move.b	#0,$24(a0)
00011A56                            
00011A56                            locret_11AD0:
00011A56 4E75                       		rts	
00011A58                            ; ===========================================================================
00011A58                            
00011A58                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011A58 3038 D008                  		move.w	($FFFFD008).w,d0
00011A5C 9068 0008                  		sub.w	8(a0),d0
00011A60 6400                       		bcc.s	loc_11ADE
00011A62 4440                       		neg.w	d0
00011A64                            
00011A64                            loc_11ADE:
00011A64 0C40 0060                  		cmpi.w	#$60,d0
00011A68 6400                       		bcc.s	locret_11B5E
00011A6A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011A6E 9068 000C                  		sub.w	$C(a0),d0
00011A72 6400                       		bcc.s	Obj5F_MakeFuse
00011A74 4440                       		neg.w	d0
00011A76                            
00011A76                            Obj5F_MakeFuse:
00011A76 0C40 0060                  		cmpi.w	#$60,d0
00011A7A 6400                       		bcc.s	locret_11B5E
00011A7C 4A78 FE08                  		tst.w	($FFFFFE08).w
00011A80 6600                       		bne.s	locret_11B5E
00011A82 117C 0004 0025             		move.b	#4,$25(a0)
00011A88 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011A8E 4268 0010                  		clr.w	$10(a0)
00011A92 117C 0002 001C             		move.b	#2,$1C(a0)
00011A98 6100 BFB2                  		bsr.w	SingleObjLoad2
00011A9C 6600                       		bne.s	locret_11B5E
00011A9E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011AA2 3368 0008 0008             		move.w	8(a0),8(a1)
00011AA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011AAE 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011AB4 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011ABA 137C 0004 0028             		move.b	#4,$28(a1)
00011AC0 137C 0003 001C             		move.b	#3,$1C(a1)
00011AC6 337C 0010 0012             		move.w	#$10,$12(a1)
00011ACC 0828 0001 0022             		btst	#1,$22(a0)
00011AD2 6700                       		beq.s	loc_11B54
00011AD4 4469 0012                  		neg.w	$12(a1)
00011AD8                            
00011AD8                            loc_11B54:
00011AD8 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011ADE 2348 003C                  		move.l	a0,$3C(a1)
00011AE2                            
00011AE2                            locret_11B5E:
00011AE2 4E75                       		rts	
00011AE4                            ; ===========================================================================
00011AE4                            
00011AE4                            Obj5F_Display:				; XREF: Obj5F_Index
00011AE4 6100                       		bsr.s	loc_11B70
00011AE6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011AEC 6100 8BFE                  		bsr.w	AnimateSprite
00011AF0 6000 DB56                  		bra.w	MarkObjGone
00011AF4                            ; ===========================================================================
00011AF4                            
00011AF4                            loc_11B70:
00011AF4 5368 0030                  		subq.w	#1,$30(a0)
00011AF8 6B00                       		bmi.s	loc_11B7C
00011AFA 6100 BA8E                  		bsr.w	SpeedToPos
00011AFE 4E75                       		rts	
00011B00                            ; ===========================================================================
00011B00                            
00011B00                            loc_11B7C:
00011B00 4268 0030                  		clr.w	$30(a0)
00011B04 4228 0024                  		clr.b	$24(a0)
00011B08 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011B0E 7203                       		moveq	#3,d1
00011B10 2248                       		movea.l	a0,a1
00011B12 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011B18 6000                       		bra.s	Obj5F_MakeShrap
00011B1A                            ; ===========================================================================
00011B1A                            
00011B1A                            Obj5F_Loop:
00011B1A 6100 BF30                  		bsr.w	SingleObjLoad2
00011B1E 6600                       		bne.s	loc_11BCE
00011B20                            
00011B20                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011B20 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011B24 3368 0008 0008             		move.w	8(a0),8(a1)
00011B2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B30 137C 0006 0028             		move.b	#6,$28(a1)
00011B36 137C 0004 001C             		move.b	#4,$1C(a1)
00011B3C 335A 0010                  		move.w	(a2)+,$10(a1)
00011B40 335A 0012                  		move.w	(a2)+,$12(a1)
00011B44 137C 0098 0020             		move.b	#$98,$20(a1)
00011B4A 08E9 0007 0001             		bset	#7,1(a1)
00011B50                            
00011B50                            loc_11BCE:
00011B50 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011B54                            
00011B54 117C 0006 0024             		move.b	#6,$24(a0)
00011B5A                            
00011B5A                            Obj5F_End:				; XREF: Obj5F_Index
00011B5A 6100 BA2E                  		bsr.w	SpeedToPos
00011B5E 0668 0018 0012             		addi.w	#$18,$12(a0)
00011B64 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011B6A 6100 8B80                  		bsr.w	AnimateSprite
00011B6E 4A28 0001                  		tst.b	1(a0)
00011B72 6A00 BA78                  		bpl.w	DeleteObject
00011B76 6000 BA38                  		bra.w	DisplaySprite
00011B7A                            ; ===========================================================================
00011B7A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011B8A                            
00011B8A                            Ani_obj5F:
00011B8A                            	include "_anim\obj5F.asm"
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A                            ; Animation script - Bomb enemy
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A 0000                       		dc.w byte_11C12-Ani_obj5F
00011B8C 0000                       		dc.w byte_11C16-Ani_obj5F
00011B8E 0000                       		dc.w byte_11C1C-Ani_obj5F
00011B90 0000                       		dc.w byte_11C20-Ani_obj5F
00011B92 0000                       		dc.w byte_11C24-Ani_obj5F
00011B94 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011B98 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011B9E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011BA2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011BA6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011BAA                            		even
00011BAA                            		even
00011BAA                            
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA                            Map_obj5F:
00011BAA                            	include "_maps\obj5F.asm"
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011BAA                            ; ---------------------------------------------------------------------------
00011BAA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011BAE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011BB2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011BB6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011BBA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011BBE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011BC2 03                         byte_11C40:	dc.b 3
00011BC3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011BC8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011BCD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BD2 03                         byte_11C50:	dc.b 3
00011BD3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BD8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011BDD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BE2 03                         byte_11C60:	dc.b 3
00011BE3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011BE8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011BED E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011BF2 03                         byte_11C70:	dc.b 3
00011BF3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BF8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011BFD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011C02 03                         byte_11C80:	dc.b 3
00011C03 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011C08 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011C0D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011C12 03                         byte_11C90:	dc.b 3
00011C13 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011C18 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011C1D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011C22 02                         byte_11CA0:	dc.b 2
00011C23 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011C28 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011C2D 02                         byte_11CAB:	dc.b 2
00011C2E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011C33 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011C38 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011C39 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011C3E 01                         byte_11CBC:	dc.b 1			; fuse
00011C3F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011C44 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011C45 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011C4A 01                         byte_11CC8:	dc.b 1			; fireball
00011C4B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011C50                            		even
00011C50                            		even
00011C50                            
00011C50                            ; ===========================================================================
00011C50                            ; ---------------------------------------------------------------------------
00011C50                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011C50                            ; ---------------------------------------------------------------------------
00011C50                            
00011C50                            Obj60:					; XREF: Obj_Index
00011C50 7000                       		moveq	#0,d0
00011C52 1028 0024                  		move.b	$24(a0),d0
00011C56 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011C5A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011C5E                            ; ===========================================================================
00011C5E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011C60 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011C62 0000                       		dc.w Obj60_Display-Obj60_Index
00011C64 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011C66 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011C68                            ; ===========================================================================
00011C68                            
00011C68                            Obj60_Main:				; XREF: Obj60_Index
00011C68 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011C70 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011C76 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011C7C 6700                       		beq.s	loc_11D02
00011C7E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011C84                            
00011C84                            loc_11D02:
00011C84 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C8A 6600                       		bne.s	loc_11D10
00011C8C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011C92                            
00011C92                            loc_11D10:
00011C92 0028 0004 0001             		ori.b	#4,1(a0)
00011C98 117C 0004 0018             		move.b	#4,$18(a0)
00011C9E 117C 000B 0020             		move.b	#$B,$20(a0)
00011CA4 117C 000C 0019             		move.b	#$C,$19(a0)
00011CAA 7400                       		moveq	#0,d2
00011CAC 45E8 0037                  		lea	$37(a0),a2
00011CB0 264A                       		movea.l	a2,a3
00011CB2 524A                       		addq.w	#1,a2
00011CB4 7203                       		moveq	#3,d1
00011CB6                            
00011CB6                            Obj60_MakeOrbs:
00011CB6 6100 BD94                  		bsr.w	SingleObjLoad2
00011CBA 6600                       		bne.s	loc_11D90
00011CBC 5213                       		addq.b	#1,(a3)
00011CBE 3A09                       		move.w	a1,d5
00011CC0 0445 D000                  		subi.w	#-$3000,d5
00011CC4 EC4D                       		lsr.w	#6,d5
00011CC6 0245 007F                  		andi.w	#$7F,d5
00011CCA 14C5                       		move.b	d5,(a2)+
00011CCC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011CCE 137C 0006 0024             		move.b	#6,$24(a1)
00011CD4 2368 0004 0004             		move.l	4(a0),4(a1)
00011CDA 3368 0002 0002             		move.w	2(a0),2(a1)
00011CE0 0029 0004 0001             		ori.b	#4,1(a1)
00011CE6 137C 0004 0018             		move.b	#4,$18(a1)
00011CEC 137C 0008 0019             		move.b	#8,$19(a1)
00011CF2 137C 0003 001A             		move.b	#3,$1A(a1)
00011CF8 137C 0098 0020             		move.b	#$98,$20(a1)
00011CFE 1342 0026                  		move.b	d2,$26(a1)
00011D02 0602 0040                  		addi.b	#$40,d2
00011D06 2348 003C                  		move.l	a0,$3C(a1)
00011D0A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011D0E                            
00011D0E                            loc_11D90:
00011D0E 7001                       		moveq	#1,d0
00011D10 0828 0000 0022             		btst	#0,$22(a0)
00011D16 6700                       		beq.s	Obj60_Move
00011D18 4440                       		neg.w	d0
00011D1A                            
00011D1A                            Obj60_Move:
00011D1A 1140 0036                  		move.b	d0,$36(a0)
00011D1E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011D24 5428 0024                  		addq.b	#2,$24(a0)
00011D28 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011D2E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011D34 6700                       		beq.s	locret_11DBC	; if not, branch
00011D36 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011D3A                            
00011D3A                            locret_11DBC:
00011D3A 4E75                       		rts	
00011D3C                            ; ===========================================================================
00011D3C                            
00011D3C                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011D3C 3038 D008                  		move.w	($FFFFD008).w,d0
00011D40 9068 0008                  		sub.w	8(a0),d0
00011D44 6400                       		bcc.s	loc_11DCA
00011D46 4440                       		neg.w	d0
00011D48                            
00011D48                            loc_11DCA:
00011D48 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011D4C 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011D4E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011D52 9068 000C                  		sub.w	$C(a0),d0
00011D56 6400                       		bcc.s	loc_11DDC
00011D58 4440                       		neg.w	d0
00011D5A                            
00011D5A                            loc_11DDC:
00011D5A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011D5E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011D60 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011D64 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011D66 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011D6C                            
00011D6C                            Obj60_Animate:
00011D6C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011D72 6100 8978                  		bsr.w	AnimateSprite
00011D76 6000 0000                  		bra.w	Obj60_ChkDel
00011D7A                            ; ===========================================================================
00011D7A                            
00011D7A                            Obj60_Display:				; XREF: Obj60_Index
00011D7A 6100 B80E                  		bsr.w	SpeedToPos
00011D7E                            
00011D7E                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011D7E 3028 0008                  		move.w	8(a0),d0
00011D82 0240 FF80                  		andi.w	#$FF80,d0
00011D86 3238 F700                  		move.w	($FFFFF700).w,d1
00011D8A 0441 0080                  		subi.w	#$80,d1
00011D8E 0241 FF80                  		andi.w	#$FF80,d1
00011D92 9041                       		sub.w	d1,d0
00011D94 0C40 0280                  		cmpi.w	#$280,d0
00011D98 6200 0000                  		bhi.w	Obj60_ChkGone
00011D9C 6000 B812                  		bra.w	DisplaySprite
00011DA0                            ; ===========================================================================
00011DA0                            
00011DA0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011DA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011DA4 7000                       		moveq	#0,d0
00011DA6 1028 0023                  		move.b	$23(a0),d0
00011DAA 6700                       		beq.s	loc_11E34
00011DAC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011DB2                            
00011DB2                            loc_11E34:
00011DB2 45E8 0037                  		lea	$37(a0),a2
00011DB6 7400                       		moveq	#0,d2
00011DB8 141A                       		move.b	(a2)+,d2
00011DBA 5342                       		subq.w	#1,d2
00011DBC 6500                       		bcs.s	Obj60_Delete
00011DBE                            
00011DBE                            loc_11E40:
00011DBE 7000                       		moveq	#0,d0
00011DC0 101A                       		move.b	(a2)+,d0
00011DC2 ED48                       		lsl.w	#6,d0
00011DC4 0680 00FF D000             		addi.l	#$FFD000,d0
00011DCA 2240                       		movea.l	d0,a1
00011DCC 6100 B820                  		bsr.w	DeleteObject2
00011DD0 51CA FFEC                  		dbf	d2,loc_11E40
00011DD4                            
00011DD4                            Obj60_Delete:
00011DD4 6000 B816                  		bra.w	DeleteObject
00011DD8                            ; ===========================================================================
00011DD8                            
00011DD8                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011DD8 2268 003C                  		movea.l	$3C(a0),a1
00011DDC 0C11 0060                  		cmpi.b	#$60,0(a1)
00011DE0 6600 B80A                  		bne.w	DeleteObject
00011DE4 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011DEA 6600                       		bne.s	Obj60_Circle
00011DEC 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011DF2 6600                       		bne.s	Obj60_Circle
00011DF4 5428 0024                  		addq.b	#2,$24(a0)
00011DF8 5329 0037                  		subq.b	#1,$37(a1)
00011DFC 6600                       		bne.s	Obj60_FireOrb
00011DFE 5429 0024                  		addq.b	#2,$24(a1)
00011E02                            
00011E02                            Obj60_FireOrb:
00011E02 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011E08 0829 0000 0022             		btst	#0,$22(a1)
00011E0E 6700                       		beq.s	Obj60_Display2
00011E10 4468 0010                  		neg.w	$10(a0)
00011E14                            
00011E14                            Obj60_Display2:
00011E14 6000 B79A                  		bra.w	DisplaySprite
00011E18                            ; ===========================================================================
00011E18                            
00011E18                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011E18 1028 0026                  		move.b	$26(a0),d0
00011E1C 4EB9 0000 29BA             		jsr	(CalcSine).l
00011E22 E841                       		asr.w	#4,d1
00011E24 D269 0008                  		add.w	8(a1),d1
00011E28 3141 0008                  		move.w	d1,8(a0)
00011E2C E840                       		asr.w	#4,d0
00011E2E D069 000C                  		add.w	$C(a1),d0
00011E32 3140 000C                  		move.w	d0,$C(a0)
00011E36 1029 0036                  		move.b	$36(a1),d0
00011E3A D128 0026                  		add.b	d0,$26(a0)
00011E3E 6000 B770                  		bra.w	DisplaySprite
00011E42                            ; ===========================================================================
00011E42                            
00011E42                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011E42 6100 B746                  		bsr.w	SpeedToPos
00011E46 4A28 0001                  		tst.b	1(a0)
00011E4A 6A00 B7A0                  		bpl.w	DeleteObject
00011E4E 6000 B760                  		bra.w	DisplaySprite
00011E52                            ; ===========================================================================
00011E52                            Ani_obj60:
00011E52                            	include "_anim\obj60.asm"
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            ; Animation script - Orbinaut enemy
00011E52                            ; ---------------------------------------------------------------------------
00011E52 0000                       		dc.w byte_11EDA-Ani_obj60
00011E54 0000                       		dc.w byte_11EDE-Ani_obj60
00011E56 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011E5A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011E60                            		even
00011E60                            		even
00011E60                            
00011E60                            ; ---------------------------------------------------------------------------
00011E60                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011E60                            ; ---------------------------------------------------------------------------
00011E60                            Map_obj60:
00011E60                            	include "_maps\obj60.asm"
00011E60                            ; ---------------------------------------------------------------------------
00011E60                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011E60                            ; ---------------------------------------------------------------------------
00011E60 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00011E64 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00011E68 01                         byte_11EEC:	dc.b 1
00011E69 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011E6E 01                         byte_11EF2:	dc.b 1
00011E6F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00011E74 01                         byte_11EF8:	dc.b 1
00011E75 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00011E7A 01                         byte_11EFE:	dc.b 1
00011E7B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00011E80                            		even
00011E80                            		even
00011E80                            
00011E80                            ; ===========================================================================
00011E80                            ; ---------------------------------------------------------------------------
00011E80                            ; Object 16 - harpoon (LZ)
00011E80                            ; ---------------------------------------------------------------------------
00011E80                            
00011E80                            Obj16:					; XREF: Obj_Index
00011E80 7000                       		moveq	#0,d0
00011E82 1028 0024                  		move.b	$24(a0),d0
00011E86 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00011E8A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00011E8E                            ; ===========================================================================
00011E8E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00011E90 0000                       		dc.w Obj16_Move-Obj16_Index
00011E92 0000                       		dc.w Obj16_Wait-Obj16_Index
00011E94                            ; ===========================================================================
00011E94                            
00011E94                            Obj16_Main:				; XREF: Obj16_Index
00011E94 5428 0024                  		addq.b	#2,$24(a0)
00011E98 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00011EA0 317C 03CC 0002             		move.w	#$3CC,2(a0)
00011EA6 0028 0004 0001             		ori.b	#4,1(a0)
00011EAC 117C 0004 0018             		move.b	#4,$18(a0)
00011EB2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011EB8 117C 0014 0019             		move.b	#$14,$19(a0)
00011EBE 317C 003C 0030             		move.w	#60,$30(a0)
00011EC4                            
00011EC4                            Obj16_Move:				; XREF: Obj16_Index
00011EC4 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00011ECA 6100 8820                  		bsr.w	AnimateSprite
00011ECE 7000                       		moveq	#0,d0
00011ED0 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00011ED4 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00011EDA 6000 D76C                  		bra.w	MarkObjGone
00011EDE                            ; ===========================================================================
00011EDE 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00011EE4                            ; ===========================================================================
00011EE4                            
00011EE4                            Obj16_Wait:				; XREF: Obj16_Index
00011EE4 5368 0030                  		subq.w	#1,$30(a0)
00011EE8 6A00                       		bpl.s	Obj16_ChkDel
00011EEA 317C 003C 0030             		move.w	#60,$30(a0)
00011EF0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00011EF4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00011EFA                            
00011EFA                            Obj16_ChkDel:
00011EFA 6000 D74C                  		bra.w	MarkObjGone
00011EFE                            ; ===========================================================================
00011EFE                            Ani_obj16:
00011EFE                            	include "_anim\obj16.asm"
00011EFE                            ; ---------------------------------------------------------------------------
00011EFE                            ; Animation script - harpoon (LZ)
00011EFE                            ; ---------------------------------------------------------------------------
00011EFE 0000                       		dc.w byte_11F8A-Ani_obj16
00011F00 0000                       		dc.w byte_11F8E-Ani_obj16
00011F02 0000                       		dc.w byte_11F92-Ani_obj16
00011F04 0000                       		dc.w byte_11F96-Ani_obj16
00011F06 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00011F0A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00011F0E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00011F12 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00011F16                            		even
00011F16                            		even
00011F16                            
00011F16                            ; ---------------------------------------------------------------------------
00011F16                            ; Sprite mappings - harpoon (LZ)
00011F16                            ; ---------------------------------------------------------------------------
00011F16                            Map_obj16:
00011F16                            	include "_maps\obj16.asm"
00011F16                            ; ---------------------------------------------------------------------------
00011F16                            ; Sprite mappings - harpoon (LZ)
00011F16                            ; ---------------------------------------------------------------------------
00011F16 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00011F1A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00011F1E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00011F22 01                         byte_11FA6:	dc.b 1
00011F23 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00011F28 01                         byte_11FAC:	dc.b 1
00011F29 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00011F2E 02                         byte_11FB2:	dc.b 2
00011F2F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00011F34 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00011F39 01                         byte_11FBD:	dc.b 1
00011F3A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00011F3F 01                         byte_11FC3:	dc.b 1
00011F40 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00011F45 02                         byte_11FC9:	dc.b 2
00011F46 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00011F4B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00011F50                            		even
00011F50                            		even
00011F50                            
00011F50                            ; ===========================================================================
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            ; Object 61 - blocks (LZ)
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            
00011F50                            Obj61:					; XREF: Obj_Index
00011F50 7000                       		moveq	#0,d0
00011F52 1028 0024                  		move.b	$24(a0),d0
00011F56 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00011F5A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00011F5E                            ; ===========================================================================
00011F5E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00011F60 0000                       		dc.w Obj61_Action-Obj61_Index
00011F62                            
00011F62 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00011F64 200C                       		dc.b $20, $C
00011F66 1010                       		dc.b $10, $10
00011F68 1010                       		dc.b $10, $10
00011F6A                            ; ===========================================================================
00011F6A                            
00011F6A                            Obj61_Main:				; XREF: Obj61_Index
00011F6A 5428 0024                  		addq.b	#2,$24(a0)
00011F6E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00011F76 317C 43E6 0002             		move.w	#$43E6,2(a0)
00011F7C 117C 0004 0001             		move.b	#4,1(a0)
00011F82 117C 0003 0018             		move.b	#3,$18(a0)
00011F88 7000                       		moveq	#0,d0
00011F8A 1028 0028                  		move.b	$28(a0),d0
00011F8E E648                       		lsr.w	#3,d0
00011F90 0240 000E                  		andi.w	#$E,d0
00011F94 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00011F98 115A 0019                  		move.b	(a2)+,$19(a0)
00011F9C 1152 0016                  		move.b	(a2),$16(a0)
00011FA0 E248                       		lsr.w	#1,d0
00011FA2 1140 001A                  		move.b	d0,$1A(a0)
00011FA6 3168 0008 0034             		move.w	8(a0),$34(a0)
00011FAC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011FB2 1028 0028                  		move.b	$28(a0),d0
00011FB6 0200 000F                  		andi.b	#$F,d0
00011FBA 6700                       		beq.s	Obj61_Action
00011FBC 0C00 0007                  		cmpi.b	#7,d0
00011FC0 6700                       		beq.s	Obj61_Action
00011FC2 117C 0001 0038             		move.b	#1,$38(a0)
00011FC8                            
00011FC8                            Obj61_Action:				; XREF: Obj61_Index
00011FC8 3F28 0008                  		move.w	8(a0),-(sp)
00011FCC 7000                       		moveq	#0,d0
00011FCE 1028 0028                  		move.b	$28(a0),d0
00011FD2 0240 000F                  		andi.w	#$F,d0
00011FD6 D040                       		add.w	d0,d0
00011FD8 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00011FDC 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00011FE0 381F                       		move.w	(sp)+,d4
00011FE2 4A28 0001                  		tst.b	1(a0)
00011FE6 6A00                       		bpl.s	Obj61_ChkDel
00011FE8 7200                       		moveq	#0,d1
00011FEA 1228 0019                  		move.b	$19(a0),d1
00011FEE 0641 000B                  		addi.w	#$B,d1
00011FF2 7400                       		moveq	#0,d2
00011FF4 1428 0016                  		move.b	$16(a0),d2
00011FF8 3602                       		move.w	d2,d3
00011FFA 5243                       		addq.w	#1,d3
00011FFC 6100 D972                  		bsr.w	SolidObject
00012000 1144 003F                  		move.b	d4,$3F(a0)
00012004 6100 0000                  		bsr.w	loc_12180
00012008                            
00012008                            Obj61_ChkDel:
00012008 3028 0034                  		move.w	$34(a0),d0
0001200C 0240 FF80                  		andi.w	#$FF80,d0
00012010 3238 F700                  		move.w	($FFFFF700).w,d1
00012014 0441 0080                  		subi.w	#$80,d1
00012018 0241 FF80                  		andi.w	#$FF80,d1
0001201C 9041                       		sub.w	d1,d0
0001201E 0C40 0280                  		cmpi.w	#$280,d0
00012022 6200 B5C8                  		bhi.w	DeleteObject
00012026 6000 B588                  		bra.w	DisplaySprite
0001202A                            ; ===========================================================================
0001202A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001202E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012032 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012036 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001203A                            ; ===========================================================================
0001203A                            
0001203A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001203A 4E75                       		rts	
0001203C                            ; ===========================================================================
0001203C                            
0001203C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001203C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012040 6600                       		bne.s	loc_120D6	; if yes, branch
00012042 0828 0003 0022             		btst	#3,$22(a0)
00012048 6700                       		beq.s	locret_120D4
0001204A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
00012050                            
00012050                            locret_120D4:
00012050 4E75                       		rts	
00012052                            ; ===========================================================================
00012052                            
00012052                            loc_120D6:
00012052 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012056 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012058 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001205C 4228 0038                  		clr.b	$38(a0)
00012060 4E75                       		rts	
00012062                            ; ===========================================================================
00012062                            
00012062                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012062 6100 B526                  		bsr.w	SpeedToPos
00012066 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001206A 6100 0000                  		bsr.w	ObjHitFloor
0001206E 4A41                       		tst.w	d1
00012070 6A00 0000                  		bpl.w	locret_12106
00012074 5241                       		addq.w	#1,d1
00012076 D368 000C                  		add.w	d1,$C(a0)
0001207A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001207E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012082                            
00012082                            locret_12106:
00012082 4E75                       		rts	
00012084                            ; ===========================================================================
00012084                            
00012084                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012084 6100 B504                  		bsr.w	SpeedToPos
00012088 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001208C 6100 0000                  		bsr.w	ObjHitCeiling
00012090 4A41                       		tst.w	d1
00012092 6A00 0000                  		bpl.w	locret_12126
00012096 9368 000C                  		sub.w	d1,$C(a0)
0001209A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001209E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000120A2                            
000120A2                            locret_12126:
000120A2 4E75                       		rts	
000120A4                            ; ===========================================================================
000120A4                            
000120A4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000120A4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000120AA 6600                       		bne.s	locret_12138	; if not, branch
000120AC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000120B0 4228 0038                  		clr.b	$38(a0)
000120B4                            
000120B4                            locret_12138:
000120B4 4E75                       		rts	
000120B6                            ; ===========================================================================
000120B6                            
000120B6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000120B6 3038 F646                  		move.w	($FFFFF646).w,d0
000120BA 9068 000C                  		sub.w	$C(a0),d0
000120BE 6700                       		beq.s	locret_1217E
000120C0 6400                       		bcc.s	loc_12162
000120C2 0C40 FFFE                  		cmpi.w	#-2,d0
000120C6 6C00                       		bge.s	loc_1214E
000120C8 70FE                       		moveq	#-2,d0
000120CA                            
000120CA                            loc_1214E:
000120CA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000120CE 6100 0000                  		bsr.w	ObjHitCeiling
000120D2 4A41                       		tst.w	d1
000120D4 6A00 0000                  		bpl.w	locret_12160
000120D8 9368 000C                  		sub.w	d1,$C(a0)
000120DC                            
000120DC                            locret_12160:
000120DC 4E75                       		rts	
000120DE                            ; ===========================================================================
000120DE                            
000120DE                            loc_12162:				; XREF: Obj61_Type07
000120DE 0C40 0002                  		cmpi.w	#2,d0
000120E2 6F00                       		ble.s	loc_1216A
000120E4 7002                       		moveq	#2,d0
000120E6                            
000120E6                            loc_1216A:
000120E6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000120EA 6100 0000                  		bsr.w	ObjHitFloor
000120EE 4A41                       		tst.w	d1
000120F0 6A00 0000                  		bpl.w	locret_1217E
000120F4 5241                       		addq.w	#1,d1
000120F6 D368 000C                  		add.w	d1,$C(a0)
000120FA                            
000120FA                            locret_1217E:
000120FA 4E75                       		rts	
000120FC                            ; ===========================================================================
000120FC                            
000120FC                            loc_12180:				; XREF: Obj61_Action
000120FC 4A28 0038                  		tst.b	$38(a0)
00012100 6700                       		beq.s	locret_121C0
00012102 0828 0003 0022             		btst	#3,$22(a0)
00012108 6600                       		bne.s	loc_1219A
0001210A 4A28 003E                  		tst.b	$3E(a0)
0001210E 6700                       		beq.s	locret_121C0
00012110 5928 003E                  		subq.b	#4,$3E(a0)
00012114 6000                       		bra.s	loc_121A6
00012116                            ; ===========================================================================
00012116                            
00012116                            loc_1219A:
00012116 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001211C 6700                       		beq.s	locret_121C0
0001211E 5828 003E                  		addq.b	#4,$3E(a0)
00012122                            
00012122                            loc_121A6:
00012122 1028 003E                  		move.b	$3E(a0),d0
00012126 4EB9 0000 29BA             		jsr	(CalcSine).l
0001212C 323C 0400                  		move.w	#$400,d1
00012130 C1C1                       		muls.w	d1,d0
00012132 4840                       		swap	d0
00012134 D068 0030                  		add.w	$30(a0),d0
00012138 3140 000C                  		move.w	d0,$C(a0)
0001213C                            
0001213C                            locret_121C0:
0001213C 4E75                       		rts	
0001213E                            ; ===========================================================================
0001213E                            ; ---------------------------------------------------------------------------
0001213E                            ; Sprite mappings - blocks (LZ)
0001213E                            ; ---------------------------------------------------------------------------
0001213E                            Map_obj61:
0001213E                            	include "_maps\obj61.asm"
0001213E                            ; ---------------------------------------------------------------------------
0001213E                            ; Sprite mappings - blocks (LZ)
0001213E                            ; ---------------------------------------------------------------------------
0001213E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012142 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012146 01                         byte_121CA:	dc.b 1
00012147 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001214C 02                         byte_121D0:	dc.b 2
0001214D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012152 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012157 01                         byte_121DB:	dc.b 1
00012158 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001215D 01                         byte_121E1:	dc.b 1
0001215E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012164 00                         		even
00012164 00                         		even
00012164                            
00012164                            ; ===========================================================================
00012164                            ; ---------------------------------------------------------------------------
00012164                            ; Object 62 - gargoyle head (LZ)
00012164                            ; ---------------------------------------------------------------------------
00012164                            
00012164                            Obj62:					; XREF: Obj_Index
00012164 7000                       		moveq	#0,d0
00012166 1028 0024                  		move.b	$24(a0),d0
0001216A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001216E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012172 6000 D4D4                  		bra.w	MarkObjGone
00012176                            ; ===========================================================================
00012176 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012178 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001217A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001217C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001217E                            
0001217E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012186                            ; ===========================================================================
00012186                            
00012186                            Obj62_Main:				; XREF: Obj62_Index
00012186 5428 0024                  		addq.b	#2,$24(a0)
0001218A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012192 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012198 0028 0004 0001             		ori.b	#4,1(a0)
0001219E 117C 0003 0018             		move.b	#3,$18(a0)
000121A4 117C 0010 0019             		move.b	#$10,$19(a0)
000121AA 1028 0028                  		move.b	$28(a0),d0	; get object type
000121AE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000121B2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000121B8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000121BE 0228 000F 0028             		andi.b	#$F,$28(a0)
000121C4                            
000121C4                            Obj62_MakeFire:				; XREF: Obj62_Index
000121C4 5328 001E                  		subq.b	#1,$1E(a0)
000121C8 6600                       		bne.s	Obj62_NoFire
000121CA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000121D0 6100 B658                  		bsr.w	ChkObjOnScreen
000121D4 6600                       		bne.s	Obj62_NoFire
000121D6 6100 B85E                  		bsr.w	SingleObjLoad
000121DA 6600                       		bne.s	Obj62_NoFire
000121DC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000121E0 5829 0024                  		addq.b	#4,$24(a1)
000121E4 3368 0008 0008             		move.w	8(a0),8(a1)
000121EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121F0 1368 0001 0001             		move.b	1(a0),1(a1)
000121F6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121FC                            
000121FC                            Obj62_NoFire:
000121FC 4E75                       		rts	
000121FE                            ; ===========================================================================
000121FE                            
000121FE                            Obj62_FireBall:				; XREF: Obj62_Index
000121FE 5428 0024                  		addq.b	#2,$24(a0)
00012202 117C 0008 0016             		move.b	#8,$16(a0)
00012208 117C 0008 0017             		move.b	#8,$17(a0)
0001220E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012216 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001221C 0028 0004 0001             		ori.b	#4,1(a0)
00012222 117C 0004 0018             		move.b	#4,$18(a0)
00012228 117C 0098 0020             		move.b	#$98,$20(a0)
0001222E 117C 0008 0019             		move.b	#8,$19(a0)
00012234 117C 0002 001A             		move.b	#2,$1A(a0)
0001223A 5068 000C                  		addq.w	#8,$C(a0)
0001223E 317C 0200 0010             		move.w	#$200,$10(a0)
00012244 0828 0000 0022             		btst	#0,$22(a0)
0001224A 6600                       		bne.s	Obj62_Sound
0001224C 4468 0010                  		neg.w	$10(a0)
00012250                            
00012250                            Obj62_Sound:
00012250 303C 00AE                  		move.w	#$AE,d0
00012254 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001225A                            
0001225A                            Obj62_AniFire:				; XREF: Obj62_Index
0001225A 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001225E 0200 0007                  		andi.b	#7,d0
00012262 6600                       		bne.s	Obj62_StopFire
00012264 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001226A                            
0001226A                            Obj62_StopFire:
0001226A 6100 B31E                  		bsr.w	SpeedToPos
0001226E 0828 0000 0022             		btst	#0,$22(a0)
00012274 6600                       		bne.s	Obj62_StopFire2
00012276 76F8                       		moveq	#-8,d3
00012278 6100 0000                  		bsr.w	ObjHitWallLeft
0001227C 4A41                       		tst.w	d1
0001227E 6B00 B36C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012282 4E75                       		rts	
00012284                            ; ===========================================================================
00012284                            
00012284                            Obj62_StopFire2:
00012284 7608                       		moveq	#8,d3
00012286 6100 0000                  		bsr.w	ObjHitWallRight
0001228A 4A41                       		tst.w	d1
0001228C 6B00 B35E                  		bmi.w	DeleteObject
00012290 4E75                       		rts	
00012292                            ; ===========================================================================
00012292                            ; ---------------------------------------------------------------------------
00012292                            ; Sprite mappings - gargoyle head (LZ)
00012292                            ; ---------------------------------------------------------------------------
00012292                            Map_obj62:
00012292                            	include "_maps\obj62.asm"
00012292                            ; ---------------------------------------------------------------------------
00012292                            ; Sprite mappings - gargoyle head (LZ)
00012292                            ; ---------------------------------------------------------------------------
00012292 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012296 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001229A 03                         byte_12320:	dc.b 3
0001229B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000122A0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000122A5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000122AA 01                         byte_12330:	dc.b 1
000122AB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000122B0 01                         byte_12336:	dc.b 1
000122B1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000122B6                            		even
000122B6                            		even
000122B6                            
000122B6                            ; ===========================================================================
000122B6                            ; ---------------------------------------------------------------------------
000122B6                            ; Object 63 - platforms	on a conveyor belt (LZ)
000122B6                            ; ---------------------------------------------------------------------------
000122B6                            
000122B6                            Obj63:					; XREF: Obj_Index
000122B6 7000                       		moveq	#0,d0
000122B8 1028 0024                  		move.b	$24(a0),d0
000122BC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000122C0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000122C4 3028 0030                  		move.w	$30(a0),d0
000122C8 0240 FF80                  		andi.w	#$FF80,d0
000122CC 3238 F700                  		move.w	($FFFFF700).w,d1
000122D0 0441 0080                  		subi.w	#$80,d1
000122D4 0241 FF80                  		andi.w	#$FF80,d1
000122D8 9041                       		sub.w	d1,d0
000122DA 0C40 0280                  		cmpi.w	#$280,d0
000122DE 6200                       		bhi.s	loc_1236A
000122E0                            
000122E0                            Obj63_Display:				; XREF: loc_1236A
000122E0 6000 B2CE                  		bra.w	DisplaySprite
000122E4                            ; ===========================================================================
000122E4                            
000122E4                            loc_1236A:				; XREF: Obj63
000122E4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000122EA 6600                       		bne.s	loc_12378
000122EC 0C40 FF80                  		cmpi.w	#-$80,d0
000122F0 64EE                       		bcc.s	Obj63_Display
000122F2                            
000122F2                            loc_12378:
000122F2 1028 002F                  		move.b	$2F(a0),d0
000122F6 6A00 B2F4                  		bpl.w	DeleteObject
000122FA 0240 007F                  		andi.w	#$7F,d0
000122FE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012302 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012308 6000 B2E2                  		bra.w	DeleteObject
0001230C                            ; ===========================================================================
0001230C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001230E 0000                       		dc.w loc_124B2-Obj63_Index
00012310 0000                       		dc.w loc_124C2-Obj63_Index
00012312 0000                       		dc.w loc_124DE-Obj63_Index
00012314                            ; ===========================================================================
00012314                            
00012314                            Obj63_Main:				; XREF: Obj63_Index
00012314 1028 0028                  		move.b	$28(a0),d0
00012318 6B00 0000                  		bmi.w	loc_12460
0001231C 5428 0024                  		addq.b	#2,$24(a0)
00012320 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012328 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001232E 0028 0004 0001             		ori.b	#4,1(a0)
00012334 117C 0010 0019             		move.b	#$10,$19(a0)
0001233A 117C 0004 0018             		move.b	#4,$18(a0)
00012340 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012346 6600                       		bne.s	loc_123E2
00012348 5828 0024                  		addq.b	#4,$24(a0)
0001234C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012352 117C 0001 0018             		move.b	#1,$18(a0)
00012358 6000 0000                  		bra.w	loc_124DE
0001235C                            ; ===========================================================================
0001235C                            
0001235C                            loc_123E2:
0001235C 117C 0004 001A             		move.b	#4,$1A(a0)
00012362 7000                       		moveq	#0,d0
00012364 1028 0028                  		move.b	$28(a0),d0
00012368 3200                       		move.w	d0,d1
0001236A E648                       		lsr.w	#3,d0
0001236C 0240 001E                  		andi.w	#$1E,d0
00012370 45FA 0000                  		lea	Obj63_Data(pc),a2
00012374 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012378 315A 0038                  		move.w	(a2)+,$38(a0)
0001237C 315A 0030                  		move.w	(a2)+,$30(a0)
00012380 214A 003C                  		move.l	a2,$3C(a0)
00012384 0241 000F                  		andi.w	#$F,d1
00012388 E549                       		lsl.w	#2,d1
0001238A 1141 0038                  		move.b	d1,$38(a0)
0001238E 117C 0004 003A             		move.b	#4,$3A(a0)
00012394 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012398 6700                       		beq.s	loc_1244C
0001239A 117C 0001 003B             		move.b	#1,$3B(a0)
000123A0 4428 003A                  		neg.b	$3A(a0)
000123A4 7200                       		moveq	#0,d1
000123A6 1228 0038                  		move.b	$38(a0),d1
000123AA D228 003A                  		add.b	$3A(a0),d1
000123AE B228 0039                  		cmp.b	$39(a0),d1
000123B2 6500                       		bcs.s	loc_12448
000123B4 1001                       		move.b	d1,d0
000123B6 7200                       		moveq	#0,d1
000123B8 4A00                       		tst.b	d0
000123BA 6A00                       		bpl.s	loc_12448
000123BC 1228 0039                  		move.b	$39(a0),d1
000123C0 5901                       		subq.b	#4,d1
000123C2                            
000123C2                            loc_12448:
000123C2 1141 0038                  		move.b	d1,$38(a0)
000123C6                            
000123C6                            loc_1244C:
000123C6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000123CC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000123D2 6100 0000                  		bsr.w	Obj63_ChangeDir
000123D6 6000 0000                  		bra.w	loc_124B2
000123DA                            ; ===========================================================================
000123DA                            
000123DA                            loc_12460:				; XREF: Obj63_Main
000123DA 1140 002F                  		move.b	d0,$2F(a0)
000123DE 0240 007F                  		andi.w	#$7F,d0
000123E2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000123E6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000123EC 6600 B1FE                  		bne.w	DeleteObject
000123F0 D040                       		add.w	d0,d0
000123F2 0240 001E                  		andi.w	#$1E,d0
000123F6 0640 0070                  		addi.w	#$70,d0
000123FA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012400 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012404 321A                       		move.w	(a2)+,d1
00012406 2248                       		movea.l	a0,a1
00012408 6000                       		bra.s	Obj63_MakePtfms
0001240A                            ; ===========================================================================
0001240A                            
0001240A                            Obj63_Loop:
0001240A 6100 B62A                  		bsr.w	SingleObjLoad
0001240E 6600                       		bne.s	loc_124AA
00012410                            
00012410                            Obj63_MakePtfms:			; XREF: loc_12460
00012410 12BC 0063                  		move.b	#$63,0(a1)
00012414 335A 0008                  		move.w	(a2)+,8(a1)
00012418 335A 000C                  		move.w	(a2)+,$C(a1)
0001241C 301A                       		move.w	(a2)+,d0
0001241E 1340 0028                  		move.b	d0,$28(a1)
00012422                            
00012422                            loc_124AA:
00012422 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012426                            
00012426 588F                       		addq.l	#4,sp
00012428 4E75                       		rts	
0001242A                            ; ===========================================================================
0001242A                            
0001242A                            loc_124B2:				; XREF: Obj63_Index
0001242A 7200                       		moveq	#0,d1
0001242C 1228 0019                  		move.b	$19(a0),d1
00012430 4EB9 0000 7440             		jsr	(PlatformObject).l
00012436 6000 0000                  		bra.w	sub_12502
0001243A                            ; ===========================================================================
0001243A                            
0001243A                            loc_124C2:				; XREF: Obj63_Index
0001243A 7200                       		moveq	#0,d1
0001243C 1228 0019                  		move.b	$19(a0),d1
00012440 4EB9 0000 75B4             		jsr	(ExitPlatform).l
00012446 3F28 0008                  		move.w	8(a0),-(sp)
0001244A 6100 0000                  		bsr.w	sub_12502
0001244E 341F                       		move.w	(sp)+,d2
00012450 4EF9 0000 7B1E             		jmp	(MvSonicOnPtfm2).l
00012456                            ; ===========================================================================
00012456                            
00012456                            loc_124DE:				; XREF: Obj63_Index
00012456 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001245A 0240 0003                  		andi.w	#3,d0
0001245E 6600                       		bne.s	loc_124FC
00012460 7201                       		moveq	#1,d1
00012462 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012466 6700                       		beq.s	loc_124F2
00012468 4401                       		neg.b	d1
0001246A                            
0001246A                            loc_124F2:
0001246A D328 001A                  		add.b	d1,$1A(a0)
0001246E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012474                            
00012474                            loc_124FC:
00012474 588F                       		addq.l	#4,sp
00012476 6000 D1D0                  		bra.w	MarkObjGone
0001247A                            
0001247A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001247A                            
0001247A                            
0001247A                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001247A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001247E 6700                       		beq.s	loc_12520
00012480 4A28 003B                  		tst.b	$3B(a0)
00012484 6600                       		bne.s	loc_12520
00012486 117C 0001 003B             		move.b	#1,$3B(a0)
0001248C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012492 4428 003A                  		neg.b	$3A(a0)
00012496 6000                       		bra.s	loc_12534
00012498                            ; ===========================================================================
00012498                            
00012498                            loc_12520:
00012498 3028 0008                  		move.w	8(a0),d0
0001249C B068 0034                  		cmp.w	$34(a0),d0
000124A0 6600                       		bne.s	loc_1256A
000124A2 3028 000C                  		move.w	$C(a0),d0
000124A6 B068 0036                  		cmp.w	$36(a0),d0
000124AA 6600                       		bne.s	loc_1256A
000124AC                            
000124AC                            loc_12534:
000124AC 7200                       		moveq	#0,d1
000124AE 1228 0038                  		move.b	$38(a0),d1
000124B2 D228 003A                  		add.b	$3A(a0),d1
000124B6 B228 0039                  		cmp.b	$39(a0),d1
000124BA 6500                       		bcs.s	loc_12552
000124BC 1001                       		move.b	d1,d0
000124BE 7200                       		moveq	#0,d1
000124C0 4A00                       		tst.b	d0
000124C2 6A00                       		bpl.s	loc_12552
000124C4 1228 0039                  		move.b	$39(a0),d1
000124C8 5901                       		subq.b	#4,d1
000124CA                            
000124CA                            loc_12552:
000124CA 1141 0038                  		move.b	d1,$38(a0)
000124CE 2268 003C                  		movea.l	$3C(a0),a1
000124D2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000124D8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000124DE 6100 0000                  		bsr.w	Obj63_ChangeDir
000124E2                            
000124E2                            loc_1256A:
000124E2 6100 B0A6                  		bsr.w	SpeedToPos
000124E6 4E75                       		rts	
000124E8                            ; End of function sub_12502
000124E8                            
000124E8                            
000124E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000124E8                            
000124E8                            
000124E8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000124E8 7000                       		moveq	#0,d0
000124EA 343C FF00                  		move.w	#-$100,d2
000124EE 3028 0008                  		move.w	8(a0),d0
000124F2 9068 0034                  		sub.w	$34(a0),d0
000124F6 6400                       		bcc.s	loc_12584
000124F8 4440                       		neg.w	d0
000124FA 4442                       		neg.w	d2
000124FC                            
000124FC                            loc_12584:
000124FC 7200                       		moveq	#0,d1
000124FE 363C FF00                  		move.w	#-$100,d3
00012502 3228 000C                  		move.w	$C(a0),d1
00012506 9268 0036                  		sub.w	$36(a0),d1
0001250A 6400                       		bcc.s	loc_12598
0001250C 4441                       		neg.w	d1
0001250E 4443                       		neg.w	d3
00012510                            
00012510                            loc_12598:
00012510 B240                       		cmp.w	d0,d1
00012512 6500                       		bcs.s	loc_125C2
00012514 3028 0008                  		move.w	8(a0),d0
00012518 9068 0034                  		sub.w	$34(a0),d0
0001251C 6700                       		beq.s	loc_125AE
0001251E 48C0                       		ext.l	d0
00012520 E180                       		asl.l	#8,d0
00012522 81C1                       		divs.w	d1,d0
00012524 4440                       		neg.w	d0
00012526                            
00012526                            loc_125AE:
00012526 3140 0010                  		move.w	d0,$10(a0)
0001252A 3143 0012                  		move.w	d3,$12(a0)
0001252E 4840                       		swap	d0
00012530 3140 000A                  		move.w	d0,$A(a0)
00012534 4268 000E                  		clr.w	$E(a0)
00012538 4E75                       		rts	
0001253A                            ; ===========================================================================
0001253A                            
0001253A                            loc_125C2:				; XREF: Obj63_ChangeDir
0001253A 3228 000C                  		move.w	$C(a0),d1
0001253E 9268 0036                  		sub.w	$36(a0),d1
00012542 6700                       		beq.s	loc_125D4
00012544 48C1                       		ext.l	d1
00012546 E181                       		asl.l	#8,d1
00012548 83C0                       		divs.w	d0,d1
0001254A 4441                       		neg.w	d1
0001254C                            
0001254C                            loc_125D4:
0001254C 3141 0012                  		move.w	d1,$12(a0)
00012550 3142 0010                  		move.w	d2,$10(a0)
00012554 4841                       		swap	d1
00012556 3141 000E                  		move.w	d1,$E(a0)
0001255A 4268 000A                  		clr.w	$A(a0)
0001255E 4E75                       		rts	
00012560                            ; End of function Obj63_ChangeDir
00012560                            
00012560                            ; ===========================================================================
00012560 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012562 0000                       		dc.w word_12610-Obj63_Data
00012564 0000                       		dc.w word_12628-Obj63_Data
00012566 0000                       		dc.w word_1263C-Obj63_Data
00012568 0000                       		dc.w word_12650-Obj63_Data
0001256A 0000                       		dc.w word_12668-Obj63_Data
0001256C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001257C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012588 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012598 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000125A0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000125B4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000125C8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000125E0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000125F4                            
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            Map_obj63:
000125F4                            	include "_maps\obj63.asm"
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000125F4                            ; ---------------------------------------------------------------------------
000125F4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000125F8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000125FC 0000                       		dc.w byte_1269E-Map_obj63
000125FE 01                         byte_12686:	dc.b 1
000125FF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012604 01                         byte_1268C:	dc.b 1
00012605 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001260A 01                         byte_12692:	dc.b 1
0001260B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012610 01                         byte_12698:	dc.b 1
00012611 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012616 01                         byte_1269E:	dc.b 1
00012617 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001261C                            		even
0001261C                            		even
0001261C                            
0001261C                            ; ===========================================================================
0001261C                            ; ---------------------------------------------------------------------------
0001261C                            ; Object 64 - bubbles (LZ)
0001261C                            ; ---------------------------------------------------------------------------
0001261C                            
0001261C                            Obj64:					; XREF: Obj_Index
0001261C 7000                       		moveq	#0,d0
0001261E 1028 0024                  		move.b	$24(a0),d0
00012622 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012626 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001262A                            ; ===========================================================================
0001262A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001262C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001262E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012630 0000                       		dc.w Obj64_Display2-Obj64_Index
00012632 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012634 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012636                            ; ===========================================================================
00012636                            
00012636                            Obj64_Main:				; XREF: Obj64_Index
00012636 5428 0024                  		addq.b	#2,$24(a0)
0001263A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012642 317C 8348 0002             		move.w	#$8348,2(a0)
00012648 117C 0084 0001             		move.b	#$84,1(a0)
0001264E 117C 0010 0019             		move.b	#$10,$19(a0)
00012654 117C 0001 0018             		move.b	#1,$18(a0)
0001265A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001265E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012660 5028 0024                  		addq.b	#8,$24(a0)
00012664 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012668 1140 0032                  		move.b	d0,$32(a0)
0001266C 1140 0033                  		move.b	d0,$33(a0)
00012670 117C 0006 001C             		move.b	#6,$1C(a0)
00012676 6000 0000                  		bra.w	Obj64_BblMaker
0001267A                            ; ===========================================================================
0001267A                            
0001267A                            Obj64_Bubble:				; XREF: Obj64_Main
0001267A 1140 001C                  		move.b	d0,$1C(a0)
0001267E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012684 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001268A 4EB9 0000 2994             		jsr	(RandomNumber).l
00012690 1140 0026                  		move.b	d0,$26(a0)
00012694                            
00012694                            Obj64_Animate:				; XREF: Obj64_Index
00012694 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001269A 4EBA 8050                  		jsr	AnimateSprite
0001269E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000126A4 6600                       		bne.s	Obj64_ChkWater
000126A6 117C 0001 002E             		move.b	#1,$2E(a0)
000126AC                            
000126AC                            Obj64_ChkWater:				; XREF: Obj64_Index
000126AC 3038 F646                  		move.w	($FFFFF646).w,d0
000126B0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000126B4 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000126B6                            
000126B6                            Obj64_Burst:				; XREF: Obj64_Wobble
000126B6 117C 0006 0024             		move.b	#6,$24(a0)
000126BC 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000126C0 6000 0000                  		bra.w	Obj64_Display2
000126C4                            ; ===========================================================================
000126C4                            
000126C4                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000126C4 1028 0026                  		move.b	$26(a0),d0
000126C8 5228 0026                  		addq.b	#1,$26(a0)
000126CC 0240 007F                  		andi.w	#$7F,d0
000126D0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000126D6 1031 0000                  		move.b	(a1,d0.w),d0
000126DA 4880                       		ext.w	d0
000126DC D068 0030                  		add.w	$30(a0),d0
000126E0 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000126E4 4A28 002E                  		tst.b	$2E(a0)
000126E8 6700                       		beq.s	Obj64_Display
000126EA 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000126EE 6700                       		beq.s	Obj64_Display	; if not, branch
000126F0                            
000126F0 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000126F4 303C 00AD                  		move.w	#$AD,d0
000126F8 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000126FE 43F8 D000                  		lea	($FFFFD000).w,a1
00012702 4269 0010                  		clr.w	$10(a1)
00012706 4269 0012                  		clr.w	$12(a1)
0001270A 4269 0014                  		clr.w	$14(a1)
0001270E 137C 0015 001C             		move.b	#$15,$1C(a1)
00012714 337C 0023 003E             		move.w	#$23,$3E(a1)
0001271A 137C 0000 003C             		move.b	#0,$3C(a1)
00012720 08A9 0005 0022             		bclr	#5,$22(a1)
00012726 08A9 0004 0022             		bclr	#4,$22(a1)
0001272C 0829 0002 0022             		btst	#2,$22(a1)
00012732 6700 FF82                  		beq.w	Obj64_Burst
00012736 08A9 0002 0022             		bclr	#2,$22(a1)
0001273C 137C 0013 0016             		move.b	#$13,$16(a1)
00012742 137C 0009 0017             		move.b	#9,$17(a1)
00012748 5B69 000C                  		subq.w	#5,$C(a1)
0001274C 6000 FF68                  		bra.w	Obj64_Burst
00012750                            ; ===========================================================================
00012750                            
00012750                            Obj64_Display:				; XREF: Obj64_Wobble
00012750 6100 AE38                  		bsr.w	SpeedToPos
00012754 4A28 0001                  		tst.b	1(a0)
00012758 6A00                       		bpl.s	Obj64_Delete
0001275A 4EFA AE54                  		jmp	DisplaySprite
0001275E                            ; ===========================================================================
0001275E                            
0001275E                            Obj64_Delete:
0001275E 4EFA AE8C                  		jmp	DeleteObject
00012762                            ; ===========================================================================
00012762                            
00012762                            Obj64_Display2:				; XREF: Obj64_Index
00012762 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012768 4EB9 0000 A6EC             		jsr	AnimateSprite
0001276E 4A28 0001                  		tst.b	1(a0)
00012772 6A00                       		bpl.s	Obj64_Delete2
00012774 4EFA AE3A                  		jmp	DisplaySprite
00012778                            ; ===========================================================================
00012778                            
00012778                            Obj64_Delete2:
00012778 4EFA AE72                  		jmp	DeleteObject
0001277C                            ; ===========================================================================
0001277C                            
0001277C                            Obj64_Delete3:				; XREF: Obj64_Index
0001277C 6000 AE6E                  		bra.w	DeleteObject
00012780                            ; ===========================================================================
00012780                            
00012780                            Obj64_BblMaker:				; XREF: Obj64_Index
00012780 4A68 0036                  		tst.w	$36(a0)
00012784 6600                       		bne.s	loc_12874
00012786 3038 F646                  		move.w	($FFFFF646).w,d0
0001278A B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001278E 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012792 4A28 0001                  		tst.b	1(a0)
00012796 6A00 0000                  		bpl.w	Obj64_ChkDel
0001279A 5368 0038                  		subq.w	#1,$38(a0)
0001279E 6A00 0000                  		bpl.w	loc_12914
000127A2 317C 0001 0036             		move.w	#1,$36(a0)
000127A8                            
000127A8                            loc_1283A:
000127A8 4EB9 0000 2994             		jsr	(RandomNumber).l
000127AE 3200                       		move.w	d0,d1
000127B0 0240 0007                  		andi.w	#7,d0
000127B4 0C40 0006                  		cmpi.w	#6,d0
000127B8 64EE                       		bcc.s	loc_1283A
000127BA                            
000127BA 1140 0034                  		move.b	d0,$34(a0)
000127BE 0241 000C                  		andi.w	#$C,d1
000127C2 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000127C8 D2C1                       		adda.w	d1,a1
000127CA 2149 003C                  		move.l	a1,$3C(a0)
000127CE 5328 0032                  		subq.b	#1,$32(a0)
000127D2 6A00                       		bpl.s	loc_12872
000127D4 1168 0033 0032             		move.b	$33(a0),$32(a0)
000127DA 08E8 0007 0036             		bset	#7,$36(a0)
000127E0                            
000127E0                            loc_12872:
000127E0 6000                       		bra.s	loc_1287C
000127E2                            ; ===========================================================================
000127E2                            
000127E2                            loc_12874:				; XREF: Obj64_BblMaker
000127E2 5368 0038                  		subq.w	#1,$38(a0)
000127E6 6A00 0000                  		bpl.w	loc_12914
000127EA                            
000127EA                            loc_1287C:
000127EA 4EB9 0000 2994             		jsr	(RandomNumber).l
000127F0 0240 001F                  		andi.w	#$1F,d0
000127F4 3140 0038                  		move.w	d0,$38(a0)
000127F8 6100 B23C                  		bsr.w	SingleObjLoad
000127FC 6600                       		bne.s	loc_128F8
000127FE 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012802 3368 0008 0008             		move.w	8(a0),8(a1)
00012808 4EB9 0000 2994             		jsr	(RandomNumber).l
0001280E 0240 000F                  		andi.w	#$F,d0
00012812 5140                       		subq.w	#8,d0
00012814 D169 0008                  		add.w	d0,8(a1)
00012818 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001281E 7000                       		moveq	#0,d0
00012820 1028 0034                  		move.b	$34(a0),d0
00012824 2468 003C                  		movea.l	$3C(a0),a2
00012828 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001282E 0828 0007 0036             		btst	#7,$36(a0)
00012834 6700                       		beq.s	loc_128F8
00012836 4EB9 0000 2994             		jsr	(RandomNumber).l
0001283C 0240 0003                  		andi.w	#3,d0
00012840 6600                       		bne.s	loc_128E4
00012842 08E8 0006 0036             		bset	#6,$36(a0)
00012848 6600                       		bne.s	loc_128F8
0001284A 137C 0002 0028             		move.b	#2,$28(a1)
00012850                            
00012850                            loc_128E4:
00012850 4A28 0034                  		tst.b	$34(a0)
00012854 6600                       		bne.s	loc_128F8
00012856 08E8 0006 0036             		bset	#6,$36(a0)
0001285C 6600                       		bne.s	loc_128F8
0001285E 137C 0002 0028             		move.b	#2,$28(a1)
00012864                            
00012864                            loc_128F8:
00012864 5328 0034                  		subq.b	#1,$34(a0)
00012868 6A00                       		bpl.s	loc_12914
0001286A 4EB9 0000 2994             		jsr	(RandomNumber).l
00012870 0240 007F                  		andi.w	#$7F,d0
00012874 0640 0080                  		addi.w	#$80,d0
00012878 D168 0038                  		add.w	d0,$38(a0)
0001287C 4268 0036                  		clr.w	$36(a0)
00012880                            
00012880                            loc_12914:
00012880 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012886 4EB9 0000 A6EC             		jsr	AnimateSprite
0001288C                            
0001288C                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001288C 3028 0008                  		move.w	8(a0),d0
00012890 0240 FF80                  		andi.w	#$FF80,d0
00012894 3238 F700                  		move.w	($FFFFF700).w,d1
00012898 0441 0080                  		subi.w	#$80,d1
0001289C 0241 FF80                  		andi.w	#$FF80,d1
000128A0 9041                       		sub.w	d1,d0
000128A2 0C40 0280                  		cmpi.w	#$280,d0
000128A6 6200 AD44                  		bhi.w	DeleteObject
000128AA 3038 F646                  		move.w	($FFFFF646).w,d0
000128AE B068 000C                  		cmp.w	$C(a0),d0
000128B2 6500 ACFC                  		bcs.w	DisplaySprite
000128B6 4E75                       		rts	
000128B8                            ; ===========================================================================
000128B8                            ; bubble production sequence
000128B8                            
000128B8                            ; 0 = small bubble, 1 =	large bubble
000128B8                            
000128B8 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000128CA                            
000128CA                            ; ===========================================================================
000128CA                            
000128CA                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000128CA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000128CE 6B00                       		bmi.s	loc_12998
000128D0 43F8 D000                  		lea	($FFFFD000).w,a1
000128D4 3029 0008                  		move.w	8(a1),d0
000128D8 3228 0008                  		move.w	8(a0),d1
000128DC 0441 0010                  		subi.w	#$10,d1
000128E0 B240                       		cmp.w	d0,d1
000128E2 6400                       		bcc.s	loc_12998
000128E4 0641 0020                  		addi.w	#$20,d1
000128E8 B240                       		cmp.w	d0,d1
000128EA 6500                       		bcs.s	loc_12998
000128EC 3029 000C                  		move.w	$C(a1),d0
000128F0 3228 000C                  		move.w	$C(a0),d1
000128F4 B240                       		cmp.w	d0,d1
000128F6 6400                       		bcc.s	loc_12998
000128F8 0641 0010                  		addi.w	#$10,d1
000128FC B240                       		cmp.w	d0,d1
000128FE 6500                       		bcs.s	loc_12998
00012900 7001                       		moveq	#1,d0
00012902 4E75                       		rts	
00012904                            ; ===========================================================================
00012904                            
00012904                            loc_12998:
00012904 7000                       		moveq	#0,d0
00012906 4E75                       		rts	
00012908                            ; ===========================================================================
00012908                            Ani_obj64:
00012908                            	include "_anim\obj64.asm"
00012908                            ; ---------------------------------------------------------------------------
00012908                            ; Animation script - bubbles (LZ)
00012908                            ; ---------------------------------------------------------------------------
00012908 0000                       		dc.w byte_129AA-Ani_obj64
0001290A 0000                       		dc.w byte_129B0-Ani_obj64
0001290C 0000                       		dc.w byte_129B6-Ani_obj64
0001290E 0000                       		dc.w byte_129BE-Ani_obj64
00012910 0000                       		dc.w byte_129BE-Ani_obj64
00012912 0000                       		dc.w byte_129C0-Ani_obj64
00012914 0000                       		dc.w byte_129C6-Ani_obj64
00012916 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001291C 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012922 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001292A 04FC                       byte_129BE:	dc.b 4,	$FC
0001292C 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012932 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012938 00                         		even
00012938 00                         		even
00012938                            
00012938                            ; ---------------------------------------------------------------------------
00012938                            ; Sprite mappings - bubbles (LZ)
00012938                            ; ---------------------------------------------------------------------------
00012938                            Map_obj64:
00012938                            	include "_maps\obj64.asm"
00012938                            ; ---------------------------------------------------------------------------
00012938                            ; Sprite mappings - bubbles (LZ)
00012938                            ; ---------------------------------------------------------------------------
00012938 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001293C 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012940 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012944 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012948 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001294C 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012950 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012954 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012958 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001295C 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012960 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012964 0000                       		dc.w byte_12A9C-Map_obj64
00012966 01                         byte_129FA:	dc.b 1
00012967 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001296C 01                         byte_12A00:	dc.b 1
0001296D FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012972 01                         byte_12A06:	dc.b 1
00012973 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012978 01                         byte_12A0C:	dc.b 1
00012979 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001297E 01                         byte_12A12:	dc.b 1
0001297F F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012984 01                         byte_12A18:	dc.b 1
00012985 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001298A 01                         byte_12A1E:	dc.b 1
0001298B F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012990 04                         byte_12A24:	dc.b 4
00012991 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012996 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001299B 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000129A0 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000129A5 04                         byte_12A39:	dc.b 4
000129A6 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000129AB F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000129B0 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000129B5 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000129BA 01                         byte_12A4E:	dc.b 1
000129BB F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000129C0 01                         byte_12A54:	dc.b 1
000129C1 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000129C6 01                         byte_12A5A:	dc.b 1
000129C7 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000129CC 01                         byte_12A60:	dc.b 1
000129CD F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000129D2 01                         byte_12A66:	dc.b 1
000129D3 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000129D8 01                         byte_12A6C:	dc.b 1
000129D9 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000129DE 01                         byte_12A72:	dc.b 1
000129DF F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000129E4 01                         byte_12A78:	dc.b 1
000129E5 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000129EA 01                         byte_12A7E:	dc.b 1
000129EB F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000129F0 01                         byte_12A84:	dc.b 1
000129F1 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000129F6 01                         byte_12A8A:	dc.b 1
000129F7 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000129FC 01                         byte_12A90:	dc.b 1
000129FD F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012A02 01                         byte_12A96:	dc.b 1
00012A03 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012A08 00                         byte_12A9C:	dc.b 0
00012A0A 00                         		even
00012A0A 00                         		even
00012A0A                            
00012A0A                            ; ===========================================================================
00012A0A                            ; ---------------------------------------------------------------------------
00012A0A                            ; Object 65 - waterfalls (LZ)
00012A0A                            ; ---------------------------------------------------------------------------
00012A0A                            
00012A0A                            Obj65:					; XREF: Obj_Index
00012A0A 7000                       		moveq	#0,d0
00012A0C 1028 0024                  		move.b	$24(a0),d0
00012A10 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012A14 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012A18                            ; ===========================================================================
00012A18 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012A1A 0000                       		dc.w Obj65_Animate-Obj65_Index
00012A1C 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012A1E 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012A20 0000                       		dc.w loc_12B36-Obj65_Index
00012A22                            ; ===========================================================================
00012A22                            
00012A22                            Obj65_Main:				; XREF: Obj65_Index
00012A22 5828 0024                  		addq.b	#4,$24(a0)
00012A26 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012A2E 317C 4259 0002             		move.w	#$4259,2(a0)
00012A34 0028 0004 0001             		ori.b	#4,1(a0)
00012A3A 117C 0018 0019             		move.b	#$18,$19(a0)
00012A40 117C 0001 0018             		move.b	#1,$18(a0)
00012A46 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A4A 6A00                       		bpl.s	loc_12AE6
00012A4C 08E8 0007 0002             		bset	#7,2(a0)
00012A52                            
00012A52                            loc_12AE6:
00012A52 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012A56 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012A5A 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012A5E 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012A60 4228 0018                  		clr.b	$18(a0)
00012A64 5528 0024                  		subq.b	#2,$24(a0)
00012A68 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012A6E 6700                       		beq.s	loc_12B0A	; if not, branch
00012A70 117C 0006 0024             		move.b	#6,$24(a0)
00012A76                            
00012A76                            loc_12B0A:
00012A76 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012A7C 6700                       		beq.s	Obj65_Animate	; if not, branch
00012A7E 117C 0008 0024             		move.b	#8,$24(a0)
00012A84                            
00012A84                            Obj65_Animate:				; XREF: Obj65_Index
00012A84 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012A8A 4EB9 0000 A6EC             		jsr	AnimateSprite
00012A90                            
00012A90                            Obj65_ChkDel:				; XREF: Obj65_Index
00012A90 6000 CBB6                  		bra.w	MarkObjGone
00012A94                            ; ===========================================================================
00012A94                            
00012A94                            Obj65_FixHeight:			; XREF: Obj65_Index
00012A94 3038 F646                  		move.w	($FFFFF646).w,d0
00012A98 0440 0010                  		subi.w	#$10,d0
00012A9C 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012AA0 60E2                       		bra.s	Obj65_Animate
00012AA2                            ; ===========================================================================
00012AA2                            
00012AA2                            loc_12B36:				; XREF: Obj65_Index
00012AA2 08A8 0007 0002             		bclr	#7,2(a0)
00012AA8 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012AAE 6600                       		bne.s	Obj65_Animate2
00012AB0 08E8 0007 0002             		bset	#7,2(a0)
00012AB6                            
00012AB6                            Obj65_Animate2:
00012AB6 60CC                       		bra.s	Obj65_Animate
00012AB8                            ; ===========================================================================
00012AB8                            Ani_obj65:
00012AB8                            	include "_anim\obj65.asm"
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8                            ; Animation script - waterfall (LZ)
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8 0000                       		dc.w byte_12B4E-Ani_obj65
00012ABA 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012AC0 00                         		even
00012AC0 00                         		even
00012AC0                            
00012AC0                            ; ---------------------------------------------------------------------------
00012AC0                            ; Sprite mappings - waterfalls (LZ)
00012AC0                            ; ---------------------------------------------------------------------------
00012AC0                            Map_obj65:
00012AC0                            	include "_maps\obj65.asm"
00012AC0                            ; ---------------------------------------------------------------------------
00012AC0                            ; Sprite mappings - waterfalls (LZ)
00012AC0                            ; ---------------------------------------------------------------------------
00012AC0 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012AC4 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012AC8 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012ACC 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012AD0 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012AD4 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012AD8 01                         byte_12B6C:	dc.b 1
00012AD9 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012ADE 02                         byte_12B72:	dc.b 2
00012ADF F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012AE4 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012AE9 02                         byte_12B7D:	dc.b 2
00012AEA F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012AEF 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012AF4 01                         byte_12B88:	dc.b 1
00012AF5 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012AFA 02                         byte_12B8E:	dc.b 2
00012AFB F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012B00 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012B05 01                         byte_12B99:	dc.b 1
00012B06 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012B0B 01                         byte_12B9F:	dc.b 1
00012B0C F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012B11 01                         byte_12BA5:	dc.b 1
00012B12 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012B17 02                         byte_12BAB:	dc.b 2
00012B18 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012B1D 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012B22 02                         byte_12BB6:	dc.b 2
00012B23 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012B28 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012B2D 02                         byte_12BC1:	dc.b 2
00012B2E F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012B33 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012B38 02                         byte_12BCC:	dc.b 2
00012B39 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012B3E F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012B44 00                         		even
00012B44 00                         		even
00012B44                            
00012B44                            ; AARRH!!
00012B44                            
00012B44                            Spin_Dash_dust:
00012B44                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00012B44 7000                       		moveq	#0,d0
00012B46 1028 0024                  		move.b	$24(a0),d0
00012B4A 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00012B4E 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00012B52 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00012B54 0000                       		dc loc_1DD90-off_1DD2E; 1
00012B56 0000                       		dc loc_1DE46-off_1DD2E; 2
00012B58 0000                       		dc loc_1DE4A-off_1DD2E; 3
00012B5A                             
00012B5A                            loc_1DD36:				; DATA XREF: h+6DBA?o
00012B5A 5428 0024                  		addq.b	#2,$24(a0)
00012B5E 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00012B66 0028 0004 0001             		or.b	#4,1(a0)
00012B6C 117C 0001 0018             		move.b	#1,$18(a0)
00012B72 117C 0010 0019             		move.b	#$10,$19(a0)
00012B78 317C 07A0 0002             		move	#$7A0,2(a0)
00012B7E 317C D000 003E             		move	#-$3000,$3E(a0)
00012B84 317C F400 003C             		move	#$F400,$3C(a0)
00012B8A B0FC D1C0                  		cmp	#-$2E40,a0
00012B8E 6700                       		beq.s	loc_1DD8C
00012B90 117C 0001 0034             		move.b	#1,$34(a0)
00012B96                            ;		cmp	#2,($FFFFFF70).w
00012B96                            ;		beq.s	loc_1DD8C
00012B96                            ;		move	#$48C,2(a0)
00012B96                            ;		move	#-$4FC0,$3E(a0)
00012B96                            ;		move	#-$6E80,$3C(a0)
00012B96                             
00012B96                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00012B96                            ;		bsr.w	sub_16D6E
00012B96                             
00012B96                            loc_1DD90:				; DATA XREF: h+6DBA?o
00012B96 3468 003E                  		movea.w	$3E(a0),a2
00012B9A 7000                       		moveq	#0,d0
00012B9C 1028 001C                  		move.b	$1C(a0),d0
00012BA0 D040                       		add	d0,d0
00012BA2 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00012BA6 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00012BAA 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00012BAC 0000                       		dc loc_1DDAC-off_1DDA4; 1
00012BAE 0000                       		dc loc_1DDCC-off_1DDA4; 2
00012BB0 0000                       		dc loc_1DE20-off_1DDA4; 3
00012BB2                             
00012BB2                            loc_1DDAC:				; DATA XREF: h+6E30?o
00012BB2 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00012BB8 4A28 001D                  		tst.b	$1D(a0)
00012BBC 6600                       		bne.s	loc_1DE28
00012BBE 316A 0008 0008             		move	8(a2),8(a0)
00012BC4 117C 0000 0022             		move.b	#0,$22(a0)
00012BCA 0268 7FFF 0002             		and	#$7FFF,2(a0)
00012BD0 6000                       		bra.s	loc_1DE28
00012BD2                             
00012BD2                            loc_1DDCC:				; DATA XREF: h+6E30?o
00012BD2                            ;		cmp.b	#$C,$28(a2)
00012BD2                            ;		bcs.s	loc_1DE3E
00012BD2 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00012BD8 6400                       		bcc.s	loc_1DE3E
00012BDA 4A2A 0039                  		tst.b	$39(a2)
00012BDE 6700                       		beq.s	loc_1DE3E
00012BE0 316A 0008 0008             		move	8(a2),8(a0)
00012BE6 316A 000C 000C             		move	$C(a2),$C(a0)
00012BEC 116A 0022 0022             		move.b	$22(a2),$22(a0)
00012BF2 0228 0001 0022             		and.b	#1,$22(a0)
00012BF8 4A28 0034                  		tst.b	$34(a0)
00012BFC 6700                       		beq.s	loc_1DE06
00012BFE 5968 000C                  		sub	#4,$C(a0)
00012C02                             
00012C02                            loc_1DE06:				; CODE XREF: h+6E8A?j
00012C02 4A28 001D                  		tst.b	$1D(a0)
00012C06 6600                       		bne.s	loc_1DE28
00012C08 0268 7FFF 0002             		and	#$7FFF,2(a0)
00012C0E 4A6A 0002                  		tst	2(a2)
00012C12 6A00                       		bpl.s	loc_1DE28
00012C14 0068 8000 0002             		or	#-$8000,2(a0)
00012C1A                             
00012C1A                            loc_1DE20:				; DATA XREF: h+6E30?o
00012C1A                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00012C1A 43F9 0000 0000             		lea	(off_1DF38).l,a1
00012C20 4EB9 0000 A6EC             		jsr	AnimateSprite
00012C26 6100 0000                  		bsr.w	loc_1DEE4
00012C2A 4EFA A984                  		jmp	DisplaySprite
00012C2E                             
00012C2E                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00012C2E 117C 0000 001C             		move.b	#0,$1C(a0)
00012C34 4E75                       		rts	
00012C36                             
00012C36                            loc_1DE46:				; DATA XREF: h+6DBA?o
00012C36 6000 A9B4                  		bra.w	DeleteObject
00012C3A                             
00012C3A                             
00012C3A                             
00012C3A                            loc_1DE4A:
00012C3A 3468 003E                  	movea.w	$3E(a0),a2
00012C3E 7210                       	moveq	#$10,d1
00012C40 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00012C46 6700                       	beq.s	loc_1DE64
00012C48 7206                       	moveq	#$6,d1
00012C4A 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00012C50 6700                       	beq.s	loc_1DE64
00012C52 117C 0002 0024             	move.b	#2,$24(a0)
00012C58 117C 0000 0032             	move.b	#0,$32(a0)
00012C5E 4E75                       	rts
00012C60                             
00012C60                            loc_1DE64:				; CODE XREF: h+6EE0?j
00012C60 5328 0032                  		subq.b	#1,$32(a0)
00012C64 6A00                       		bpl.s	loc_1DEE0
00012C66 117C 0003 0032             		move.b	#3,$32(a0)
00012C6C 4EBA ADC8                  		jsr	SingleObjLoad
00012C70 6600                       		bne.s	loc_1DEE0
00012C72 1290                       		move.b	0(a0),0(a1)
00012C74 336A 0008 0008             		move	8(a2),8(a1)
00012C7A 336A 000C 000C             		move	$C(a2),$C(a1)
00012C80 4A28 0034                  		tst.b	$34(a0)
00012C84 6700                       		beq.s	loc_1DE9A
00012C86 5941                       		sub	#4,d1
00012C88                             
00012C88                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00012C88 D369 000C                  		add	d1,$C(a1)
00012C8C 137C 0000 0022             		move.b	#0,$22(a1)
00012C92 137C 0003 001C             		move.b	#3,$1C(a1)
00012C98 5429 0024                  		addq.b	#2,$24(a1)
00012C9C 2368 0004 0004             		move.l	4(a0),4(a1)
00012CA2 1368 0001 0001             		move.b	1(a0),1(a1)
00012CA8 137C 0001 0018             		move.b	#1,$18(a1)
00012CAE 137C 0004 0019             		move.b	#4,$19(a1)
00012CB4 3368 0002 0002             		move	2(a0),2(a1)
00012CBA 3368 003E 003E             		move	$3E(a0),$3E(a1)
00012CC0 0269 7FFF 0002             		and	#$7FFF,2(a1)
00012CC6 4A6A 0002                  		tst	2(a2)
00012CCA 6A00                       		bpl.s	loc_1DEE0
00012CCC 0069 8000 0002             		or	#-$8000,2(a1)
00012CD2                             
00012CD2                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00012CD2 6100                       		bsr.s	loc_1DEE4
00012CD4 4E75                       		rts	
00012CD6                             
00012CD6                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00012CD6 7000                       		moveq	#0,d0
00012CD8 1028 001A                  		move.b	$1A(a0),d0
00012CDC B028 0030                  		cmp.b	$30(a0),d0
00012CE0 6700 0000                  		beq.w	locret_1DF36
00012CE4 1140 0030                  		move.b	d0,$30(a0)
00012CE8 45F9 0000 0000             		lea	(off_1E074).l,a2
00012CEE D040                       		add	d0,d0
00012CF0 D4F2 0000                  		add	(a2,d0.w),a2
00012CF4 3A1A                       		move	(a2)+,d5
00012CF6 5345                       		subq	#1,d5
00012CF8 6B00 0000                  		bmi.w	locret_1DF36
00012CFC 3828 003C                  		move $3C(a0),d4
00012D00                             
00012D00                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00012D00 7200                       		moveq	#0,d1
00012D02 321A                       		move	(a2)+,d1
00012D04 3601                       		move	d1,d3
00012D06 E04B                       		lsr.w	#8,d3
00012D08 0243 00F0                  		and	#$F0,d3	; '?'
00012D0C 0643 0010                  		add	#$10,d3
00012D10 0241 0FFF                  		and	#$FFF,d1
00012D14 EB89                       		lsl.l	#5,d1
00012D16 0681 0000 0000             		add.l	#Art_Dust,d1
00012D1C 3404                       		move	d4,d2
00012D1E D843                       		add	d3,d4
00012D20 D843                       		add	d3,d4
00012D22 4EB9 0000 1370             		jsr	(QueueDMATransfer).l
00012D28 51CD FFD6                  		dbf	d5,loc_1DF0A
00012D2C 4E75                           rts
00012D2E                             
00012D2E                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00012D2E 4E75                       		rts	
00012D30 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00012D32 0000                       		dc byte_1DF43-off_1DF38; 1
00012D34 0000                       		dc byte_1DF4F-off_1DF38; 2
00012D36 0000                       		dc byte_1DF58-off_1DF38; 3
00012D38 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00012D3B 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00012D47 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00012D50 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00012D56                            ; -------------------------------------------------------------------------------
00012D56                            ; Unknown Sprite Mappings
00012D56                            ; -------------------------------------------------------------------------------
00012D56                            MapUnc_1DF5E:
00012D56 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00012D58 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00012D5A 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00012D5C 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00012D5E 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00012D60 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00012D62 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00012D64 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00012D66 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00012D68 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00012D6A 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00012D6C 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00012D6E 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00012D70 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00012D72 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00012D74 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00012D76 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00012D78 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00012D7A 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00012D7C 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00012D7E 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00012D80 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00012D82 00                         word_1DF8A:	dc.b 0
00012D83 01                         word_1DF8C:	dc.b 1
00012D84 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00012D89 01                         word_1DF96:	dc.b 1
00012D8A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00012D8F 01                         word_1DFA0:	dc.b 1
00012D90 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00012D95 01                         word_1DFAA:	dc.b 1
00012D96 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00012D9B 01                         word_1DFB4:	dc.b 1
00012D9C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00012DA1 01                         word_1DFBE:	dc.b 1
00012DA2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00012DA7 01                         word_1DFC8:	dc.b 1
00012DA8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00012DAD 01                         word_1DFD2:	dc.b 1
00012DAE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00012DB3 01                         word_1DFDC:	dc.b 1
00012DB4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00012DB9 01                         word_1DFE6:	dc.b 1
00012DBA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00012DBF 01                         word_1DFF0:	dc.b 1
00012DC0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00012DC5 01                         word_1DFFA:	dc.b 1
00012DC6 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00012DCB 02                         word_1E004:	dc.b 2
00012DCC F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00012DD1 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00012DD6 02                         word_1E016:	dc.b 2
00012DD7 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00012DDC 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00012DE1 02                         word_1E028:	dc.b 2
00012DE2 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00012DE7 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00012DEC 02                         word_1E03A:	dc.b 2
00012DED F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00012DF2 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00012DF7 01                         word_1E04C:	dc.b 1
00012DF8 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00012DFD 01                         word_1E056:	dc.b 1
00012DFE F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00012E03 01                         word_1E060:	dc.b 1
00012E04 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00012E09 01                         word_1E06A:	dc.b 1
00012E0A F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00012E0F 00                         	dc.b 0
00012E10 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00012E12 0000                       	dc word_1E0A2-off_1E074; 1
00012E14 0000                       	dc word_1E0A6-off_1E074; 2
00012E16 0000                       	dc word_1E0AA-off_1E074; 3
00012E18 0000                       	dc word_1E0AE-off_1E074; 4
00012E1A 0000                       	dc word_1E0B2-off_1E074; 5
00012E1C 0000                       	dc word_1E0B6-off_1E074; 6
00012E1E 0000                       	dc word_1E0BA-off_1E074; 7
00012E20 0000                       	dc word_1E0BE-off_1E074; 8
00012E22 0000                       	dc word_1E0C2-off_1E074; 9
00012E24 0000                       	dc word_1E0C6-off_1E074; 10
00012E26 0000                       	dc word_1E0CA-off_1E074; 11
00012E28 0000                       	dc word_1E0CE-off_1E074; 12
00012E2A 0000                       	dc word_1E0D2-off_1E074; 13
00012E2C 0000                       	dc word_1E0D8-off_1E074; 14
00012E2E 0000                       	dc word_1E0DE-off_1E074; 15
00012E30 0000                       	dc word_1E0E4-off_1E074; 16
00012E32 0000                       	dc word_1E0EA-off_1E074; 17
00012E34 0000                       	dc word_1E0EA-off_1E074; 18
00012E36 0000                       	dc word_1E0EA-off_1E074; 19
00012E38 0000                       	dc word_1E0EA-off_1E074; 20
00012E3A 0000                       	dc word_1E0EC-off_1E074; 21
00012E3C 0000                       word_1E0A0:	dc 0
00012E3E 0001                       word_1E0A2:	dc 1
00012E40 7000                       	dc $7000
00012E42 0001                       word_1E0A6:	dc 1
00012E44 F008                       	dc $F008
00012E46 0001                       word_1E0AA:	dc 1
00012E48 F018                       	dc $F018
00012E4A 0001                       word_1E0AE:	dc 1
00012E4C F028                       	dc $F028
00012E4E 0001                       word_1E0B2:	dc 1
00012E50 F038                       	dc $F038
00012E52 0001                       word_1E0B6:	dc 1
00012E54 F048                       	dc $F048
00012E56 0001                       word_1E0BA:	dc 1
00012E58 7058                       	dc $7058
00012E5A 0001                       word_1E0BE:	dc 1
00012E5C 7060                       	dc $7060
00012E5E 0001                       word_1E0C2:	dc 1
00012E60 7068                       	dc $7068
00012E62 0001                       word_1E0C6:	dc 1
00012E64 7070                       	dc $7070
00012E66 0001                       word_1E0CA:	dc 1
00012E68 7078                       	dc $7078
00012E6A 0001                       word_1E0CE:	dc 1
00012E6C 7080                       	dc $7080
00012E6E 0002                       word_1E0D2:	dc 2
00012E70 1088                       	dc $1088
00012E72 708A                       	dc $708A
00012E74 0002                       word_1E0D8:	dc 2
00012E76 3092                       	dc $3092
00012E78 7096                       	dc $7096
00012E7A 0002                       word_1E0DE:	dc 2
00012E7C 509E                       	dc $509E
00012E7E 70A4                       	dc $70A4
00012E80 0002                       word_1E0E4:	dc 2
00012E82 50AC                       	dc $50AC
00012E84 70B2                       	dc $70B2
00012E86 0000                       word_1E0EA:	dc 0
00012E88 0001                       word_1E0EC:	dc 1
00012E8A F0BA                       	dc $F0BA
00012E8C                            	even
00012E8C                            
00012E8C                            ; Dust!
00012E8C                            
00012E8C                            ; ===========================================================================
00012E8C                            ; ---------------------------------------------------------------------------
00012E8C                            ; Object 01 - Sonic
00012E8C                            ; ---------------------------------------------------------------------------
00012E8C                            
00012E8C                            Obj01:					; XREF: Obj_Index
00012E8C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012E90 6700                       		beq.s	Obj01_Normal	; if not, branch
00012E92 4EF9 0000 0000             		jmp	DebugMode
00012E98                            ; ===========================================================================
00012E98                            
00012E98                            Obj01_Normal:
00012E98 7000                       		moveq	#0,d0
00012E9A 1028 0024                  		move.b	$24(a0),d0
00012E9E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012EA2 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012EA6                            ; ===========================================================================
00012EA6 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012EA8 0000                       		dc.w Obj01_Control-Obj01_Index
00012EAA 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012EAC 0000                       		dc.w Obj01_Death-Obj01_Index
00012EAE 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012EB0                            ; ===========================================================================
00012EB0                            
00012EB0                            Obj01_Main:				; XREF: Obj01_Index
00012EB0 5428 0024                  		addq.b	#2,$24(a0)
00012EB4 117C 0013 0016             		move.b	#$13,$16(a0)
00012EBA 117C 0009 0017             		move.b	#9,$17(a0)
00012EC0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012EC8 317C 0780 0002             		move.w	#$780,2(a0)
00012ECE 117C 0002 0018             		move.b	#2,$18(a0)
00012ED4 117C 0018 0019             		move.b	#$18,$19(a0)
00012EDA 117C 0004 0001             		move.b	#4,1(a0)
00012EE0                            		include "_param\sonicspeed.asm"
00012EE0 31FC 0600 F760                            move.w  #$600,($FFFFF760).w ; Sonic's top speed
00012EE0 31FC 0600 F760                            move.w  #$600,($FFFFF760).w ; Sonic's top speed
00012EE6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012EEC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012EF2 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w ; added
00012EF8                            
00012EF8                            Obj01_Control:				; XREF: Obj01_Index
00012EF8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012EFC 6700                       		beq.s	loc_12C58	; if not, branch
00012EFE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012F04 6700                       		beq.s	loc_12C58	; if not, branch
00012F06 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012F0C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012F10 4E75                       		rts	
00012F12                            ; ===========================================================================
00012F12                            
00012F12                            loc_12C58:
00012F12 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012F16 6600                       		bne.s	loc_12C64	; if yes, branch
00012F18 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012F1E                            
00012F1E                            loc_12C64:
00012F1E 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012F24 6600                       		bne.s	loc_12C7E	; if yes, branch
00012F26 7000                       		moveq	#0,d0
00012F28 1028 0022                  		move.b	$22(a0),d0
00012F2C 0240 0006                  		andi.w	#6,d0
00012F30 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012F34 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012F38                            
00012F38                            loc_12C7E:
00012F38 6100                       		bsr.s	Sonic_Display
00012F3A 6100 0000                  		bsr.w	Sonic_RecordPos
00012F3E 6100 0000                  		bsr.w	Sonic_Water
00012F42 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012F48 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012F4E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012F52 6700                       		beq.s	loc_12CA6
00012F54 4A28 001C                  		tst.b	$1C(a0)
00012F58 6600                       		bne.s	loc_12CA6
00012F5A 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012F60                            
00012F60                            loc_12CA6:
00012F60 6100 0000                  		bsr.w	Sonic_Animate
00012F64 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012F68 6B00                       		bmi.s	loc_12CB6
00012F6A 4EB9 0000 0000             		jsr	TouchResponse
00012F70                            
00012F70                            loc_12CB6:
00012F70 6100 0000                  		bsr.w	Sonic_Loops
00012F74 6100 0000                  		bsr.w	LoadSonicDynPLC
00012F78 4E75                       		rts	
00012F7A                            ; ===========================================================================
00012F7A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012F7C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012F7E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012F80 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012F82                            ; ---------------------------------------------------------------------------
00012F82                            ; Music	to play	after invincibility wears off
00012F82                            ; ---------------------------------------------------------------------------
00012F82                            ;MusicList2:	incbin	misc\muslist2.bin       ; Vladikcomper: not need =P
00012F82                            ;		even
00012F82                            ; ===========================================================================
00012F82                            
00012F82                            Sonic_Display:				; XREF: loc_12C7E
00012F82 3028 0030                  		move.w	$30(a0),d0
00012F86 6700                       		beq.s	Obj01_Display
00012F88 5368 0030                  		subq.w	#1,$30(a0)
00012F8C E648                       		lsr.w	#3,d0
00012F8E 6400                       		bcc.s	Obj01_ChkInvin
00012F90                            
00012F90                            Obj01_Display:
00012F90 4EBA A61E                  		jsr	DisplaySprite
00012F94                            
00012F94                            Obj01_ChkInvin:
00012F94 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012F98 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012F9A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012F9E 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012FA0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012FA4 6600                       		bne.s	Obj01_ChkShoes
00012FA6 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012FAA 6600                       		bne.s	Obj01_RmvInvin
00012FAC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012FB2 6500                       		bcs.s	Obj01_RmvInvin
00012FB4 7000                       		moveq	#0,d0
00012FB6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012FBA 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012FC0 6600                       		bne.s	Obj01_PlayMusic
00012FC2 7005                       		moveq	#5,d0		; play SBZ music
00012FC4                            
00012FC4                            Obj01_PlayMusic:
00012FC4 43F9 0000 3778             		lea	(MusicList).l,a1 ; load	music playlist
00012FCA 1031 0000                  		move.b	(a1,d0.w),d0	 ; add d0 to a1
00012FCE 1238 FE11                  		move.b  ($FFFFFE11).w,d1 ; Super-Puper row by Vladikcomper
00012FD2 0C01 0003                                  cmp.b   #3,d1            ; 4-th act check
00012FD6 6600                                       bne.s   Obj01_PlayMusic_2
00012FD8 5301                                       sub.b   #1,d1
00012FDA                                                            
00012FDA                            Obj01_PlayMusic_2:                
00012FDA D001                                       add.b   d1,d0            ; Another Super-Puper row by Vladikcomper
00012FDC 4EB9 0000 12C6             		jsr	(PlaySound).l	 ; play music
00012FE2                            
00012FE2                            Obj01_RmvInvin:
00012FE2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012FE8                            
00012FE8                            Obj01_ChkShoes:
00012FE8 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012FEC 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012FEE 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012FF2 6700                       		beq.s	Obj01_ExitChk
00012FF4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012FF8 6600                       		bne.s	Obj01_ExitChk
00012FFA                            		include "_param\sonicspeed.asm"
00012FFA 31FC 0600 F760                            move.w  #$600,($FFFFF760).w ; Sonic's top speed
00012FFA 31FC 0600 F760                            move.w  #$600,($FFFFF760).w ; Sonic's top speed
00013000 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013006 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001300C 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013012 303C 00E3                  		move.w	#$E3,d0
00013016 4EF9 0000 12C6             		jmp	(PlaySound).l	; run music at normal speed
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            Obj01_ExitChk:
0001301C 4E75                       		rts	
0001301E                            
0001301E                            ; ---------------------------------------------------------------------------
0001301E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001301E                            ; ---------------------------------------------------------------------------
0001301E                            
0001301E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001301E                            
0001301E                            
0001301E                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001301E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013022 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013026 43F1 0000                  		lea	(a1,d0.w),a1
0001302A 32E8 0008                  		move.w	8(a0),(a1)+
0001302E 32E8 000C                  		move.w	$C(a0),(a1)+
00013032 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013036 4E75                       		rts	
00013038                            ; End of function Sonic_RecordPos
00013038                            
00013038                            ; ---------------------------------------------------------------------------
00013038                            ; Subroutine for Sonic when he's underwater
00013038                            ; ---------------------------------------------------------------------------
00013038                            
00013038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013038                            
00013038                            
00013038                            Sonic_Water:				; XREF: loc_12C7E
00013038 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001303E 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013040                            
00013040                            locret_12D80:
00013040 4E75                       		rts	
00013042                            ; ===========================================================================
00013042                            
00013042                            Obj01_InWater:
00013042 3038 F646                  		move.w	($FFFFF646).w,d0
00013046 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001304A 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001304C 08E8 0006 0022             		bset	#6,$22(a0)
00013052 66EC                       		bne.s	locret_12D80
00013054 6100 0000                  		bsr.w	ResumeMusic
00013058 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001305E 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013064 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001306A 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013070 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013076 E0E8 0010                  		asr	$10(a0)
0001307A E0E8 0012                  		asr	$12(a0)
0001307E E0E8 0012                  		asr	$12(a0)
00013082 67BC                       		beq.s	locret_12D80
00013084 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001308A 303C 00AA                  		move.w	#$AA,d0
0001308E 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play splash sound
00013094                            ; ===========================================================================
00013094                            
00013094                            Obj01_OutWater:
00013094 08A8 0006 0022             		bclr	#6,$22(a0)
0001309A 67A4                       		beq.s	locret_12D80
0001309C 6100 0000                  		bsr.w	ResumeMusic
000130A0                            		include "_param\sonicspeed.asm"
000130A0 31FC 0600 F760                            move.w  #$600,($FFFFF760).w ; Sonic's top speed
000130A0 31FC 0600 F760                            move.w  #$600,($FFFFF760).w ; Sonic's top speed
000130A6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000130AC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000130B2 E1E8 0012                  		asl	$12(a0)
000130B6 6700 FF88                  		beq.w	locret_12D80
000130BA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000130C0 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000130C6 6E00                       		bgt.s	loc_12E0E
000130C8 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000130CE                            
000130CE                            loc_12E0E:
000130CE 303C 00AA                  		move.w	#$AA,d0
000130D2 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play splash sound
000130D8                            ; End of function Sonic_Water
000130D8                            
000130D8                            ; ===========================================================================
000130D8                            ; ---------------------------------------------------------------------------
000130D8                            ; Modes	for controlling	Sonic
000130D8                            ; ---------------------------------------------------------------------------
000130D8                            
000130D8                            Obj01_MdNormal:				; XREF: Obj01_Modes
000130D8                            		include "_param\spindash.asm"
000130D8 6100 0000                                 bsr.w   Sonic_SpinDash
000130D8 6100 0000                                 bsr.w   Sonic_SpinDash
000130DC 6100 0000                                  bsr.w	Sonic_Jump
000130E0 6100 0000                  		bsr.w	Sonic_SlopeResist
000130E4 6100 0000                  		bsr.w	Sonic_Move
000130E8 6100 0000                  		bsr.w	Sonic_Roll
000130EC 6100 0000                  		bsr.w	Sonic_LevelBound
000130F0 4EBA A498                  		jsr	SpeedToPos
000130F4 6100 0000                  		bsr.w	Sonic_AnglePos
000130F8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000130FC 4E75                       		rts	
000130FE                            ; ===========================================================================
000130FE                            
000130FE                            Obj01_MdJump:				; XREF: Obj01_Modes
000130FE 6100 0000                  		bsr.w	Sonic_JumpHeight
00013102 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013106                            		include "_param\jumpdash.asm"
00013106                            		include "_param\jumpdash.asm"
00013106 6100 0000                  		bsr.w	Sonic_LevelBound
0001310A 4EBA A452                  		jsr	ObjectFall
0001310E 0828 0006 0022             		btst	#6,$22(a0)
00013114 6700                       		beq.s	loc_12E5C
00013116 0468 0028 0012             		subi.w	#$28,$12(a0)
0001311C                            
0001311C                            loc_12E5C:
0001311C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013120 6100 0000                  		bsr.w	Sonic_Floor
00013124 4E75                       		rts	
00013126                            ; ===========================================================================
00013126                            
00013126                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013126 6100 0000                  		bsr.w	Sonic_Jump
0001312A 6100 0000                  		bsr.w	Sonic_RollRepel
0001312E 6100 0000                  		bsr.w	Sonic_RollSpeed
00013132 6100 0000                  		bsr.w	Sonic_LevelBound
00013136 4EBA A452                  		jsr	SpeedToPos
0001313A 6100 0000                  		bsr.w	Sonic_AnglePos
0001313E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013142 4E75                       		rts	
00013144                            ; ===========================================================================
00013144                            
00013144                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013144 6100 0000                  		bsr.w	Sonic_JumpHeight
00013148 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001314C                            		include "_param\jumpdash.asm"
0001314C                            		include "_param\jumpdash.asm"
0001314C 6100 0000                  		bsr.w	Sonic_LevelBound
00013150 4EBA A40C                  		jsr	ObjectFall
00013154 0828 0006 0022             		btst	#6,$22(a0)
0001315A 6700                       		beq.s	loc_12EA6
0001315C 0468 0028 0012             		subi.w	#$28,$12(a0)
00013162                            
00013162                            loc_12EA6:
00013162 6100 0000                  		bsr.w	Sonic_JumpAngle
00013166 6100 0000                  		bsr.w	Sonic_Floor
0001316A 4E75                       		rts	
0001316C                            ; ---------------------------------------------------------------------------
0001316C                            ; Subroutine to	make Sonic walk/run
0001316C                            ; ---------------------------------------------------------------------------
0001316C                            
0001316C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001316C                            
0001316C                            
0001316C                            Sonic_Move:				; XREF: Obj01_MdNormal
0001316C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013170 3A38 F762                  		move.w	($FFFFF762).w,d5
00013174 3838 F764                  		move.w	($FFFFF764).w,d4
00013178 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001317C 6600 0000                  		bne.w	loc_12FEE
00013180 4A68 003E                  		tst.w	$3E(a0)
00013184 6600 0000                  		bne.w	Obj01_ResetScr
00013188 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001318E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013190 6100 0000                  		bsr.w	Sonic_MoveLeft
00013194                            
00013194                            Obj01_NotLeft:
00013194 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001319A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001319C 6100 0000                  		bsr.w	Sonic_MoveRight
000131A0                            
000131A0                            Obj01_NotRight:
000131A0 1028 0026                  		move.b	$26(a0),d0
000131A4 0600 0020                  		addi.b	#$20,d0
000131A8 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000131AC 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000131B0 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000131B4 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000131B8 08A8 0005 0022             		bclr	#5,$22(a0)
000131BE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000131C4 0828 0003 0022             		btst	#3,$22(a0)
000131CA 6700                       		beq.s	Sonic_Balance
000131CC 7000                       		moveq	#0,d0
000131CE 1028 003D                  		move.b	$3D(a0),d0
000131D2 ED48                       		lsl.w	#6,d0
000131D4 43F8 D000                  		lea	($FFFFD000).w,a1
000131D8 43F1 0000                  		lea	(a1,d0.w),a1
000131DC 4A29 0022                  		tst.b	$22(a1)
000131E0 6B00                       		bmi.s	Sonic_LookUp
000131E2 7200                       		moveq	#0,d1
000131E4 1229 0019                  		move.b	$19(a1),d1
000131E8 3401                       		move.w	d1,d2
000131EA D442                       		add.w	d2,d2
000131EC 5942                       		subq.w	#4,d2
000131EE D268 0008                  		add.w	8(a0),d1
000131F2 9269 0008                  		sub.w	8(a1),d1
000131F6 0C41 0004                  		cmpi.w	#4,d1
000131FA 6D00                       		blt.s	loc_12F6A
000131FC B242                       		cmp.w	d2,d1
000131FE 6C00                       		bge.s	loc_12F5A
00013200 6000                       		bra.s	Sonic_LookUp
00013202                            ; ===========================================================================
00013202                            
00013202                            Sonic_Balance:
00013202 4EB9 0000 0000             		jsr	ObjHitFloor
00013208 0C41 000C                  		cmpi.w	#$C,d1
0001320C 6D00                       		blt.s	Sonic_LookUp
0001320E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013214 6600                       		bne.s	loc_12F62
00013216                            
00013216                            loc_12F5A:
00013216 08A8 0000 0022             		bclr	#0,$22(a0)
0001321C 6000                       		bra.s	loc_12F70
0001321E                            ; ===========================================================================
0001321E                            
0001321E                            loc_12F62:
0001321E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013224 6600                       		bne.s	Sonic_LookUp
00013226                            
00013226                            loc_12F6A:
00013226 08E8 0000 0022             		bset	#0,$22(a0)
0001322C                            
0001322C                            loc_12F70:
0001322C 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013232 6000                       		bra.s	Obj01_ResetScr
00013234                            ; ===========================================================================
00013234                            
00013234                            Sonic_LookUp:
00013234 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001323A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001323C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013242 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013248 6700                       		beq.s	loc_12FC2
0001324A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001324E 6000                       		bra.s	loc_12FC2
00013250                            ; ===========================================================================
00013250                            
00013250                            Sonic_Duck:
00013250 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013256 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013258 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001325E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013264 6700                       		beq.s	loc_12FC2
00013266 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001326A 6000                       		bra.s	loc_12FC2
0001326C                            ; ===========================================================================
0001326C                            
0001326C                            Obj01_ResetScr:
0001326C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013272 6700                       		beq.s	loc_12FC2	; if yes, branch
00013274 6400                       		bcc.s	loc_12FBE
00013276 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001327A                            
0001327A                            loc_12FBE:
0001327A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001327E                            
0001327E                            loc_12FC2:
0001327E 1038 F602                  		move.b	($FFFFF602).w,d0
00013282 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013286 6600                       		bne.s	loc_12FEE	; if yes, branch
00013288 3028 0014                  		move.w	$14(a0),d0
0001328C 6700                       		beq.s	loc_12FEE
0001328E 6B00                       		bmi.s	loc_12FE2
00013290 9045                       		sub.w	d5,d0
00013292 6400                       		bcc.s	loc_12FDC
00013294 303C 0000                  		move.w	#0,d0
00013298                            
00013298                            loc_12FDC:
00013298 3140 0014                  		move.w	d0,$14(a0)
0001329C 6000                       		bra.s	loc_12FEE
0001329E                            ; ===========================================================================
0001329E                            
0001329E                            loc_12FE2:
0001329E D045                       		add.w	d5,d0
000132A0 6400                       		bcc.s	loc_12FEA
000132A2 303C 0000                  		move.w	#0,d0
000132A6                            
000132A6                            loc_12FEA:
000132A6 3140 0014                  		move.w	d0,$14(a0)
000132AA                            
000132AA                            loc_12FEE:
000132AA 1028 0026                  		move.b	$26(a0),d0
000132AE 4EB9 0000 29BA             		jsr	(CalcSine).l
000132B4 C3E8 0014                  		muls.w	$14(a0),d1
000132B8 E081                       		asr.l	#8,d1
000132BA 3141 0010                  		move.w	d1,$10(a0)
000132BE C1E8 0014                  		muls.w	$14(a0),d0
000132C2 E080                       		asr.l	#8,d0
000132C4 3140 0012                  		move.w	d0,$12(a0)
000132C8                            
000132C8                            loc_1300C:
000132C8 1028 0026                  		move.b	$26(a0),d0
000132CC 0600 0040                  		addi.b	#$40,d0
000132D0 6B00                       		bmi.s	locret_1307C
000132D2 123C 0040                  		move.b	#$40,d1
000132D6 4A68 0014                  		tst.w	$14(a0)
000132DA 6700                       		beq.s	locret_1307C
000132DC 6B00                       		bmi.s	loc_13024
000132DE 4441                       		neg.w	d1
000132E0                            
000132E0                            loc_13024:
000132E0 1028 0026                  		move.b	$26(a0),d0
000132E4 D001                       		add.b	d1,d0
000132E6 3F00                       		move.w	d0,-(sp)
000132E8 6100 0000                  		bsr.w	Sonic_WalkSpeed
000132EC 301F                       		move.w	(sp)+,d0
000132EE 4A41                       		tst.w	d1
000132F0 6A00                       		bpl.s	locret_1307C
000132F2 E141                       		asl.w	#8,d1
000132F4 0600 0020                  		addi.b	#$20,d0
000132F8 0200 00C0                  		andi.b	#$C0,d0
000132FC 6700                       		beq.s	loc_13078
000132FE 0C00 0040                  		cmpi.b	#$40,d0
00013302 6700                       		beq.s	loc_13066
00013304 0C00 0080                  		cmpi.b	#$80,d0
00013308 6700                       		beq.s	loc_13060
0001330A D368 0010                  		add.w	d1,$10(a0)
0001330E 08E8 0005 0022             		bset	#5,$22(a0)
00013314 317C 0000 0014             		move.w	#0,$14(a0)
0001331A 4E75                       		rts	
0001331C                            ; ===========================================================================
0001331C                            
0001331C                            loc_13060:
0001331C 9368 0012                  		sub.w	d1,$12(a0)
00013320 4E75                       		rts	
00013322                            ; ===========================================================================
00013322                            
00013322                            loc_13066:
00013322 9368 0010                  		sub.w	d1,$10(a0)
00013326 08E8 0005 0022             		bset	#5,$22(a0)
0001332C 317C 0000 0014             		move.w	#0,$14(a0)
00013332 4E75                       		rts	
00013334                            ; ===========================================================================
00013334                            
00013334                            loc_13078:
00013334 D368 0012                  		add.w	d1,$12(a0)
00013338                            
00013338                            locret_1307C:
00013338 4E75                       		rts	
0001333A                            ; End of function Sonic_Move
0001333A                            
0001333A                            
0001333A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001333A                            
0001333A                            
0001333A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001333A 3028 0014                  		move.w	$14(a0),d0
0001333E 6700                       		beq.s	loc_13086
00013340 6A00                       		bpl.s	loc_130B2
00013342                            
00013342                            loc_13086:
00013342 08E8 0000 0022             		bset	#0,$22(a0)
00013348 6600                       		bne.s	loc_1309A
0001334A 08A8 0005 0022             		bclr	#5,$22(a0)
00013350 117C 0001 001D             		move.b	#1,$1D(a0)
00013356                            
00013356                            loc_1309A:
00013356 9045                       		sub.w	d5,d0
00013358 3206                       		move.w	d6,d1
0001335A 4441                       		neg.w	d1
0001335C B041                       		cmp.w	d1,d0
0001335E 6E00                       		bgt.s	loc_130A6
00013360 D045                                       add.w	d5,d0
00013362 B041                       		cmp.w	d1,d0
00013364 6F00                       		ble.s	loc_130A6
00013366 3001                       		move.w	d1,d0
00013368                            
00013368                            loc_130A6:
00013368 3140 0014                  		move.w	d0,$14(a0)
0001336C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013372 4E75                       		rts	
00013374                            ; ===========================================================================
00013374                            
00013374                            loc_130B2:				; XREF: Sonic_MoveLeft
00013374 9044                       		sub.w	d4,d0
00013376 6400                       		bcc.s	loc_130BA
00013378 303C FF80                  		move.w	#-$80,d0
0001337C                            
0001337C                            loc_130BA:
0001337C 3140 0014                  		move.w	d0,$14(a0)
00013380 1028 0026                  		move.b	$26(a0),d0
00013384 0600 0020                  		addi.b	#$20,d0
00013388 0200 00C0                  		andi.b	#$C0,d0
0001338C 6600                       		bne.s	locret_130E8
0001338E 0C40 0400                  		cmpi.w	#$400,d0
00013392 6D00                       		blt.s	locret_130E8
00013394 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001339A 08A8 0000 0022             		bclr	#0,$22(a0)
000133A0 303C 00A4                  		move.w	#$A4,d0
000133A4 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play stopping sound
000133AA                            
000133AA                            locret_130E8:
000133AA 4E75                       		rts	
000133AC                            ; End of function Sonic_MoveLeft
000133AC                            
000133AC                            
000133AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133AC                            
000133AC                            
000133AC                            Sonic_MoveRight:			; XREF: Sonic_Move
000133AC 3028 0014                  		move.w	$14(a0),d0
000133B0 6B00                       		bmi.s	loc_13118
000133B2 08A8 0000 0022             		bclr	#0,$22(a0)
000133B8 6700                       		beq.s	loc_13104
000133BA 08A8 0005 0022             		bclr	#5,$22(a0)
000133C0 117C 0001 001D             		move.b	#1,$1D(a0)
000133C6                            
000133C6                            loc_13104:
000133C6 D045                       		add.w	d5,d0
000133C8 B046                       		cmp.w	d6,d0
000133CA 6D00                       		blt.s	loc_1310C
000133CC 9045                                       sub.w	d5,d0
000133CE B046                       		cmp.w	d6,d0
000133D0 6C00                       		bge.s	loc_1310C
000133D2 3006                       		move.w	d6,d0
000133D4                            
000133D4                            loc_1310C:
000133D4 3140 0014                  		move.w	d0,$14(a0)
000133D8 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000133DE 4E75                       		rts	
000133E0                            ; ===========================================================================
000133E0                            
000133E0                            loc_13118:				; XREF: Sonic_MoveRight
000133E0 D044                       		add.w	d4,d0
000133E2 6400                       		bcc.s	loc_13120
000133E4 303C 0080                  		move.w	#$80,d0
000133E8                            
000133E8                            loc_13120:
000133E8 3140 0014                  		move.w	d0,$14(a0)
000133EC 1028 0026                  		move.b	$26(a0),d0
000133F0 0600 0020                  		addi.b	#$20,d0
000133F4 0200 00C0                  		andi.b	#$C0,d0
000133F8 6600                       		bne.s	locret_1314E
000133FA 0C40 FC00                  		cmpi.w	#-$400,d0
000133FE 6E00                       		bgt.s	locret_1314E
00013400 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013406 08E8 0000 0022             		bset	#0,$22(a0)
0001340C 303C 00A4                  		move.w	#$A4,d0
00013410 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013416                            
00013416                            locret_1314E:
00013416 4E75                       		rts	
00013418                            ; End of function Sonic_MoveRight
00013418                            
00013418                            ; ---------------------------------------------------------------------------
00013418                            ; Subroutine to	change Sonic's speed as he rolls
00013418                            ; ---------------------------------------------------------------------------
00013418                            
00013418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013418                            
00013418                            
00013418                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013418 3C38 F760                  		move.w	($FFFFF760).w,d6
0001341C E346                       		asl.w	#1,d6
0001341E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013422 E245                       		asr.w	#1,d5
00013424 3838 F764                  		move.w	($FFFFF764).w,d4
00013428 E444                       		asr.w	#2,d4
0001342A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001342E 6600 0000                  		bne.w	loc_131CC
00013432 4A68 003E                  		tst.w	$3E(a0)
00013436 6600                       		bne.s	loc_13188
00013438 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001343E 6700                       		beq.s	loc_1317C	; if not, branch
00013440 6100 0000                  		bsr.w	Sonic_RollLeft
00013444                            
00013444                            loc_1317C:
00013444 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001344A 6700                       		beq.s	loc_13188	; if not, branch
0001344C 6100 0000                  		bsr.w	Sonic_RollRight
00013450                            
00013450                            loc_13188:
00013450 3028 0014                  		move.w	$14(a0),d0
00013454 6700                       		beq.s	loc_131AA
00013456 6B00                       		bmi.s	loc_1319E
00013458 9045                       		sub.w	d5,d0
0001345A 6400                       		bcc.s	loc_13198
0001345C 303C 0000                  		move.w	#0,d0
00013460                            
00013460                            loc_13198:
00013460 3140 0014                  		move.w	d0,$14(a0)
00013464 6000                       		bra.s	loc_131AA
00013466                            ; ===========================================================================
00013466                            
00013466                            loc_1319E:				; XREF: Sonic_RollSpeed
00013466 D045                       		add.w	d5,d0
00013468 6400                       		bcc.s	loc_131A6
0001346A 303C 0000                  		move.w	#0,d0
0001346E                            
0001346E                            loc_131A6:
0001346E 3140 0014                  		move.w	d0,$14(a0)
00013472                            
00013472                            loc_131AA:
00013472 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013476 6600                       		bne.s	loc_131CC	; if yes, branch
00013478 08A8 0002 0022             		bclr	#2,$22(a0)
0001347E 117C 0013 0016             		move.b	#$13,$16(a0)
00013484 117C 0009 0017             		move.b	#9,$17(a0)
0001348A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013490 5B68 000C                  		subq.w	#5,$C(a0)
00013494                            
00013494                            loc_131CC:
00013494 1028 0026                  		move.b	$26(a0),d0
00013498 4EB9 0000 29BA             		jsr	(CalcSine).l
0001349E C1E8 0014                  		muls.w	$14(a0),d0
000134A2 E080                       		asr.l	#8,d0
000134A4 3140 0012                  		move.w	d0,$12(a0)
000134A8 C3E8 0014                  		muls.w	$14(a0),d1
000134AC E081                       		asr.l	#8,d1
000134AE 0C41 1000                  		cmpi.w	#$1000,d1
000134B2 6F00                       		ble.s	loc_131F0
000134B4 323C 1000                  		move.w	#$1000,d1
000134B8                            
000134B8                            loc_131F0:
000134B8 0C41 F000                  		cmpi.w	#-$1000,d1
000134BC 6C00                       		bge.s	loc_131FA
000134BE 323C F000                  		move.w	#-$1000,d1
000134C2                            
000134C2                            loc_131FA:
000134C2 3141 0010                  		move.w	d1,$10(a0)
000134C6 6000 FE00                  		bra.w	loc_1300C
000134CA                            ; End of function Sonic_RollSpeed
000134CA                            
000134CA                            
000134CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134CA                            
000134CA                            
000134CA                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000134CA 3028 0014                  		move.w	$14(a0),d0
000134CE 6700                       		beq.s	loc_1320A
000134D0 6A00                       		bpl.s	loc_13218
000134D2                            
000134D2                            loc_1320A:
000134D2 08E8 0000 0022             		bset	#0,$22(a0)
000134D8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000134DE 4E75                       		rts	
000134E0                            ; ===========================================================================
000134E0                            
000134E0                            loc_13218:
000134E0 9044                       		sub.w	d4,d0
000134E2 6400                       		bcc.s	loc_13220
000134E4 303C FF80                  		move.w	#-$80,d0
000134E8                            
000134E8                            loc_13220:
000134E8 3140 0014                  		move.w	d0,$14(a0)
000134EC 4E75                       		rts	
000134EE                            ; End of function Sonic_RollLeft
000134EE                            
000134EE                            
000134EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134EE                            
000134EE                            
000134EE                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000134EE 3028 0014                  		move.w	$14(a0),d0
000134F2 6B00                       		bmi.s	loc_1323A
000134F4 08A8 0000 0022             		bclr	#0,$22(a0)
000134FA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013500 4E75                       		rts	
00013502                            ; ===========================================================================
00013502                            
00013502                            loc_1323A:
00013502 D044                       		add.w	d4,d0
00013504 6400                       		bcc.s	loc_13242
00013506 303C 0080                  		move.w	#$80,d0
0001350A                            
0001350A                            loc_13242:
0001350A 3140 0014                  		move.w	d0,$14(a0)
0001350E 4E75                       		rts	
00013510                            ; End of function Sonic_RollRight
00013510                            
00013510                            ; ---------------------------------------------------------------------------
00013510                            ; Subroutine to	change Sonic's direction while jumping
00013510                            ; ---------------------------------------------------------------------------
00013510                            
00013510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013510                            
00013510                            
00013510                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013510 3C38 F760                  		move.w	($FFFFF760).w,d6
00013514 3A38 F762                  		move.w	($FFFFF762).w,d5
00013518 E345                       		asl.w	#1,d5
0001351A 0828 0004 0022             		btst	#4,$22(a0)
00013520 6600                       		bne.s	Obj01_ResetScr2
00013522 3028 0010                  		move.w	$10(a0),d0
00013526 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001352C 6700                       		beq.s	loc_13278	; if not, branch
0001352E 08E8 0000 0022             		bset	#0,$22(a0)
00013534 9045                       		sub.w	d5,d0
00013536 3206                       		move.w	d6,d1
00013538 4441                       		neg.w	d1
0001353A B041                       		cmp.w	d1,d0
0001353C 6E00                       		bgt.s	loc_13278
0001353E D045                                       add.w	d5,d0		; +++ remove this frame's acceleration change
00013540 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013542 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013544 3001                       		move.w	d1,d0
00013546                            
00013546                            loc_13278:
00013546 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001354C 6700                       		beq.s	Obj01_JumpMove	; if not, branch
0001354E 08A8 0000 0022             		bclr	#0,$22(a0)
00013554 D045                       		add.w	d5,d0
00013556 B046                       		cmp.w	d6,d0
00013558 6D00                       		blt.s	Obj01_JumpMove
0001355A 9045                                       sub.w	d5,d0		; +++ remove this frame's acceleration change
0001355C B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
0001355E 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013560 3006                       		move.w	d6,d0
00013562                            
00013562                            Obj01_JumpMove:
00013562 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013566                            
00013566                            Obj01_ResetScr2:
00013566 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001356C 6700                       		beq.s	loc_132A4	; if yes, branch
0001356E 6400                       		bcc.s	loc_132A0
00013570 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013574                            
00013574                            loc_132A0:
00013574 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013578                            
00013578                            loc_132A4:
00013578 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001357E 6500                       		bcs.s	locret_132D2	; if yes, branch
00013580 3028 0010                  		move.w	$10(a0),d0
00013584 3200                       		move.w	d0,d1
00013586 EA41                       		asr.w	#5,d1
00013588 6700                       		beq.s	locret_132D2
0001358A 6B00                       		bmi.s	loc_132C6
0001358C 9041                       		sub.w	d1,d0
0001358E 6400                       		bcc.s	loc_132C0
00013590 303C 0000                  		move.w	#0,d0
00013594                            
00013594                            loc_132C0:
00013594 3140 0010                  		move.w	d0,$10(a0)
00013598 4E75                       		rts	
0001359A                            ; ===========================================================================
0001359A                            
0001359A                            loc_132C6:
0001359A 9041                       		sub.w	d1,d0
0001359C 6500                       		bcs.s	loc_132CE
0001359E 303C 0000                  		move.w	#0,d0
000135A2                            
000135A2                            loc_132CE:
000135A2 3140 0010                  		move.w	d0,$10(a0)
000135A6                            
000135A6                            locret_132D2:
000135A6 4E75                       		rts	
000135A8                            ; End of function Sonic_ChgJumpDir
000135A8                            
000135A8                            ; ===========================================================================
000135A8                            ; ---------------------------------------------------------------------------
000135A8                            ; Unused subroutine to squash Sonic
000135A8                            ; ---------------------------------------------------------------------------
000135A8 1028 0026                  		move.b	$26(a0),d0
000135AC 0600 0020                  		addi.b	#$20,d0
000135B0 0200 00C0                  		andi.b	#$C0,d0
000135B4 6600                       		bne.s	locret_13302
000135B6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000135BA 4A41                       		tst.w	d1
000135BC 6A00                       		bpl.s	locret_13302
000135BE 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000135C4 317C 0000 0010             		move.w	#0,$10(a0)
000135CA 317C 0000 0012             		move.w	#0,$12(a0)
000135D0 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000135D6                            
000135D6                            locret_13302:
000135D6 4E75                       		rts	
000135D8                            ; ---------------------------------------------------------------------------
000135D8                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000135D8                            ; ---------------------------------------------------------------------------
000135D8                            
000135D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135D8                            
000135D8                            
000135D8                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000135D8 2228 0008                  		move.l	8(a0),d1
000135DC 3028 0010                  		move.w	$10(a0),d0
000135E0 48C0                       		ext.l	d0
000135E2 E180                       		asl.l	#8,d0
000135E4 D280                       		add.l	d0,d1
000135E6 4841                       		swap	d1
000135E8 3038 F728                  		move.w	($FFFFF728).w,d0
000135EC 0640 0010                  		addi.w	#$10,d0
000135F0 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000135F2 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000135F4 3038 F72A                  		move.w	($FFFFF72A).w,d0
000135F8 0640 0128                  		addi.w	#$128,d0
000135FC 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013600 6600                       		bne.s	loc_13332
00013602 0640 0040                  		addi.w	#$40,d0
00013606                            
00013606                            loc_13332:
00013606 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013608 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001360A                            
0001360A                            loc_13336:
0001360A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001360E 0640 00E0                  		addi.w	#$E0,d0
00013612 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013616 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013618 4E75                       		rts	
0001361A                            ; ===========================================================================
0001361A                            
0001361A                            Boundary_Bottom:
0001361A 3038 F726                  		move.w	($FFFFF726).w,d0
0001361E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013622 B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013624 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013626 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
0001362C 6600 0000                  		bne.w	KillSonic		; if not, kill Sonic
00013630 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013636 6500 0000                  		bcs.w	KillSonic
0001363A 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
0001363E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013644 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
0001364A                             
0001364A                            Boundary_Bottom_locret:
0001364A 4E75                       		rts		
0001364C                            ; ===========================================================================
0001364C                            
0001364C                            Boundary_Sides:
0001364C 3140 0008                  		move.w	d0,8(a0)
00013650 317C 0000 000A             		move.w	#0,$A(a0)
00013656 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001365C 317C 0000 0014             		move.w	#0,$14(a0)
00013662 60A6                       		bra.s	loc_13336
00013664                            ; End of function Sonic_LevelBound
00013664                            
00013664                            ; ---------------------------------------------------------------------------
00013664                            ; Subroutine allowing Sonic to roll when he's moving
00013664                            ; ---------------------------------------------------------------------------
00013664                            
00013664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013664                            
00013664                            
00013664                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013664 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013668 6600                       		bne.s	Obj01_NoRoll
0001366A 3028 0014                  		move.w	$14(a0),d0
0001366E 6A00                       		bpl.s	loc_13392
00013670 4440                       		neg.w	d0
00013672                            
00013672                            loc_13392:
00013672 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013676 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013678 1038 F602                  		move.b	($FFFFF602).w,d0
0001367C 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013680 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013682 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013688 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
0001368A                            
0001368A                            Obj01_NoRoll:
0001368A 4E75                       		rts	
0001368C                            ; ===========================================================================
0001368C                            
0001368C                            Obj01_ChkRoll:
0001368C 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013692 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013694 4E75                       		rts	
00013696                            ; ===========================================================================
00013696                            
00013696                            Obj01_DoRoll:
00013696 08E8 0002 0022             		bset	#2,$22(a0)
0001369C 117C 000E 0016             		move.b	#$E,$16(a0)
000136A2 117C 0007 0017             		move.b	#7,$17(a0)
000136A8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000136AE 5A68 000C                  		addq.w	#5,$C(a0)
000136B2 303C 00BE                  		move.w	#$BE,d0
000136B6 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play rolling sound
000136BC 4A68 0014                  		tst.w	$14(a0)
000136C0 6600                       		bne.s	locret_133E8
000136C2 317C 0200 0014             		move.w	#$200,$14(a0)
000136C8                            
000136C8                            locret_133E8:
000136C8 4E75                       		rts	
000136CA                            ; End of function Sonic_Roll
000136CA                            
000136CA                            ; ---------------------------------------------------------------------------
000136CA                            ; Subroutine allowing Sonic to jump
000136CA                            ; ---------------------------------------------------------------------------
000136CA                            
000136CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136CA                            
000136CA                            
000136CA                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000136CA 1038 F603                  		move.b	($FFFFF603).w,d0
000136CE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000136D2 6700 0000                  		beq.w	locret_1348E	; if not, branch
000136D6 7000                       		moveq	#0,d0
000136D8 1028 0026                  		move.b	$26(a0),d0
000136DC 0600 0080                  		addi.b	#$80,d0
000136E0 6100 0000                  		bsr.w	sub_14D48
000136E4 0C41 0006                  		cmpi.w	#6,d1
000136E8 6D00 0000                  		blt.w	locret_1348E
000136EC 343C 0680                  		move.w	#$680,d2
000136F0 0828 0006 0022             		btst	#6,$22(a0)
000136F6 6700                       		beq.s	loc_1341C
000136F8 343C 0380                  		move.w	#$380,d2
000136FC                            
000136FC                            loc_1341C:
000136FC 7000                       		moveq	#0,d0
000136FE 1028 0026                  		move.b	$26(a0),d0
00013702 0400 0040                  		subi.b	#$40,d0
00013706 4EB9 0000 29BA             		jsr	(CalcSine).l
0001370C C3C2                       		muls.w	d2,d1
0001370E E081                       		asr.l	#8,d1
00013710 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013714 C1C2                       		muls.w	d2,d0
00013716 E080                       		asr.l	#8,d0
00013718 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
0001371C 08E8 0001 0022             		bset	#1,$22(a0)
00013722 08A8 0005 0022             		bclr	#5,$22(a0)
00013728 588F                       		addq.l	#4,sp
0001372A 117C 0001 003C             		move.b	#1,$3C(a0)
00013730 4228 0038                  		clr.b	$38(a0)
00013734 303C 00A0                  		move.w	#$A0,d0
00013738 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001373E 117C 0013 0016             		move.b	#$13,$16(a0)
00013744 117C 0009 0017             		move.b	#9,$17(a0)
0001374A 0828 0002 0022             		btst	#2,$22(a0)
00013750 6600                       		bne.s	loc_13490
00013752 117C 000E 0016             		move.b	#$E,$16(a0)
00013758 117C 0007 0017             		move.b	#7,$17(a0)
0001375E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013764 08E8 0002 0022             		bset	#2,$22(a0)
0001376A 5A68 000C                  		addq.w	#5,$C(a0)
0001376E                            
0001376E                            locret_1348E:
0001376E 4E75                       		rts	
00013770                            ; ===========================================================================
00013770                            
00013770                            loc_13490:
00013770 08E8 0004 0022             		bset	#4,$22(a0)
00013776 4E75                       		rts	
00013778                            ; End of function Sonic_Jump
00013778                            
00013778                            
00013778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013778                            
00013778                            
00013778                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013778 4A28 003C                  		tst.b	$3C(a0)
0001377C 6700                       		beq.s	loc_134C4
0001377E 323C FC00                  		move.w	#-$400,d1
00013782 0828 0006 0022             		btst	#6,$22(a0)
00013788 6700                       		beq.s	loc_134AE
0001378A 323C FE00                  		move.w	#-$200,d1
0001378E                            
0001378E                            loc_134AE:
0001378E B268 0012                  		cmp.w	$12(a0),d1
00013792 6F00                       		ble.s	locret_134C2
00013794 1038 F602                  		move.b	($FFFFF602).w,d0
00013798 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001379C 6600                       		bne.s	locret_134C2	; if yes, branch
0001379E 3141 0012                  		move.w	d1,$12(a0)
000137A2                            
000137A2                            locret_134C2:
000137A2 4E75                       		rts	
000137A4                            ; ===========================================================================
000137A4                            
000137A4                            loc_134C4:
000137A4 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000137AA 6C00                       		bge.s	locret_134D2
000137AC 317C F040 0012             		move.w	#-$FC0,$12(a0)
000137B2                            
000137B2                            locret_134D2:
000137B2 4E75                       		rts	
000137B4                            ; End of function Sonic_JumpHeight
000137B4                            
000137B4                            Sonic_Jump_Dash:                                  ; by Vladikcomper
000137B4 0C28 0002 001C                             cmpi.b  #2,$1C(a0)                ; is sonic rolling?
000137BA 6600                                       bne.s   Sonic_Jump_Dash_Rts       ; if not, branch
000137BC 1038 F603                                  move.b  ($FFFFF603).w,d0          
000137C0 0200 0070                                  andi.b  #$70,d0              
000137C4 6700 0000                                  beq.w   Sonic_Jump_Dash_Rts      
000137C8 303C 00BC                                  move.w  #$BC,d0
000137CC 4EB9 0000 12CC                             jsr     (PlaySound_Special).l
000137D2 317C 0900 0010                             move.w  #$900,$10(a0)    
000137D8 0828 0000 0022                             btst    #0,$22(a0)              
000137DE 6700                                       beq.s   Sonic_Jump_Dash_Rts
000137E0 4468 0010                                  neg.w   $10(a0)
000137E4                            
000137E4                            Sonic_Jump_Dash_Rts:
000137E4 4E75                                       rts
000137E6                            
000137E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137E6                            
000137E6                            Sonic_SpinDash:
000137E6 4A28 0039                  		tst.b	$39(a0)
000137EA 6600                       		bne.s	loc2_1AC8E
000137EC 0C28 0008 001C             		cmpi.b	#8,$1C(a0)
000137F2 6600                       		bne.s	locret2_1AC8C
000137F4 1038 F603                  		move.b	($FFFFF603).w,d0
000137F8 0200 0070                  		andi.b	#$70,d0
000137FC 6700 0000                  		beq.w	locret2_1AC8C
00013800 117C 001F 001C                             move.b	#$1F,$1C(a0)	; changed from #9
00013806 303C 0FD1                  		move.w	#$FD1,d0	; changed from #$E0
0001380A 4EB9 0000 12CC             		jsr	(PlaySound_Special).l
00013810 588F                       		addq.l	#4,sp
00013812 117C 0001 0039             		move.b	#1,$39(a0)
00013818 317C 0000 003A             		move.w	#0,$3A(a0)
0001381E 0C28 000C 0028             		cmpi.b	#$C,$28(a0)
00013824                            		;bcs.s	loc2_1AC84
00013824 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001382A                             
0001382A                            loc2_1AC84:
0001382A 6100 FDAC                  		bsr.w	Sonic_LevelBound
0001382E 6100 0000                  		bsr.w	Sonic_AnglePos
00013832                             
00013832                            locret2_1AC8C:
00013832 4E75                       		rts	
00013834                            ; ---------------------------------------------------------------------------
00013834                             
00013834                            loc2_1AC8E:
00013834 117C 001F 001C             		move.b	#$1F,$1C(a0) ; WTH
0001383A 1038 F602                                  move.b	($FFFFF602).w,d0
0001383E 0800 0001                  		btst	#1,d0
00013842 6600 0000                  		bne.w	loc2_1AD30
00013846 117C 000E 0016             		move.b	#$E,$16(a0)
0001384C 117C 0007 0017             		move.b	#7,$17(a0)
00013852 117C 0002 001C             		move.b	#2,$1C(a0)
00013858 5A68 000C                  		addq.w	#5,$C(a0)
0001385C 117C 0000 0039             		move.b	#0,$39(a0)
00013862 7000                       		moveq	#0,d0
00013864 1028 003A                  		move.b	$3A(a0),d0
00013868 D040                       		add.w	d0,d0
0001386A 317B 0000 0014             		move.w	word_1AD0C(pc,d0.w),$14(a0)
00013870 4A38 FE19                  		tst.b	($FFFFFE19).w
00013874 6700                       		beq.s	loc2_1ACD0
00013876 317B 0000 0014             		move.w	word_1AD1E(pc,d0.w),$14(a0)
0001387C                             
0001387C                            loc2_1ACD0:
0001387C 3028 0014                  		move.w	$14(a0),d0
00013880 0440 0800                  		subi.w	#$800,d0
00013884 D040                       		add.w	d0,d0
00013886 0240 1F00                  		andi.w	#$1F00,d0
0001388A 4440                       		neg.w	d0
0001388C 0640 2000                  		addi.w	#$2000,d0
00013890 31C0 EED0                  		move.w	d0,($FFFFEED0).w
00013894 0828 0000 0022             		btst	#0,$22(a0)
0001389A 6700                       		beq.s	loc2_1ACF4
0001389C 4468 0014                  		neg.w	$14(a0)
000138A0                             
000138A0                            loc2_1ACF4:
000138A0 08E8 0002 0022             		bset	#2,$22(a0)
000138A6 11FC 0000 D1DC             	        move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
000138AC 303C 00BC                  		move.w	#$BC,d0
000138B0 4EB9 0000 12CC             		jsr	(PlaySound_Special).l
000138B6 6000                       		bra.s	loc2_1AD78
000138B8                            
000138B8 0800                       word_1AD0C:	dc.w  $800		; 0
000138BA 0880                       		dc.w  $880		; 1
000138BC 0900                       		dc.w  $900		; 2
000138BE 0980                       		dc.w  $980		; 3
000138C0 0A00                       		dc.w  $A00		; 4
000138C2 0A80                       		dc.w  $A80		; 5
000138C4 0B00                       		dc.w  $B00		; 6
000138C6 0B80                       		dc.w  $B80		; 7
000138C8 0C00                       		dc.w  $C00		; 8
000138CA                             
000138CA 0B00                       word_1AD1E:	dc.w  $B00		; 0
000138CC 0B80                       		dc.w  $B80		; 1
000138CE 0C00                       		dc.w  $C00		; 2
000138D0 0C80                       		dc.w  $C80		; 3
000138D2 0D00                       		dc.w  $D00		; 4
000138D4 0D80                       		dc.w  $D80		; 5
000138D6 0E00                       		dc.w  $E00		; 6
000138D8 0E80                       		dc.w  $E80		; 7
000138DA 0F00                       		dc.w  $F00		; 8
000138DC                             
000138DC                            loc2_1AD30:				; If still charging the dash...
000138DC 4A68 003A                  		tst.w	$3A(a0)
000138E0 6700                       		beq.s	loc2_1AD48
000138E2 3028 003A                  		move.w	$3A(a0),d0
000138E6 EA48                       		lsr.w	#5,d0
000138E8 9168 003A                  		sub.w	d0,$3A(a0)
000138EC 6400                       		bcc.s	loc2_1AD48
000138EE 317C 0000 003A             		move.w	#0,$3A(a0)
000138F4                             
000138F4                            loc2_1AD48:
000138F4 1038 F603                  		move.b	($FFFFF603).w,d0
000138F8 0200 0070                  		andi.b	#$70,d0	; 'p'
000138FC 6700 0000                  		beq.w	loc2_1AD78
00013900 317C 1F00 001C             		move.w	#$1F00,$1C(a0)	; changed from #$900
00013906 303C 00D1                  		move.w	#$D1,d0	; changed
0001390A 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.
00013910 4EB9 0000 12CC             		jsr	(PlaySound_Special).l
00013916 0668 0200 003A             		addi.w	#$200,$3A(a0)
0001391C 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)
00013922 6500                       		bcs.s	loc2_1AD78
00013924 317C 0800 003A             		move.w	#$800,$3A(a0)
0001392A                             
0001392A                            loc2_1AD78:
0001392A 588F                       		addq.l	#4,sp
0001392C 0C78 0060 EED8             		cmpi.w	#$60,($FFFFEED8).w
00013932 6700                       		beq.s	loc2_1AD8C
00013934 6400                       		bcc.s	loc2_1AD88
00013936 5878 EED8                  		addq.w	#4,($FFFFEED8).w
0001393A                             
0001393A                            loc2_1AD88:
0001393A 5578 EED8                  		subq.w	#2,($FFFFEED8).w
0001393E                             
0001393E                            loc2_1AD8C:
0001393E 6100 FC98                  		bsr.w	Sonic_LevelBound
00013942 6100 0000                  		bsr.w	Sonic_AnglePos
00013946 31FC 0060 F73E             		move.w	#$60,($FFFFF73E).w	; reset looking up/down
0001394C 4E75                       		rts
0001394E                            ; End of subroutine Sonic_Spin_Dash
0001394E                            
0001394E                            
0001394E                            ; ---------------------------------------------------------------------------
0001394E                            ; Subroutine to	slow Sonic walking up a	slope
0001394E                            ; ---------------------------------------------------------------------------
0001394E                            
0001394E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001394E                            
0001394E                            
0001394E                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001394E 1028 0026                  		move.b	$26(a0),d0
00013952 0600 0060                  		addi.b	#$60,d0
00013956 0C00 00C0                  		cmpi.b	#$C0,d0
0001395A 6400                       		bcc.s	locret_13508
0001395C 1028 0026                  		move.b	$26(a0),d0
00013960 4EB9 0000 29BA             		jsr	(CalcSine).l
00013966 C1FC 0020                  		muls.w	#$20,d0
0001396A E080                       		asr.l	#8,d0
0001396C 4A68 0014                  		tst.w	$14(a0)
00013970 6700                       		beq.s	locret_13508
00013972 6B00                       		bmi.s	loc_13504
00013974 4A40                       		tst.w	d0
00013976 6700                       		beq.s	locret_13502
00013978 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001397C                            
0001397C                            locret_13502:
0001397C 4E75                       		rts	
0001397E                            ; ===========================================================================
0001397E                            
0001397E                            loc_13504:
0001397E D168 0014                  		add.w	d0,$14(a0)
00013982                            
00013982                            locret_13508:
00013982 4E75                       		rts	
00013984                            ; End of function Sonic_SlopeResist
00013984                            
00013984                            ; ---------------------------------------------------------------------------
00013984                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013984                            ; ---------------------------------------------------------------------------
00013984                            
00013984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013984                            
00013984                            
00013984                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013984 1028 0026                  		move.b	$26(a0),d0
00013988 0600 0060                  		addi.b	#$60,d0
0001398C 0C00 00C0                  		cmpi.b	#-$40,d0
00013990 6400                       		bcc.s	locret_13544
00013992 1028 0026                  		move.b	$26(a0),d0
00013996 4EB9 0000 29BA             		jsr	(CalcSine).l
0001399C C1FC 0050                  		muls.w	#$50,d0
000139A0 E080                       		asr.l	#8,d0
000139A2 4A68 0014                  		tst.w	$14(a0)
000139A6 6B00                       		bmi.s	loc_1353A
000139A8 4A40                       		tst.w	d0
000139AA 6A00                       		bpl.s	loc_13534
000139AC E480                       		asr.l	#2,d0
000139AE                            
000139AE                            loc_13534:
000139AE D168 0014                  		add.w	d0,$14(a0)
000139B2 4E75                       		rts	
000139B4                            ; ===========================================================================
000139B4                            
000139B4                            loc_1353A:
000139B4 4A40                       		tst.w	d0
000139B6 6B00                       		bmi.s	loc_13540
000139B8 E480                       		asr.l	#2,d0
000139BA                            
000139BA                            loc_13540:
000139BA D168 0014                  		add.w	d0,$14(a0)
000139BE                            
000139BE                            locret_13544:
000139BE 4E75                       		rts	
000139C0                            ; End of function Sonic_RollRepel
000139C0                            
000139C0                            ; ---------------------------------------------------------------------------
000139C0                            ; Subroutine to	push Sonic down	a slope
000139C0                            ; ---------------------------------------------------------------------------
000139C0                            
000139C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139C0                            
000139C0                            
000139C0                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000139C0 4E71                       		nop	
000139C2 4A28 0038                  		tst.b	$38(a0)
000139C6 6600                       		bne.s	locret_13580
000139C8 4A68 003E                  		tst.w	$3E(a0)
000139CC 6600                       		bne.s	loc_13582
000139CE 1028 0026                  		move.b	$26(a0),d0
000139D2 0600 0020                  		addi.b	#$20,d0
000139D6 0200 00C0                  		andi.b	#$C0,d0
000139DA 6700                       		beq.s	locret_13580
000139DC 3028 0014                  		move.w	$14(a0),d0
000139E0 6A00                       		bpl.s	loc_1356A
000139E2 4440                       		neg.w	d0
000139E4                            
000139E4                            loc_1356A:
000139E4 0C40 0280                  		cmpi.w	#$280,d0
000139E8 6400                       		bcc.s	locret_13580
000139EA 4268 0014                  		clr.w	$14(a0)
000139EE 08E8 0001 0022             		bset	#1,$22(a0)
000139F4 317C 001E 003E             		move.w	#$1E,$3E(a0)
000139FA                            
000139FA                            locret_13580:
000139FA 4E75                       		rts	
000139FC                            ; ===========================================================================
000139FC                            
000139FC                            loc_13582:
000139FC 5368 003E                  		subq.w	#1,$3E(a0)
00013A00 4E75                       		rts	
00013A02                            ; End of function Sonic_SlopeRepel
00013A02                            
00013A02                            ; ---------------------------------------------------------------------------
00013A02                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013A02                            ; ---------------------------------------------------------------------------
00013A02                            
00013A02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A02                            
00013A02                            
00013A02                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A02 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013A06 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013A08 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013A0A                            
00013A0A 5400                       		addq.b	#2,d0		; increase angle
00013A0C 6400                       		bcc.s	loc_13596
00013A0E 7000                       		moveq	#0,d0
00013A10                            
00013A10                            loc_13596:
00013A10 6000                       		bra.s	loc_1359E
00013A12                            ; ===========================================================================
00013A12                            
00013A12                            loc_13598:
00013A12 5500                       		subq.b	#2,d0		; decrease angle
00013A14 6400                       		bcc.s	loc_1359E
00013A16 7000                       		moveq	#0,d0
00013A18                            
00013A18                            loc_1359E:
00013A18 1140 0026                  		move.b	d0,$26(a0)
00013A1C                            
00013A1C                            locret_135A2:
00013A1C 4E75                       		rts	
00013A1E                            ; End of function Sonic_JumpAngle
00013A1E                            
00013A1E                            ; ---------------------------------------------------------------------------
00013A1E                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013A1E                            ; ---------------------------------------------------------------------------
00013A1E                            
00013A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A1E                            
00013A1E                            
00013A1E                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013A1E 3228 0010                  		move.w	$10(a0),d1
00013A22 3428 0012                  		move.w	$12(a0),d2
00013A26 4EB9 0000 2C88             		jsr	(CalcAngle).l
00013A2C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013A30 0400 0020                  		subi.b	#$20,d0
00013A34 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013A38 0200 00C0                  		andi.b	#$C0,d0
00013A3C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013A40 0C00 0040                  		cmpi.b	#$40,d0
00013A44 6700 0000                  		beq.w	loc_13680
00013A48 0C00 0080                  		cmpi.b	#$80,d0
00013A4C 6700 0000                  		beq.w	loc_136E2
00013A50 0C00 00C0                  		cmpi.b	#-$40,d0
00013A54 6700 0000                  		beq.w	loc_1373E
00013A58 6100 0000                  		bsr.w	Sonic_HitWall
00013A5C 4A41                       		tst.w	d1
00013A5E 6A00                       		bpl.s	loc_135F0
00013A60 9368 0008                  		sub.w	d1,8(a0)
00013A64 317C 0000 0010             		move.w	#0,$10(a0)
00013A6A                            
00013A6A                            loc_135F0:
00013A6A 6100 0000                  		bsr.w	sub_14EB4
00013A6E 4A41                       		tst.w	d1
00013A70 6A00                       		bpl.s	loc_13602
00013A72 D368 0008                  		add.w	d1,8(a0)
00013A76 317C 0000 0010             		move.w	#0,$10(a0)
00013A7C                            
00013A7C                            loc_13602:
00013A7C 6100 0000                  		bsr.w	Sonic_HitFloor
00013A80 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013A84 4A41                       		tst.w	d1
00013A86 6A00                       		bpl.s	locret_1367E
00013A88 1428 0012                  		move.b	$12(a0),d2
00013A8C 5002                       		addq.b	#8,d2
00013A8E 4402                       		neg.b	d2
00013A90 B202                       		cmp.b	d2,d1
00013A92 6C00                       		bge.s	loc_1361E
00013A94 B002                       		cmp.b	d2,d0
00013A96 6D00                       		blt.s	locret_1367E
00013A98                            
00013A98                            loc_1361E:
00013A98 D368 000C                  		add.w	d1,$C(a0)
00013A9C 1143 0026                  		move.b	d3,$26(a0)
00013AA0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013AA4 117C 0000 001C             		move.b	#0,$1C(a0)
00013AAA 1003                       		move.b	d3,d0
00013AAC 0600 0020                  		addi.b	#$20,d0
00013AB0 0200 0040                  		andi.b	#$40,d0
00013AB4 6600                       		bne.s	loc_1365C
00013AB6 1003                       		move.b	d3,d0
00013AB8 0600 0010                  		addi.b	#$10,d0
00013ABC 0200 0020                  		andi.b	#$20,d0
00013AC0 6700                       		beq.s	loc_1364E
00013AC2 E0E8 0012                  		asr	$12(a0)
00013AC6 6000                       		bra.s	loc_13670
00013AC8                            ; ===========================================================================
00013AC8                            
00013AC8                            loc_1364E:
00013AC8 317C 0000 0012             		move.w	#0,$12(a0)
00013ACE 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013AD4 4E75                       		rts	
00013AD6                            ; ===========================================================================
00013AD6                            
00013AD6                            loc_1365C:
00013AD6 317C 0000 0010             		move.w	#0,$10(a0)
00013ADC 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013AE2 6F00                       		ble.s	loc_13670
00013AE4 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013AEA                            
00013AEA                            loc_13670:
00013AEA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013AF0 4A03                       		tst.b	d3
00013AF2 6A00                       		bpl.s	locret_1367E
00013AF4 4468 0014                  		neg.w	$14(a0)
00013AF8                            
00013AF8                            locret_1367E:
00013AF8 4E75                       		rts	
00013AFA                            ; ===========================================================================
00013AFA                            
00013AFA                            loc_13680:
00013AFA 6100 0000                  		bsr.w	Sonic_HitWall
00013AFE 4A41                       		tst.w	d1
00013B00 6A00                       		bpl.s	loc_1369A
00013B02 9368 0008                  		sub.w	d1,8(a0)
00013B06 317C 0000 0010             		move.w	#0,$10(a0)
00013B0C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013B12 4E75                       		rts	
00013B14                            ; ===========================================================================
00013B14                            
00013B14                            loc_1369A:
00013B14 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B18 4A41                       		tst.w	d1
00013B1A 6A00                       		bpl.s	loc_136B4
00013B1C 9368 000C                  		sub.w	d1,$C(a0)
00013B20 4A68 0012                  		tst.w	$12(a0)
00013B24 6A00                       		bpl.s	locret_136B2
00013B26 317C 0000 0012             		move.w	#0,$12(a0)
00013B2C                            
00013B2C                            locret_136B2:
00013B2C 4E75                       		rts	
00013B2E                            ; ===========================================================================
00013B2E                            
00013B2E                            loc_136B4:
00013B2E 4A68 0012                  		tst.w	$12(a0)
00013B32 6B00                       		bmi.s	locret_136E0
00013B34 6100 0000                  		bsr.w	Sonic_HitFloor
00013B38 4A41                       		tst.w	d1
00013B3A 6A00                       		bpl.s	locret_136E0
00013B3C D368 000C                  		add.w	d1,$C(a0)
00013B40 1143 0026                  		move.b	d3,$26(a0)
00013B44 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013B48 117C 0000 001C             		move.b	#0,$1C(a0)
00013B4E 317C 0000 0012             		move.w	#0,$12(a0)
00013B54 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013B5A                            
00013B5A                            locret_136E0:
00013B5A 4E75                       		rts	
00013B5C                            ; ===========================================================================
00013B5C                            
00013B5C                            loc_136E2:
00013B5C 6100 0000                  		bsr.w	Sonic_HitWall
00013B60 4A41                       		tst.w	d1
00013B62 6A00                       		bpl.s	loc_136F4
00013B64 9368 0008                  		sub.w	d1,8(a0)
00013B68 317C 0000 0010             		move.w	#0,$10(a0)
00013B6E                            
00013B6E                            loc_136F4:
00013B6E 6100 0000                  		bsr.w	sub_14EB4
00013B72 4A41                       		tst.w	d1
00013B74 6A00                       		bpl.s	loc_13706
00013B76 D368 0008                  		add.w	d1,8(a0)
00013B7A 317C 0000 0010             		move.w	#0,$10(a0)
00013B80                            
00013B80                            loc_13706:
00013B80 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B84 4A41                       		tst.w	d1
00013B86 6A00                       		bpl.s	locret_1373C
00013B88 9368 000C                  		sub.w	d1,$C(a0)
00013B8C 1003                       		move.b	d3,d0
00013B8E 0600 0020                  		addi.b	#$20,d0
00013B92 0200 0040                  		andi.b	#$40,d0
00013B96 6600                       		bne.s	loc_13726
00013B98 317C 0000 0012             		move.w	#0,$12(a0)
00013B9E 4E75                       		rts	
00013BA0                            ; ===========================================================================
00013BA0                            
00013BA0                            loc_13726:
00013BA0 1143 0026                  		move.b	d3,$26(a0)
00013BA4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013BA8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013BAE 4A03                       		tst.b	d3
00013BB0 6A00                       		bpl.s	locret_1373C
00013BB2 4468 0014                  		neg.w	$14(a0)
00013BB6                            
00013BB6                            locret_1373C:
00013BB6 4E75                       		rts	
00013BB8                            ; ===========================================================================
00013BB8                            
00013BB8                            loc_1373E:
00013BB8 6100 0000                  		bsr.w	sub_14EB4
00013BBC 4A41                       		tst.w	d1
00013BBE 6A00                       		bpl.s	loc_13758
00013BC0 D368 0008                  		add.w	d1,8(a0)
00013BC4 317C 0000 0010             		move.w	#0,$10(a0)
00013BCA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013BD0 4E75                       		rts	
00013BD2                            ; ===========================================================================
00013BD2                            
00013BD2                            loc_13758:
00013BD2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013BD6 4A41                       		tst.w	d1
00013BD8 6A00                       		bpl.s	loc_13772
00013BDA 9368 000C                  		sub.w	d1,$C(a0)
00013BDE 4A68 0012                  		tst.w	$12(a0)
00013BE2 6A00                       		bpl.s	locret_13770
00013BE4 317C 0000 0012             		move.w	#0,$12(a0)
00013BEA                            
00013BEA                            locret_13770:
00013BEA 4E75                       		rts	
00013BEC                            ; ===========================================================================
00013BEC                            
00013BEC                            loc_13772:
00013BEC 4A68 0012                  		tst.w	$12(a0)
00013BF0 6B00                       		bmi.s	locret_1379E
00013BF2 6100 0000                  		bsr.w	Sonic_HitFloor
00013BF6 4A41                       		tst.w	d1
00013BF8 6A00                       		bpl.s	locret_1379E
00013BFA D368 000C                  		add.w	d1,$C(a0)
00013BFE 1143 0026                  		move.b	d3,$26(a0)
00013C02 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C06 117C 0000 001C             		move.b	#0,$1C(a0)
00013C0C 317C 0000 0012             		move.w	#0,$12(a0)
00013C12 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C18                            
00013C18                            locret_1379E:
00013C18 4E75                       		rts	
00013C1A                            ; End of function Sonic_Floor
00013C1A                            
00013C1A                            ; ---------------------------------------------------------------------------
00013C1A                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013C1A                            ; ---------------------------------------------------------------------------
00013C1A                            
00013C1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C1A                            
00013C1A                            
00013C1A                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013C1A 0828 0004 0022             		btst	#4,$22(a0)
00013C20 6700                       		beq.s	loc_137AE
00013C22 4E71                       		nop	
00013C24 4E71                       		nop	
00013C26 4E71                       		nop	
00013C28                            
00013C28                            loc_137AE:
00013C28 08A8 0005 0022             		bclr	#5,$22(a0)
00013C2E 08A8 0001 0022             		bclr	#1,$22(a0)
00013C34 08A8 0004 0022             		bclr	#4,$22(a0)
00013C3A 0828 0002 0022             		btst	#2,$22(a0)
00013C40 6700                       		beq.s	loc_137E4
00013C42 08A8 0002 0022             		bclr	#2,$22(a0)
00013C48 117C 0013 0016             		move.b	#$13,$16(a0)
00013C4E 117C 0009 0017             		move.b	#9,$17(a0)
00013C54 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013C5A 5B68 000C                  		subq.w	#5,$C(a0)
00013C5E                            
00013C5E                            loc_137E4:
00013C5E 117C 0000 003C             		move.b	#0,$3C(a0)
00013C64 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013C6A 4E75                       		rts	
00013C6C                            ; End of function Sonic_ResetOnFloor
00013C6C                            
00013C6C                            ; ===========================================================================
00013C6C                            ; ---------------------------------------------------------------------------
00013C6C                            ; Sonic	when he	gets hurt
00013C6C                            ; ---------------------------------------------------------------------------
00013C6C                            
00013C6C                            Obj01_Hurt:				; XREF: Obj01_Index
00013C6C 4EBA 991C                  		jsr	SpeedToPos
00013C70 0668 0030 0012             		addi.w	#$30,$12(a0)
00013C76 0828 0006 0022             		btst	#6,$22(a0)
00013C7C 6700                       		beq.s	loc_1380C
00013C7E 0468 0020 0012             		subi.w	#$20,$12(a0)
00013C84                            
00013C84                            loc_1380C:
00013C84 6100 0000                  		bsr.w	Sonic_HurtStop
00013C88 6100 F94E                  		bsr.w	Sonic_LevelBound
00013C8C 6100 F390                  		bsr.w	Sonic_RecordPos
00013C90 6100 0000                  		bsr.w	Sonic_Animate
00013C94 6100 0000                  		bsr.w	LoadSonicDynPLC
00013C98 4EFA 9916                  		jmp	DisplaySprite
00013C9C                            
00013C9C                            ; ---------------------------------------------------------------------------
00013C9C                            ; Subroutine to	stop Sonic falling after he's been hurt
00013C9C                            ; ---------------------------------------------------------------------------
00013C9C                            
00013C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C9C                            
00013C9C                            
00013C9C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013C9C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013CA0 0640 00E0                  		addi.w	#$E0,d0
00013CA4 B068 000C                  		cmp.w	$C(a0),d0
00013CA8 6500 0000                  		bcs.w	KillSonic
00013CAC 6100 FD70                  		bsr.w	Sonic_Floor
00013CB0 0828 0001 0022             		btst	#1,$22(a0)
00013CB6 6600                       		bne.s	locret_13860
00013CB8 7000                       		moveq	#0,d0
00013CBA 3140 0012                  		move.w	d0,$12(a0)
00013CBE 3140 0010                  		move.w	d0,$10(a0)
00013CC2 3140 0014                  		move.w	d0,$14(a0)
00013CC6 117C 0000 001C             		move.b	#0,$1C(a0)
00013CCC 5528 0024                  		subq.b	#2,$24(a0)
00013CD0 317C 0078 0030             		move.w	#$78,$30(a0)
00013CD6                            
00013CD6                            locret_13860:
00013CD6 4E75                       		rts	
00013CD8                            ; End of function Sonic_HurtStop
00013CD8                            
00013CD8                            ; ===========================================================================
00013CD8                            ; ---------------------------------------------------------------------------
00013CD8                            ; Sonic	when he	dies
00013CD8                            ; ---------------------------------------------------------------------------
00013CD8                            
00013CD8                            Obj01_Death:				; XREF: Obj01_Index
00013CD8 6100 0000                  		bsr.w	GameOver
00013CDC 4EBA 9880                  		jsr	ObjectFall
00013CE0 6100 F33C                  		bsr.w	Sonic_RecordPos
00013CE4 6100 0000                  		bsr.w	Sonic_Animate
00013CE8 6100 0000                  		bsr.w	LoadSonicDynPLC
00013CEC 4EFA 98C2                  		jmp	DisplaySprite
00013CF0                            
00013CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CF0                            
00013CF0                            
00013CF0                            GameOver:				; XREF: Obj01_Death
00013CF0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013CF4 0640 0100                  		addi.w	#$100,d0
00013CF8 B068 000C                  		cmp.w	$C(a0),d0
00013CFC 6400 0000                  		bcc.w	locret_13900
00013D00 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013D06 5428 0024                  		addq.b	#2,$24(a0)
00013D0A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013D0E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013D12 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013D16 6600                       		bne.s	loc_138D4
00013D18 317C 0000 003A             		move.w	#0,$3A(a0)
00013D1E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013D24 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013D2A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013D30 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013D34                            
00013D34                            loc_138C2:
00013D34 303C 009E                  		move.w	#$9E,d0
00013D38 4EB9 0000 12C6             		jsr	(PlaySound).l	; play game over music
00013D3E 7003                       		moveq	#3,d0
00013D40 4EF9 0000 1540             		jmp	(LoadPLC).l	; load game over patterns
00013D46                            ; ===========================================================================
00013D46                            
00013D46                            loc_138D4:
00013D46 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013D4C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013D50 6700                       		beq.s	locret_13900	; if not, branch
00013D52 317C 0000 003A             		move.w	#0,$3A(a0)
00013D58 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013D5E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013D64 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013D6A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013D70 60C2                       		bra.s	loc_138C2
00013D72                            ; ===========================================================================
00013D72                            
00013D72                            locret_13900:
00013D72 4E75                       		rts	
00013D74                            ; End of function GameOver
00013D74                            
00013D74                            ; ===========================================================================
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            ; Sonic	when the level is restarted
00013D74                            ; ---------------------------------------------------------------------------
00013D74                            
00013D74                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013D74 4A68 003A                  		tst.w	$3A(a0)
00013D78 6700                       		beq.s	locret_13914
00013D7A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013D7E 6600                       		bne.s	locret_13914
00013D80 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013D86                            
00013D86                            locret_13914:
00013D86 4E75                       		rts	
00013D88                            
00013D88                            ; ---------------------------------------------------------------------------
00013D88                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013D88                            ; ---------------------------------------------------------------------------
00013D88                            
00013D88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D88                            
00013D88                            
00013D88                            Sonic_Loops:				; XREF: Obj01_Control
00013D88 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013D8E 6700                       		beq.s	loc_13926	; if yes, branch
00013D90 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013D94 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013D98                            
00013D98                            loc_13926:
00013D98 3028 000C                  		move.w	$C(a0),d0
00013D9C E248                       		lsr.w	#1,d0
00013D9E 0240 0380                  		andi.w	#$380,d0
00013DA2 1228 0008                  		move.b	8(a0),d1
00013DA6 0241 007F                  		andi.w	#$7F,d1
00013DAA D041                       		add.w	d1,d0
00013DAC 43F8 A400                  		lea	($FFFFA400).w,a1
00013DB0 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013DB4 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013DB8 6700 F8D2                  		beq.w	Obj01_ChkRoll
00013DBC B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013DC0 6700 F8CA                  		beq.w	Obj01_ChkRoll
00013DC4 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013DC8 6700                       		beq.s	loc_13976
00013DCA B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013DCE 6700                       		beq.s	loc_13966
00013DD0 08A8 0006 0001             		bclr	#6,1(a0)
00013DD6 4E75                       		rts	
00013DD8                            ; ===========================================================================
00013DD8                            
00013DD8                            loc_13966:
00013DD8 0828 0001 0022             		btst	#1,$22(a0)
00013DDE 6700                       		beq.s	loc_13976
00013DE0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013DE6 4E75                       		rts	
00013DE8                            ; ===========================================================================
00013DE8                            
00013DE8                            loc_13976:
00013DE8 3428 0008                  		move.w	8(a0),d2
00013DEC 0C02 002C                  		cmpi.b	#$2C,d2
00013DF0 6400                       		bcc.s	loc_13988
00013DF2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013DF8 4E75                       		rts	
00013DFA                            ; ===========================================================================
00013DFA                            
00013DFA                            loc_13988:
00013DFA 0C02 00E0                  		cmpi.b	#-$20,d2
00013DFE 6500                       		bcs.s	loc_13996
00013E00 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013E06 4E75                       		rts	
00013E08                            ; ===========================================================================
00013E08                            
00013E08                            loc_13996:
00013E08 0828 0006 0001             		btst	#6,1(a0)
00013E0E 6600                       		bne.s	loc_139B2
00013E10 1228 0026                  		move.b	$26(a0),d1
00013E14 6700                       		beq.s	locret_139C2
00013E16 0C01 0080                  		cmpi.b	#-$80,d1
00013E1A 6200                       		bhi.s	locret_139C2
00013E1C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013E22 4E75                       		rts	
00013E24                            ; ===========================================================================
00013E24                            
00013E24                            loc_139B2:
00013E24 1228 0026                  		move.b	$26(a0),d1
00013E28 0C01 0080                  		cmpi.b	#-$80,d1
00013E2C 6300                       		bls.s	locret_139C2
00013E2E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013E34                            
00013E34                            locret_139C2:
00013E34 4E75                       		rts	
00013E36                            ; End of function Sonic_Loops
00013E36                            
00013E36                            ; ---------------------------------------------------------------------------
00013E36                            ; Subroutine to	animate	Sonic's sprites
00013E36                            ; ---------------------------------------------------------------------------
00013E36                            
00013E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E36                            
00013E36                            
00013E36                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013E36 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013E3C 7000                       		moveq	#0,d0
00013E3E 1028 001C                  		move.b	$1C(a0),d0
00013E42 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013E46 6700                       		beq.s	SAnim_Do	; if not, branch
00013E48 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013E4C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013E52 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013E58                            
00013E58                            SAnim_Do:
00013E58 D040                       		add.w	d0,d0
00013E5A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013E5E 1011                       		move.b	(a1),d0
00013E60 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013E62 1228 0022                  		move.b	$22(a0),d1
00013E66 0201 0001                  		andi.b	#1,d1
00013E6A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013E70 8328 0001                  		or.b	d1,1(a0)
00013E74 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013E78 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013E7A 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013E7E                            
00013E7E                            SAnim_Do2:
00013E7E 7200                       		moveq	#0,d1
00013E80 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013E84 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013E88 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013E8A                            
00013E8A                            SAnim_Next:
00013E8A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013E8E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013E92                            
00013E92                            SAnim_Delay:
00013E92 4E75                       		rts	
00013E94                            ; ===========================================================================
00013E94                            
00013E94                            SAnim_End_FF:
00013E94 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013E96 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013E98 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013E9E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013EA2 60E6                       		bra.s	SAnim_Next
00013EA4                            ; ===========================================================================
00013EA4                            
00013EA4                            SAnim_End_FE:
00013EA4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013EA6 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013EA8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013EAC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013EB0 9200                       		sub.b	d0,d1
00013EB2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013EB6 60D2                       		bra.s	SAnim_Next
00013EB8                            ; ===========================================================================
00013EB8                            
00013EB8                            SAnim_End_FD:
00013EB8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013EBA 6600                       		bne.s	SAnim_End	; if not, branch
00013EBC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013EC2                            
00013EC2                            SAnim_End:
00013EC2 4E75                       		rts	
00013EC4                            ; ===========================================================================
00013EC4                            
00013EC4                            SAnim_WalkRun:				; XREF: SAnim_Do
00013EC4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013EC8 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013ECA 5200                       		addq.b	#1,d0		; is animation walking/running?
00013ECC 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013ED0 7200                       		moveq	#0,d1
00013ED2 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013ED6 1428 0022                  		move.b	$22(a0),d2
00013EDA 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013EDE 6600                       		bne.s	loc_13A70	; if yes, branch
00013EE0 4600                       		not.b	d0		; reverse angle
00013EE2                            
00013EE2                            loc_13A70:
00013EE2 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013EE6 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013EE8 7203                       		moveq	#3,d1
00013EEA                            
00013EEA                            loc_13A78:
00013EEA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013EF0 B302                       		eor.b	d1,d2
00013EF2 8528 0001                  		or.b	d2,1(a0)
00013EF6 0828 0005 0022             		btst	#5,$22(a0)
00013EFC 6600 0000                  		bne.w	SAnim_Push
00013F00 E808                       		lsr.b	#4,d0		; divide angle by $10
00013F02 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013F06 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013F0A 6A00                       		bpl.s	loc_13A9C
00013F0C 4442                       		neg.w	d2
00013F0E                            
00013F0E                            loc_13A9C:
00013F0E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013F14 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013F18 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013F1A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013F20 1200                       		move.b	d0,d1
00013F22 E209                       		lsr.b	#1,d1
00013F24 D001                       		add.b	d1,d0
00013F26                            
00013F26                            loc_13AB4:
00013F26 D000                       		add.b	d0,d0
00013F28 1600                       		move.b	d0,d3
00013F2A 4442                       		neg.w	d2
00013F2C 0642 0800                  		addi.w	#$800,d2
00013F30 6A00                       		bpl.s	loc_13AC2
00013F32 7400                       		moveq	#0,d2
00013F34                            
00013F34                            loc_13AC2:
00013F34 E04A                       		lsr.w	#8,d2
00013F36 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013F3A 6100 FF42                  		bsr.w	SAnim_Do2
00013F3E D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013F42 4E75                       		rts	
00013F44                            ; ===========================================================================
00013F44                            
00013F44                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013F44 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013F46 6600                       		bne.s	SAnim_Push	; if not, branch
00013F48 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013F4C 6A00                       		bpl.s	loc_13ADE
00013F4E 4442                       		neg.w	d2
00013F50                            
00013F50                            loc_13ADE:
00013F50 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013F56 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013F5A 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013F5C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013F62                            
00013F62                            loc_13AF0:
00013F62 4442                       		neg.w	d2
00013F64 0642 0400                  		addi.w	#$400,d2
00013F68 6A00                       		bpl.s	loc_13AFA
00013F6A 7400                       		moveq	#0,d2
00013F6C                            
00013F6C                            loc_13AFA:
00013F6C E04A                       		lsr.w	#8,d2
00013F6E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013F72 1228 0022                  		move.b	$22(a0),d1
00013F76 0201 0001                  		andi.b	#1,d1
00013F7A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013F80 8328 0001                  		or.b	d1,1(a0)
00013F84 6000 FEF8                  		bra.w	SAnim_Do2
00013F88                            ; ===========================================================================
00013F88                            
00013F88                            SAnim_Push:				; XREF: SAnim_RollJump
00013F88 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013F8C 6B00                       		bmi.s	loc_13B1E
00013F8E 4442                       		neg.w	d2
00013F90                            
00013F90                            loc_13B1E:
00013F90 0642 0800                  		addi.w	#$800,d2
00013F94 6A00                       		bpl.s	loc_13B26
00013F96 7400                       		moveq	#0,d2
00013F98                            
00013F98                            loc_13B26:
00013F98 EC4A                       		lsr.w	#6,d2
00013F9A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013F9E 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013FA4 1228 0022                  		move.b	$22(a0),d1
00013FA8 0201 0001                  		andi.b	#1,d1
00013FAC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FB2 8328 0001                  		or.b	d1,1(a0)
00013FB6 6000 FEC6                  		bra.w	SAnim_Do2
00013FBA                            ; End of function Sonic_Animate
00013FBA                            
00013FBA                            ; ===========================================================================
00013FBA                            SonicAniData:
00013FBA                            	include "_anim\Sonic.asm"
00013FBA                            ; ---------------------------------------------------------------------------
00013FBA                            ; Animation script - Sonic
00013FBA                            ; ---------------------------------------------------------------------------
00013FBA 0000                       		dc.w SonAni_Walk-SonicAniData
00013FBC 0000                       		dc.w SonAni_Run-SonicAniData
00013FBE 0000                       		dc.w SonAni_Roll-SonicAniData
00013FC0 0000                       		dc.w SonAni_Roll2-SonicAniData
00013FC2 0000                       		dc.w SonAni_Push-SonicAniData
00013FC4 0000                       		dc.w SonAni_Wait-SonicAniData
00013FC6 0000                       		dc.w SonAni_Balance-SonicAniData
00013FC8 0000                       		dc.w SonAni_LookUp-SonicAniData
00013FCA 0000                       		dc.w SonAni_Duck-SonicAniData
00013FCC 0000                       		dc.w SonAni_Warp1-SonicAniData
00013FCE 0000                       		dc.w SonAni_Warp2-SonicAniData
00013FD0 0000                       		dc.w SonAni_Warp3-SonicAniData
00013FD2 0000                       		dc.w SonAni_Warp4-SonicAniData
00013FD4 0000                       		dc.w SonAni_Stop-SonicAniData
00013FD6 0000                       		dc.w SonAni_Float1-SonicAniData
00013FD8 0000                       		dc.w SonAni_Float2-SonicAniData
00013FDA 0000                       		dc.w SonAni_Spring-SonicAniData
00013FDC 0000                       		dc.w SonAni_LZHang-SonicAniData
00013FDE 0000                       		dc.w SonAni_Leap1-SonicAniData
00013FE0 0000                       		dc.w SonAni_Leap2-SonicAniData
00013FE2 0000                       		dc.w SonAni_Surf-SonicAniData
00013FE4 0000                       		dc.w SonAni_Bubble-SonicAniData
00013FE6 0000                       		dc.w SonAni_Death1-SonicAniData
00013FE8 0000                       		dc.w SonAni_Drown-SonicAniData
00013FEA 0000                       		dc.w SonAni_Death2-SonicAniData
00013FEC 0000                       		dc.w SonAni_Shrink-SonicAniData
00013FEE 0000                       		dc.w SonAni_Hurt-SonicAniData
00013FF0 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013FF2 0000                       		dc.w SonAni_Blank-SonicAniData
00013FF4 0000                       		dc.w SonAni_Float3-SonicAniData
00013FF6 0000                       		dc.w SonAni_Float4-SonicAniData
00013FF8 0000                       		dc.w SonAni_Spin_Dash-SonicAniData	;1F
00013FFA FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00014002 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001400A FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014012 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001401A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014022 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014038 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
0001403C 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014040 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014044 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014048 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001404C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014050 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014054 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014058 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001405C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014064 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014068 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001406C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014072 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014078 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001407C 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014084 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014088 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001408C 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014090 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001409A 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
0001409E 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000140A2 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000140A6 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000140AE 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000140B2 0058 5958 5A58 5B58 5C58+  SonAni_Spin_Dash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
000140BE                            		even
000140BE                            		even
000140BE                            
000140BE                            ; ---------------------------------------------------------------------------
000140BE                            ; Sonic	pattern	loading	subroutine
000140BE                            ; ---------------------------------------------------------------------------
000140BE                            
000140BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140BE                            
000140BE                            
000140BE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000140BE 7000                       		moveq	#0,d0
000140C0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000140C4 B038 F766                  		cmp.b	($FFFFF766).w,d0
000140C8 6700                       		beq.s	locret_13C96
000140CA 11C0 F766                  		move.b	d0,($FFFFF766).w
000140CE 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000140D4 D040                       		add.w	d0,d0
000140D6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000140DA 7A00                       		moveq	#0,d5
000140DC 1A1A                       		move.b	(a2)+,d5
000140DE 5345                       		subq.w	#1,d5
000140E0 6B00                       		bmi.s	locret_13C96
000140E2 383C F000                  		move.w	#$F000,d4
000140E6 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000140EC                             
000140EC                            SPLC_ReadEntry:
000140EC 7200                       		moveq	#0,d1
000140EE 121A                       		move.b	(a2)+,d1
000140F0 E149                       		lsl.w	#8,d1
000140F2 121A                       		move.b	(a2)+,d1
000140F4 3601                       		move.w	d1,d3
000140F6 E04B                       		lsr.w	#8,d3
000140F8 0243 00F0                  		andi.w	#$F0,d3
000140FC 0643 0010                  		addi.w	#$10,d3
00014100 0241 0FFF                  		andi.w	#$FFF,d1
00014104 EB89                       		lsl.l	#5,d1
00014106 D286                       		add.l	d6,d1
00014108 3404                       		move.w	d4,d2
0001410A D843                       		add.w	d3,d4
0001410C D843                       		add.w	d3,d4
0001410E 4EB9 0000 1370             		jsr	(QueueDMATransfer).l
00014114 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00014118                             
00014118                            locret_13C96:
00014118 4E75                       		rts	
0001411A                            ; End of function LoadSonicDynPLC
0001411A                            
0001411A                            ; ===========================================================================
0001411A                            ; ---------------------------------------------------------------------------
0001411A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001411A                            ; ---------------------------------------------------------------------------
0001411A                            
0001411A                            Obj0A:					; XREF: Obj_Index
0001411A 7000                       		moveq	#0,d0
0001411C 1028 0024                  		move.b	$24(a0),d0
00014120 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014124 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014128                            ; ===========================================================================
00014128 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001412C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014130 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014134 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014138 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001413A                            ; ===========================================================================
0001413A                            
0001413A                            Obj0A_Main:				; XREF: Obj0A_Index
0001413A 5428 0024                  		addq.b	#2,$24(a0)
0001413E 217C 0001 2938 0004        		move.l	#Map_obj64,4(a0)
00014146 317C 8348 0002             		move.w	#$8348,2(a0)
0001414C 117C 0084 0001             		move.b	#$84,1(a0)
00014152 117C 0010 0019             		move.b	#$10,$19(a0)
00014158 117C 0001 0018             		move.b	#1,$18(a0)
0001415E 1028 0028                  		move.b	$28(a0),d0
00014162 6A00                       		bpl.s	loc_13D00
00014164 5028 0024                  		addq.b	#8,$24(a0)
00014168 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014170 317C 0440 0002             		move.w	#$440,2(a0)
00014176 0240 007F                  		andi.w	#$7F,d0
0001417A 1140 0033                  		move.b	d0,$33(a0)
0001417E 6000 0000                  		bra.w	Obj0A_Countdown
00014182                            ; ===========================================================================
00014182                            
00014182                            loc_13D00:
00014182 1140 001C                  		move.b	d0,$1C(a0)
00014186 3168 0008 0030             		move.w	8(a0),$30(a0)
0001418C 317C FF78 0012             		move.w	#-$88,$12(a0)
00014192                            
00014192                            Obj0A_Animate:				; XREF: Obj0A_Index
00014192 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014198 4EB9 0000 A6EC             		jsr	AnimateSprite
0001419E                            
0001419E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001419E 3038 F646                  		move.w	($FFFFF646).w,d0
000141A2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000141A6 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000141A8 117C 0006 0024             		move.b	#6,$24(a0)
000141AE 5E28 001C                  		addq.b	#7,$1C(a0)
000141B2 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000141B8 6700                       		beq.s	Obj0A_Display
000141BA 6000                       		bra.s	Obj0A_Display
000141BC                            ; ===========================================================================
000141BC                            
000141BC                            Obj0A_Wobble:
000141BC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000141C0 6700                       		beq.s	loc_13D44
000141C2 5868 0030                  		addq.w	#4,$30(a0)
000141C6                            
000141C6                            loc_13D44:
000141C6 1028 0026                  		move.b	$26(a0),d0
000141CA 5228 0026                  		addq.b	#1,$26(a0)
000141CE 0240 007F                  		andi.w	#$7F,d0
000141D2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000141D8 1031 0000                  		move.b	(a1,d0.w),d0
000141DC 4880                       		ext.w	d0
000141DE D068 0030                  		add.w	$30(a0),d0
000141E2 3140 0008                  		move.w	d0,8(a0)
000141E6 6100                       		bsr.s	Obj0A_ShowNumber
000141E8 4EBA 93A0                  		jsr	SpeedToPos
000141EC 4A28 0001                  		tst.b	1(a0)
000141F0 6A00                       		bpl.s	Obj0A_Delete
000141F2 4EFA 93BC                  		jmp	DisplaySprite
000141F6                            ; ===========================================================================
000141F6                            
000141F6                            Obj0A_Delete:
000141F6 4EFA 93F4                  		jmp	DeleteObject
000141FA                            ; ===========================================================================
000141FA                            
000141FA                            Obj0A_Display:				; XREF: Obj0A_Index
000141FA 6100                       		bsr.s	Obj0A_ShowNumber
000141FC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014202 4EB9 0000 A6EC             		jsr	AnimateSprite
00014208 4EFA 93A6                  		jmp	DisplaySprite
0001420C                            ; ===========================================================================
0001420C                            
0001420C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001420C 4EFA 93DE                  		jmp	DeleteObject
00014210                            ; ===========================================================================
00014210                            
00014210                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014210 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014216 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014218 5368 0038                  		subq.w	#1,$38(a0)
0001421C 6600                       		bne.s	Obj0A_Display2
0001421E 117C 000E 0024             		move.b	#$E,$24(a0)
00014224 5E28 001C                  		addq.b	#7,$1C(a0)
00014228 60D0                       		bra.s	Obj0A_Display
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            Obj0A_Display2:
0001422A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014230 4EB9 0000 A6EC             		jsr	AnimateSprite
00014236 4A28 0001                  		tst.b	1(a0)
0001423A 6A00                       		bpl.s	Obj0A_Delete3
0001423C 4EFA 9372                  		jmp	DisplaySprite
00014240                            ; ===========================================================================
00014240                            
00014240                            Obj0A_Delete3:
00014240 4EFA 93AA                  		jmp	DeleteObject
00014244                            ; ===========================================================================
00014244                            
00014244                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014244 4A68 0038                  		tst.w	$38(a0)
00014248 6700                       		beq.s	locret_13E1A
0001424A 5368 0038                  		subq.w	#1,$38(a0)
0001424E 6600                       		bne.s	locret_13E1A
00014250 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014256 6400                       		bcc.s	locret_13E1A
00014258 317C 000F 0038             		move.w	#$F,$38(a0)
0001425E 4268 0012                  		clr.w	$12(a0)
00014262 117C 0080 0001             		move.b	#$80,1(a0)
00014268 3028 0008                  		move.w	8(a0),d0
0001426C 9078 F700                  		sub.w	($FFFFF700).w,d0
00014270 0640 0080                  		addi.w	#$80,d0
00014274 3140 0008                  		move.w	d0,8(a0)
00014278 3028 000C                  		move.w	$C(a0),d0
0001427C 9078 F704                  		sub.w	($FFFFF704).w,d0
00014280 0640 0080                  		addi.w	#$80,d0
00014284 3140 000A                  		move.w	d0,$A(a0)
00014288 117C 000C 0024             		move.b	#$C,$24(a0)
0001428E                            
0001428E                            locret_13E1A:
0001428E 4E75                       		rts	
00014290                            ; ===========================================================================
00014290                            Obj0A_WobbleData:
00014290 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000142A1 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000142B2 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000142C3 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000142D3 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000142E0 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000142ED FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000142FA FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014307 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014310                            ; ===========================================================================
00014310                            
00014310                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014310 4A68 002C                  		tst.w	$2C(a0)
00014314 6600 0000                  		bne.w	loc_13F86
00014318 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001431E 6400 0000                  		bcc.w	locret_1408C
00014322 0838 0006 D022             		btst	#6,($FFFFD022).w
00014328 6700 0000                  		beq.w	locret_1408C
0001432C 5368 0038                  		subq.w	#1,$38(a0)
00014330 6A00 0000                  		bpl.w	loc_13FAC
00014334 317C 003B 0038             		move.w	#59,$38(a0)
0001433A 317C 0001 0036             		move.w	#1,$36(a0)
00014340 4EB9 0000 2994             		jsr	(RandomNumber).l
00014346 0240 0001                  		andi.w	#1,d0
0001434A 1140 0034                  		move.b	d0,$34(a0)
0001434E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014352 0C40 0019                  		cmpi.w	#$19,d0
00014356 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014358 0C40 0014                  		cmpi.w	#$14,d0
0001435C 6700                       		beq.s	Obj0A_WarnSound
0001435E 0C40 000F                  		cmpi.w	#$F,d0
00014362 6700                       		beq.s	Obj0A_WarnSound
00014364 0C40 000C                  		cmpi.w	#$C,d0
00014368 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001436A 6600                       		bne.s	loc_13F02
0001436C 303C 009A                  		move.w	#$9A,d0
00014370 4EB9 0000 12C6             		jsr	(PlaySound).l	; play countdown music
00014376                            
00014376                            loc_13F02:
00014376 5328 0032                  		subq.b	#1,$32(a0)
0001437A 6A00                       		bpl.s	Obj0A_ReduceAir
0001437C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014382 08E8 0007 0036             		bset	#7,$36(a0)
00014388 6000                       		bra.s	Obj0A_ReduceAir
0001438A                            ; ===========================================================================
0001438A                            
0001438A                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001438A 303C 00C2                  		move.w	#$C2,d0
0001438E 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014394                            
00014394                            Obj0A_ReduceAir:
00014394 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014398 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001439C 6100 0000                  		bsr.w	ResumeMusic
000143A0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000143A6 303C 00B2                  		move.w	#$B2,d0
000143AA 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play drowning sound
000143B0 117C 000A 0034             		move.b	#$A,$34(a0)
000143B6 317C 0001 0036             		move.w	#1,$36(a0)
000143BC 317C 0078 002C             		move.w	#$78,$2C(a0)
000143C2 2F08                       		move.l	a0,-(sp)
000143C4 41F8 D000                  		lea	($FFFFD000).w,a0
000143C8 6100 F850                  		bsr.w	Sonic_ResetOnFloor
000143CC 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000143D2 08E8 0001 0022             		bset	#1,$22(a0)
000143D8 08E8 0007 0002             		bset	#7,2(a0)
000143DE 317C 0000 0012             		move.w	#0,$12(a0)
000143E4 317C 0000 0010             		move.w	#0,$10(a0)
000143EA 317C 0000 0014             		move.w	#0,$14(a0)
000143F0 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000143F6 205F                       		movea.l	(sp)+,a0
000143F8 4E75                       		rts	
000143FA                            ; ===========================================================================
000143FA                            
000143FA                            loc_13F86:
000143FA 5368 002C                  		subq.w	#1,$2C(a0)
000143FE 6600                       		bne.s	loc_13F94
00014400 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014406 4E75                       		rts	
00014408                            ; ===========================================================================
00014408                            
00014408                            loc_13F94:
00014408 2F08                       		move.l	a0,-(sp)
0001440A 41F8 D000                  		lea	($FFFFD000).w,a0
0001440E 4EBA 917A                  		jsr	SpeedToPos
00014412 0668 0010 0012             		addi.w	#$10,$12(a0)
00014418 205F                       		movea.l	(sp)+,a0
0001441A 6000                       		bra.s	loc_13FAC
0001441C                            ; ===========================================================================
0001441C                            
0001441C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001441C 6000                       		bra.s	Obj0A_MakeItem
0001441E                            ; ===========================================================================
0001441E                            
0001441E                            loc_13FAC:
0001441E 4A68 0036                  		tst.w	$36(a0)
00014422 6700 0000                  		beq.w	locret_1408C
00014426 5368 003A                  		subq.w	#1,$3A(a0)
0001442A 6A00 0000                  		bpl.w	locret_1408C
0001442E                            
0001442E                            Obj0A_MakeItem:
0001442E 4EB9 0000 2994             		jsr	(RandomNumber).l
00014434 0240 000F                  		andi.w	#$F,d0
00014438 3140 003A                  		move.w	d0,$3A(a0)
0001443C 4EBA 95F8                  		jsr	SingleObjLoad
00014440 6600 0000                  		bne.w	locret_1408C
00014444 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014448 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001444E 7006                       		moveq	#6,d0
00014450 0838 0000 D022             		btst	#0,($FFFFD022).w
00014456 6700                       		beq.s	loc_13FF2
00014458 4440                       		neg.w	d0
0001445A 137C 0040 0026             		move.b	#$40,$26(a1)
00014460                            
00014460                            loc_13FF2:
00014460 D169 0008                  		add.w	d0,8(a1)
00014464 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001446A 137C 0006 0028             		move.b	#6,$28(a1)
00014470 4A68 002C                  		tst.w	$2C(a0)
00014474 6700 0000                  		beq.w	loc_1403E
00014478 0268 0007 003A             		andi.w	#7,$3A(a0)
0001447E 0668 0000 003A             		addi.w	#0,$3A(a0)
00014484 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014488 0440 000C                  		subi.w	#$C,d0
0001448C 3340 000C                  		move.w	d0,$C(a1)
00014490 4EB9 0000 2994             		jsr	(RandomNumber).l
00014496 1340 0026                  		move.b	d0,$26(a1)
0001449A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001449E 0200 0003                  		andi.b	#3,d0
000144A2 6600                       		bne.s	loc_14082
000144A4 137C 000E 0028             		move.b	#$E,$28(a1)
000144AA 6000                       		bra.s	loc_14082
000144AC                            ; ===========================================================================
000144AC                            
000144AC                            loc_1403E:
000144AC 0828 0007 0036             		btst	#7,$36(a0)
000144B2 6700                       		beq.s	loc_14082
000144B4 3438 FE14                  		move.w	($FFFFFE14).w,d2
000144B8 E24A                       		lsr.w	#1,d2
000144BA 4EB9 0000 2994             		jsr	(RandomNumber).l
000144C0 0240 0003                  		andi.w	#3,d0
000144C4 6600                       		bne.s	loc_1406A
000144C6 08E8 0006 0036             		bset	#6,$36(a0)
000144CC 6600                       		bne.s	loc_14082
000144CE 1342 0028                  		move.b	d2,$28(a1)
000144D2 337C 001C 0038             		move.w	#$1C,$38(a1)
000144D8                            
000144D8                            loc_1406A:
000144D8 4A28 0034                  		tst.b	$34(a0)
000144DC 6600                       		bne.s	loc_14082
000144DE 08E8 0006 0036             		bset	#6,$36(a0)
000144E4 6600                       		bne.s	loc_14082
000144E6 1342 0028                  		move.b	d2,$28(a1)
000144EA 337C 001C 0038             		move.w	#$1C,$38(a1)
000144F0                            
000144F0                            loc_14082:
000144F0 5328 0034                  		subq.b	#1,$34(a0)
000144F4 6A00                       		bpl.s	locret_1408C
000144F6 4268 0036                  		clr.w	$36(a0)
000144FA                            
000144FA                            locret_1408C:
000144FA 4E75                       		rts	
000144FC                            
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            
000144FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144FC                            
000144FC                            
000144FC                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000144FC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014502 6200                       		bhi.s	loc_140AC
00014504                            ; Specific Music Play code by Vladikcomper
00014504 7000                                       moveq   #0,d0
00014506 7200                                       moveq   #0,d1
00014508 103C 0092                                  move.b  #$92,d0          ; SBZ music start
0001450C 0C38 0003 FE11                             cmpi.b  #3,($FFFFFE11).w ; is it the 4-th act?
00014512 6700                                       beq.s   ResumeMusic_NotLab
00014514 0400 000E                                  sub.b   #$E,d0            ; set music start to LZ
00014518 1238 FE11                                  move.b  ($FFFFFE11).w,d1
0001451C D001                                       add.b   d1,d0            ; add act number
0001451E                            
0001451E                            ResumeMusic_NotLab:
0001451E 4EB9 0000 12C6                             jsr	(PlaySound).l	 ; play music
00014524                            
00014524                            loc_140AC:
00014524 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001452A 4238 D372                  		clr.b	($FFFFD372).w
0001452E 4E75                       		rts	
00014530                            ; End of function ResumeMusic
00014530                            
00014530                            ; ===========================================================================
00014530                            Ani_obj0A:
00014530                            	include "_anim\obj0A.asm"
00014530                            ; ---------------------------------------------------------------------------
00014530                            ; Animation script - countdown numbers and bubbles (LZ)
00014530                            ; ---------------------------------------------------------------------------
00014530 0000                       		dc.w byte_140D6-Ani_obj0A
00014532 0000                       		dc.w byte_140E0-Ani_obj0A
00014534 0000                       		dc.w byte_140EA-Ani_obj0A
00014536 0000                       		dc.w byte_140F4-Ani_obj0A
00014538 0000                       		dc.w byte_140FE-Ani_obj0A
0001453A 0000                       		dc.w byte_14108-Ani_obj0A
0001453C 0000                       		dc.w byte_14112-Ani_obj0A
0001453E 0000                       		dc.w byte_14118-Ani_obj0A
00014540 0000                       		dc.w byte_14120-Ani_obj0A
00014542 0000                       		dc.w byte_14128-Ani_obj0A
00014544 0000                       		dc.w byte_14130-Ani_obj0A
00014546 0000                       		dc.w byte_14138-Ani_obj0A
00014548 0000                       		dc.w byte_14140-Ani_obj0A
0001454A 0000                       		dc.w byte_14148-Ani_obj0A
0001454C 0000                       		dc.w byte_1414A-Ani_obj0A
0001454E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014558 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014562 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001456C 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014576 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014580 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001458A 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014590 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014598 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000145A0 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000145A8 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000145B0 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000145B8 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000145C0 0EFC                       byte_14148:	dc.b $E, $FC
000145C2 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000145C8                            		even
000145C8                            		even
000145C8                            
000145C8                            ; ---------------------------------------------------------------------------
000145C8                            ; Sprite mappings - drowning countdown numbers (LZ)
000145C8                            ; ---------------------------------------------------------------------------
000145C8                            Map_obj0A:
000145C8                            	include "_maps\obj0A.asm"
000145C8                            ; ---------------------------------------------------------------------------
000145C8                            ; Sprite mappings - drowning countdown numbers (LZ)
000145C8                            ; ---------------------------------------------------------------------------
000145C8 0000                       		dc.w byte_14152-Map_obj0A
000145CA 01                         byte_14152:	dc.b 1
000145CB E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000145D0                            		even
000145D0                            		even
000145D0                            
000145D0                            ; ===========================================================================
000145D0                            ; ---------------------------------------------------------------------------
000145D0                            ; Object 38 - shield and invincibility stars
000145D0                            ; ---------------------------------------------------------------------------
000145D0                            
000145D0                            Obj38:					; XREF: Obj_Index
000145D0 7000                       		moveq	#0,d0
000145D2 1028 0024                  		move.b	$24(a0),d0
000145D6 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000145DA 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000145DE                            ; ===========================================================================
000145DE 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000145E0 0000                       		dc.w Obj38_Shield-Obj38_Index
000145E2 0000                       		dc.w Obj38_Stars-Obj38_Index
000145E4                            ; ===========================================================================
000145E4                            
000145E4                            Obj38_Main:				; XREF: Obj38_Index
000145E4 5428 0024                  		addq.b	#2,$24(a0)
000145E8 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000145F0 117C 0004 0001             		move.b	#4,1(a0)
000145F6 117C 0001 0018             		move.b	#1,$18(a0)
000145FC 117C 0010 0019             		move.b	#$10,$19(a0)
00014602 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014606 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014608 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001460E 4E75                       		rts	
00014610                            ; ===========================================================================
00014610                            
00014610                            Obj38_DoStars:
00014610 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014614 317C 055C 0002             		move.w	#$55C,2(a0)
0001461A 4E75                       		rts	
0001461C                            ; ===========================================================================
0001461C                            
0001461C                            Obj38_Shield:				; XREF: Obj38_Index
0001461C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014620 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014622 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014626 6700                       		beq.s	Obj38_Delete	; if not, branch
00014628 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001462E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014634 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001463A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014640 4EB9 0000 A6EC             		jsr	AnimateSprite
00014646 4EFA 8F68                  		jmp	DisplaySprite
0001464A                            ; ===========================================================================
0001464A                            
0001464A                            Obj38_RmvShield:
0001464A 4E75                       		rts	
0001464C                            ; ===========================================================================
0001464C                            
0001464C                            Obj38_Delete:
0001464C 4EFA 8F9E                  		jmp	DeleteObject
00014650                            ; ===========================================================================
00014650                            
00014650                            Obj38_Stars:				; XREF: Obj38_Index
00014650 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014654 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014656 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001465A 1228 001C                  		move.b	$1C(a0),d1
0001465E 5301                       		subq.b	#1,d1
00014660 6000                       		bra.s	Obj38_StarTrail
00014662                            ; ===========================================================================
00014662 E909                       		lsl.b	#4,d1
00014664 5801                       		addq.b	#4,d1
00014666 9001                       		sub.b	d1,d0
00014668 1228 0030                  		move.b	$30(a0),d1
0001466C 9001                       		sub.b	d1,d0
0001466E 5801                       		addq.b	#4,d1
00014670 0201 000F                  		andi.b	#$F,d1
00014674 1141 0030                  		move.b	d1,$30(a0)
00014678 6000                       		bra.s	Obj38_StarTrail2a
0001467A                            ; ===========================================================================
0001467A                            
0001467A                            Obj38_StarTrail:			; XREF: Obj38_Stars
0001467A E709                       		lsl.b	#3,d1
0001467C 1401                       		move.b	d1,d2
0001467E D201                       		add.b	d1,d1
00014680 D202                       		add.b	d2,d1
00014682 5801                       		addq.b	#4,d1
00014684 9001                       		sub.b	d1,d0
00014686 1228 0030                  		move.b	$30(a0),d1
0001468A 9001                       		sub.b	d1,d0
0001468C 5801                       		addq.b	#4,d1
0001468E 0C01 0018                  		cmpi.b	#$18,d1
00014692 6500                       		bcs.s	Obj38_StarTrail2
00014694 7200                       		moveq	#0,d1
00014696                            
00014696                            Obj38_StarTrail2:
00014696 1141 0030                  		move.b	d1,$30(a0)
0001469A                            
0001469A                            Obj38_StarTrail2a:
0001469A 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001469E 43F1 0000                  		lea	(a1,d0.w),a1
000146A2 3159 0008                  		move.w	(a1)+,8(a0)
000146A6 3159 000C                  		move.w	(a1)+,$C(a0)
000146AA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000146B0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000146B6 4EB9 0000 A6EC             		jsr	AnimateSprite
000146BC 4EFA 8EF2                  		jmp	DisplaySprite
000146C0                            ; ===========================================================================
000146C0                            
000146C0                            Obj38_Delete2:				; XREF: Obj38_Stars
000146C0 4EFA 8F2A                  		jmp	DeleteObject
000146C4                            ; ===========================================================================
000146C4                            ; ---------------------------------------------------------------------------
000146C4                            ; Object 4A - special stage entry from beta
000146C4                            ; ---------------------------------------------------------------------------
000146C4                            
000146C4                            Obj4A:					; XREF: Obj_Index
000146C4 7000                       		moveq	#0,d0
000146C6 1028 0024                  		move.b	$24(a0),d0
000146CA 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000146CE 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000146D2                            ; ===========================================================================
000146D2 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000146D4 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000146D6 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000146D8                            ; ===========================================================================
000146D8                            
000146D8                            Obj4A_Main:				; XREF: Obj4A_Index
000146D8 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000146DC 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000146DE 4E75                       		rts	
000146E0                            ; ===========================================================================
000146E0                            
000146E0                            Obj4A_Main2:
000146E0 5428 0024                  		addq.b	#2,$24(a0)
000146E4 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000146EC 117C 0004 0001             		move.b	#4,1(a0)
000146F2 117C 0001 0018             		move.b	#1,$18(a0)
000146F8 117C 0038 0019             		move.b	#$38,$19(a0)
000146FE 317C 0541 0002             		move.w	#$541,2(a0)
00014704 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001470A                            
0001470A                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001470A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014710 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014716 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001471C 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014722 4EB9 0000 A6EC             		jsr	AnimateSprite
00014728 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001472E 6600                       		bne.s	Obj4A_Display
00014730 4A38 D000                  		tst.b	($FFFFD000).w
00014734 6700                       		beq.s	Obj4A_Display
00014736 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001473C 303C 00A8                  		move.w	#$A8,d0
00014740 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014746                            
00014746                            Obj4A_Display:
00014746 4EFA 8E68                  		jmp	DisplaySprite
0001474A                            ; ===========================================================================
0001474A                            
0001474A                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001474A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001474E 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014750 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014756 4EFA 8E94                  		jmp	DeleteObject
0001475A                            ; ===========================================================================
0001475A                            
0001475A                            Obj4A_Wait:
0001475A 4E75                       		rts	
0001475C                            ; ===========================================================================
0001475C                            ; ---------------------------------------------------------------------------
0001475C                            ; Object 08 - water splash (LZ)
0001475C                            ; ---------------------------------------------------------------------------
0001475C                            
0001475C                            Obj08:					; XREF: Obj_Index
0001475C 7000                       		moveq	#0,d0
0001475E 1028 0024                  		move.b	$24(a0),d0
00014762 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014766 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001476A                            ; ===========================================================================
0001476A 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001476C 0000                       		dc.w Obj08_Display-Obj08_Index
0001476E 0000                       		dc.w Obj08_Delete-Obj08_Index
00014770                            ; ===========================================================================
00014770                            
00014770                            Obj08_Main:				; XREF: Obj08_Index
00014770 5428 0024                  		addq.b	#2,$24(a0)
00014774 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001477C 0028 0004 0001             		ori.b	#4,1(a0)
00014782 117C 0001 0018             		move.b	#1,$18(a0)
00014788 117C 0010 0019             		move.b	#$10,$19(a0)
0001478E 317C 4259 0002             		move.w	#$4259,2(a0)
00014794 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001479A                            
0001479A                            Obj08_Display:				; XREF: Obj08_Index
0001479A 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000147A0 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000147A6 4EB9 0000 A6EC             		jsr	AnimateSprite
000147AC 4EFA 8E02                  		jmp	DisplaySprite
000147B0                            ; ===========================================================================
000147B0                            
000147B0                            Obj08_Delete:				; XREF: Obj08_Index
000147B0 4EFA 8E3A                  		jmp	DeleteObject	; delete when animation	is complete
000147B4                            ; ===========================================================================
000147B4                            Ani_obj38:
000147B4                            	include "_anim\obj38.asm"
000147B4                            ; ---------------------------------------------------------------------------
000147B4                            ; Animation script - shield and invincibility stars
000147B4                            ; ---------------------------------------------------------------------------
000147B4 0000                       		dc.w byte_14356-Ani_obj38
000147B6 0000                       		dc.w byte_1435E-Ani_obj38
000147B8 0000                       		dc.w byte_14364-Ani_obj38
000147BA 0000                       		dc.w byte_1437E-Ani_obj38
000147BC 0000                       		dc.w byte_14398-Ani_obj38
000147BE 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000147C6 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000147CC 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000147DD 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000147E6 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000147F7 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014800 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014811 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001481A                            		even
0001481A                            		even
0001481A                            
0001481A                            ; ---------------------------------------------------------------------------
0001481A                            ; Sprite mappings - shield and invincibility stars
0001481A                            ; ---------------------------------------------------------------------------
0001481A                            Map_obj38:
0001481A                            	include "_maps\obj38.asm"
0001481A                            ; ---------------------------------------------------------------------------
0001481A                            ; Sprite mappings - shield and invincibility stars
0001481A                            ; ---------------------------------------------------------------------------
0001481A 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001481E 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014822 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014826 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001482A 04                         byte_143C2:	dc.b 4
0001482B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014830 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014835 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001483A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001483F 04                         byte_143D7:	dc.b 4
00014840 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014845 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001484A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001484F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014854 04                         byte_143EC:	dc.b 4
00014855 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001485A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001485F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014864 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014869 04                         byte_14401:	dc.b 4
0001486A E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0001486F E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014874 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014879 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001487E 04                         byte_14416:	dc.b 4
0001487F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014884 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014889 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0001488E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014893 04                         byte_1442B:	dc.b 4
00014894 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014899 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0001489E 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000148A3 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000148A8 04                         byte_14440:	dc.b 4
000148A9 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000148AE E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000148B3 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000148B8 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000148BE 00                         		even
000148BE 00                         		even
000148BE                            
000148BE                            Ani_obj4A:
000148BE                            	include "_anim\obj4A.asm"
000148BE                            ; ---------------------------------------------------------------------------
000148BE                            ; Animation script - special stage entry effect from beta
000148BE                            ; ---------------------------------------------------------------------------
000148BE 0000                       		dc.w byte_14458-Ani_obj4A
000148C0 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000148D4                            		even
000148D4                            		even
000148D4                            
000148D4                            ; ---------------------------------------------------------------------------
000148D4                            ; Sprite mappings - special stage entry	from beta
000148D4                            ; ---------------------------------------------------------------------------
000148D4                            Map_obj4A:
000148D4                            	include "_maps\obj4A.asm"
000148D4                            ; ---------------------------------------------------------------------------
000148D4                            ; Sprite mappings - special stage entry	from beta
000148D4                            ; ---------------------------------------------------------------------------
000148D4 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000148D8 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000148DC 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000148E0 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000148E4 03                         byte_1447C:	dc.b 3
000148E5 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000148EA 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000148EF 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000148F4 03                         byte_1448C:	dc.b 3
000148F5 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000148FA 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000148FF 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014904 05                         byte_1449C:	dc.b 5
00014905 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001490A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001490F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014914 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014919 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001491E 09                         byte_144B6:	dc.b 9
0001491F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014924 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014929 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001492E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014933 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014938 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001493D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014942 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014947 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001494C 12                         byte_144E4:	dc.b $12
0001494D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014952 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014957 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001495C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014961 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014966 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001496B 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014970 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014975 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001497A 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001497F 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014984 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014989 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001498E F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014993 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014998 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001499D 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000149A2 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000149A7 11                         byte_1453F:	dc.b $11
000149A8 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000149AD F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000149B2 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000149B7 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000149BC 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000149C1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000149C6 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000149CB F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000149D0 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000149D5 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000149DA 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000149DF 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000149E4 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000149E9 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000149EE F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000149F3 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000149F8 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000149FD 09                         byte_14595:	dc.b 9
000149FE FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014A03 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014A08 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014A0D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014A12 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014A17 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014A1C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014A21 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014A26 04                         		dc.b 4
00014A27 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014A2C                            		even
00014A2C                            		even
00014A2C                            
00014A2C                            Ani_obj08:
00014A2C                            	include "_anim\obj08.asm"
00014A2C                            ; ---------------------------------------------------------------------------
00014A2C                            ; Animation script - water splash (LZ)
00014A2C                            ; ---------------------------------------------------------------------------
00014A2C 0000                       		dc.w byte_145C6-Ani_obj08
00014A2E 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014A34                            		even
00014A34                            		even
00014A34                            
00014A34                            ; ---------------------------------------------------------------------------
00014A34                            ; Sprite mappings - water splash (LZ)
00014A34                            ; ---------------------------------------------------------------------------
00014A34                            Map_obj08:
00014A34                            	include "_maps\obj08.asm"
00014A34                            ; ---------------------------------------------------------------------------
00014A34                            ; Sprite mappings - water splash (LZ)
00014A34                            ; ---------------------------------------------------------------------------
00014A34 0000                       		dc.w byte_145D2-Map_obj08
00014A36 0000                       		dc.w byte_145DD-Map_obj08
00014A38 0000                       		dc.w byte_145E8-Map_obj08
00014A3A 02                         byte_145D2:	dc.b 2
00014A3B F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014A40 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014A45 02                         byte_145DD:	dc.b 2
00014A46 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014A4B EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014A50 01                         byte_145E8:	dc.b 1
00014A51 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014A56                            		even
00014A56                            		even
00014A56                            
00014A56                            ; ---------------------------------------------------------------------------
00014A56                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014A56                            ; ---------------------------------------------------------------------------
00014A56                            
00014A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A56                            
00014A56                            
00014A56                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014A56 0828 0003 0022             		btst	#3,$22(a0)
00014A5C 6700                       		beq.s	loc_14602
00014A5E 7000                       		moveq	#0,d0
00014A60 11C0 F768                  		move.b	d0,($FFFFF768).w
00014A64 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014A68 4E75                       		rts	
00014A6A                            ; ===========================================================================
00014A6A                            
00014A6A                            loc_14602:
00014A6A 7003                       		moveq	#3,d0
00014A6C 11C0 F768                  		move.b	d0,($FFFFF768).w
00014A70 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014A74 1028 0026                  		move.b	$26(a0),d0
00014A78 0600 0020                  		addi.b	#$20,d0
00014A7C 6A00                       		bpl.s	loc_14624
00014A7E 1028 0026                  		move.b	$26(a0),d0
00014A82 6A00                       		bpl.s	loc_1461E
00014A84 5300                       		subq.b	#1,d0
00014A86                            
00014A86                            loc_1461E:
00014A86 0600 0020                  		addi.b	#$20,d0
00014A8A 6000                       		bra.s	loc_14630
00014A8C                            ; ===========================================================================
00014A8C                            
00014A8C                            loc_14624:
00014A8C 1028 0026                  		move.b	$26(a0),d0
00014A90 6A00                       		bpl.s	loc_1462C
00014A92 5200                       		addq.b	#1,d0
00014A94                            
00014A94                            loc_1462C:
00014A94 0600 001F                  		addi.b	#$1F,d0
00014A98                            
00014A98                            loc_14630:
00014A98 0200 00C0                  		andi.b	#$C0,d0
00014A9C 0C00 0040                  		cmpi.b	#$40,d0
00014AA0 6700 0000                  		beq.w	Sonic_WalkVertL
00014AA4 0C00 0080                  		cmpi.b	#$80,d0
00014AA8 6700 0000                  		beq.w	Sonic_WalkCeiling
00014AAC 0C00 00C0                  		cmpi.b	#$C0,d0
00014AB0 6700 0000                  		beq.w	Sonic_WalkVertR
00014AB4 3428 000C                  		move.w	$C(a0),d2
00014AB8 3628 0008                  		move.w	8(a0),d3
00014ABC 7000                       		moveq	#0,d0
00014ABE 1028 0016                  		move.b	$16(a0),d0
00014AC2 4880                       		ext.w	d0
00014AC4 D440                       		add.w	d0,d2
00014AC6 1028 0017                  		move.b	$17(a0),d0
00014ACA 4880                       		ext.w	d0
00014ACC D640                       		add.w	d0,d3
00014ACE 49F8 F768                  		lea	($FFFFF768).w,a4
00014AD2 367C 0010                  		movea.w	#$10,a3
00014AD6 3C3C 0000                  		move.w	#0,d6
00014ADA 7A0D                       		moveq	#$D,d5
00014ADC 6100 0000                  		bsr.w	FindFloor
00014AE0 3F01                       		move.w	d1,-(sp)
00014AE2 3428 000C                  		move.w	$C(a0),d2
00014AE6 3628 0008                  		move.w	8(a0),d3
00014AEA 7000                       		moveq	#0,d0
00014AEC 1028 0016                  		move.b	$16(a0),d0
00014AF0 4880                       		ext.w	d0
00014AF2 D440                       		add.w	d0,d2
00014AF4 1028 0017                  		move.b	$17(a0),d0
00014AF8 4880                       		ext.w	d0
00014AFA 4440                       		neg.w	d0
00014AFC D640                       		add.w	d0,d3
00014AFE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014B02 367C 0010                  		movea.w	#$10,a3
00014B06 3C3C 0000                  		move.w	#0,d6
00014B0A 7A0D                       		moveq	#$D,d5
00014B0C 6100 0000                  		bsr.w	FindFloor
00014B10 301F                       		move.w	(sp)+,d0
00014B12 6100 0000                  		bsr.w	Sonic_Angle
00014B16 4A41                       		tst.w	d1
00014B18 6700                       		beq.s	locret_146BE
00014B1A 6A00                       		bpl.s	loc_146C0
00014B1C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014B20 6D00                       		blt.s	locret_146E6
00014B22 D368 000C                  		add.w	d1,$C(a0)
00014B26                            
00014B26                            locret_146BE:
00014B26 4E75                       		rts	
00014B28                            ; ===========================================================================
00014B28                            
00014B28                            loc_146C0:
00014B28 0C41 000E                  		cmpi.w	#$E,d1
00014B2C 6E00                       		bgt.s	loc_146CC
00014B2E                            
00014B2E                            loc_146C6:
00014B2E D368 000C                  		add.w	d1,$C(a0)
00014B32 4E75                       		rts	
00014B34                            ; ===========================================================================
00014B34                            
00014B34                            loc_146CC:
00014B34 4A28 0038                  		tst.b	$38(a0)
00014B38 66F4                       		bne.s	loc_146C6
00014B3A 08E8 0001 0022             		bset	#1,$22(a0)
00014B40 08A8 0005 0022             		bclr	#5,$22(a0)
00014B46 117C 0001 001D             		move.b	#1,$1D(a0)
00014B4C 4E75                       		rts	
00014B4E                            ; ===========================================================================
00014B4E                            
00014B4E                            locret_146E6:
00014B4E 4E75                       		rts	
00014B50                            ; End of function Sonic_AnglePos
00014B50                            
00014B50                            ; ===========================================================================
00014B50 2428 0008                  		move.l	8(a0),d2
00014B54 3028 0010                  		move.w	$10(a0),d0
00014B58 48C0                       		ext.l	d0
00014B5A E180                       		asl.l	#8,d0
00014B5C 9480                       		sub.l	d0,d2
00014B5E 2142 0008                  		move.l	d2,8(a0)
00014B62 303C 0038                  		move.w	#$38,d0
00014B66 48C0                       		ext.l	d0
00014B68 E180                       		asl.l	#8,d0
00014B6A 9680                       		sub.l	d0,d3
00014B6C 2143 000C                  		move.l	d3,$C(a0)
00014B70 4E75                       		rts	
00014B72                            ; ===========================================================================
00014B72                            
00014B72                            locret_1470A:
00014B72 4E75                       		rts	
00014B74                            ; ===========================================================================
00014B74 2628 000C                  		move.l	$C(a0),d3
00014B78 3028 0012                  		move.w	$12(a0),d0
00014B7C 0440 0038                  		subi.w	#$38,d0
00014B80 3140 0012                  		move.w	d0,$12(a0)
00014B84 48C0                       		ext.l	d0
00014B86 E180                       		asl.l	#8,d0
00014B88 9680                       		sub.l	d0,d3
00014B8A 2143 000C                  		move.l	d3,$C(a0)
00014B8E 4E75                       		rts	
00014B90 4E75                       		rts	
00014B92                            ; ===========================================================================
00014B92 2428 0008                  		move.l	8(a0),d2
00014B96 2628 000C                  		move.l	$C(a0),d3
00014B9A 3028 0010                  		move.w	$10(a0),d0
00014B9E 48C0                       		ext.l	d0
00014BA0 E180                       		asl.l	#8,d0
00014BA2 9480                       		sub.l	d0,d2
00014BA4 3028 0012                  		move.w	$12(a0),d0
00014BA8 48C0                       		ext.l	d0
00014BAA E180                       		asl.l	#8,d0
00014BAC 9680                       		sub.l	d0,d3
00014BAE 2142 0008                  		move.l	d2,8(a0)
00014BB2 2143 000C                  		move.l	d3,$C(a0)
00014BB6 4E75                       		rts	
00014BB8                            
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                            
00014BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BB8                            
00014BB8                            
00014BB8                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014BB8 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014BBC B240                       		cmp.w	d0,d1
00014BBE 6F00                       		ble.s	loc_1475E
00014BC0 1438 F768                  		move.b	($FFFFF768).w,d2
00014BC4 3200                       		move.w	d0,d1
00014BC6                            
00014BC6                            loc_1475E:
00014BC6 0802 0000                  		btst	#0,d2
00014BCA 6600                       		bne.s	loc_1476A
00014BCC 1142 0026                  		move.b	d2,$26(a0)
00014BD0 4E75                       		rts	
00014BD2                            ; ===========================================================================
00014BD2                            
00014BD2                            loc_1476A:
00014BD2 1428 0026                  		move.b	$26(a0),d2
00014BD6 0602 0020                  		addi.b	#$20,d2
00014BDA 0202 00C0                  		andi.b	#$C0,d2
00014BDE 1142 0026                  		move.b	d2,$26(a0)
00014BE2 4E75                       		rts	
00014BE4                            ; End of function Sonic_Angle
00014BE4                            
00014BE4                            ; ---------------------------------------------------------------------------
00014BE4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014BE4                            ; ---------------------------------------------------------------------------
00014BE4                            
00014BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BE4                            
00014BE4                            
00014BE4                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014BE4 3428 000C                  		move.w	$C(a0),d2
00014BE8 3628 0008                  		move.w	8(a0),d3
00014BEC 7000                       		moveq	#0,d0
00014BEE 1028 0017                  		move.b	$17(a0),d0
00014BF2 4880                       		ext.w	d0
00014BF4 4440                       		neg.w	d0
00014BF6 D440                       		add.w	d0,d2
00014BF8 1028 0016                  		move.b	$16(a0),d0
00014BFC 4880                       		ext.w	d0
00014BFE D640                       		add.w	d0,d3
00014C00 49F8 F768                  		lea	($FFFFF768).w,a4
00014C04 367C 0010                  		movea.w	#$10,a3
00014C08 3C3C 0000                  		move.w	#0,d6
00014C0C 7A0D                       		moveq	#$D,d5
00014C0E 6100 0000                  		bsr.w	FindWall
00014C12 3F01                       		move.w	d1,-(sp)
00014C14 3428 000C                  		move.w	$C(a0),d2
00014C18 3628 0008                  		move.w	8(a0),d3
00014C1C 7000                       		moveq	#0,d0
00014C1E 1028 0017                  		move.b	$17(a0),d0
00014C22 4880                       		ext.w	d0
00014C24 D440                       		add.w	d0,d2
00014C26 1028 0016                  		move.b	$16(a0),d0
00014C2A 4880                       		ext.w	d0
00014C2C D640                       		add.w	d0,d3
00014C2E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C32 367C 0010                  		movea.w	#$10,a3
00014C36 3C3C 0000                  		move.w	#0,d6
00014C3A 7A0D                       		moveq	#$D,d5
00014C3C 6100 0000                  		bsr.w	FindWall
00014C40 301F                       		move.w	(sp)+,d0
00014C42 6100 FF74                  		bsr.w	Sonic_Angle
00014C46 4A41                       		tst.w	d1
00014C48 6700                       		beq.s	locret_147F0
00014C4A 6A00                       		bpl.s	loc_147F2
00014C4C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C50 6D00 FF20                  		blt.w	locret_1470A
00014C54 D368 0008                  		add.w	d1,8(a0)
00014C58                            
00014C58                            locret_147F0:
00014C58 4E75                       		rts	
00014C5A                            ; ===========================================================================
00014C5A                            
00014C5A                            loc_147F2:
00014C5A 0C41 000E                  		cmpi.w	#$E,d1
00014C5E 6E00                       		bgt.s	loc_147FE
00014C60                            
00014C60                            loc_147F8:
00014C60 D368 0008                  		add.w	d1,8(a0)
00014C64 4E75                       		rts	
00014C66                            ; ===========================================================================
00014C66                            
00014C66                            loc_147FE:
00014C66 4A28 0038                  		tst.b	$38(a0)
00014C6A 66F4                       		bne.s	loc_147F8
00014C6C 08E8 0001 0022             		bset	#1,$22(a0)
00014C72 08A8 0005 0022             		bclr	#5,$22(a0)
00014C78 117C 0001 001D             		move.b	#1,$1D(a0)
00014C7E 4E75                       		rts	
00014C80                            ; End of function Sonic_WalkVertR
00014C80                            
00014C80                            ; ---------------------------------------------------------------------------
00014C80                            ; Subroutine allowing Sonic to walk upside-down
00014C80                            ; ---------------------------------------------------------------------------
00014C80                            
00014C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C80                            
00014C80                            
00014C80                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014C80 3428 000C                  		move.w	$C(a0),d2
00014C84 3628 0008                  		move.w	8(a0),d3
00014C88 7000                       		moveq	#0,d0
00014C8A 1028 0016                  		move.b	$16(a0),d0
00014C8E 4880                       		ext.w	d0
00014C90 9440                       		sub.w	d0,d2
00014C92 0A42 000F                  		eori.w	#$F,d2
00014C96 1028 0017                  		move.b	$17(a0),d0
00014C9A 4880                       		ext.w	d0
00014C9C D640                       		add.w	d0,d3
00014C9E 49F8 F768                  		lea	($FFFFF768).w,a4
00014CA2 367C FFF0                  		movea.w	#-$10,a3
00014CA6 3C3C 1000                  		move.w	#$1000,d6
00014CAA 7A0D                       		moveq	#$D,d5
00014CAC 6100 0000                  		bsr.w	FindFloor
00014CB0 3F01                       		move.w	d1,-(sp)
00014CB2 3428 000C                  		move.w	$C(a0),d2
00014CB6 3628 0008                  		move.w	8(a0),d3
00014CBA 7000                       		moveq	#0,d0
00014CBC 1028 0016                  		move.b	$16(a0),d0
00014CC0 4880                       		ext.w	d0
00014CC2 9440                       		sub.w	d0,d2
00014CC4 0A42 000F                  		eori.w	#$F,d2
00014CC8 1028 0017                  		move.b	$17(a0),d0
00014CCC 4880                       		ext.w	d0
00014CCE 9640                       		sub.w	d0,d3
00014CD0 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CD4 367C FFF0                  		movea.w	#-$10,a3
00014CD8 3C3C 1000                  		move.w	#$1000,d6
00014CDC 7A0D                       		moveq	#$D,d5
00014CDE 6100 0000                  		bsr.w	FindFloor
00014CE2 301F                       		move.w	(sp)+,d0
00014CE4 6100 FED2                  		bsr.w	Sonic_Angle
00014CE8 4A41                       		tst.w	d1
00014CEA 6700                       		beq.s	locret_14892
00014CEC 6A00                       		bpl.s	loc_14894
00014CEE 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CF2 6D00 FE5A                  		blt.w	locret_146E6
00014CF6 9368 000C                  		sub.w	d1,$C(a0)
00014CFA                            
00014CFA                            locret_14892:
00014CFA 4E75                       		rts	
00014CFC                            ; ===========================================================================
00014CFC                            
00014CFC                            loc_14894:
00014CFC 0C41 000E                  		cmpi.w	#$E,d1
00014D00 6E00                       		bgt.s	loc_148A0
00014D02                            
00014D02                            loc_1489A:
00014D02 9368 000C                  		sub.w	d1,$C(a0)
00014D06 4E75                       		rts	
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            loc_148A0:
00014D08 4A28 0038                  		tst.b	$38(a0)
00014D0C 66F4                       		bne.s	loc_1489A
00014D0E 08E8 0001 0022             		bset	#1,$22(a0)
00014D14 08A8 0005 0022             		bclr	#5,$22(a0)
00014D1A 117C 0001 001D             		move.b	#1,$1D(a0)
00014D20 4E75                       		rts	
00014D22                            ; End of function Sonic_WalkCeiling
00014D22                            
00014D22                            ; ---------------------------------------------------------------------------
00014D22                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014D22                            ; ---------------------------------------------------------------------------
00014D22                            
00014D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D22                            
00014D22                            
00014D22                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014D22 3428 000C                  		move.w	$C(a0),d2
00014D26 3628 0008                  		move.w	8(a0),d3
00014D2A 7000                       		moveq	#0,d0
00014D2C 1028 0017                  		move.b	$17(a0),d0
00014D30 4880                       		ext.w	d0
00014D32 9440                       		sub.w	d0,d2
00014D34 1028 0016                  		move.b	$16(a0),d0
00014D38 4880                       		ext.w	d0
00014D3A 9640                       		sub.w	d0,d3
00014D3C 0A43 000F                  		eori.w	#$F,d3
00014D40 49F8 F768                  		lea	($FFFFF768).w,a4
00014D44 367C FFF0                  		movea.w	#-$10,a3
00014D48 3C3C 0800                  		move.w	#$800,d6
00014D4C 7A0D                       		moveq	#$D,d5
00014D4E 6100 0000                  		bsr.w	FindWall
00014D52 3F01                       		move.w	d1,-(sp)
00014D54 3428 000C                  		move.w	$C(a0),d2
00014D58 3628 0008                  		move.w	8(a0),d3
00014D5C 7000                       		moveq	#0,d0
00014D5E 1028 0017                  		move.b	$17(a0),d0
00014D62 4880                       		ext.w	d0
00014D64 D440                       		add.w	d0,d2
00014D66 1028 0016                  		move.b	$16(a0),d0
00014D6A 4880                       		ext.w	d0
00014D6C 9640                       		sub.w	d0,d3
00014D6E 0A43 000F                  		eori.w	#$F,d3
00014D72 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D76 367C FFF0                  		movea.w	#-$10,a3
00014D7A 3C3C 0800                  		move.w	#$800,d6
00014D7E 7A0D                       		moveq	#$D,d5
00014D80 6100 0000                  		bsr.w	FindWall
00014D84 301F                       		move.w	(sp)+,d0
00014D86 6100 FE30                  		bsr.w	Sonic_Angle
00014D8A 4A41                       		tst.w	d1
00014D8C 6700                       		beq.s	locret_14934
00014D8E 6A00                       		bpl.s	loc_14936
00014D90 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D94 6D00 FDDC                  		blt.w	locret_1470A
00014D98 9368 0008                  		sub.w	d1,8(a0)
00014D9C                            
00014D9C                            locret_14934:
00014D9C 4E75                       		rts	
00014D9E                            ; ===========================================================================
00014D9E                            
00014D9E                            loc_14936:
00014D9E 0C41 000E                  		cmpi.w	#$E,d1
00014DA2 6E00                       		bgt.s	loc_14942
00014DA4                            
00014DA4                            loc_1493C:
00014DA4 9368 0008                  		sub.w	d1,8(a0)
00014DA8 4E75                       		rts	
00014DAA                            ; ===========================================================================
00014DAA                            
00014DAA                            loc_14942:
00014DAA 4A28 0038                  		tst.b	$38(a0)
00014DAE 66F4                       		bne.s	loc_1493C
00014DB0 08E8 0001 0022             		bset	#1,$22(a0)
00014DB6 08A8 0005 0022             		bclr	#5,$22(a0)
00014DBC 117C 0001 001D             		move.b	#1,$1D(a0)
00014DC2 4E75                       		rts	
00014DC4                            ; End of function Sonic_WalkVertL
00014DC4                            
00014DC4                            ; ---------------------------------------------------------------------------
00014DC4                            ; Subroutine to	find which tile	the object is standing on
00014DC4                            ; ---------------------------------------------------------------------------
00014DC4                            
00014DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DC4                            
00014DC4                            
00014DC4                            Floor_ChkTile:				; XREF: FindFloor; et al
00014DC4 3002                       		move.w	d2,d0
00014DC6 E248                       		lsr.w	#1,d0
00014DC8 0240 0380                  		andi.w	#$380,d0
00014DCC 3203                       		move.w	d3,d1
00014DCE E049                       		lsr.w	#8,d1
00014DD0 0241 007F                  		andi.w	#$7F,d1
00014DD4 D041                       		add.w	d1,d0
00014DD6 72FF                       		moveq	#-1,d1
00014DD8 43F8 A400                  		lea	($FFFFA400).w,a1
00014DDC 1231 0000                  		move.b	(a1,d0.w),d1
00014DE0 6700                       		beq.s	loc_14996
00014DE2 6B00                       		bmi.s	loc_1499A
00014DE4 5301                       		subq.b	#1,d1
00014DE6 4881                       		ext.w	d1
00014DE8 EE59                       		ror.w	#7,d1
00014DEA 3002                       		move.w	d2,d0
00014DEC D040                       		add.w	d0,d0
00014DEE 0240 01E0                  		andi.w	#$1E0,d0
00014DF2 D240                       		add.w	d0,d1
00014DF4 3003                       		move.w	d3,d0
00014DF6 E648                       		lsr.w	#3,d0
00014DF8 0240 001E                  		andi.w	#$1E,d0
00014DFC D240                       		add.w	d0,d1
00014DFE                            
00014DFE                            loc_14996:
00014DFE 2241                       		movea.l	d1,a1
00014E00 4E75                       		rts	
00014E02                            ; ===========================================================================
00014E02                            
00014E02                            loc_1499A:
00014E02 0241 007F                  		andi.w	#$7F,d1
00014E06 0828 0006 0001             		btst	#6,1(a0)
00014E0C 6700                       		beq.s	loc_149B2
00014E0E 5241                       		addq.w	#1,d1
00014E10 0C41 0029                  		cmpi.w	#$29,d1
00014E14 6600                       		bne.s	loc_149B2
00014E16 323C 0051                  		move.w	#$51,d1
00014E1A                            
00014E1A                            loc_149B2:
00014E1A 5301                       		subq.b	#1,d1
00014E1C EE59                       		ror.w	#7,d1
00014E1E 3002                       		move.w	d2,d0
00014E20 D040                       		add.w	d0,d0
00014E22 0240 01E0                  		andi.w	#$1E0,d0
00014E26 D240                       		add.w	d0,d1
00014E28 3003                       		move.w	d3,d0
00014E2A E648                       		lsr.w	#3,d0
00014E2C 0240 001E                  		andi.w	#$1E,d0
00014E30 D240                       		add.w	d0,d1
00014E32 2241                       		movea.l	d1,a1
00014E34 4E75                       		rts	
00014E36                            ; End of function Floor_ChkTile
00014E36                            
00014E36                            
00014E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E36                            
00014E36                            
00014E36                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014E36 618C                       		bsr.s	Floor_ChkTile
00014E38 3011                       		move.w	(a1),d0
00014E3A 3800                       		move.w	d0,d4
00014E3C 0240 07FF                  		andi.w	#$7FF,d0
00014E40 6700                       		beq.s	loc_149DE
00014E42 0B04                       		btst	d5,d4
00014E44 6600                       		bne.s	loc_149EC
00014E46                            
00014E46                            loc_149DE:
00014E46 D44B                       		add.w	a3,d2
00014E48 6100 0000                  		bsr.w	FindFloor2
00014E4C 944B                       		sub.w	a3,d2
00014E4E 0641 0010                  		addi.w	#$10,d1
00014E52 4E75                       		rts	
00014E54                            ; ===========================================================================
00014E54                            
00014E54                            loc_149EC:
00014E54 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014E58 1032 0000                  		move.b	(a2,d0.w),d0
00014E5C 0240 00FF                  		andi.w	#$FF,d0
00014E60 67E4                       		beq.s	loc_149DE
00014E62 45F9 0000 0000             		lea	(AngleMap).l,a2
00014E68 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014E6C E948                       		lsl.w	#4,d0
00014E6E 3203                       		move.w	d3,d1
00014E70 0804 000B                  		btst	#$B,d4
00014E74 6700                       		beq.s	loc_14A12
00014E76 4641                       		not.w	d1
00014E78 4414                       		neg.b	(a4)
00014E7A                            
00014E7A                            loc_14A12:
00014E7A 0804 000C                  		btst	#$C,d4
00014E7E 6700                       		beq.s	loc_14A22
00014E80 0614 0040                  		addi.b	#$40,(a4)
00014E84 4414                       		neg.b	(a4)
00014E86 0414 0040                  		subi.b	#$40,(a4)
00014E8A                            
00014E8A                            loc_14A22:
00014E8A 0241 000F                  		andi.w	#$F,d1
00014E8E D240                       		add.w	d0,d1
00014E90 45F9 0000 0000             		lea	(CollArray1).l,a2
00014E96 1032 1000                  		move.b	(a2,d1.w),d0
00014E9A 4880                       		ext.w	d0
00014E9C BD44                       		eor.w	d6,d4
00014E9E 0804 000C                  		btst	#$C,d4
00014EA2 6700                       		beq.s	loc_14A3E
00014EA4 4440                       		neg.w	d0
00014EA6                            
00014EA6                            loc_14A3E:
00014EA6 4A40                       		tst.w	d0
00014EA8 679C                       		beq.s	loc_149DE
00014EAA 6B00                       		bmi.s	loc_14A5A
00014EAC 0C00 0010                  		cmpi.b	#$10,d0
00014EB0 6700                       		beq.s	loc_14A66
00014EB2 3202                       		move.w	d2,d1
00014EB4 0241 000F                  		andi.w	#$F,d1
00014EB8 D041                       		add.w	d1,d0
00014EBA 323C 000F                  		move.w	#$F,d1
00014EBE 9240                       		sub.w	d0,d1
00014EC0 4E75                       		rts	
00014EC2                            ; ===========================================================================
00014EC2                            
00014EC2                            loc_14A5A:
00014EC2 3202                       		move.w	d2,d1
00014EC4 0241 000F                  		andi.w	#$F,d1
00014EC8 D041                       		add.w	d1,d0
00014ECA 6A00 FF7A                  		bpl.w	loc_149DE
00014ECE                            
00014ECE                            loc_14A66:
00014ECE 944B                       		sub.w	a3,d2
00014ED0 6100 0000                  		bsr.w	FindFloor2
00014ED4 D44B                       		add.w	a3,d2
00014ED6 0441 0010                  		subi.w	#$10,d1
00014EDA 4E75                       		rts	
00014EDC                            ; End of function FindFloor
00014EDC                            
00014EDC                            
00014EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EDC                            
00014EDC                            
00014EDC                            FindFloor2:				; XREF: FindFloor
00014EDC 6100 FEE6                  		bsr.w	Floor_ChkTile
00014EE0 3011                       		move.w	(a1),d0
00014EE2 3800                       		move.w	d0,d4
00014EE4 0240 07FF                  		andi.w	#$7FF,d0
00014EE8 6700                       		beq.s	loc_14A86
00014EEA 0B04                       		btst	d5,d4
00014EEC 6600                       		bne.s	loc_14A94
00014EEE                            
00014EEE                            loc_14A86:
00014EEE 323C 000F                  		move.w	#$F,d1
00014EF2 3002                       		move.w	d2,d0
00014EF4 0240 000F                  		andi.w	#$F,d0
00014EF8 9240                       		sub.w	d0,d1
00014EFA 4E75                       		rts	
00014EFC                            ; ===========================================================================
00014EFC                            
00014EFC                            loc_14A94:
00014EFC 2478 F796                  		movea.l	($FFFFF796).w,a2
00014F00 1032 0000                  		move.b	(a2,d0.w),d0
00014F04 0240 00FF                  		andi.w	#$FF,d0
00014F08 67E4                       		beq.s	loc_14A86
00014F0A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014F10 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014F14 E948                       		lsl.w	#4,d0
00014F16 3203                       		move.w	d3,d1
00014F18 0804 000B                  		btst	#$B,d4
00014F1C 6700                       		beq.s	loc_14ABA
00014F1E 4641                       		not.w	d1
00014F20 4414                       		neg.b	(a4)
00014F22                            
00014F22                            loc_14ABA:
00014F22 0804 000C                  		btst	#$C,d4
00014F26 6700                       		beq.s	loc_14ACA
00014F28 0614 0040                  		addi.b	#$40,(a4)
00014F2C 4414                       		neg.b	(a4)
00014F2E 0414 0040                  		subi.b	#$40,(a4)
00014F32                            
00014F32                            loc_14ACA:
00014F32 0241 000F                  		andi.w	#$F,d1
00014F36 D240                       		add.w	d0,d1
00014F38 45F9 0000 0000             		lea	(CollArray1).l,a2
00014F3E 1032 1000                  		move.b	(a2,d1.w),d0
00014F42 4880                       		ext.w	d0
00014F44 BD44                       		eor.w	d6,d4
00014F46 0804 000C                  		btst	#$C,d4
00014F4A 6700                       		beq.s	loc_14AE6
00014F4C 4440                       		neg.w	d0
00014F4E                            
00014F4E                            loc_14AE6:
00014F4E 4A40                       		tst.w	d0
00014F50 679C                       		beq.s	loc_14A86
00014F52 6B00                       		bmi.s	loc_14AFC
00014F54 3202                       		move.w	d2,d1
00014F56 0241 000F                  		andi.w	#$F,d1
00014F5A D041                       		add.w	d1,d0
00014F5C 323C 000F                  		move.w	#$F,d1
00014F60 9240                       		sub.w	d0,d1
00014F62 4E75                       		rts	
00014F64                            ; ===========================================================================
00014F64                            
00014F64                            loc_14AFC:
00014F64 3202                       		move.w	d2,d1
00014F66 0241 000F                  		andi.w	#$F,d1
00014F6A D041                       		add.w	d1,d0
00014F6C 6A00 FF80                  		bpl.w	loc_14A86
00014F70 4641                       		not.w	d1
00014F72 4E75                       		rts	
00014F74                            ; End of function FindFloor2
00014F74                            
00014F74                            
00014F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F74                            
00014F74                            
00014F74                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014F74 6100 FE4E                  		bsr.w	Floor_ChkTile
00014F78 3011                       		move.w	(a1),d0
00014F7A 3800                       		move.w	d0,d4
00014F7C 0240 07FF                  		andi.w	#$7FF,d0
00014F80 6700                       		beq.s	loc_14B1E
00014F82 0B04                       		btst	d5,d4
00014F84 6600                       		bne.s	loc_14B2C
00014F86                            
00014F86                            loc_14B1E:
00014F86 D64B                       		add.w	a3,d3
00014F88 6100 0000                  		bsr.w	FindWall2
00014F8C 964B                       		sub.w	a3,d3
00014F8E 0641 0010                  		addi.w	#$10,d1
00014F92 4E75                       		rts	
00014F94                            ; ===========================================================================
00014F94                            
00014F94                            loc_14B2C:
00014F94 2478 F796                  		movea.l	($FFFFF796).w,a2
00014F98 1032 0000                  		move.b	(a2,d0.w),d0
00014F9C 0240 00FF                  		andi.w	#$FF,d0
00014FA0 67E4                       		beq.s	loc_14B1E
00014FA2 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FA8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FAC E948                       		lsl.w	#4,d0
00014FAE 3202                       		move.w	d2,d1
00014FB0 0804 000C                  		btst	#$C,d4
00014FB4 6700                       		beq.s	loc_14B5A
00014FB6 4641                       		not.w	d1
00014FB8 0614 0040                  		addi.b	#$40,(a4)
00014FBC 4414                       		neg.b	(a4)
00014FBE 0414 0040                  		subi.b	#$40,(a4)
00014FC2                            
00014FC2                            loc_14B5A:
00014FC2 0804 000B                  		btst	#$B,d4
00014FC6 6700                       		beq.s	loc_14B62
00014FC8 4414                       		neg.b	(a4)
00014FCA                            
00014FCA                            loc_14B62:
00014FCA 0241 000F                  		andi.w	#$F,d1
00014FCE D240                       		add.w	d0,d1
00014FD0 45F9 0000 0000             		lea	(CollArray2).l,a2
00014FD6 1032 1000                  		move.b	(a2,d1.w),d0
00014FDA 4880                       		ext.w	d0
00014FDC BD44                       		eor.w	d6,d4
00014FDE 0804 000B                  		btst	#$B,d4
00014FE2 6700                       		beq.s	loc_14B7E
00014FE4 4440                       		neg.w	d0
00014FE6                            
00014FE6                            loc_14B7E:
00014FE6 4A40                       		tst.w	d0
00014FE8 679C                       		beq.s	loc_14B1E
00014FEA 6B00                       		bmi.s	loc_14B9A
00014FEC 0C00 0010                  		cmpi.b	#$10,d0
00014FF0 6700                       		beq.s	loc_14BA6
00014FF2 3203                       		move.w	d3,d1
00014FF4 0241 000F                  		andi.w	#$F,d1
00014FF8 D041                       		add.w	d1,d0
00014FFA 323C 000F                  		move.w	#$F,d1
00014FFE 9240                       		sub.w	d0,d1
00015000 4E75                       		rts	
00015002                            ; ===========================================================================
00015002                            
00015002                            loc_14B9A:
00015002 3203                       		move.w	d3,d1
00015004 0241 000F                  		andi.w	#$F,d1
00015008 D041                       		add.w	d1,d0
0001500A 6A00 FF7A                  		bpl.w	loc_14B1E
0001500E                            
0001500E                            loc_14BA6:
0001500E 964B                       		sub.w	a3,d3
00015010 6100 0000                  		bsr.w	FindWall2
00015014 D64B                       		add.w	a3,d3
00015016 0441 0010                  		subi.w	#$10,d1
0001501A 4E75                       		rts	
0001501C                            ; End of function FindWall
0001501C                            
0001501C                            
0001501C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001501C                            
0001501C                            
0001501C                            FindWall2:				; XREF: FindWall
0001501C 6100 FDA6                  		bsr.w	Floor_ChkTile
00015020 3011                       		move.w	(a1),d0
00015022 3800                       		move.w	d0,d4
00015024 0240 07FF                  		andi.w	#$7FF,d0
00015028 6700                       		beq.s	loc_14BC6
0001502A 0B04                       		btst	d5,d4
0001502C 6600                       		bne.s	loc_14BD4
0001502E                            
0001502E                            loc_14BC6:
0001502E 323C 000F                  		move.w	#$F,d1
00015032 3003                       		move.w	d3,d0
00015034 0240 000F                  		andi.w	#$F,d0
00015038 9240                       		sub.w	d0,d1
0001503A 4E75                       		rts	
0001503C                            ; ===========================================================================
0001503C                            
0001503C                            loc_14BD4:
0001503C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015040 1032 0000                  		move.b	(a2,d0.w),d0
00015044 0240 00FF                  		andi.w	#$FF,d0
00015048 67E4                       		beq.s	loc_14BC6
0001504A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015050 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015054 E948                       		lsl.w	#4,d0
00015056 3202                       		move.w	d2,d1
00015058 0804 000C                  		btst	#$C,d4
0001505C 6700                       		beq.s	loc_14C02
0001505E 4641                       		not.w	d1
00015060 0614 0040                  		addi.b	#$40,(a4)
00015064 4414                       		neg.b	(a4)
00015066 0414 0040                  		subi.b	#$40,(a4)
0001506A                            
0001506A                            loc_14C02:
0001506A 0804 000B                  		btst	#$B,d4
0001506E 6700                       		beq.s	loc_14C0A
00015070 4414                       		neg.b	(a4)
00015072                            
00015072                            loc_14C0A:
00015072 0241 000F                  		andi.w	#$F,d1
00015076 D240                       		add.w	d0,d1
00015078 45F9 0000 0000             		lea	(CollArray2).l,a2
0001507E 1032 1000                  		move.b	(a2,d1.w),d0
00015082 4880                       		ext.w	d0
00015084 BD44                       		eor.w	d6,d4
00015086 0804 000B                  		btst	#$B,d4
0001508A 6700                       		beq.s	loc_14C26
0001508C 4440                       		neg.w	d0
0001508E                            
0001508E                            loc_14C26:
0001508E 4A40                       		tst.w	d0
00015090 679C                       		beq.s	loc_14BC6
00015092 6B00                       		bmi.s	loc_14C3C
00015094 3203                       		move.w	d3,d1
00015096 0241 000F                  		andi.w	#$F,d1
0001509A D041                       		add.w	d1,d0
0001509C 323C 000F                  		move.w	#$F,d1
000150A0 9240                       		sub.w	d0,d1
000150A2 4E75                       		rts	
000150A4                            ; ===========================================================================
000150A4                            
000150A4                            loc_14C3C:
000150A4 3203                       		move.w	d3,d1
000150A6 0241 000F                  		andi.w	#$F,d1
000150AA D041                       		add.w	d1,d0
000150AC 6A00 FF80                  		bpl.w	loc_14BC6
000150B0 4641                       		not.w	d1
000150B2 4E75                       		rts	
000150B4                            ; End of function FindWall2
000150B4                            
000150B4                            ; ---------------------------------------------------------------------------
000150B4                            ; Unused floor/wall subroutine - logs something	to do with collision
000150B4                            ; ---------------------------------------------------------------------------
000150B4                            
000150B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150B4                            
000150B4                            
000150B4                            FloorLog_Unk:				; XREF: Level
000150B4 4E75                       		rts	
000150B6                            
000150B6 43F9 0000 0000             		lea	(CollArray1).l,a1
000150BC 45F9 0000 0000             		lea	(CollArray1).l,a2
000150C2 363C 00FF                  		move.w	#$FF,d3
000150C6                            
000150C6                            loc_14C5E:
000150C6 7A10                       		moveq	#$10,d5
000150C8 343C 000F                  		move.w	#$F,d2
000150CC                            
000150CC                            loc_14C64:
000150CC 7800                       		moveq	#0,d4
000150CE 323C 000F                  		move.w	#$F,d1
000150D2                            
000150D2                            loc_14C6A:
000150D2 3019                       		move.w	(a1)+,d0
000150D4 EAA8                       		lsr.l	d5,d0
000150D6 D944                       		addx.w	d4,d4
000150D8 51C9 FFF8                  		dbf	d1,loc_14C6A
000150DC                            
000150DC 34C4                       		move.w	d4,(a2)+
000150DE 92FC 0020                  		suba.w	#$20,a1
000150E2 5345                       		subq.w	#1,d5
000150E4 51CA FFE6                  		dbf	d2,loc_14C64
000150E8                            
000150E8 D2FC 0020                  		adda.w	#$20,a1
000150EC 51CB FFD8                  		dbf	d3,loc_14C5E
000150F0                            
000150F0 43F9 0000 0000             		lea	(CollArray1).l,a1
000150F6 45F9 0000 0000             		lea	(CollArray2).l,a2
000150FC 6100                       		bsr.s	FloorLog_Unk2
000150FE 43F9 0000 0000             		lea	(CollArray1).l,a1
00015104 45F9 0000 0000             		lea	(CollArray1).l,a2
0001510A                            
0001510A                            ; End of function FloorLog_Unk
0001510A                            
0001510A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001510A                            
0001510A                            
0001510A                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001510A 363C 0FFF                  		move.w	#$FFF,d3
0001510E                            
0001510E                            loc_14CA6:
0001510E 7400                       		moveq	#0,d2
00015110 323C 000F                  		move.w	#$F,d1
00015114 3019                       		move.w	(a1)+,d0
00015116 6700                       		beq.s	loc_14CD4
00015118 6B00                       		bmi.s	loc_14CBE
0001511A                            
0001511A                            loc_14CB2:
0001511A E248                       		lsr.w	#1,d0
0001511C 6400                       		bcc.s	loc_14CB8
0001511E 5202                       		addq.b	#1,d2
00015120                            
00015120                            loc_14CB8:
00015120 51C9 FFF8                  		dbf	d1,loc_14CB2
00015124                            
00015124 6000                       		bra.s	loc_14CD6
00015126                            ; ===========================================================================
00015126                            
00015126                            loc_14CBE:
00015126 0C40 FFFF                  		cmpi.w	#-1,d0
0001512A 6700                       		beq.s	loc_14CD0
0001512C                            
0001512C                            loc_14CC4:
0001512C E348                       		lsl.w	#1,d0
0001512E 6400                       		bcc.s	loc_14CCA
00015130 5302                       		subq.b	#1,d2
00015132                            
00015132                            loc_14CCA:
00015132 51C9 FFF8                  		dbf	d1,loc_14CC4
00015136                            
00015136 6000                       		bra.s	loc_14CD6
00015138                            ; ===========================================================================
00015138                            
00015138                            loc_14CD0:
00015138 303C 0010                  		move.w	#$10,d0
0001513C                            
0001513C                            loc_14CD4:
0001513C 3400                       		move.w	d0,d2
0001513E                            
0001513E                            loc_14CD6:
0001513E 14C2                       		move.b	d2,(a2)+
00015140 51CB FFCC                  		dbf	d3,loc_14CA6
00015144                            
00015144 4E75                       		rts	
00015146                            
00015146                            ; End of function FloorLog_Unk2
00015146                            
00015146                            
00015146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015146                            
00015146                            
00015146                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015146 2628 0008                  		move.l	8(a0),d3
0001514A 2428 000C                  		move.l	$C(a0),d2
0001514E 3228 0010                  		move.w	$10(a0),d1
00015152 48C1                       		ext.l	d1
00015154 E181                       		asl.l	#8,d1
00015156 D681                       		add.l	d1,d3
00015158 3228 0012                  		move.w	$12(a0),d1
0001515C 48C1                       		ext.l	d1
0001515E E181                       		asl.l	#8,d1
00015160 D481                       		add.l	d1,d2
00015162 4842                       		swap	d2
00015164 4843                       		swap	d3
00015166 11C0 F768                  		move.b	d0,($FFFFF768).w
0001516A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001516E 1200                       		move.b	d0,d1
00015170 0600 0020                  		addi.b	#$20,d0
00015174 6A00                       		bpl.s	loc_14D1A
00015176 1001                       		move.b	d1,d0
00015178 6A00                       		bpl.s	loc_14D14
0001517A 5300                       		subq.b	#1,d0
0001517C                            
0001517C                            loc_14D14:
0001517C 0600 0020                  		addi.b	#$20,d0
00015180 6000                       		bra.s	loc_14D24
00015182                            ; ===========================================================================
00015182                            
00015182                            loc_14D1A:
00015182 1001                       		move.b	d1,d0
00015184 6A00                       		bpl.s	loc_14D20
00015186 5200                       		addq.b	#1,d0
00015188                            
00015188                            loc_14D20:
00015188 0600 001F                  		addi.b	#$1F,d0
0001518C                            
0001518C                            loc_14D24:
0001518C 0200 00C0                  		andi.b	#$C0,d0
00015190 6700 0000                  		beq.w	loc_14DF0
00015194 0C00 0080                  		cmpi.b	#$80,d0
00015198 6700 0000                  		beq.w	loc_14F7C
0001519C 0201 0038                  		andi.b	#$38,d1
000151A0 6600                       		bne.s	loc_14D3C
000151A2 5042                       		addq.w	#8,d2
000151A4                            
000151A4                            loc_14D3C:
000151A4 0C00 0040                  		cmpi.b	#$40,d0
000151A8 6700 0000                  		beq.w	loc_1504A
000151AC 6000 0000                  		bra.w	loc_14EBC
000151B0                            
000151B0                            ; End of function Sonic_WalkSpeed
000151B0                            
000151B0                            
000151B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151B0                            
000151B0                            
000151B0                            sub_14D48:				; XREF: Sonic_Jump
000151B0 11C0 F768                  		move.b	d0,($FFFFF768).w
000151B4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000151B8 0600 0020                  		addi.b	#$20,d0
000151BC 0200 00C0                  		andi.b	#$C0,d0
000151C0 0C00 0040                  		cmpi.b	#$40,d0
000151C4 6700 0000                  		beq.w	loc_14FD6
000151C8 0C00 0080                  		cmpi.b	#$80,d0
000151CC 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000151D0 0C00 00C0                  		cmpi.b	#$C0,d0
000151D4 6700 0000                  		beq.w	sub_14E50
000151D8                            
000151D8                            ; End of function sub_14D48
000151D8                            
000151D8                            ; ---------------------------------------------------------------------------
000151D8                            ; Subroutine to	make Sonic land	on the floor after jumping
000151D8                            ; ---------------------------------------------------------------------------
000151D8                            
000151D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151D8                            
000151D8                            
000151D8                            Sonic_HitFloor:				; XREF: Sonic_Floor
000151D8 3428 000C                  		move.w	$C(a0),d2
000151DC 3628 0008                  		move.w	8(a0),d3
000151E0 7000                       		moveq	#0,d0
000151E2 1028 0016                  		move.b	$16(a0),d0
000151E6 4880                       		ext.w	d0
000151E8 D440                       		add.w	d0,d2
000151EA 1028 0017                  		move.b	$17(a0),d0
000151EE 4880                       		ext.w	d0
000151F0 D640                       		add.w	d0,d3
000151F2 49F8 F768                  		lea	($FFFFF768).w,a4
000151F6 367C 0010                  		movea.w	#$10,a3
000151FA 3C3C 0000                  		move.w	#0,d6
000151FE 7A0D                       		moveq	#$D,d5
00015200 6100 FC34                  		bsr.w	FindFloor
00015204 3F01                       		move.w	d1,-(sp)
00015206 3428 000C                  		move.w	$C(a0),d2
0001520A 3628 0008                  		move.w	8(a0),d3
0001520E 7000                       		moveq	#0,d0
00015210 1028 0016                  		move.b	$16(a0),d0
00015214 4880                       		ext.w	d0
00015216 D440                       		add.w	d0,d2
00015218 1028 0017                  		move.b	$17(a0),d0
0001521C 4880                       		ext.w	d0
0001521E 9640                       		sub.w	d0,d3
00015220 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015224 367C 0010                  		movea.w	#$10,a3
00015228 3C3C 0000                  		move.w	#0,d6
0001522C 7A0D                       		moveq	#$D,d5
0001522E 6100 FC06                  		bsr.w	FindFloor
00015232 301F                       		move.w	(sp)+,d0
00015234 143C 0000                  		move.b	#0,d2
00015238                            
00015238                            loc_14DD0:
00015238 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001523C B240                       		cmp.w	d0,d1
0001523E 6F00                       		ble.s	loc_14DDE
00015240 1638 F768                  		move.b	($FFFFF768).w,d3
00015244 C141                       		exg	d0,d1
00015246                            
00015246                            loc_14DDE:
00015246 0803 0000                  		btst	#0,d3
0001524A 6700                       		beq.s	locret_14DE6
0001524C 1602                       		move.b	d2,d3
0001524E                            
0001524E                            locret_14DE6:
0001524E 4E75                       		rts	
00015250                            
00015250                            ; End of function Sonic_HitFloor
00015250                            
00015250                            ; ===========================================================================
00015250 3428 000C                  		move.w	$C(a0),d2
00015254 3628 0008                  		move.w	8(a0),d3
00015258                            
00015258                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015258 0642 000A                  		addi.w	#$A,d2
0001525C 49F8 F768                  		lea	($FFFFF768).w,a4
00015260 367C 0010                  		movea.w	#$10,a3
00015264 3C3C 0000                  		move.w	#0,d6
00015268 7A0E                       		moveq	#$E,d5
0001526A 6100 FBCA                  		bsr.w	FindFloor
0001526E 143C 0000                  		move.b	#0,d2
00015272                            
00015272                            loc_14E0A:				; XREF: sub_14EB4
00015272 1638 F768                  		move.b	($FFFFF768).w,d3
00015276 0803 0000                  		btst	#0,d3
0001527A 6700                       		beq.s	locret_14E16
0001527C 1602                       		move.b	d2,d3
0001527E                            
0001527E                            locret_14E16:
0001527E 4E75                       		rts	
00015280                            
00015280                            ; ---------------------------------------------------------------------------
00015280                            ; Subroutine allowing objects to interact with the floor
00015280                            ; ---------------------------------------------------------------------------
00015280                            
00015280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015280                            
00015280                            
00015280                            ObjHitFloor:
00015280 3628 0008                  		move.w	8(a0),d3
00015284                            
00015284                            ; End of function ObjHitFloor
00015284                            
00015284                            
00015284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015284                            
00015284                            
00015284                            ObjHitFloor2:
00015284 3428 000C                  		move.w	$C(a0),d2
00015288 7000                       		moveq	#0,d0
0001528A 1028 0016                  		move.b	$16(a0),d0
0001528E 4880                       		ext.w	d0
00015290 D440                       		add.w	d0,d2
00015292 49F8 F768                  		lea	($FFFFF768).w,a4
00015296 18BC 0000                  		move.b	#0,(a4)
0001529A 367C 0010                  		movea.w	#$10,a3
0001529E 3C3C 0000                  		move.w	#0,d6
000152A2 7A0D                       		moveq	#$D,d5
000152A4 6100 FB90                  		bsr.w	FindFloor
000152A8 1638 F768                  		move.b	($FFFFF768).w,d3
000152AC 0803 0000                  		btst	#0,d3
000152B0 6700                       		beq.s	locret_14E4E
000152B2 163C 0000                  		move.b	#0,d3
000152B6                            
000152B6                            locret_14E4E:
000152B6 4E75                       		rts	
000152B8                            ; End of function ObjHitFloor2
000152B8                            
000152B8                            
000152B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B8                            
000152B8                            
000152B8                            sub_14E50:				; XREF: sub_14D48
000152B8 3428 000C                  		move.w	$C(a0),d2
000152BC 3628 0008                  		move.w	8(a0),d3
000152C0 7000                       		moveq	#0,d0
000152C2 1028 0017                  		move.b	$17(a0),d0
000152C6 4880                       		ext.w	d0
000152C8 9440                       		sub.w	d0,d2
000152CA 1028 0016                  		move.b	$16(a0),d0
000152CE 4880                       		ext.w	d0
000152D0 D640                       		add.w	d0,d3
000152D2 49F8 F768                  		lea	($FFFFF768).w,a4
000152D6 367C 0010                  		movea.w	#$10,a3
000152DA 3C3C 0000                  		move.w	#0,d6
000152DE 7A0E                       		moveq	#$E,d5
000152E0 6100 FC92                  		bsr.w	FindWall
000152E4 3F01                       		move.w	d1,-(sp)
000152E6 3428 000C                  		move.w	$C(a0),d2
000152EA 3628 0008                  		move.w	8(a0),d3
000152EE 7000                       		moveq	#0,d0
000152F0 1028 0017                  		move.b	$17(a0),d0
000152F4 4880                       		ext.w	d0
000152F6 D440                       		add.w	d0,d2
000152F8 1028 0016                  		move.b	$16(a0),d0
000152FC 4880                       		ext.w	d0
000152FE D640                       		add.w	d0,d3
00015300 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015304 367C 0010                  		movea.w	#$10,a3
00015308 3C3C 0000                  		move.w	#0,d6
0001530C 7A0E                       		moveq	#$E,d5
0001530E 6100 FC64                  		bsr.w	FindWall
00015312 301F                       		move.w	(sp)+,d0
00015314 143C 00C0                  		move.b	#-$40,d2
00015318 6000 FF1E                  		bra.w	loc_14DD0
0001531C                            
0001531C                            ; End of function sub_14E50
0001531C                            
0001531C                            
0001531C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001531C                            
0001531C                            
0001531C                            sub_14EB4:				; XREF: Sonic_Floor
0001531C 3428 000C                  		move.w	$C(a0),d2
00015320 3628 0008                  		move.w	8(a0),d3
00015324                            
00015324                            loc_14EBC:
00015324 0643 000A                  		addi.w	#$A,d3
00015328 49F8 F768                  		lea	($FFFFF768).w,a4
0001532C 367C 0010                  		movea.w	#$10,a3
00015330 3C3C 0000                  		move.w	#0,d6
00015334 7A0E                       		moveq	#$E,d5
00015336 6100 FC3C                  		bsr.w	FindWall
0001533A 143C 00C0                  		move.b	#-$40,d2
0001533E 6000 FF32                  		bra.w	loc_14E0A
00015342                            
00015342                            ; End of function sub_14EB4
00015342                            
00015342                            ; ---------------------------------------------------------------------------
00015342                            ; Subroutine to	detect when an object hits a wall to its right
00015342                            ; ---------------------------------------------------------------------------
00015342                            
00015342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015342                            
00015342                            
00015342                            ObjHitWallRight:
00015342 D668 0008                  		add.w	8(a0),d3
00015346 3428 000C                  		move.w	$C(a0),d2
0001534A 49F8 F768                  		lea	($FFFFF768).w,a4
0001534E 18BC 0000                  		move.b	#0,(a4)
00015352 367C 0010                  		movea.w	#$10,a3
00015356 3C3C 0000                  		move.w	#0,d6
0001535A 7A0E                       		moveq	#$E,d5
0001535C 6100 FC16                  		bsr.w	FindWall
00015360 1638 F768                  		move.b	($FFFFF768).w,d3
00015364 0803 0000                  		btst	#0,d3
00015368 6700                       		beq.s	locret_14F06
0001536A 163C 00C0                  		move.b	#-$40,d3
0001536E                            
0001536E                            locret_14F06:
0001536E 4E75                       		rts	
00015370                            
00015370                            ; End of function ObjHitWallRight
00015370                            
00015370                            ; ---------------------------------------------------------------------------
00015370                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015370                            ; touches them
00015370                            ; ---------------------------------------------------------------------------
00015370                            
00015370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015370                            
00015370                            
00015370                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015370 3428 000C                  		move.w	$C(a0),d2
00015374 3628 0008                  		move.w	8(a0),d3
00015378 7000                       		moveq	#0,d0
0001537A 1028 0016                  		move.b	$16(a0),d0
0001537E 4880                       		ext.w	d0
00015380 9440                       		sub.w	d0,d2
00015382 0A42 000F                  		eori.w	#$F,d2
00015386 1028 0017                  		move.b	$17(a0),d0
0001538A 4880                       		ext.w	d0
0001538C D640                       		add.w	d0,d3
0001538E 49F8 F768                  		lea	($FFFFF768).w,a4
00015392 367C FFF0                  		movea.w	#-$10,a3
00015396 3C3C 1000                  		move.w	#$1000,d6
0001539A 7A0E                       		moveq	#$E,d5
0001539C 6100 FA98                  		bsr.w	FindFloor
000153A0 3F01                       		move.w	d1,-(sp)
000153A2 3428 000C                  		move.w	$C(a0),d2
000153A6 3628 0008                  		move.w	8(a0),d3
000153AA 7000                       		moveq	#0,d0
000153AC 1028 0016                  		move.b	$16(a0),d0
000153B0 4880                       		ext.w	d0
000153B2 9440                       		sub.w	d0,d2
000153B4 0A42 000F                  		eori.w	#$F,d2
000153B8 1028 0017                  		move.b	$17(a0),d0
000153BC 4880                       		ext.w	d0
000153BE 9640                       		sub.w	d0,d3
000153C0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153C4 367C FFF0                  		movea.w	#-$10,a3
000153C8 3C3C 1000                  		move.w	#$1000,d6
000153CC 7A0E                       		moveq	#$E,d5
000153CE 6100 FA66                  		bsr.w	FindFloor
000153D2 301F                       		move.w	(sp)+,d0
000153D4 143C 0080                  		move.b	#-$80,d2
000153D8 6000 FE5E                  		bra.w	loc_14DD0
000153DC                            ; End of function Sonic_DontRunOnWalls
000153DC                            
000153DC                            ; ===========================================================================
000153DC 3428 000C                  		move.w	$C(a0),d2
000153E0 3628 0008                  		move.w	8(a0),d3
000153E4                            
000153E4                            loc_14F7C:
000153E4 0442 000A                  		subi.w	#$A,d2
000153E8 0A42 000F                  		eori.w	#$F,d2
000153EC 49F8 F768                  		lea	($FFFFF768).w,a4
000153F0 367C FFF0                  		movea.w	#-$10,a3
000153F4 3C3C 1000                  		move.w	#$1000,d6
000153F8 7A0E                       		moveq	#$E,d5
000153FA 6100 FA3A                  		bsr.w	FindFloor
000153FE 143C 0080                  		move.b	#-$80,d2
00015402 6000 FE6E                  		bra.w	loc_14E0A
00015406                            
00015406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015406                            
00015406                            
00015406                            ObjHitCeiling:
00015406 3428 000C                  		move.w	$C(a0),d2
0001540A 3628 0008                  		move.w	8(a0),d3
0001540E 7000                       		moveq	#0,d0
00015410 1028 0016                  		move.b	$16(a0),d0
00015414 4880                       		ext.w	d0
00015416 9440                       		sub.w	d0,d2
00015418 0A42 000F                  		eori.w	#$F,d2
0001541C 49F8 F768                  		lea	($FFFFF768).w,a4
00015420 367C FFF0                  		movea.w	#-$10,a3
00015424 3C3C 1000                  		move.w	#$1000,d6
00015428 7A0E                       		moveq	#$E,d5
0001542A 6100 FA0A                  		bsr.w	FindFloor
0001542E 1638 F768                  		move.b	($FFFFF768).w,d3
00015432 0803 0000                  		btst	#0,d3
00015436 6700                       		beq.s	locret_14FD4
00015438 163C 0080                  		move.b	#-$80,d3
0001543C                            
0001543C                            locret_14FD4:
0001543C 4E75                       		rts	
0001543E                            ; End of function ObjHitCeiling
0001543E                            
0001543E                            ; ===========================================================================
0001543E                            
0001543E                            loc_14FD6:				; XREF: sub_14D48
0001543E 3428 000C                  		move.w	$C(a0),d2
00015442 3628 0008                  		move.w	8(a0),d3
00015446 7000                       		moveq	#0,d0
00015448 1028 0017                  		move.b	$17(a0),d0
0001544C 4880                       		ext.w	d0
0001544E 9440                       		sub.w	d0,d2
00015450 1028 0016                  		move.b	$16(a0),d0
00015454 4880                       		ext.w	d0
00015456 9640                       		sub.w	d0,d3
00015458 0A43 000F                  		eori.w	#$F,d3
0001545C 49F8 F768                  		lea	($FFFFF768).w,a4
00015460 367C FFF0                  		movea.w	#-$10,a3
00015464 3C3C 0800                  		move.w	#$800,d6
00015468 7A0E                       		moveq	#$E,d5
0001546A 6100 FB08                  		bsr.w	FindWall
0001546E 3F01                       		move.w	d1,-(sp)
00015470 3428 000C                  		move.w	$C(a0),d2
00015474 3628 0008                  		move.w	8(a0),d3
00015478 7000                       		moveq	#0,d0
0001547A 1028 0017                  		move.b	$17(a0),d0
0001547E 4880                       		ext.w	d0
00015480 D440                       		add.w	d0,d2
00015482 1028 0016                  		move.b	$16(a0),d0
00015486 4880                       		ext.w	d0
00015488 9640                       		sub.w	d0,d3
0001548A 0A43 000F                  		eori.w	#$F,d3
0001548E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015492 367C FFF0                  		movea.w	#-$10,a3
00015496 3C3C 0800                  		move.w	#$800,d6
0001549A 7A0E                       		moveq	#$E,d5
0001549C 6100 FAD6                  		bsr.w	FindWall
000154A0 301F                       		move.w	(sp)+,d0
000154A2 143C 0040                  		move.b	#$40,d2
000154A6 6000 FD90                  		bra.w	loc_14DD0
000154AA                            
000154AA                            ; ---------------------------------------------------------------------------
000154AA                            ; Subroutine to	stop Sonic when	he jumps at a wall
000154AA                            ; ---------------------------------------------------------------------------
000154AA                            
000154AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AA                            
000154AA                            
000154AA                            Sonic_HitWall:				; XREF: Sonic_Floor
000154AA 3428 000C                  		move.w	$C(a0),d2
000154AE 3628 0008                  		move.w	8(a0),d3
000154B2                            
000154B2                            loc_1504A:
000154B2 0443 000A                  		subi.w	#$A,d3
000154B6 0A43 000F                  		eori.w	#$F,d3
000154BA 49F8 F768                  		lea	($FFFFF768).w,a4
000154BE 367C FFF0                  		movea.w	#-$10,a3
000154C2 3C3C 0800                  		move.w	#$800,d6
000154C6 7A0E                       		moveq	#$E,d5
000154C8 6100 FAAA                  		bsr.w	FindWall
000154CC 143C 0040                  		move.b	#$40,d2
000154D0 6000 FDA0                  		bra.w	loc_14E0A
000154D4                            ; End of function Sonic_HitWall
000154D4                            
000154D4                            ; ---------------------------------------------------------------------------
000154D4                            ; Subroutine to	detect when an object hits a wall to its left
000154D4                            ; ---------------------------------------------------------------------------
000154D4                            
000154D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D4                            
000154D4                            
000154D4                            ObjHitWallLeft:
000154D4 D668 0008                  		add.w	8(a0),d3
000154D8 3428 000C                  		move.w	$C(a0),d2
000154DC 49F8 F768                  		lea	($FFFFF768).w,a4
000154E0 18BC 0000                  		move.b	#0,(a4)
000154E4 367C FFF0                  		movea.w	#-$10,a3
000154E8 3C3C 0800                  		move.w	#$800,d6
000154EC 7A0E                       		moveq	#$E,d5
000154EE 6100 FA84                  		bsr.w	FindWall
000154F2 1638 F768                  		move.b	($FFFFF768).w,d3
000154F6 0803 0000                  		btst	#0,d3
000154FA 6700                       		beq.s	locret_15098
000154FC 163C 0040                  		move.b	#$40,d3
00015500                            
00015500                            locret_15098:
00015500 4E75                       		rts	
00015502                            ; End of function ObjHitWallLeft
00015502                            
00015502                            ; ===========================================================================
00015502                            ; ---------------------------------------------------------------------------
00015502                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015502                            ; ---------------------------------------------------------------------------
00015502                            
00015502                            Obj66:					; XREF: Obj_Index
00015502 7000                       		moveq	#0,d0
00015504 1028 0024                  		move.b	$24(a0),d0
00015508 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001550C 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015510                            ; ===========================================================================
00015510 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015512 0000                       		dc.w Obj66_Action-Obj66_Index
00015514 0000                       		dc.w Obj66_Display-Obj66_Index
00015516 0000                       		dc.w Obj66_Release-Obj66_Index
00015518                            ; ===========================================================================
00015518                            
00015518                            Obj66_Main:				; XREF: Obj66_Index
00015518 5428 0024                  		addq.b	#2,$24(a0)
0001551C 323C 0001                  		move.w	#1,d1
00015520 2248                       		movea.l	a0,a1
00015522 6000                       		bra.s	Obj66_MakeItem
00015524                            ; ===========================================================================
00015524                            
00015524                            Obj66_Loop:
00015524 6100 8510                  		bsr.w	SingleObjLoad
00015528 6600                       		bne.s	loc_150FE
0001552A 12BC 0066                  		move.b	#$66,0(a1)
0001552E 5829 0024                  		addq.b	#4,$24(a1)
00015532 3368 0008 0008             		move.w	8(a0),8(a1)
00015538 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001553E 137C 0003 0018             		move.b	#3,$18(a1)
00015544 137C 0010 001A             		move.b	#$10,$1A(a1)
0001554A                            
0001554A                            Obj66_MakeItem:				; XREF: Obj66_Main
0001554A 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015552 337C 4348 0002             		move.w	#$4348,2(a1)
00015558 0029 0004 0001             		ori.b	#4,1(a1)
0001555E 137C 0038 0019             		move.b	#$38,$19(a1)
00015564                            
00015564                            loc_150FE:
00015564 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015568                            
00015568 117C 0030 0019             		move.b	#$30,$19(a0)
0001556E 117C 0004 0018             		move.b	#4,$18(a0)
00015574 317C 003C 0030             		move.w	#$3C,$30(a0)
0001557A 117C 0001 0034             		move.b	#1,$34(a0)
00015580 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015586                            
00015586                            Obj66_Action:				; XREF: Obj66_Index
00015586 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001558A 4A28 0001                  		tst.b	1(a0)
0001558E 6A00 0000                  		bpl.w	Obj66_Display
00015592 323C 0030                  		move.w	#$30,d1
00015596 3401                       		move.w	d1,d2
00015598 3602                       		move.w	d2,d3
0001559A 5243                       		addq.w	#1,d3
0001559C 3828 0008                  		move.w	8(a0),d4
000155A0 6100 A3CE                  		bsr.w	SolidObject
000155A4 0828 0005 0022             		btst	#5,$22(a0)
000155AA 6700 0000                  		beq.w	Obj66_Display
000155AE 43F8 D000                  		lea	($FFFFD000).w,a1
000155B2 720E                       		moveq	#$E,d1
000155B4 3029 0008                  		move.w	8(a1),d0
000155B8 B068 0008                  		cmp.w	8(a0),d0
000155BC 6500                       		bcs.s	Obj66_GrabSonic
000155BE 7207                       		moveq	#7,d1
000155C0                            
000155C0                            Obj66_GrabSonic:
000155C0 B228 001A                  		cmp.b	$1A(a0),d1
000155C4 6600                       		bne.s	Obj66_Display
000155C6 1141 0032                  		move.b	d1,$32(a0)
000155CA 5828 0024                  		addq.b	#4,$24(a0)
000155CE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000155D4 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000155DA 337C 0800 0014             		move.w	#$800,$14(a1)
000155E0 337C 0000 0010             		move.w	#0,$10(a1)
000155E6 337C 0000 0012             		move.w	#0,$12(a1)
000155EC 08A8 0005 0022             		bclr	#5,$22(a0)
000155F2 08A9 0005 0022             		bclr	#5,$22(a1)
000155F8 08E9 0001 0022             		bset	#1,$22(a1)
000155FE 3429 0008                  		move.w	8(a1),d2
00015602 3629 000C                  		move.w	$C(a1),d3
00015606 6100 0000                  		bsr.w	Obj66_ChgPos
0001560A D569 0008                  		add.w	d2,8(a1)
0001560E D769 000C                  		add.w	d3,$C(a1)
00015612 E0E9 0008                  		asr	8(a1)
00015616 E0E9 000C                  		asr	$C(a1)
0001561A                            
0001561A                            Obj66_Display:				; XREF: Obj66_Index
0001561A 6000 A02C                  		bra.w	MarkObjGone
0001561E                            ; ===========================================================================
0001561E                            
0001561E                            Obj66_Release:				; XREF: Obj66_Index
0001561E 1028 001A                  		move.b	$1A(a0),d0
00015622 0C00 0004                  		cmpi.b	#4,d0
00015626 6700                       		beq.s	loc_151C8
00015628 0C00 0007                  		cmpi.b	#7,d0
0001562C 6600                       		bne.s	loc_151F8
0001562E                            
0001562E                            loc_151C8:
0001562E B028 0032                  		cmp.b	$32(a0),d0
00015632 6700                       		beq.s	loc_151F8
00015634 43F8 D000                  		lea	($FFFFD000).w,a1
00015638 337C 0000 0010             		move.w	#0,$10(a1)
0001563E 337C 0800 0012             		move.w	#$800,$12(a1)
00015644 0C00 0004                  		cmpi.b	#4,d0
00015648 6700                       		beq.s	loc_151F0
0001564A 337C 0800 0010             		move.w	#$800,$10(a1)
00015650 337C 0800 0012             		move.w	#$800,$12(a1)
00015656                            
00015656                            loc_151F0:
00015656 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001565A 5928 0024                  		subq.b	#4,$24(a0)
0001565E                            
0001565E                            loc_151F8:
0001565E 6100                       		bsr.s	Obj66_ChkSwitch
00015660 6100                       		bsr.s	Obj66_ChgPos
00015662 6000 9FE4                  		bra.w	MarkObjGone
00015666                            
00015666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015666                            
00015666                            
00015666                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015666 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001566A 7000                       		moveq	#0,d0
0001566C 1028 0038                  		move.b	$38(a0),d0
00015670 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015676 6700                       		beq.s	loc_15224	; if not, branch
00015678 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001567C 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001567E 4428 0034                  		neg.b	$34(a0)
00015682 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015688 6000                       		bra.s	Obj66_Animate
0001568A                            ; ===========================================================================
0001568A                            
0001568A                            loc_15224:
0001568A 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001568E                            
0001568E                            Obj66_Animate:
0001568E 5328 001E                  		subq.b	#1,$1E(a0)
00015692 6A00                       		bpl.s	locret_15246
00015694 117C 0007 001E             		move.b	#7,$1E(a0)
0001569A 1228 0034                  		move.b	$34(a0),d1
0001569E 1028 001A                  		move.b	$1A(a0),d0
000156A2 D001                       		add.b	d1,d0
000156A4 0200 000F                  		andi.b	#$F,d0
000156A8 1140 001A                  		move.b	d0,$1A(a0)
000156AC                            
000156AC                            locret_15246:
000156AC 4E75                       		rts	
000156AE                            ; End of function Obj66_ChkSwitch
000156AE                            
000156AE                            
000156AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156AE                            
000156AE                            
000156AE                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000156AE 43F8 D000                  		lea	($FFFFD000).w,a1
000156B2 7000                       		moveq	#0,d0
000156B4 1028 001A                  		move.b	$1A(a0),d0
000156B8 D040                       		add.w	d0,d0
000156BA 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000156BE 101A                       		move.b	(a2)+,d0
000156C0 4880                       		ext.w	d0
000156C2 D068 0008                  		add.w	8(a0),d0
000156C6 3340 0008                  		move.w	d0,8(a1)
000156CA 101A                       		move.b	(a2)+,d0
000156CC 4880                       		ext.w	d0
000156CE D068 000C                  		add.w	$C(a0),d0
000156D2 3340 000C                  		move.w	d0,$C(a1)
000156D6 4E75                       		rts	
000156D8                            ; End of function Obj66_ChgPos
000156D8                            
000156D8                            ; ===========================================================================
000156D8 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000156DC E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000156E0 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000156E4 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000156E8 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000156EC 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000156F0 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000156F4 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000156F8                            ; ---------------------------------------------------------------------------
000156F8                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000156F8                            ; ---------------------------------------------------------------------------
000156F8                            Map_obj66:
000156F8                            	include "_maps\obj66.asm"
000156F8                            ; ---------------------------------------------------------------------------
000156F8                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000156F8                            ; ---------------------------------------------------------------------------
000156F8 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000156FC 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015700 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015704 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015708 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001570C 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015710 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015714 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015718 0000                       		dc.w byte_154A4-Map_obj66
0001571A 06                         byte_152B4:	dc.b 6
0001571B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015720 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015725 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001572A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001572F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015734 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015739 06                         byte_152D3:	dc.b 6
0001573A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001573F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015744 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015749 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001574E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015753 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015758 06                         byte_152F2:	dc.b 6
00015759 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001575E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015763 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015768 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001576D 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015772 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015777 06                         byte_15311:	dc.b 6
00015778 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001577D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015782 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015787 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001578C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015791 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015796 06                         byte_15330:	dc.b 6
00015797 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001579C 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000157A1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000157A6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000157AB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000157B0 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000157B5 06                         byte_1534F:	dc.b 6
000157B6 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000157BB 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000157C0 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000157C5 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000157CA 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000157CF 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000157D4 06                         byte_1536E:	dc.b 6
000157D5 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000157DA 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000157DF 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000157E4 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000157E9 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000157EE 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000157F3 06                         byte_1538D:	dc.b 6
000157F4 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000157F9 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000157FE F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015803 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015808 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001580D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015812 06                         byte_153AC:	dc.b 6
00015813 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015818 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001581D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015822 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015827 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001582C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015831 06                         byte_153CB:	dc.b 6
00015832 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015837 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001583C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015841 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015846 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001584B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015850 06                         byte_153EA:	dc.b 6
00015851 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015856 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001585B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015860 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015865 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001586A E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
0001586F 06                         byte_15409:	dc.b 6
00015870 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015875 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001587A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001587F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015884 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015889 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001588E 06                         byte_15428:	dc.b 6
0001588F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015894 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015899 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001589E C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000158A3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000158A8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000158AD 06                         byte_15447:	dc.b 6
000158AE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000158B3 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000158B8 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000158BD CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000158C2 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000158C7 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000158CC 06                         byte_15466:	dc.b 6
000158CD E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000158D2 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000158D7 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000158DC D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000158E1 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000158E6 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000158EB 06                         byte_15485:	dc.b 6
000158EC E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000158F1 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000158F6 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000158FB DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015900 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015905 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001590A 0C                         byte_154A4:	dc.b $C
0001590B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015910 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015915 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001591A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001591F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015924 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015929 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001592E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015933 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015938 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001593D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015942 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015948 00                         		even
00015948 00                         		even
00015948                            
00015948                            ; ===========================================================================
00015948                            ; ---------------------------------------------------------------------------
00015948                            ; Object 67 - disc that	you run	around (SBZ)
00015948                            ; ---------------------------------------------------------------------------
00015948                            
00015948                            Obj67:					; XREF: Obj_Index
00015948 7000                       		moveq	#0,d0
0001594A 1028 0024                  		move.b	$24(a0),d0
0001594E 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015952 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015956                            ; ===========================================================================
00015956 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015958 0000                       		dc.w Obj67_Action-Obj67_Index
0001595A                            ; ===========================================================================
0001595A                            
0001595A                            Obj67_Main:				; XREF: Obj67_Index
0001595A 5428 0024                  		addq.b	#2,$24(a0)
0001595E 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015966 317C C344 0002             		move.w	#$C344,2(a0)
0001596C 117C 0004 0001             		move.b	#4,1(a0)
00015972 117C 0004 0018             		move.b	#4,$18(a0)
00015978 117C 0008 0019             		move.b	#8,$19(a0)
0001597E 3168 0008 0032             		move.w	8(a0),$32(a0)
00015984 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001598A 117C 0018 0034             		move.b	#$18,$34(a0)
00015990 117C 0048 0038             		move.b	#$48,$38(a0)
00015996 1228 0028                  		move.b	$28(a0),d1	; get object type
0001599A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001599E 6700                       		beq.s	loc_15546
000159A0 117C 0010 0034             		move.b	#$10,$34(a0)
000159A6 117C 0038 0038             		move.b	#$38,$38(a0)
000159AC                            
000159AC                            loc_15546:
000159AC 1228 0028                  		move.b	$28(a0),d1	; get object type
000159B0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000159B4 4881                       		ext.w	d1
000159B6 E741                       		asl.w	#3,d1
000159B8 3141 0036                  		move.w	d1,$36(a0)
000159BC 1028 0022                  		move.b	$22(a0),d0
000159C0 E418                       		ror.b	#2,d0
000159C2 0200 00C0                  		andi.b	#-$40,d0
000159C6 1140 0026                  		move.b	d0,$26(a0)
000159CA                            
000159CA                            Obj67_Action:				; XREF: Obj67_Index
000159CA 6100 0000                  		bsr.w	Obj67_MoveSonic
000159CE 6100 0000                  		bsr.w	Obj67_MoveSpot
000159D2 6000 0000                  		bra.w	Obj67_ChkDel
000159D6                            ; ===========================================================================
000159D6                            
000159D6                            Obj67_MoveSonic:			; XREF: Obj67_Action
000159D6 7400                       		moveq	#0,d2
000159D8 1428 0038                  		move.b	$38(a0),d2
000159DC 3602                       		move.w	d2,d3
000159DE D643                       		add.w	d3,d3
000159E0 43F8 D000                  		lea	($FFFFD000).w,a1
000159E4 3029 0008                  		move.w	8(a1),d0
000159E8 9068 0032                  		sub.w	$32(a0),d0
000159EC D042                       		add.w	d2,d0
000159EE B043                       		cmp.w	d3,d0
000159F0 6400                       		bcc.s	loc_155A8
000159F2 3229 000C                  		move.w	$C(a1),d1
000159F6 9268 0030                  		sub.w	$30(a0),d1
000159FA D242                       		add.w	d2,d1
000159FC B243                       		cmp.w	d3,d1
000159FE 6400                       		bcc.s	loc_155A8
00015A00 0829 0001 0022             		btst	#1,$22(a1)
00015A06 6700                       		beq.s	loc_155B8
00015A08 4228 003A                  		clr.b	$3A(a0)
00015A0C 4E75                       		rts	
00015A0E                            ; ===========================================================================
00015A0E                            
00015A0E                            loc_155A8:
00015A0E 4A28 003A                  		tst.b	$3A(a0)
00015A12 6700                       		beq.s	locret_155B6
00015A14 4229 0038                  		clr.b	$38(a1)
00015A18 4228 003A                  		clr.b	$3A(a0)
00015A1C                            
00015A1C                            locret_155B6:
00015A1C 4E75                       		rts	
00015A1E                            ; ===========================================================================
00015A1E                            
00015A1E                            loc_155B8:
00015A1E 4A28 003A                  		tst.b	$3A(a0)
00015A22 6600                       		bne.s	loc_155E2
00015A24 117C 0001 003A             		move.b	#1,$3A(a0)
00015A2A 0829 0002 0022             		btst	#2,$22(a1)
00015A30 6600                       		bne.s	loc_155D0
00015A32 4229 001C                  		clr.b	$1C(a1)
00015A36                            
00015A36                            loc_155D0:
00015A36 08A9 0005 0022             		bclr	#5,$22(a1)
00015A3C 137C 0001 001D             		move.b	#1,$1D(a1)
00015A42 137C 0001 0038             		move.b	#1,$38(a1)
00015A48                            
00015A48                            loc_155E2:
00015A48 3029 0014                  		move.w	$14(a1),d0
00015A4C 4A68 0036                  		tst.w	$36(a0)
00015A50 6A00                       		bpl.s	loc_15608
00015A52 0C40 FC00                  		cmpi.w	#-$400,d0
00015A56 6F00                       		ble.s	loc_155FA
00015A58 337C FC00 0014             		move.w	#-$400,$14(a1)
00015A5E 4E75                       		rts	
00015A60                            ; ===========================================================================
00015A60                            
00015A60                            loc_155FA:
00015A60 0C40 F100                  		cmpi.w	#-$F00,d0
00015A64 6C00                       		bge.s	locret_15606
00015A66 337C F100 0014             		move.w	#-$F00,$14(a1)
00015A6C                            
00015A6C                            locret_15606:
00015A6C 4E75                       		rts	
00015A6E                            ; ===========================================================================
00015A6E                            
00015A6E                            loc_15608:
00015A6E 0C40 0400                  		cmpi.w	#$400,d0
00015A72 6C00                       		bge.s	loc_15616
00015A74 337C 0400 0014             		move.w	#$400,$14(a1)
00015A7A 4E75                       		rts	
00015A7C                            ; ===========================================================================
00015A7C                            
00015A7C                            loc_15616:
00015A7C 0C40 0F00                  		cmpi.w	#$F00,d0
00015A80 6F00                       		ble.s	locret_15622
00015A82 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015A88                            
00015A88                            locret_15622:
00015A88 4E75                       		rts	
00015A8A                            ; ===========================================================================
00015A8A                            
00015A8A                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015A8A 3028 0036                  		move.w	$36(a0),d0
00015A8E D168 0026                  		add.w	d0,$26(a0)
00015A92 1028 0026                  		move.b	$26(a0),d0
00015A96 4EB9 0000 29BA             		jsr	(CalcSine).l
00015A9C 3428 0030                  		move.w	$30(a0),d2
00015AA0 3628 0032                  		move.w	$32(a0),d3
00015AA4 7800                       		moveq	#0,d4
00015AA6 1828 0034                  		move.b	$34(a0),d4
00015AAA E14C                       		lsl.w	#8,d4
00015AAC 2A04                       		move.l	d4,d5
00015AAE C9C0                       		muls.w	d0,d4
00015AB0 4844                       		swap	d4
00015AB2 CBC1                       		muls.w	d1,d5
00015AB4 4845                       		swap	d5
00015AB6 D842                       		add.w	d2,d4
00015AB8 DA43                       		add.w	d3,d5
00015ABA 3144 000C                  		move.w	d4,$C(a0)
00015ABE 3145 0008                  		move.w	d5,8(a0)
00015AC2 4E75                       		rts	
00015AC4                            ; ===========================================================================
00015AC4                            
00015AC4                            Obj67_ChkDel:				; XREF: Obj67_Action
00015AC4 3028 0032                  		move.w	$32(a0),d0
00015AC8 0240 FF80                  		andi.w	#-$80,d0
00015ACC 3238 F700                  		move.w	($FFFFF700).w,d1
00015AD0 0441 0080                  		subi.w	#$80,d1
00015AD4 0241 FF80                  		andi.w	#-$80,d1
00015AD8 9041                       		sub.w	d1,d0
00015ADA 0C40 0280                  		cmpi.w	#$280,d0
00015ADE 6200                       		bhi.s	Obj67_Delete
00015AE0 4EF9 0000 D5B0             		jmp	DisplaySprite
00015AE6                            ; ===========================================================================
00015AE6                            
00015AE6                            Obj67_Delete:
00015AE6 4EF9 0000 D5EC             		jmp	DeleteObject
00015AEC                            ; ===========================================================================
00015AEC                            ; ---------------------------------------------------------------------------
00015AEC                            ; Sprite mappings - disc that you run around (SBZ)
00015AEC                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015AEC                            ; part of the level tiles.)
00015AEC                            ; ---------------------------------------------------------------------------
00015AEC                            Map_obj67:
00015AEC                            	include "_maps\obj67.asm"
00015AEC                            ; ---------------------------------------------------------------------------
00015AEC                            ; Sprite mappings - disc that you run around (SBZ)
00015AEC                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015AEC                            ; part of the level tiles.)
00015AEC                            ; ---------------------------------------------------------------------------
00015AEC 0000                       		dc.w byte_15688-Map_obj67
00015AEE 01                         byte_15688:	dc.b 1
00015AEF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015AF4                            		even
00015AF4                            		even
00015AF4                            
00015AF4                            ; ===========================================================================
00015AF4                            ; ---------------------------------------------------------------------------
00015AF4                            ; Object 68 - conveyor belts (SBZ)
00015AF4                            ; ---------------------------------------------------------------------------
00015AF4                            
00015AF4                            Obj68:					; XREF: Obj_Index
00015AF4 7000                       		moveq	#0,d0
00015AF6 1028 0024                  		move.b	$24(a0),d0
00015AFA 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015AFE 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015B02                            ; ===========================================================================
00015B02 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015B04 0000                       		dc.w Obj68_Action-Obj68_Index
00015B06                            ; ===========================================================================
00015B06                            
00015B06                            Obj68_Main:				; XREF: Obj68_Index
00015B06 5428 0024                  		addq.b	#2,$24(a0)
00015B0A 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015B10 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B14 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B18 6700                       		beq.s	loc_156BA	; if zero, branch
00015B1A 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015B20                            
00015B20                            loc_156BA:
00015B20 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B24 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B28 4881                       		ext.w	d1
00015B2A E841                       		asr.w	#4,d1
00015B2C 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015B30                            
00015B30                            Obj68_Action:				; XREF: Obj68_Index
00015B30 6100                       		bsr.s	Obj68_MoveSonic
00015B32 3028 0008                  		move.w	8(a0),d0
00015B36 0240 FF80                  		andi.w	#$FF80,d0
00015B3A 3238 F700                  		move.w	($FFFFF700).w,d1
00015B3E 0441 0080                  		subi.w	#$80,d1
00015B42 0241 FF80                  		andi.w	#$FF80,d1
00015B46 9041                       		sub.w	d1,d0
00015B48 0C40 0280                  		cmpi.w	#$280,d0
00015B4C 6200                       		bhi.s	Obj68_Delete
00015B4E 4E75                       		rts	
00015B50                            ; ===========================================================================
00015B50                            
00015B50                            Obj68_Delete:
00015B50 4EF9 0000 D5EC             		jmp	DeleteObject
00015B56                            ; ===========================================================================
00015B56                            
00015B56                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015B56 7400                       		moveq	#0,d2
00015B58 1428 0038                  		move.b	$38(a0),d2
00015B5C 3602                       		move.w	d2,d3
00015B5E D643                       		add.w	d3,d3
00015B60 43F8 D000                  		lea	($FFFFD000).w,a1
00015B64 3029 0008                  		move.w	8(a1),d0
00015B68 9068 0008                  		sub.w	8(a0),d0
00015B6C D042                       		add.w	d2,d0
00015B6E B043                       		cmp.w	d3,d0
00015B70 6400                       		bcc.s	locret_1572E
00015B72 3229 000C                  		move.w	$C(a1),d1
00015B76 9268 000C                  		sub.w	$C(a0),d1
00015B7A 0641 0030                  		addi.w	#$30,d1
00015B7E 0C41 0030                  		cmpi.w	#$30,d1
00015B82 6400                       		bcc.s	locret_1572E
00015B84 0829 0001 0022             		btst	#1,$22(a1)
00015B8A 6600                       		bne.s	locret_1572E
00015B8C 3028 0036                  		move.w	$36(a0),d0
00015B90 D169 0008                  		add.w	d0,8(a1)
00015B94                            
00015B94                            locret_1572E:
00015B94 4E75                       		rts	
00015B96                            
00015B96                            ; ===========================================================================
00015B96                            ; ---------------------------------------------------------------------------
00015B96                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015B96                            ; ---------------------------------------------------------------------------
00015B96                            
00015B96                            Obj69:					; XREF: Obj_Index
00015B96 7000                       		moveq	#0,d0
00015B98 1028 0024                  		move.b	$24(a0),d0
00015B9C 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015BA0 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015BA4                            ; ===========================================================================
00015BA4 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015BA6 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015BA8 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015BAA                            ; ===========================================================================
00015BAA                            
00015BAA                            Obj69_Main:				; XREF: Obj69_Index
00015BAA 5428 0024                  		addq.b	#2,$24(a0)
00015BAE 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015BB6 317C 4492 0002             		move.w	#$4492,2(a0)
00015BBC 0028 0004 0001             		ori.b	#4,1(a0)
00015BC2 117C 0080 0019             		move.b	#$80,$19(a0)
00015BC8 7000                       		moveq	#0,d0
00015BCA 1028 0028                  		move.b	$28(a0),d0
00015BCE 0240 000F                  		andi.w	#$F,d0
00015BD2 C0FC 003C                  		mulu.w	#$3C,d0
00015BD6 3140 0032                  		move.w	d0,$32(a0)
00015BDA 4A28 0028                  		tst.b	$28(a0)
00015BDE 6A00                       		bpl.s	Obj69_Trapdoor
00015BE0 5428 0024                  		addq.b	#2,$24(a0)
00015BE4 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015BEC 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015BF2 117C 0010 0019             		move.b	#$10,$19(a0)
00015BF8 117C 0002 001C             		move.b	#2,$1C(a0)
00015BFE 7000                       		moveq	#0,d0
00015C00 1028 0028                  		move.b	$28(a0),d0	; get object type
00015C04 3200                       		move.w	d0,d1
00015C06 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015C0A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015C0E 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015C12 3140 0032                  		move.w	d0,$32(a0)
00015C16 0241 0070                  		andi.w	#$70,d1
00015C1A 0641 0010                  		addi.w	#$10,d1
00015C1E E549                       		lsl.w	#2,d1
00015C20 5341                       		subq.w	#1,d1
00015C22 3141 0036                  		move.w	d1,$36(a0)
00015C26 6000                       		bra.s	Obj69_Spinner
00015C28                            ; ===========================================================================
00015C28                            
00015C28                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015C28 5368 0030                  		subq.w	#1,$30(a0)
00015C2C 6A00                       		bpl.s	Obj69_Animate
00015C2E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015C34 0868 0000 001C             		bchg	#0,$1C(a0)
00015C3A 4A28 0001                  		tst.b	1(a0)
00015C3E 6A00                       		bpl.s	Obj69_Animate
00015C40 303C 00BB                  		move.w	#$BB,d0
00015C44 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play door sound
00015C4A                            
00015C4A                            Obj69_Animate:
00015C4A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015C50 4EB9 0000 A6EC             		jsr	AnimateSprite
00015C56 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015C5A 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015C5C 323C 004B                  		move.w	#$4B,d1
00015C60 343C 000C                  		move.w	#$C,d2
00015C64 3602                       		move.w	d2,d3
00015C66 5243                       		addq.w	#1,d3
00015C68 3828 0008                  		move.w	8(a0),d4
00015C6C 6100 9D02                  		bsr.w	SolidObject
00015C70 6000 99D6                  		bra.w	MarkObjGone
00015C74                            ; ===========================================================================
00015C74                            
00015C74                            Obj69_NotSolid:
00015C74 0828 0003 0022             		btst	#3,$22(a0)
00015C7A 6700                       		beq.s	Obj69_Display
00015C7C 43F8 D000                  		lea	($FFFFD000).w,a1
00015C80 08A9 0003 0022             		bclr	#3,$22(a1)
00015C86 08A8 0003 0022             		bclr	#3,$22(a0)
00015C8C 4228 0025                  		clr.b	$25(a0)
00015C90                            
00015C90                            Obj69_Display:
00015C90 6000 99B6                  		bra.w	MarkObjGone
00015C94                            ; ===========================================================================
00015C94                            
00015C94                            Obj69_Spinner:				; XREF: Obj69_Index
00015C94 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015C98 C068 0036                  		and.w	$36(a0),d0
00015C9C 6600                       		bne.s	Obj69_Delay
00015C9E 117C 0001 0034             		move.b	#1,$34(a0)
00015CA4                            
00015CA4                            Obj69_Delay:
00015CA4 4A28 0034                  		tst.b	$34(a0)
00015CA8 6700                       		beq.s	Obj69_Animate2
00015CAA 5368 0030                  		subq.w	#1,$30(a0)
00015CAE 6A00                       		bpl.s	Obj69_Animate2
00015CB0 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015CB6 4228 0034                  		clr.b	$34(a0)
00015CBA 0868 0000 001C             		bchg	#0,$1C(a0)
00015CC0                            
00015CC0                            Obj69_Animate2:
00015CC0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015CC6 4EB9 0000 A6EC             		jsr	AnimateSprite
00015CCC 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015CD0 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015CD2 323C 001B                  		move.w	#$1B,d1
00015CD6 343C 0007                  		move.w	#7,d2
00015CDA 3602                       		move.w	d2,d3
00015CDC 5243                       		addq.w	#1,d3
00015CDE 3828 0008                  		move.w	8(a0),d4
00015CE2 6100 9C8C                  		bsr.w	SolidObject
00015CE6 6000 9960                  		bra.w	MarkObjGone
00015CEA                            ; ===========================================================================
00015CEA                            
00015CEA                            Obj69_NotSolid2:
00015CEA 0828 0003 0022             		btst	#3,$22(a0)
00015CF0 6700                       		beq.s	Obj69_Display2
00015CF2 43F8 D000                  		lea	($FFFFD000).w,a1
00015CF6 08A9 0003 0022             		bclr	#3,$22(a1)
00015CFC 08A8 0003 0022             		bclr	#3,$22(a0)
00015D02 4228 0025                  		clr.b	$25(a0)
00015D06                            
00015D06                            Obj69_Display2:
00015D06 6000 9940                  		bra.w	MarkObjGone
00015D0A                            ; ===========================================================================
00015D0A                            Ani_obj69:
00015D0A                            	include "_anim\obj69.asm"
00015D0A                            ; ---------------------------------------------------------------------------
00015D0A                            ; Animation script - trapdoor (SBZ)
00015D0A                            ; ---------------------------------------------------------------------------
00015D0A 0000                       		dc.w byte_158AC-Ani_obj69
00015D0C 0000                       		dc.w byte_158B2-Ani_obj69
00015D0E 0000                       		dc.w byte_158B8-Ani_obj69
00015D10 0000                       		dc.w byte_158CC-Ani_obj69
00015D12 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015D18 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015D1E 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015D2B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015D32 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015D3F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015D46                            		even
00015D46                            		even
00015D46                            
00015D46                            ; ---------------------------------------------------------------------------
00015D46                            ; Sprite mappings - trapdoor (SBZ)
00015D46                            ; ---------------------------------------------------------------------------
00015D46                            Map_obj69:
00015D46                            	include "_maps\obj69.asm"
00015D46                            ; ---------------------------------------------------------------------------
00015D46                            ; Sprite mappings - trapdoor (SBZ)
00015D46                            ; ---------------------------------------------------------------------------
00015D46 0000                       		dc.w byte_158E6-Map_obj69
00015D48 0000                       		dc.w byte_158FB-Map_obj69
00015D4A 0000                       		dc.w byte_15924-Map_obj69
00015D4C 04                         byte_158E6:	dc.b 4
00015D4D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015D52 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015D57 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015D5C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015D61 08                         byte_158FB:	dc.b 8
00015D62 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015D67 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015D6C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015D71 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015D76 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015D7B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015D80 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015D85 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015D8A 04                         byte_15924:	dc.b 4
00015D8B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015D90 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015D95 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015D9A 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015DA0 00                         		even
00015DA0 00                         		even
00015DA0                            
00015DA0                            ; ---------------------------------------------------------------------------
00015DA0                            ; Sprite mappings - spinning platforms (SBZ)
00015DA0                            ; ---------------------------------------------------------------------------
00015DA0                            Map_obj69a:
00015DA0                            	include "_maps\obj69a.asm"
00015DA0                            ; ---------------------------------------------------------------------------
00015DA0                            ; Sprite mappings - spinning platforms (SBZ)
00015DA0                            ; ---------------------------------------------------------------------------
00015DA0 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015DA4 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015DA8 0000                       		dc.w byte_15970-Map_obj69a
00015DAA 02                         byte_15944:	dc.b 2
00015DAB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015DB0 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015DB5 02                         byte_1594F:	dc.b 2
00015DB6 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015DBB 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015DC0 02                         byte_1595A:	dc.b 2
00015DC1 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015DC6 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015DCB 02                         byte_15965:	dc.b 2
00015DCC F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015DD1 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015DD6 02                         byte_15970:	dc.b 2
00015DD7 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015DDC 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015DE2 00                         		even
00015DE2 00                         		even
00015DE2                            
00015DE2                            ; ===========================================================================
00015DE2                            ; ---------------------------------------------------------------------------
00015DE2                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015DE2                            ; ---------------------------------------------------------------------------
00015DE2                            
00015DE2                            Obj6A:					; XREF: Obj_Index
00015DE2 7000                       		moveq	#0,d0
00015DE4 1028 0024                  		move.b	$24(a0),d0
00015DE8 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015DEC 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015DF0                            ; ===========================================================================
00015DF0 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015DF2 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015DF4                            ; ===========================================================================
00015DF4                            
00015DF4                            Obj6A_Main:				; XREF: Obj6A_Index
00015DF4 5428 0024                  		addq.b	#2,$24(a0)
00015DF8 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015E00 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015E06 117C 0004 0001             		move.b	#4,1(a0)
00015E0C 117C 0004 0018             		move.b	#4,$18(a0)
00015E12 117C 0020 0019             		move.b	#$20,$19(a0)
00015E18 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015E1E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015E24 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015E2A 6400                       		bcc.s	Obj6A_Action
00015E2C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015E32                            
00015E32                            Obj6A_Action:				; XREF: Obj6A_Index
00015E32 7000                       		moveq	#0,d0
00015E34 1028 0028                  		move.b	$28(a0),d0
00015E38 0240 0007                  		andi.w	#7,d0
00015E3C D040                       		add.w	d0,d0
00015E3E 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015E42 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015E46 3028 003A                  		move.w	$3A(a0),d0
00015E4A 0240 FF80                  		andi.w	#$FF80,d0
00015E4E 3238 F700                  		move.w	($FFFFF700).w,d1
00015E52 0441 0080                  		subi.w	#$80,d1
00015E56 0241 FF80                  		andi.w	#$FF80,d1
00015E5A 9041                       		sub.w	d1,d0
00015E5C 0C40 0280                  		cmpi.w	#$280,d0
00015E60 6200                       		bhi.s	Obj6A_Delete
00015E62 4EF9 0000 D5B0             		jmp	DisplaySprite
00015E68                            ; ===========================================================================
00015E68                            
00015E68                            Obj6A_Delete:
00015E68 4EF9 0000 D5EC             		jmp	DeleteObject
00015E6E                            ; ===========================================================================
00015E6E 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015E72 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015E76 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015E78                            ; ===========================================================================
00015E78                            
00015E78                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015E78 4E75                       		rts	
00015E7A                            ; ===========================================================================
00015E7A                            
00015E7A                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015E7A 323C 0060                  		move.w	#$60,d1
00015E7E 7000                       		moveq	#0,d0
00015E80 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015E84 0828 0000 0022             		btst	#0,$22(a0)
00015E8A 6700                       		beq.s	Obj6A_Animate01
00015E8C 4440                       		neg.w	d0
00015E8E D041                       		add.w	d1,d0
00015E90                            
00015E90                            Obj6A_Animate01:
00015E90 3228 003A                  		move.w	$3A(a0),d1
00015E94 9240                       		sub.w	d0,d1
00015E96 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015E9A 5328 001E                  		subq.b	#1,$1E(a0)
00015E9E 6A00                       		bpl.s	loc_15A46
00015EA0 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015EA6 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015EAC                            
00015EAC                            loc_15A46:
00015EAC 4A28 0001                  		tst.b	1(a0)
00015EB0 6A00                       		bpl.s	locret_15A60
00015EB2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015EB6 0240 000F                  		andi.w	#$F,d0
00015EBA 6600                       		bne.s	locret_15A60
00015EBC 303C 00B0                  		move.w	#$B0,d0
00015EC0 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play saw sound
00015EC6                            
00015EC6                            locret_15A60:
00015EC6 4E75                       		rts	
00015EC8                            ; ===========================================================================
00015EC8                            
00015EC8                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015EC8 323C 0030                  		move.w	#$30,d1
00015ECC 7000                       		moveq	#0,d0
00015ECE 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015ED2 0828 0000 0022             		btst	#0,$22(a0)
00015ED8 6700                       		beq.s	Obj6A_Animate02
00015EDA 4440                       		neg.w	d0
00015EDC 0640 0080                  		addi.w	#$80,d0
00015EE0                            
00015EE0                            Obj6A_Animate02:
00015EE0 3228 0038                  		move.w	$38(a0),d1
00015EE4 9240                       		sub.w	d0,d1
00015EE6 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015EEA 5328 001E                  		subq.b	#1,$1E(a0)
00015EEE 6A00                       		bpl.s	loc_15A96
00015EF0 117C 0002 001E             		move.b	#2,$1E(a0)
00015EF6 0868 0000 001A             		bchg	#0,$1A(a0)
00015EFC                            
00015EFC                            loc_15A96:
00015EFC 4A28 0001                  		tst.b	1(a0)
00015F00 6A00                       		bpl.s	locret_15AB0
00015F02 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015F06 0C00 0018                  		cmpi.b	#$18,d0
00015F0A 6600                       		bne.s	locret_15AB0
00015F0C 303C 00B0                  		move.w	#$B0,d0
00015F10 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play saw sound
00015F16                            
00015F16                            locret_15AB0:
00015F16 4E75                       		rts	
00015F18                            ; ===========================================================================
00015F18                            
00015F18                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015F18 4A28 003D                  		tst.b	$3D(a0)
00015F1C 6600                       		bne.s	Obj6A_Animate03
00015F1E 3038 D008                  		move.w	($FFFFD008).w,d0
00015F22 0440 00C0                  		subi.w	#$C0,d0
00015F26 6500                       		bcs.s	loc_15B02
00015F28 9068 0008                  		sub.w	8(a0),d0
00015F2C 6500                       		bcs.s	loc_15B02
00015F2E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015F32 0440 0080                  		subi.w	#$80,d0
00015F36 B068 000C                  		cmp.w	$C(a0),d0
00015F3A 6400                       		bcc.s	locret_15B04
00015F3C 0640 0100                  		addi.w	#$100,d0
00015F40 B068 000C                  		cmp.w	$C(a0),d0
00015F44 6500                       		bcs.s	locret_15B04
00015F46 117C 0001 003D             		move.b	#1,$3D(a0)
00015F4C 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015F52 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F58 117C 0002 001A             		move.b	#2,$1A(a0)
00015F5E 303C 00B0                  		move.w	#$B0,d0
00015F62 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play saw sound
00015F68                            
00015F68                            loc_15B02:
00015F68 588F                       		addq.l	#4,sp
00015F6A                            
00015F6A                            locret_15B04:
00015F6A 4E75                       		rts	
00015F6C                            ; ===========================================================================
00015F6C                            
00015F6C                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015F6C 4EB9 0000 D58A             		jsr	SpeedToPos
00015F72 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F78 5328 001E                  		subq.b	#1,$1E(a0)
00015F7C 6A00                       		bpl.s	locret_15B24
00015F7E 117C 0002 001E             		move.b	#2,$1E(a0)
00015F84 0868 0000 001A             		bchg	#0,$1A(a0)
00015F8A                            
00015F8A                            locret_15B24:
00015F8A 4E75                       		rts	
00015F8C                            ; ===========================================================================
00015F8C                            
00015F8C                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015F8C 4A28 003D                  		tst.b	$3D(a0)
00015F90 6600                       		bne.s	Obj6A_Animate04
00015F92 3038 D008                  		move.w	($FFFFD008).w,d0
00015F96 0640 00E0                  		addi.w	#$E0,d0
00015F9A 9068 0008                  		sub.w	8(a0),d0
00015F9E 6400                       		bcc.s	loc_15B74
00015FA0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015FA4 0440 0080                  		subi.w	#$80,d0
00015FA8 B068 000C                  		cmp.w	$C(a0),d0
00015FAC 6400                       		bcc.s	locret_15B76
00015FAE 0640 0100                  		addi.w	#$100,d0
00015FB2 B068 000C                  		cmp.w	$C(a0),d0
00015FB6 6500                       		bcs.s	locret_15B76
00015FB8 117C 0001 003D             		move.b	#1,$3D(a0)
00015FBE 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015FC4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FCA 117C 0002 001A             		move.b	#2,$1A(a0)
00015FD0 303C 00B0                  		move.w	#$B0,d0
00015FD4 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play saw sound
00015FDA                            
00015FDA                            loc_15B74:
00015FDA 588F                       		addq.l	#4,sp
00015FDC                            
00015FDC                            locret_15B76:
00015FDC 4E75                       		rts	
00015FDE                            ; ===========================================================================
00015FDE                            
00015FDE                            Obj6A_Animate04:
00015FDE 4EB9 0000 D58A             		jsr	SpeedToPos
00015FE4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FEA 5328 001E                  		subq.b	#1,$1E(a0)
00015FEE 6A00                       		bpl.s	locret_15B96
00015FF0 117C 0002 001E             		move.b	#2,$1E(a0)
00015FF6 0868 0000 001A             		bchg	#0,$1A(a0)
00015FFC                            
00015FFC                            locret_15B96:
00015FFC 4E75                       		rts	
00015FFE                            ; ===========================================================================
00015FFE                            ; ---------------------------------------------------------------------------
00015FFE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015FFE                            ; ---------------------------------------------------------------------------
00015FFE                            Map_obj6A:
00015FFE                            	include "_maps\obj6A.asm"
00015FFE                            ; ---------------------------------------------------------------------------
00015FFE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015FFE                            ; ---------------------------------------------------------------------------
00015FFE 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016002 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016006 07                         byte_15BA0:	dc.b 7
00016007 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001600C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016011 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016016 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001601B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016020 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016025 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001602A 07                         byte_15BC4:	dc.b 7
0001602B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016030 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016035 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001603A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001603F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016044 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016049 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001604E 04                         byte_15BE8:	dc.b 4
0001604F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016054 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016059 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001605E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016063 04                         byte_15BFD:	dc.b 4
00016064 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016069 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001606E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016073 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016078                            		even
00016078                            		even
00016078                            
00016078                            ; ===========================================================================
00016078                            ; ---------------------------------------------------------------------------
00016078                            ; Object 6B - stomper (SBZ)
00016078                            ; ---------------------------------------------------------------------------
00016078                            
00016078                            Obj6B:					; XREF: Obj_Index
00016078 7000                       		moveq	#0,d0
0001607A 1028 0024                  		move.b	$24(a0),d0
0001607E 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016082 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016086                            ; ===========================================================================
00016086 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016088 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001608A                            
0001608A 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001608E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016092 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016096 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001609A 8040 0005                  		dc.b  $80, $40,	  0,   5
0001609E                            ; ===========================================================================
0001609E                            
0001609E                            Obj6B_Main:				; XREF: Obj6B_Index
0001609E 5428 0024                  		addq.b	#2,$24(a0)
000160A2 7000                       		moveq	#0,d0
000160A4 1028 0028                  		move.b	$28(a0),d0
000160A8 E448                       		lsr.w	#2,d0
000160AA 0240 001C                  		andi.w	#$1C,d0
000160AE 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000160B2 115B 0019                  		move.b	(a3)+,$19(a0)
000160B6 115B 0016                  		move.b	(a3)+,$16(a0)
000160BA E448                       		lsr.w	#2,d0
000160BC 1140 001A                  		move.b	d0,$1A(a0)
000160C0 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000160C8 317C 22C0 0002             		move.w	#$22C0,2(a0)
000160CE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000160D4 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000160D6 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000160DC 6700                       		beq.s	Obj6B_SBZ3
000160DE                            
000160DE                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000160DE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000160E2 7000                       		moveq	#0,d0
000160E4 1028 0023                  		move.b	$23(a0),d0
000160E8 6700                       		beq.s	Obj6B_Delete
000160EA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000160F0                            
000160F0                            Obj6B_Delete:
000160F0 4EF9 0000 D5EC             		jmp	DeleteObject
000160F6                            ; ===========================================================================
000160F6                            
000160F6                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000160F6 317C 41F0 0002             		move.w	#$41F0,2(a0)
000160FC 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016102 6600                       		bne.s	Obj6B_SBZ12
00016104 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016108 7000                       		moveq	#0,d0
0001610A 1028 0023                  		move.b	$23(a0),d0
0001610E 6700                       		beq.s	Obj6B_SBZ12
00016110 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016116 6700                       		beq.s	Obj6B_SBZ12
00016118 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001611C 60C0                       		bra.s	Obj6B_ChkGone
0001611E                            ; ===========================================================================
0001611E                            
0001611E                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001611E 0028 0004 0001             		ori.b	#4,1(a0)
00016124 117C 0004 0018             		move.b	#4,$18(a0)
0001612A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016130 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016136 7000                       		moveq	#0,d0
00016138 101B                       		move.b	(a3)+,d0
0001613A 3140 003C                  		move.w	d0,$3C(a0)
0001613E 7000                       		moveq	#0,d0
00016140 1028 0028                  		move.b	$28(a0),d0
00016144 6A00                       		bpl.s	Obj6B_Action
00016146 0200 000F                  		andi.b	#$F,d0
0001614A 1140 003E                  		move.b	d0,$3E(a0)
0001614E 1153 0028                  		move.b	(a3),$28(a0)
00016152 0C13 0005                  		cmpi.b	#5,(a3)
00016156 6600                       		bne.s	Obj6B_ChkGone2
00016158 08E8 0004 0001             		bset	#4,1(a0)
0001615E                            
0001615E                            Obj6B_ChkGone2:
0001615E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016162 7000                       		moveq	#0,d0
00016164 1028 0023                  		move.b	$23(a0),d0
00016168 6700                       		beq.s	Obj6B_Action
0001616A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016170                            
00016170                            Obj6B_Action:				; XREF: Obj6B_Index
00016170 3F28 0008                  		move.w	8(a0),-(sp)
00016174 7000                       		moveq	#0,d0
00016176 1028 0028                  		move.b	$28(a0),d0
0001617A 0240 000F                  		andi.w	#$F,d0
0001617E D040                       		add.w	d0,d0
00016180 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016184 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016188 381F                       		move.w	(sp)+,d4
0001618A 4A28 0001                  		tst.b	1(a0)
0001618E 6A00                       		bpl.s	Obj6B_ChkDel
00016190 7200                       		moveq	#0,d1
00016192 1228 0019                  		move.b	$19(a0),d1
00016196 0641 000B                  		addi.w	#$B,d1
0001619A 7400                       		moveq	#0,d2
0001619C 1428 0016                  		move.b	$16(a0),d2
000161A0 3602                       		move.w	d2,d3
000161A2 5243                       		addq.w	#1,d3
000161A4 6100 97CA                  		bsr.w	SolidObject
000161A8                            
000161A8                            Obj6B_ChkDel:
000161A8 3028 0034                  		move.w	$34(a0),d0
000161AC 0240 FF80                  		andi.w	#$FF80,d0
000161B0 3238 F700                  		move.w	($FFFFF700).w,d1
000161B4 0441 0080                  		subi.w	#$80,d1
000161B8 0241 FF80                  		andi.w	#$FF80,d1
000161BC 9041                       		sub.w	d1,d0
000161BE 0C40 0280                  		cmpi.w	#$280,d0
000161C2 6200                       		bhi.s	loc_15D64
000161C4 4EF9 0000 D5B0             		jmp	DisplaySprite
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            loc_15D64:
000161CA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000161D0 6600                       		bne.s	Obj6B_Delete2
000161D2 4238 F7CB                  		clr.b	($FFFFF7CB).w
000161D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000161DA 7000                       		moveq	#0,d0
000161DC 1028 0023                  		move.b	$23(a0),d0
000161E0 6700                       		beq.s	Obj6B_Delete2
000161E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000161E8                            
000161E8                            Obj6B_Delete2:
000161E8 4EF9 0000 D5EC             		jmp	DeleteObject
000161EE                            ; ===========================================================================
000161EE 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000161F2 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000161F6 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000161FA                            ; ===========================================================================
000161FA                            
000161FA                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000161FA 4E75                       		rts	
000161FC                            ; ===========================================================================
000161FC                            
000161FC                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000161FC 4A28 0038                  		tst.b	$38(a0)
00016200 6600                       		bne.s	loc_15DB4
00016202 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016206 7000                       		moveq	#0,d0
00016208 1028 003E                  		move.b	$3E(a0),d0
0001620C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016212 6700                       		beq.s	loc_15DC2
00016214 117C 0001 0038             		move.b	#1,$38(a0)
0001621A                            
0001621A                            loc_15DB4:
0001621A 3028 003C                  		move.w	$3C(a0),d0
0001621E B068 003A                  		cmp.w	$3A(a0),d0
00016222 6700                       		beq.s	loc_15DE0
00016224 5468 003A                  		addq.w	#2,$3A(a0)
00016228                            
00016228                            loc_15DC2:
00016228 3028 003A                  		move.w	$3A(a0),d0
0001622C 0828 0000 0022             		btst	#0,$22(a0)
00016232 6700                       		beq.s	loc_15DD4
00016234 4440                       		neg.w	d0
00016236 0640 0080                  		addi.w	#$80,d0
0001623A                            
0001623A                            loc_15DD4:
0001623A 3228 0034                  		move.w	$34(a0),d1
0001623E 9240                       		sub.w	d0,d1
00016240 3141 0008                  		move.w	d1,8(a0)
00016244 4E75                       		rts	
00016246                            ; ===========================================================================
00016246                            
00016246                            loc_15DE0:
00016246 5228 0028                  		addq.b	#1,$28(a0)
0001624A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016250 4228 0038                  		clr.b	$38(a0)
00016254 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016258 7000                       		moveq	#0,d0
0001625A 1028 0023                  		move.b	$23(a0),d0
0001625E 67C8                       		beq.s	loc_15DC2
00016260 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016266 60C0                       		bra.s	loc_15DC2
00016268                            ; ===========================================================================
00016268                            
00016268                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016268 4A28 0038                  		tst.b	$38(a0)
0001626C 6600                       		bne.s	loc_15E14
0001626E 5368 0036                  		subq.w	#1,$36(a0)
00016272 6600                       		bne.s	loc_15E1E
00016274 117C 0001 0038             		move.b	#1,$38(a0)
0001627A                            
0001627A                            loc_15E14:
0001627A 4A68 003A                  		tst.w	$3A(a0)
0001627E 6700                       		beq.s	loc_15E3C
00016280 5568 003A                  		subq.w	#2,$3A(a0)
00016284                            
00016284                            loc_15E1E:
00016284 3028 003A                  		move.w	$3A(a0),d0
00016288 0828 0000 0022             		btst	#0,$22(a0)
0001628E 6700                       		beq.s	loc_15E30
00016290 4440                       		neg.w	d0
00016292 0640 0080                  		addi.w	#$80,d0
00016296                            
00016296                            loc_15E30:
00016296 3228 0034                  		move.w	$34(a0),d1
0001629A 9240                       		sub.w	d0,d1
0001629C 3141 0008                  		move.w	d1,8(a0)
000162A0 4E75                       		rts	
000162A2                            ; ===========================================================================
000162A2                            
000162A2                            loc_15E3C:
000162A2 5328 0028                  		subq.b	#1,$28(a0)
000162A6 4228 0038                  		clr.b	$38(a0)
000162AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162AE 7000                       		moveq	#0,d0
000162B0 1028 0023                  		move.b	$23(a0),d0
000162B4 67CE                       		beq.s	loc_15E1E
000162B6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000162BC 60C6                       		bra.s	loc_15E1E
000162BE                            ; ===========================================================================
000162BE                            
000162BE                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000162BE 4A28 0038                  		tst.b	$38(a0)
000162C2 6600                       		bne.s	loc_15E7C
000162C4 4A68 003A                  		tst.w	$3A(a0)
000162C8 6700                       		beq.s	loc_15E6A
000162CA 5368 003A                  		subq.w	#1,$3A(a0)
000162CE 6000                       		bra.s	loc_15E8E
000162D0                            ; ===========================================================================
000162D0                            
000162D0                            loc_15E6A:
000162D0 5368 0036                  		subq.w	#1,$36(a0)
000162D4 6A00                       		bpl.s	loc_15E8E
000162D6 317C 003C 0036             		move.w	#$3C,$36(a0)
000162DC 117C 0001 0038             		move.b	#1,$38(a0)
000162E2                            
000162E2                            loc_15E7C:
000162E2 5068 003A                  		addq.w	#8,$3A(a0)
000162E6 3028 003A                  		move.w	$3A(a0),d0
000162EA B068 003C                  		cmp.w	$3C(a0),d0
000162EE 6600                       		bne.s	loc_15E8E
000162F0 4228 0038                  		clr.b	$38(a0)
000162F4                            
000162F4                            loc_15E8E:
000162F4 3028 003A                  		move.w	$3A(a0),d0
000162F8 0828 0000 0022             		btst	#0,$22(a0)
000162FE 6700                       		beq.s	loc_15EA0
00016300 4440                       		neg.w	d0
00016302 0640 0038                  		addi.w	#$38,d0
00016306                            
00016306                            loc_15EA0:
00016306 3228 0030                  		move.w	$30(a0),d1
0001630A D240                       		add.w	d0,d1
0001630C 3141 000C                  		move.w	d1,$C(a0)
00016310 4E75                       		rts	
00016312                            ; ===========================================================================
00016312                            
00016312                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016312 4A28 0038                  		tst.b	$38(a0)
00016316 6600                       		bne.s	loc_15ED0
00016318 4A68 003A                  		tst.w	$3A(a0)
0001631C 6700                       		beq.s	loc_15EBE
0001631E 5168 003A                  		subq.w	#8,$3A(a0)
00016322 6000                       		bra.s	loc_15EF0
00016324                            ; ===========================================================================
00016324                            
00016324                            loc_15EBE:
00016324 5368 0036                  		subq.w	#1,$36(a0)
00016328 6A00                       		bpl.s	loc_15EF0
0001632A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016330 117C 0001 0038             		move.b	#1,$38(a0)
00016336                            
00016336                            loc_15ED0:
00016336 3028 003A                  		move.w	$3A(a0),d0
0001633A B068 003C                  		cmp.w	$3C(a0),d0
0001633E 6700                       		beq.s	loc_15EE0
00016340 5068 003A                  		addq.w	#8,$3A(a0)
00016344 6000                       		bra.s	loc_15EF0
00016346                            ; ===========================================================================
00016346                            
00016346                            loc_15EE0:
00016346 5368 0036                  		subq.w	#1,$36(a0)
0001634A 6A00                       		bpl.s	loc_15EF0
0001634C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016352 4228 0038                  		clr.b	$38(a0)
00016356                            
00016356                            loc_15EF0:
00016356 3028 003A                  		move.w	$3A(a0),d0
0001635A 0828 0000 0022             		btst	#0,$22(a0)
00016360 6700                       		beq.s	loc_15F02
00016362 4440                       		neg.w	d0
00016364 0640 0038                  		addi.w	#$38,d0
00016368                            
00016368                            loc_15F02:
00016368 3228 0030                  		move.w	$30(a0),d1
0001636C D240                       		add.w	d0,d1
0001636E 3141 000C                  		move.w	d1,$C(a0)
00016372 4E75                       		rts	
00016374                            ; ===========================================================================
00016374                            
00016374                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016374 4A28 0038                  		tst.b	$38(a0)
00016378 6600                       		bne.s	loc_15F3E
0001637A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001637E 7000                       		moveq	#0,d0
00016380 1028 003E                  		move.b	$3E(a0),d0
00016384 0832 0000 0000             		btst	#0,(a2,d0.w)
0001638A 6700                       		beq.s	locret_15F5C
0001638C 117C 0001 0038             		move.b	#1,$38(a0)
00016392 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016396 7000                       		moveq	#0,d0
00016398 1028 0023                  		move.b	$23(a0),d0
0001639C 6700                       		beq.s	loc_15F3E
0001639E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163A4                            
000163A4                            loc_15F3E:
000163A4 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000163AC 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000163B4 3168 0008 0034             		move.w	8(a0),$34(a0)
000163BA 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000163C0 6700                       		beq.s	loc_15F5E
000163C2                            
000163C2                            locret_15F5C:
000163C2 4E75                       		rts	
000163C4                            ; ===========================================================================
000163C4                            
000163C4                            loc_15F5E:
000163C4 4228 0028                  		clr.b	$28(a0)
000163C8 4228 0038                  		clr.b	$38(a0)
000163CC 4E75                       		rts	
000163CE                            ; ===========================================================================
000163CE                            ; ---------------------------------------------------------------------------
000163CE                            ; Sprite mappings - stomper and	platforms (SBZ)
000163CE                            ; ---------------------------------------------------------------------------
000163CE                            Map_obj6B:
000163CE                            	include "_maps\obj6B.asm"
000163CE                            ; ---------------------------------------------------------------------------
000163CE                            ; Sprite mappings - stomper and	platforms (SBZ)
000163CE                            ; ---------------------------------------------------------------------------
000163CE 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000163D2 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000163D6 0000                       		dc.w byte_15FB0-Map_obj6B
000163D8 04                         byte_15F72:	dc.b 4
000163D9 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000163DE F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000163E3 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000163E8 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000163ED 08                         byte_15F87:	dc.b 8
000163EE E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000163F3 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000163F8 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000163FD E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016402 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016407 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001640C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016411 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016416 0E                         byte_15FB0:	dc.b $E
00016417 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001641C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016421 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016426 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001642B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016430 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016435 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001643A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001643F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016444 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016449 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001644E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016453 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016458 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001645E 00                         		even
0001645E 00                         		even
0001645E                            
0001645E                            ; ===========================================================================
0001645E                            ; ---------------------------------------------------------------------------
0001645E                            ; Object 6C - vanishing	platforms (SBZ)
0001645E                            ; ---------------------------------------------------------------------------
0001645E                            
0001645E                            Obj6C:					; XREF: Obj_Index
0001645E 7000                       		moveq	#0,d0
00016460 1028 0024                  		move.b	$24(a0),d0
00016464 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016468 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001646C                            ; ===========================================================================
0001646C 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001646E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016470 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016472 0000                       		dc.w loc_16068-Obj6C_Index
00016474                            ; ===========================================================================
00016474                            
00016474                            Obj6C_Main:				; XREF: Obj6C_Index
00016474 5C28 0024                  		addq.b	#6,$24(a0)
00016478 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016480 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016486 0028 0004 0001             		ori.b	#4,1(a0)
0001648C 117C 0010 0019             		move.b	#$10,$19(a0)
00016492 117C 0004 0018             		move.b	#4,$18(a0)
00016498 7000                       		moveq	#0,d0
0001649A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001649E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000164A2 5240                       		addq.w	#1,d0		; add 1
000164A4 EF48                       		lsl.w	#7,d0		; multiply by $80
000164A6 3200                       		move.w	d0,d1
000164A8 5340                       		subq.w	#1,d0
000164AA 3140 0030                  		move.w	d0,$30(a0)
000164AE 3140 0032                  		move.w	d0,$32(a0)
000164B2 7000                       		moveq	#0,d0
000164B4 1028 0028                  		move.b	$28(a0),d0	; get object type
000164B8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000164BC 0641 0080                  		addi.w	#$80,d1
000164C0 C0C1                       		mulu.w	d1,d0
000164C2 E088                       		lsr.l	#8,d0
000164C4 3140 0036                  		move.w	d0,$36(a0)
000164C8 5341                       		subq.w	#1,d1
000164CA 3141 0038                  		move.w	d1,$38(a0)
000164CE                            
000164CE                            loc_16068:				; XREF: Obj6C_Index
000164CE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000164D2 9068 0036                  		sub.w	$36(a0),d0
000164D6 C068 0038                  		and.w	$38(a0),d0
000164DA 6600                       		bne.s	Obj6C_Animate
000164DC 5928 0024                  		subq.b	#4,$24(a0)
000164E0 6000                       		bra.s	Obj6C_Vanish
000164E2                            ; ===========================================================================
000164E2                            
000164E2                            Obj6C_Animate:
000164E2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000164E8 4EB9 0000 A6EC             		jsr	AnimateSprite
000164EE 6000 9158                  		bra.w	MarkObjGone
000164F2                            ; ===========================================================================
000164F2                            
000164F2                            Obj6C_Vanish:				; XREF: Obj6C_Index
000164F2 5368 0030                  		subq.w	#1,$30(a0)
000164F6 6A00                       		bpl.s	loc_160AA
000164F8 317C 007F 0030             		move.w	#127,$30(a0)
000164FE 4A28 001C                  		tst.b	$1C(a0)
00016502 6700                       		beq.s	loc_160A4
00016504 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001650A                            
0001650A                            loc_160A4:
0001650A 0868 0000 001C             		bchg	#0,$1C(a0)
00016510                            
00016510                            loc_160AA:
00016510 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016516 4EB9 0000 A6EC             		jsr	AnimateSprite
0001651C 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016522 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016524 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001652A 6600                       		bne.s	loc_160D6
0001652C 7200                       		moveq	#0,d1
0001652E 1228 0019                  		move.b	$19(a0),d1
00016532 4EB9 0000 7440             		jsr	(PlatformObject).l
00016538 6000 910E                  		bra.w	MarkObjGone
0001653C                            ; ===========================================================================
0001653C                            
0001653C                            loc_160D6:
0001653C 7200                       		moveq	#0,d1
0001653E 1228 0019                  		move.b	$19(a0),d1
00016542 4EB9 0000 75B4             		jsr	(ExitPlatform).l
00016548 3428 0008                  		move.w	8(a0),d2
0001654C 4EB9 0000 7B1E             		jsr	(MvSonicOnPtfm2).l
00016552 6000 90F4                  		bra.w	MarkObjGone
00016556                            ; ===========================================================================
00016556                            
00016556                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016556 0828 0003 0022             		btst	#3,$22(a0)
0001655C 6700                       		beq.s	Obj6C_Display
0001655E 43F8 D000                  		lea	($FFFFD000).w,a1
00016562 08A9 0003 0022             		bclr	#3,$22(a1)
00016568 08A8 0003 0022             		bclr	#3,$22(a0)
0001656E 117C 0002 0024             		move.b	#2,$24(a0)
00016574 4228 0025                  		clr.b	$25(a0)
00016578                            
00016578                            Obj6C_Display:
00016578 6000 90CE                  		bra.w	MarkObjGone
0001657C                            ; ===========================================================================
0001657C                            Ani_obj6C:
0001657C                            	include "_anim\obj6C.asm"
0001657C                            ; ---------------------------------------------------------------------------
0001657C                            ; Animation script - vanishing platforms (SBZ)
0001657C                            ; ---------------------------------------------------------------------------
0001657C 0000                       		dc.w byte_1611A-Ani_obj6C
0001657E 0000                       		dc.w byte_16122-Ani_obj6C
00016580 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016588 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016590                            		even
00016590                            		even
00016590                            
00016590                            ; ---------------------------------------------------------------------------
00016590                            ; Sprite mappings - vanishing platforms	(SBZ)
00016590                            ; ---------------------------------------------------------------------------
00016590                            Map_obj6C:
00016590                            	include "_maps\obj6C.asm"
00016590                            ; ---------------------------------------------------------------------------
00016590                            ; Sprite mappings - vanishing platforms	(SBZ)
00016590                            ; ---------------------------------------------------------------------------
00016590 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016594 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016598 01                         byte_16132:	dc.b 1
00016599 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001659E 01                         byte_16138:	dc.b 1
0001659F F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000165A4 01                         byte_1613E:	dc.b 1
000165A5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000165AA 00                         byte_16144:	dc.b 0
000165AC 00                         		even
000165AC 00                         		even
000165AC                            
000165AC                            ; ===========================================================================
000165AC                            ; ---------------------------------------------------------------------------
000165AC                            ; Object 6E - electrocution orbs (SBZ)
000165AC                            ; ---------------------------------------------------------------------------
000165AC                            
000165AC                            Obj6E:					; XREF: Obj_Index
000165AC 7000                       		moveq	#0,d0
000165AE 1028 0024                  		move.b	$24(a0),d0
000165B2 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000165B6 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000165BA                            ; ===========================================================================
000165BA 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000165BC 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000165BE                            ; ===========================================================================
000165BE                            
000165BE                            Obj6E_Main:				; XREF: Obj6E_Index
000165BE 5428 0024                  		addq.b	#2,$24(a0)
000165C2 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000165CA 317C 047E 0002             		move.w	#$47E,2(a0)
000165D0 0028 0004 0001             		ori.b	#4,1(a0)
000165D6 117C 0028 0019             		move.b	#$28,$19(a0)
000165DC 7000                       		moveq	#0,d0
000165DE 1028 0028                  		move.b	$28(a0),d0	; read object type
000165E2 E948                       		lsl.w	#4,d0		; multiply by $10
000165E4 5340                       		subq.w	#1,d0
000165E6 3140 0034                  		move.w	d0,$34(a0)
000165EA                            
000165EA                            Obj6E_Shock:				; XREF: Obj6E_Index
000165EA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000165EE C068 0034                  		and.w	$34(a0),d0
000165F2 6600                       		bne.s	Obj6E_Animate
000165F4 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000165FA 4A28 0001                  		tst.b	1(a0)
000165FE 6A00                       		bpl.s	Obj6E_Animate
00016600 303C 00B1                  		move.w	#$B1,d0
00016604 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play electricity sound
0001660A                            
0001660A                            Obj6E_Animate:
0001660A 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016610 4EB9 0000 A6EC             		jsr	AnimateSprite
00016616 117C 0000 0020             		move.b	#0,$20(a0)
0001661C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016622 6600                       		bne.s	Obj6E_Display	; if not, branch
00016624 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001662A                            
0001662A                            Obj6E_Display:
0001662A 6000 901C                  		bra.w	MarkObjGone
0001662E                            ; ===========================================================================
0001662E                            Ani_obj6E:
0001662E                            	include "_anim\obj6E.asm"
0001662E                            ; ---------------------------------------------------------------------------
0001662E                            ; Animation script - electrocution orbs (SBZ)
0001662E                            ; ---------------------------------------------------------------------------
0001662E 0000                       		dc.w byte_161CC-Ani_obj6E
00016630 0000                       		dc.w byte_161D0-Ani_obj6E
00016632 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016636 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016646                            		even
00016646                            		even
00016646                            
00016646                            ; ---------------------------------------------------------------------------
00016646                            ; Sprite mappings - electrocution orbs (SBZ)
00016646                            ; ---------------------------------------------------------------------------
00016646                            Map_obj6E:
00016646                            	include "_maps\obj6E.asm"
00016646                            ; ---------------------------------------------------------------------------
00016646                            ; Sprite mappings - electrocution orbs (SBZ)
00016646                            ; ---------------------------------------------------------------------------
00016646 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001664A 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
0001664E 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016652 02                         byte_161EC:	dc.b 2
00016653 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016658 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001665D 03                         byte_161F7:	dc.b 3
0001665E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016663 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016668 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001666D 05                         byte_16207:	dc.b 5
0001666E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016673 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016678 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001667D F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016682 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016687 04                         byte_16221:	dc.b 4
00016688 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001668D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016692 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016697 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001669C 06                         byte_16236:	dc.b 6
0001669D F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000166A2 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000166A7 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000166AC F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000166B1 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000166B6 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000166BB 04                         byte_16255:	dc.b 4
000166BC F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000166C1 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000166C6 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000166CB F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000166D0                            		even
000166D0                            		even
000166D0                            
000166D0                            ; ===========================================================================
000166D0                            ; ---------------------------------------------------------------------------
000166D0                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000166D0                            ; ---------------------------------------------------------------------------
000166D0                            
000166D0                            Obj6F:					; XREF: Obj_Index
000166D0 7000                       		moveq	#0,d0
000166D2 1028 0024                  		move.b	$24(a0),d0
000166D6 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000166DA 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000166DE 3028 0030                  		move.w	$30(a0),d0
000166E2 0240 FF80                  		andi.w	#$FF80,d0
000166E6 3238 F700                  		move.w	($FFFFF700).w,d1
000166EA 0441 0080                  		subi.w	#$80,d1
000166EE 0241 FF80                  		andi.w	#$FF80,d1
000166F2 9041                       		sub.w	d1,d0
000166F4 0C40 0280                  		cmpi.w	#$280,d0
000166F8 6200                       		bhi.s	loc_1629A
000166FA                            
000166FA                            Obj6F_Display:
000166FA 4EF9 0000 D5B0             		jmp	DisplaySprite
00016700                            ; ===========================================================================
00016700                            
00016700                            loc_1629A:
00016700 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016706 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016708 0C40 FF80                  		cmpi.w	#-$80,d0
0001670C 64EC                       		bcc.s	Obj6F_Display
0001670E                            
0001670E                            Obj6F_Act1or2:
0001670E 1028 002F                  		move.b	$2F(a0),d0
00016712 6A00                       		bpl.s	Obj6F_Delete
00016714 0240 007F                  		andi.w	#$7F,d0
00016718 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001671C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016722                            
00016722                            Obj6F_Delete:
00016722 4EF9 0000 D5EC             		jmp	DeleteObject
00016728                            ; ===========================================================================
00016728 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001672A 0000                       		dc.w loc_163D8-Obj6F_Index
0001672C                            ; ===========================================================================
0001672C                            
0001672C                            Obj6F_Main:				; XREF: Obj6F_Index
0001672C 1028 0028                  		move.b	$28(a0),d0
00016730 6B00 0000                  		bmi.w	loc_16380
00016734 5428 0024                  		addq.b	#2,$24(a0)
00016738 217C 0001 5DA0 0004        		move.l	#Map_obj69a,4(a0)
00016740 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016746 117C 0010 0019             		move.b	#$10,$19(a0)
0001674C 0028 0004 0001             		ori.b	#4,1(a0)
00016752 117C 0004 0018             		move.b	#4,$18(a0)
00016758 7000                       		moveq	#0,d0
0001675A 1028 0028                  		move.b	$28(a0),d0
0001675E 3200                       		move.w	d0,d1
00016760 E648                       		lsr.w	#3,d0
00016762 0240 001E                  		andi.w	#$1E,d0
00016766 45FA 0000                  		lea	off_164A6(pc),a2
0001676A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001676E 315A 0038                  		move.w	(a2)+,$38(a0)
00016772 315A 0030                  		move.w	(a2)+,$30(a0)
00016776 214A 003C                  		move.l	a2,$3C(a0)
0001677A 0241 000F                  		andi.w	#$F,d1
0001677E E549                       		lsl.w	#2,d1
00016780 1141 0038                  		move.b	d1,$38(a0)
00016784 117C 0004 003A             		move.b	#4,$3A(a0)
0001678A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001678E 6700                       		beq.s	loc_16356
00016790 117C 0001 003B             		move.b	#1,$3B(a0)
00016796 4428 003A                  		neg.b	$3A(a0)
0001679A 7200                       		moveq	#0,d1
0001679C 1228 0038                  		move.b	$38(a0),d1
000167A0 D228 003A                  		add.b	$3A(a0),d1
000167A4 B228 0039                  		cmp.b	$39(a0),d1
000167A8 6500                       		bcs.s	loc_16352
000167AA 1001                       		move.b	d1,d0
000167AC 7200                       		moveq	#0,d1
000167AE 4A00                       		tst.b	d0
000167B0 6A00                       		bpl.s	loc_16352
000167B2 1228 0039                  		move.b	$39(a0),d1
000167B6 5901                       		subq.b	#4,d1
000167B8                            
000167B8                            loc_16352:
000167B8 1141 0038                  		move.b	d1,$38(a0)
000167BC                            
000167BC                            loc_16356:
000167BC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000167C2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000167C8 4A41                       		tst.w	d1
000167CA 6600                       		bne.s	loc_1636C
000167CC 117C 0001 001C             		move.b	#1,$1C(a0)
000167D2                            
000167D2                            loc_1636C:
000167D2 0C41 0008                  		cmpi.w	#8,d1
000167D6 6600                       		bne.s	loc_16378
000167D8 117C 0000 001C             		move.b	#0,$1C(a0)
000167DE                            
000167DE                            loc_16378:
000167DE 6100 BD08                  		bsr.w	Obj63_ChangeDir
000167E2 6000 0000                  		bra.w	loc_163D8
000167E6                            ; ===========================================================================
000167E6                            
000167E6                            loc_16380:				; XREF: Obj6F_Main
000167E6 1140 002F                  		move.b	d0,$2F(a0)
000167EA 0240 007F                  		andi.w	#$7F,d0
000167EE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000167F2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000167F8 6700                       		beq.s	loc_1639A
000167FA 4EF9 0000 D5EC             		jmp	DeleteObject
00016800                            ; ===========================================================================
00016800                            
00016800                            loc_1639A:
00016800 D040                       		add.w	d0,d0
00016802 0240 001E                  		andi.w	#$1E,d0
00016806 0640 0080                  		addi.w	#$80,d0
0001680A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016810 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016814 321A                       		move.w	(a2)+,d1
00016816 2248                       		movea.l	a0,a1
00016818 6000                       		bra.s	Obj6F_LoadPform
0001681A                            ; ===========================================================================
0001681A                            
0001681A                            Obj6F_Loop:
0001681A 4EB9 0000 DA36             		jsr	SingleObjLoad
00016820 6600                       		bne.s	loc_163D0
00016822                            
00016822                            Obj6F_LoadPform:			; XREF: loc_1639A
00016822 12BC 006F                  		move.b	#$6F,0(a1)
00016826 335A 0008                  		move.w	(a2)+,8(a1)
0001682A 335A 000C                  		move.w	(a2)+,$C(a1)
0001682E 301A                       		move.w	(a2)+,d0
00016830 1340 0028                  		move.b	d0,$28(a1)
00016834                            
00016834                            loc_163D0:
00016834 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016838                            
00016838 588F                       		addq.l	#4,sp
0001683A 4E75                       		rts	
0001683C                            ; ===========================================================================
0001683C                            
0001683C                            loc_163D8:				; XREF: Obj6F_Index
0001683C 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016842 4EB9 0000 A6EC             		jsr	AnimateSprite
00016848 4A28 001A                  		tst.b	$1A(a0)
0001684C 6600                       		bne.s	loc_16404
0001684E 3F28 0008                  		move.w	8(a0),-(sp)
00016852 6100 0000                  		bsr.w	loc_16424
00016856 323C 001B                  		move.w	#$1B,d1
0001685A 343C 0007                  		move.w	#7,d2
0001685E 3602                       		move.w	d2,d3
00016860 5243                       		addq.w	#1,d3
00016862 381F                       		move.w	(sp)+,d4
00016864 6000 910A                  		bra.w	SolidObject
00016868                            ; ===========================================================================
00016868                            
00016868                            loc_16404:
00016868 0828 0003 0022             		btst	#3,$22(a0)
0001686E 6700                       		beq.s	loc_16420
00016870 43F8 D000                  		lea	($FFFFD000).w,a1
00016874 08A9 0003 0022             		bclr	#3,$22(a1)
0001687A 08A8 0003 0022             		bclr	#3,$22(a0)
00016880 4228 0025                  		clr.b	$25(a0)
00016884                            
00016884                            loc_16420:
00016884 6000 0002                  		bra.w	*+4
00016888                            
00016888                            loc_16424:
00016888 3028 0008                  		move.w	8(a0),d0
0001688C B068 0034                  		cmp.w	$34(a0),d0
00016890 6600                       		bne.s	loc_16484
00016892 3028 000C                  		move.w	$C(a0),d0
00016896 B068 0036                  		cmp.w	$36(a0),d0
0001689A 6600                       		bne.s	loc_16484
0001689C 7200                       		moveq	#0,d1
0001689E 1228 0038                  		move.b	$38(a0),d1
000168A2 D228 003A                  		add.b	$3A(a0),d1
000168A6 B228 0039                  		cmp.b	$39(a0),d1
000168AA 6500                       		bcs.s	loc_16456
000168AC 1001                       		move.b	d1,d0
000168AE 7200                       		moveq	#0,d1
000168B0 4A00                       		tst.b	d0
000168B2 6A00                       		bpl.s	loc_16456
000168B4 1228 0039                  		move.b	$39(a0),d1
000168B8 5901                       		subq.b	#4,d1
000168BA                            
000168BA                            loc_16456:
000168BA 1141 0038                  		move.b	d1,$38(a0)
000168BE 2268 003C                  		movea.l	$3C(a0),a1
000168C2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000168C8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000168CE 4A41                       		tst.w	d1
000168D0 6600                       		bne.s	loc_16474
000168D2 117C 0001 001C             		move.b	#1,$1C(a0)
000168D8                            
000168D8                            loc_16474:
000168D8 0C41 0008                  		cmpi.w	#8,d1
000168DC 6600                       		bne.s	loc_16480
000168DE 117C 0000 001C             		move.b	#0,$1C(a0)
000168E4                            
000168E4                            loc_16480:
000168E4 6100 BC02                  		bsr.w	Obj63_ChangeDir
000168E8                            
000168E8                            loc_16484:
000168E8 4EF9 0000 D58A             		jmp	SpeedToPos
000168EE                            ; ===========================================================================
000168EE                            Ani_obj6F:
000168EE                            	include "_anim\obj6F.asm"
000168EE                            ; ---------------------------------------------------------------------------
000168EE                            ; Animation script - platform on conveyor belt (SBZ)
000168EE                            ; ---------------------------------------------------------------------------
000168EE 0000                       		dc.w byte_1648E-Ani_obj6F
000168F0 0000                       		dc.w byte_164A2-Ani_obj6F
000168F2 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000168FF 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016906 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
0001690A 00                         		even
0001690A 00                         		even
0001690A                            
0001690A 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016910 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016916 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001692A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001693E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016952 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016966 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001697A 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001698E                            ; ===========================================================================
0001698E                            ; ---------------------------------------------------------------------------
0001698E                            ; Object 70 - large girder block (SBZ)
0001698E                            ; ---------------------------------------------------------------------------
0001698E                            
0001698E                            Obj70:					; XREF: Obj_Index
0001698E 7000                       		moveq	#0,d0
00016990 1028 0024                  		move.b	$24(a0),d0
00016994 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016998 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001699C                            ; ===========================================================================
0001699C 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001699E 0000                       		dc.w Obj70_Action-Obj70_Index
000169A0                            ; ===========================================================================
000169A0                            
000169A0                            Obj70_Main:				; XREF: Obj70_Index
000169A0 5428 0024                  		addq.b	#2,$24(a0)
000169A4 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000169AC 317C 42F0 0002             		move.w	#$42F0,2(a0)
000169B2 0028 0004 0001             		ori.b	#4,1(a0)
000169B8 117C 0004 0018             		move.b	#4,$18(a0)
000169BE 117C 0060 0019             		move.b	#$60,$19(a0)
000169C4 117C 0018 0016             		move.b	#$18,$16(a0)
000169CA 3168 0008 0032             		move.w	8(a0),$32(a0)
000169D0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000169D6 6100 0000                  		bsr.w	Obj70_Move2
000169DA                            
000169DA                            Obj70_Action:				; XREF: Obj70_Index
000169DA 3F28 0008                  		move.w	8(a0),-(sp)
000169DE 4A68 003A                  		tst.w	$3A(a0)
000169E2 6700                       		beq.s	Obj70_Move
000169E4 5368 003A                  		subq.w	#1,$3A(a0)
000169E8 6600                       		bne.s	Obj70_Solid
000169EA                            
000169EA                            Obj70_Move:
000169EA 4EB9 0000 D58A             		jsr	SpeedToPos
000169F0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000169F4 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000169F6 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000169FA                            
000169FA                            Obj70_Solid:
000169FA 381F                       		move.w	(sp)+,d4
000169FC 4A28 0001                  		tst.b	1(a0)
00016A00 6A00                       		bpl.s	Obj70_ChkDel
00016A02 7200                       		moveq	#0,d1
00016A04 1228 0019                  		move.b	$19(a0),d1
00016A08 0641 000B                  		addi.w	#$B,d1
00016A0C 7400                       		moveq	#0,d2
00016A0E 1428 0016                  		move.b	$16(a0),d2
00016A12 3602                       		move.w	d2,d3
00016A14 5243                       		addq.w	#1,d3
00016A16 6100 8F58                  		bsr.w	SolidObject
00016A1A                            
00016A1A                            Obj70_ChkDel:
00016A1A 3028 0032                  		move.w	$32(a0),d0
00016A1E 0240 FF80                  		andi.w	#$FF80,d0
00016A22 3238 F700                  		move.w	($FFFFF700).w,d1
00016A26 0441 0080                  		subi.w	#$80,d1
00016A2A 0241 FF80                  		andi.w	#$FF80,d1
00016A2E 9041                       		sub.w	d1,d0
00016A30 0C40 0280                  		cmpi.w	#$280,d0
00016A34 6200                       		bhi.s	Obj70_Delete
00016A36 4EF9 0000 D5B0             		jmp	DisplaySprite
00016A3C                            ; ===========================================================================
00016A3C                            
00016A3C                            Obj70_Delete:
00016A3C 4EF9 0000 D5EC             		jmp	DeleteObject
00016A42                            ; ===========================================================================
00016A42                            
00016A42                            Obj70_Move2:				; XREF: Obj70_Main
00016A42 1028 0038                  		move.b	$38(a0),d0
00016A46 0240 0018                  		andi.w	#$18,d0
00016A4A 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016A50 43F1 0000                  		lea	(a1,d0.w),a1
00016A54 3159 0010                  		move.w	(a1)+,$10(a0)
00016A58 3159 0012                  		move.w	(a1)+,$12(a0)
00016A5C 3159 0034                  		move.w	(a1)+,$34(a0)
00016A60 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016A64 317C 0007 003A             		move.w	#7,$3A(a0)
00016A6A 4E75                       		rts	
00016A6C                            ; ===========================================================================
00016A6C 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016A74 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016A7C FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016A84 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016A8C                            ; ---------------------------------------------------------------------------
00016A8C                            ; Sprite mappings - large girder block (SBZ)
00016A8C                            ; ---------------------------------------------------------------------------
00016A8C                            Map_obj70:
00016A8C                            	include "_maps\obj70.asm"
00016A8C                            ; ---------------------------------------------------------------------------
00016A8C                            ; Sprite mappings - large girder block (SBZ)
00016A8C                            ; ---------------------------------------------------------------------------
00016A8C 0000                       		dc.w byte_1662A-Map_obj70
00016A8E 0C                         byte_1662A:	dc.b $C
00016A8F E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016A94 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016A99 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016A9E 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016AA3 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016AA8 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016AAD E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016AB2 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016AB7 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016ABC 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016AC1 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016AC6 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016ACC 00                         		even
00016ACC 00                         		even
00016ACC                            
00016ACC                            ; ===========================================================================
00016ACC                            ; ---------------------------------------------------------------------------
00016ACC                            ; Object 72 - teleporter (SBZ)
00016ACC                            ; ---------------------------------------------------------------------------
00016ACC                            
00016ACC                            Obj72:					; XREF: Obj_Index
00016ACC 7000                       		moveq	#0,d0
00016ACE 1028 0024                  		move.b	$24(a0),d0
00016AD2 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016AD6 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016ADA 3028 0008                  		move.w	8(a0),d0
00016ADE 0240 FF80                  		andi.w	#$FF80,d0
00016AE2 3238 F700                  		move.w	($FFFFF700).w,d1
00016AE6 0441 0080                  		subi.w	#$80,d1
00016AEA 0241 FF80                  		andi.w	#$FF80,d1
00016AEE 9041                       		sub.w	d1,d0
00016AF0 0C40 0280                  		cmpi.w	#$280,d0
00016AF4 6200                       		bhi.s	Obj72_Delete
00016AF6 4E75                       		rts	
00016AF8                            ; ===========================================================================
00016AF8                            
00016AF8                            Obj72_Delete:
00016AF8 4EF9 0000 D5EC             		jmp	DeleteObject
00016AFE                            ; ===========================================================================
00016AFE 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016B00 0000                       		dc.w loc_166C8-Obj72_Index
00016B02 0000                       		dc.w loc_1675E-Obj72_Index
00016B04 0000                       		dc.w loc_16798-Obj72_Index
00016B06                            ; ===========================================================================
00016B06                            
00016B06                            Obj72_Main:				; XREF: Obj72_Index
00016B06 5428 0024                  		addq.b	#2,$24(a0)
00016B0A 1028 0028                  		move.b	$28(a0),d0
00016B0E D040                       		add.w	d0,d0
00016B10 0240 001E                  		andi.w	#$1E,d0
00016B14 45FA 0000                  		lea	Obj72_Data(pc),a2
00016B18 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B1C 315A 003A                  		move.w	(a2)+,$3A(a0)
00016B20 214A 003C                  		move.l	a2,$3C(a0)
00016B24 315A 0036                  		move.w	(a2)+,$36(a0)
00016B28 315A 0038                  		move.w	(a2)+,$38(a0)
00016B2C                            
00016B2C                            loc_166C8:				; XREF: Obj72_Index
00016B2C 43F8 D000                  		lea	($FFFFD000).w,a1
00016B30 3029 0008                  		move.w	8(a1),d0
00016B34 9068 0008                  		sub.w	8(a0),d0
00016B38 0828 0000 0022             		btst	#0,$22(a0)
00016B3E 6700                       		beq.s	loc_166E0
00016B40 0640 000F                  		addi.w	#$F,d0
00016B44                            
00016B44                            loc_166E0:
00016B44 0C40 0010                  		cmpi.w	#$10,d0
00016B48 6400                       		bcc.s	locret_1675C
00016B4A 3229 000C                  		move.w	$C(a1),d1
00016B4E 9268 000C                  		sub.w	$C(a0),d1
00016B52 0641 0020                  		addi.w	#$20,d1
00016B56 0C41 0040                  		cmpi.w	#$40,d1
00016B5A 6400                       		bcc.s	locret_1675C
00016B5C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016B60 6600                       		bne.s	locret_1675C
00016B62 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016B68 6600                       		bne.s	loc_1670E
00016B6A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016B70 6500                       		bcs.s	locret_1675C
00016B72                            
00016B72                            loc_1670E:
00016B72 5428 0024                  		addq.b	#2,$24(a0)
00016B76 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016B7C 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016B82 337C 0800 0014             		move.w	#$800,$14(a1)
00016B88 337C 0000 0010             		move.w	#0,$10(a1)
00016B8E 337C 0000 0012             		move.w	#0,$12(a1)
00016B94 08A8 0005 0022             		bclr	#5,$22(a0)
00016B9A 08A9 0005 0022             		bclr	#5,$22(a1)
00016BA0 08E9 0001 0022             		bset	#1,$22(a1)
00016BA6 3368 0008 0008             		move.w	8(a0),8(a1)
00016BAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016BB2 4228 0032                  		clr.b	$32(a0)
00016BB6 303C 00BE                  		move.w	#$BE,d0
00016BBA 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016BC0                            
00016BC0                            locret_1675C:
00016BC0 4E75                       		rts	
00016BC2                            ; ===========================================================================
00016BC2                            
00016BC2                            loc_1675E:				; XREF: Obj72_Index
00016BC2 43F8 D000                  		lea	($FFFFD000).w,a1
00016BC6 1028 0032                  		move.b	$32(a0),d0
00016BCA 5428 0032                  		addq.b	#2,$32(a0)
00016BCE 4EB9 0000 29BA             		jsr	(CalcSine).l
00016BD4 EA40                       		asr.w	#5,d0
00016BD6 3428 000C                  		move.w	$C(a0),d2
00016BDA 9440                       		sub.w	d0,d2
00016BDC 3342 000C                  		move.w	d2,$C(a1)
00016BE0 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016BE6 6600                       		bne.s	locret_16796
00016BE8 6100 0000                  		bsr.w	sub_1681C
00016BEC 5428 0024                  		addq.b	#2,$24(a0)
00016BF0 303C 00BC                  		move.w	#$BC,d0
00016BF4 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016BFA                            
00016BFA                            locret_16796:
00016BFA 4E75                       		rts	
00016BFC                            ; ===========================================================================
00016BFC                            
00016BFC                            loc_16798:				; XREF: Obj72_Index
00016BFC 588F                       		addq.l	#4,sp
00016BFE 43F8 D000                  		lea	($FFFFD000).w,a1
00016C02 5328 002E                  		subq.b	#1,$2E(a0)
00016C06 6A00                       		bpl.s	loc_167DA
00016C08 3368 0036 0008             		move.w	$36(a0),8(a1)
00016C0E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016C14 7200                       		moveq	#0,d1
00016C16 1228 003A                  		move.b	$3A(a0),d1
00016C1A 5801                       		addq.b	#4,d1
00016C1C B228 003B                  		cmp.b	$3B(a0),d1
00016C20 6500                       		bcs.s	loc_167C2
00016C22 7200                       		moveq	#0,d1
00016C24 6000                       		bra.s	loc_16800
00016C26                            ; ===========================================================================
00016C26                            
00016C26                            loc_167C2:
00016C26 1141 003A                  		move.b	d1,$3A(a0)
00016C2A 2468 003C                  		movea.l	$3C(a0),a2
00016C2E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016C34 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016C3A 6000 0000                  		bra.w	sub_1681C
00016C3E                            ; ===========================================================================
00016C3E                            
00016C3E                            loc_167DA:
00016C3E 2429 0008                  		move.l	8(a1),d2
00016C42 2629 000C                  		move.l	$C(a1),d3
00016C46 3029 0010                  		move.w	$10(a1),d0
00016C4A 48C0                       		ext.l	d0
00016C4C E180                       		asl.l	#8,d0
00016C4E D480                       		add.l	d0,d2
00016C50 3029 0012                  		move.w	$12(a1),d0
00016C54 48C0                       		ext.l	d0
00016C56 E180                       		asl.l	#8,d0
00016C58 D680                       		add.l	d0,d3
00016C5A 2342 0008                  		move.l	d2,8(a1)
00016C5E 2343 000C                  		move.l	d3,$C(a1)
00016C62 4E75                       		rts	
00016C64                            ; ===========================================================================
00016C64                            
00016C64                            loc_16800:
00016C64 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016C6A 4228 0024                  		clr.b	$24(a0)
00016C6E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016C72 337C 0000 0010             		move.w	#0,$10(a1)
00016C78 337C 0200 0012             		move.w	#$200,$12(a1)
00016C7E 4E75                       		rts	
00016C80                            
00016C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C80                            
00016C80                            
00016C80                            sub_1681C:
00016C80 7000                       		moveq	#0,d0
00016C82 343C 1000                  		move.w	#$1000,d2
00016C86 3028 0036                  		move.w	$36(a0),d0
00016C8A 9069 0008                  		sub.w	8(a1),d0
00016C8E 6C00                       		bge.s	loc_16830
00016C90 4440                       		neg.w	d0
00016C92 4442                       		neg.w	d2
00016C94                            
00016C94                            loc_16830:
00016C94 7200                       		moveq	#0,d1
00016C96 363C 1000                  		move.w	#$1000,d3
00016C9A 3228 0038                  		move.w	$38(a0),d1
00016C9E 9269 000C                  		sub.w	$C(a1),d1
00016CA2 6C00                       		bge.s	loc_16844
00016CA4 4441                       		neg.w	d1
00016CA6 4443                       		neg.w	d3
00016CA8                            
00016CA8                            loc_16844:
00016CA8 B240                       		cmp.w	d0,d1
00016CAA 6500                       		bcs.s	loc_1687A
00016CAC 7200                       		moveq	#0,d1
00016CAE 3228 0038                  		move.w	$38(a0),d1
00016CB2 9269 000C                  		sub.w	$C(a1),d1
00016CB6 4841                       		swap	d1
00016CB8 83C3                       		divs.w	d3,d1
00016CBA 7000                       		moveq	#0,d0
00016CBC 3028 0036                  		move.w	$36(a0),d0
00016CC0 9069 0008                  		sub.w	8(a1),d0
00016CC4 6700                       		beq.s	loc_16866
00016CC6 4840                       		swap	d0
00016CC8 81C1                       		divs.w	d1,d0
00016CCA                            
00016CCA                            loc_16866:
00016CCA 3340 0010                  		move.w	d0,$10(a1)
00016CCE 3343 0012                  		move.w	d3,$12(a1)
00016CD2 4A41                       		tst.w	d1
00016CD4 6A00                       		bpl.s	loc_16874
00016CD6 4441                       		neg.w	d1
00016CD8                            
00016CD8                            loc_16874:
00016CD8 3141 002E                  		move.w	d1,$2E(a0)
00016CDC 4E75                       		rts	
00016CDE                            ; ===========================================================================
00016CDE                            
00016CDE                            loc_1687A:
00016CDE 7000                       		moveq	#0,d0
00016CE0 3028 0036                  		move.w	$36(a0),d0
00016CE4 9069 0008                  		sub.w	8(a1),d0
00016CE8 4840                       		swap	d0
00016CEA 81C2                       		divs.w	d2,d0
00016CEC 7200                       		moveq	#0,d1
00016CEE 3228 0038                  		move.w	$38(a0),d1
00016CF2 9269 000C                  		sub.w	$C(a1),d1
00016CF6 6700                       		beq.s	loc_16898
00016CF8 4841                       		swap	d1
00016CFA 83C0                       		divs.w	d0,d1
00016CFC                            
00016CFC                            loc_16898:
00016CFC 3341 0012                  		move.w	d1,$12(a1)
00016D00 3342 0010                  		move.w	d2,$10(a1)
00016D04 4A40                       		tst.w	d0
00016D06 6A00                       		bpl.s	loc_168A6
00016D08 4440                       		neg.w	d0
00016D0A                            
00016D0A                            loc_168A6:
00016D0A 3140 002E                  		move.w	d0,$2E(a0)
00016D0E 4E75                       		rts	
00016D10                            ; End of function sub_1681C
00016D10                            
00016D10                            ; ===========================================================================
00016D10 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016D16 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016D1C 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016D20 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016D26 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016D2C 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016D32 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016D38 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016D3E 0884 0298 0894             		dc.w $884, $298, $894
00016D44 0270 0894 0190             		dc.w $270, $894, $190
00016D4A 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016D50 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016D56 1184 0498 1158             		dc.w $1184, $498, $1158
00016D5C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016D62 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016D68 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016D6E 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016D74 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016D7A 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016D80 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016D86 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016D8C FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016D92 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016D98                            ; ===========================================================================
00016D98                            ; ---------------------------------------------------------------------------
00016D98                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016D98                            ; ---------------------------------------------------------------------------
00016D98                            
00016D98                            Obj78:					; XREF: Obj_Index
00016D98 7000                       		moveq	#0,d0
00016D9A 1028 0024                  		move.b	$24(a0),d0
00016D9E 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016DA2 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016DA6                            ; ===========================================================================
00016DA6 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016DA8 0000                       		dc.w Obj78_Action-Obj78_Index
00016DAA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016DAC 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016DAE 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016DB0 0000                       		dc.w Obj78_Delete-Obj78_Index
00016DB2 0000                       		dc.w loc_16CC0-Obj78_Index
00016DB4                            ; ===========================================================================
00016DB4                            
00016DB4                            locret_16950:
00016DB4 4E75                       		rts	
00016DB6                            ; ===========================================================================
00016DB6                            
00016DB6                            Obj78_Main:				; XREF: Obj78_Index
00016DB6 117C 0007 0016             		move.b	#7,$16(a0)
00016DBC 117C 0008 0017             		move.b	#8,$17(a0)
00016DC2 4EB9 0000 D55E             		jsr	ObjectFall
00016DC8 4EBA E4B6                  		jsr	ObjHitFloor
00016DCC 4A41                       		tst.w	d1
00016DCE 6AE4                       		bpl.s	locret_16950
00016DD0 D368 000C                  		add.w	d1,$C(a0)
00016DD4 4268 0012                  		clr.w	$12(a0)
00016DD8 5428 0024                  		addq.b	#2,$24(a0)
00016DDC 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016DE4 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016DEA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016DF0 6700                       		beq.s	loc_16996
00016DF2 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016DF8                            
00016DF8                            loc_16996:
00016DF8 0228 0003 0001             		andi.b	#3,1(a0)
00016DFE 0028 0004 0001             		ori.b	#4,1(a0)
00016E04 1168 0001 0022             		move.b	1(a0),$22(a0)
00016E0A 117C 0004 0018             		move.b	#4,$18(a0)
00016E10 117C 0008 0019             		move.b	#8,$19(a0)
00016E16 117C 000B 0020             		move.b	#$B,$20(a0)
00016E1C 3428 0008                  		move.w	8(a0),d2
00016E20 7A0C                       		moveq	#$C,d5
00016E22 0828 0000 0022             		btst	#0,$22(a0)
00016E28 6700                       		beq.s	loc_169CA
00016E2A 4445                       		neg.w	d5
00016E2C                            
00016E2C                            loc_169CA:
00016E2C 1C3C 0004                  		move.b	#4,d6
00016E30 7600                       		moveq	#0,d3
00016E32 7804                       		moveq	#4,d4
00016E34 2448                       		movea.l	a0,a2
00016E36 7202                       		moveq	#2,d1
00016E38                            
00016E38                            Obj78_LoadBody:
00016E38 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00016E3E 6600                       		bne.s	Obj78_QuitLoad
00016E40 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016E44 1346 0024                  		move.b	d6,$24(a1)
00016E48 5406                       		addq.b	#2,d6
00016E4A 2368 0004 0004             		move.l	4(a0),4(a1)
00016E50 3368 0002 0002             		move.w	2(a0),2(a1)
00016E56 137C 0005 0018             		move.b	#5,$18(a1)
00016E5C 137C 0008 0019             		move.b	#8,$19(a1)
00016E62 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016E68 D445                       		add.w	d5,d2
00016E6A 3342 0008                  		move.w	d2,8(a1)
00016E6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016E74 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016E7A 1368 0022 0001             		move.b	$22(a0),1(a1)
00016E80 137C 0008 001A             		move.b	#8,$1A(a1)
00016E86 234A 003C                  		move.l	a2,$3C(a1)
00016E8A 1344 003C                  		move.b	d4,$3C(a1)
00016E8E 5804                       		addq.b	#4,d4
00016E90 2449                       		movea.l	a1,a2
00016E92                            
00016E92                            Obj78_QuitLoad:
00016E92 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016E96                            
00016E96 117C 0007 002A             		move.b	#7,$2A(a0)
00016E9C 4228 003C                  		clr.b	$3C(a0)
00016EA0                            
00016EA0                            Obj78_Action:				; XREF: Obj78_Index
00016EA0 4A28 0022                  		tst.b	$22(a0)
00016EA4 6B00 0000                  		bmi.w	loc_16C96
00016EA8 7000                       		moveq	#0,d0
00016EAA 1028 0025                  		move.b	$25(a0),d0
00016EAE 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016EB2 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016EB6 1228 002B                  		move.b	$2B(a0),d1
00016EBA 6A00                       		bpl.s	Obj78_Display
00016EBC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016EC2 1028 0026                  		move.b	$26(a0),d0
00016EC6 0240 007F                  		andi.w	#$7F,d0
00016ECA 5828 0026                  		addq.b	#4,$26(a0)
00016ECE 1031 0000                  		move.b	(a1,d0.w),d0
00016ED2 6A00                       		bpl.s	Obj78_AniHead
00016ED4 08A8 0007 002B             		bclr	#7,$2B(a0)
00016EDA 6000                       		bra.s	Obj78_Display
00016EDC                            ; ===========================================================================
00016EDC                            
00016EDC                            Obj78_AniHead:
00016EDC 0201 0010                  		andi.b	#$10,d1
00016EE0 D001                       		add.b	d1,d0
00016EE2 1140 001A                  		move.b	d0,$1A(a0)
00016EE6                            
00016EE6                            Obj78_Display:
00016EE6 3028 0008                  		move.w	8(a0),d0
00016EEA 0240 FF80                  		andi.w	#$FF80,d0
00016EEE 3238 F700                  		move.w	($FFFFF700).w,d1
00016EF2 0441 0080                  		subi.w	#$80,d1
00016EF6 0241 FF80                  		andi.w	#$FF80,d1
00016EFA 9041                       		sub.w	d1,d0
00016EFC 0C40 0280                  		cmpi.w	#$280,d0
00016F00 6200 0000                  		bhi.w	Obj78_ChkGone
00016F04 4EF9 0000 D5B0             		jmp	DisplaySprite
00016F0A                            ; ===========================================================================
00016F0A                            
00016F0A                            Obj78_ChkGone:
00016F0A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F0E 7000                       		moveq	#0,d0
00016F10 1028 0023                  		move.b	$23(a0),d0
00016F14 6700                       		beq.s	loc_16ABC
00016F16 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F1C                            
00016F1C                            loc_16ABC:
00016F1C 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016F22 4E75                       		rts	
00016F24                            ; ===========================================================================
00016F24                            
00016F24                            Obj78_Delete:				; XREF: Obj78_Index
00016F24 4EF9 0000 D5EC             		jmp	DeleteObject
00016F2A                            ; ===========================================================================
00016F2A 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016F2C 0000                       		dc.w loc_16B02-Obj78_Index2
00016F2E                            ; ===========================================================================
00016F2E                            
00016F2E                            Obj78_Move:				; XREF: Obj78_Index2
00016F2E 5328 002A                  		subq.b	#1,$2A(a0)
00016F32 6B00                       		bmi.s	Obj78_Move2
00016F34 4E75                       		rts	
00016F36                            ; ===========================================================================
00016F36                            
00016F36                            Obj78_Move2:
00016F36 5428 0025                  		addq.b	#2,$25(a0)
00016F3A 117C 0010 002A             		move.b	#$10,$2A(a0)
00016F40 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016F46 317C 0040 0014             		move.w	#$40,$14(a0)
00016F4C 0868 0004 002B             		bchg	#4,$2B(a0)
00016F52 6600                       		bne.s	loc_16AFC
00016F54 4268 0010                  		clr.w	$10(a0)
00016F58 4468 0014                  		neg.w	$14(a0)
00016F5C                            
00016F5C                            loc_16AFC:
00016F5C 08E8 0007 002B             		bset	#7,$2B(a0)
00016F62                            
00016F62                            loc_16B02:				; XREF: Obj78_Index2
00016F62 5328 002A                  		subq.b	#1,$2A(a0)
00016F66 6B00                       		bmi.s	loc_16B5E
00016F68 2F28 0008                  		move.l	8(a0),-(sp)
00016F6C 2428 0008                  		move.l	8(a0),d2
00016F70 3028 0010                  		move.w	$10(a0),d0
00016F74 0828 0000 0022             		btst	#0,$22(a0)
00016F7A 6700                       		beq.s	loc_16B1E
00016F7C 4440                       		neg.w	d0
00016F7E                            
00016F7E                            loc_16B1E:
00016F7E 48C0                       		ext.l	d0
00016F80 E180                       		asl.l	#8,d0
00016F82 D480                       		add.l	d0,d2
00016F84 2142 0008                  		move.l	d2,8(a0)
00016F88 4EBA E2F6                  		jsr	ObjHitFloor
00016F8C 241F                       		move.l	(sp)+,d2
00016F8E 0C41 FFF8                  		cmpi.w	#-8,d1
00016F92 6D00                       		blt.s	loc_16B70
00016F94 0C41 000C                  		cmpi.w	#$C,d1
00016F98 6C00                       		bge.s	loc_16B70
00016F9A D368 000C                  		add.w	d1,$C(a0)
00016F9E 4842                       		swap	d2
00016FA0 B468 0008                  		cmp.w	8(a0),d2
00016FA4 6700                       		beq.s	locret_16B5C
00016FA6 7000                       		moveq	#0,d0
00016FA8 1028 003C                  		move.b	$3C(a0),d0
00016FAC 5228 003C                  		addq.b	#1,$3C(a0)
00016FB0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016FB6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016FBA                            
00016FBA                            locret_16B5C:
00016FBA 4E75                       		rts	
00016FBC                            ; ===========================================================================
00016FBC                            
00016FBC                            loc_16B5E:
00016FBC 5528 0025                  		subq.b	#2,$25(a0)
00016FC0 117C 0007 002A             		move.b	#7,$2A(a0)
00016FC6 317C 0000 0010             		move.w	#0,$10(a0)
00016FCC 4E75                       		rts	
00016FCE                            ; ===========================================================================
00016FCE                            
00016FCE                            loc_16B70:
00016FCE 2142 0008                  		move.l	d2,8(a0)
00016FD2 0868 0000 0022             		bchg	#0,$22(a0)
00016FD8 1168 0022 0001             		move.b	$22(a0),1(a0)
00016FDE 7000                       		moveq	#0,d0
00016FE0 1028 003C                  		move.b	$3C(a0),d0
00016FE4 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016FEA 5228 003C                  		addq.b	#1,$3C(a0)
00016FEE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016FF4 4E75                       		rts	
00016FF6                            ; ===========================================================================
00016FF6                            
00016FF6                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016FF6 2268 003C                  		movea.l	$3C(a0),a1
00016FFA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017000 6A00                       		bpl.s	Obj78_BodySeg1
00017002 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017008 1028 0026                  		move.b	$26(a0),d0
0001700C 0240 007F                  		andi.w	#$7F,d0
00017010 5828 0026                  		addq.b	#4,$26(a0)
00017014 4A31 0004                  		tst.b	4(a1,d0.w)
00017018 6A00                       		bpl.s	Obj78_AniBody
0001701A 5828 0026                  		addq.b	#4,$26(a0)
0001701E                            
0001701E                            Obj78_AniBody:
0001701E 1031 0000                  		move.b	(a1,d0.w),d0
00017022 5000                       		addq.b	#8,d0
00017024 1140 001A                  		move.b	d0,$1A(a0)
00017028                            
00017028                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017028 2268 003C                  		movea.l	$3C(a0),a1
0001702C 4A28 0022                  		tst.b	$22(a0)
00017030 6B00 0000                  		bmi.w	loc_16C90
00017034 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001703A 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017040 6700 0000                  		beq.w	loc_16C64
00017044 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001704A 3029 0010                  		move.w	$10(a1),d0
0001704E D069 0014                  		add.w	$14(a1),d0
00017052 3140 0010                  		move.w	d0,$10(a0)
00017056 2428 0008                  		move.l	8(a0),d2
0001705A 2602                       		move.l	d2,d3
0001705C 3028 0010                  		move.w	$10(a0),d0
00017060 0828 0000 0022             		btst	#0,$22(a0)
00017066 6700                       		beq.s	loc_16C0C
00017068 4440                       		neg.w	d0
0001706A                            
0001706A                            loc_16C0C:
0001706A 48C0                       		ext.l	d0
0001706C E180                       		asl.l	#8,d0
0001706E D480                       		add.l	d0,d2
00017070 2142 0008                  		move.l	d2,8(a0)
00017074 4843                       		swap	d3
00017076 B668 0008                  		cmp.w	8(a0),d3
0001707A 6700                       		beq.s	loc_16C64
0001707C 7000                       		moveq	#0,d0
0001707E 1028 003C                  		move.b	$3C(a0),d0
00017082 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017086 0C01 0080                  		cmpi.b	#-$80,d1
0001708A 6600                       		bne.s	loc_16C50
0001708C 4843                       		swap	d3
0001708E 2143 0008                  		move.l	d3,8(a0)
00017092 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017096 0868 0000 0022             		bchg	#0,$22(a0)
0001709C 1168 0022 0001             		move.b	$22(a0),1(a0)
000170A2 5228 003C                  		addq.b	#1,$3C(a0)
000170A6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000170AC 6000                       		bra.s	loc_16C64
000170AE                            ; ===========================================================================
000170AE                            
000170AE                            loc_16C50:
000170AE 4881                       		ext.w	d1
000170B0 D368 000C                  		add.w	d1,$C(a0)
000170B4 5228 003C                  		addq.b	#1,$3C(a0)
000170B8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000170BE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000170C2                            
000170C2                            loc_16C64:
000170C2 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000170C8 6700                       		beq.s	loc_16C90
000170CA 0C11 0027                  		cmpi.b	#$27,0(a1)
000170CE 6700                       		beq.s	loc_16C7C
000170D0 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000170D6 6600                       		bne.s	loc_16C82
000170D8                            
000170D8                            loc_16C7C:
000170D8 117C 000A 0024             		move.b	#$A,$24(a0)
000170DE                            
000170DE                            loc_16C82:
000170DE 4EF9 0000 D5B0             		jmp	DisplaySprite
000170E4                            
000170E4                            ; ===========================================================================
000170E4 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000170EC                            ; ===========================================================================
000170EC                            
000170EC                            loc_16C90:
000170EC 08E9 0007 0022             		bset	#7,$22(a1)
000170F2                            
000170F2                            loc_16C96:
000170F2 7000                       		moveq	#0,d0
000170F4 1028 0024                  		move.b	$24(a0),d0
000170F8 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000170FC 0828 0000 0022             		btst	#0,$22(a0)
00017102 6700                       		beq.s	loc_16CAA
00017104 4440                       		neg.w	d0
00017106                            
00017106                            loc_16CAA:
00017106 3140 0010                  		move.w	d0,$10(a0)
0001710A 317C FC00 0012             		move.w	#-$400,$12(a0)
00017110 117C 000C 0024             		move.b	#$C,$24(a0)
00017116 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001711C                            
0001711C                            loc_16CC0:				; XREF: Obj78_Index
0001711C 4EB9 0000 D55E             		jsr	ObjectFall
00017122 4A68 0012                  		tst.w	$12(a0)
00017126 6B00                       		bmi.s	loc_16CE0
00017128 4EBA E156                  		jsr	ObjHitFloor
0001712C 4A41                       		tst.w	d1
0001712E 6A00                       		bpl.s	loc_16CE0
00017130 D368 000C                  		add.w	d1,$C(a0)
00017134 317C FC00 0012             		move.w	#-$400,$12(a0)
0001713A                            
0001713A                            loc_16CE0:
0001713A 4A28 0001                  		tst.b	1(a0)
0001713E 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017142 4EF9 0000 D5B0             		jmp	DisplaySprite
00017148                            ; ===========================================================================
00017148                            Ani_obj78:
00017148                            	include "_anim\obj78.asm"
00017148                            ; ---------------------------------------------------------------------------
00017148                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017148                            ; ---------------------------------------------------------------------------
00017148 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017158 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017168 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017178 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017188 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017198 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000171A8 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000171B8 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000171C8                            	even
000171C8                            	even
000171C8                            
000171C8                            ; ---------------------------------------------------------------------------
000171C8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000171C8                            ; ---------------------------------------------------------------------------
000171C8                            Map_obj78:
000171C8                            	include "_maps\obj78.asm"
000171C8                            ; ---------------------------------------------------------------------------
000171C8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000171C8                            ; ---------------------------------------------------------------------------
000171C8 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000171CC 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000171D0 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000171D4 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000171D8 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000171DC 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000171E0 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000171E4 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000171E8 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000171EC 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000171F0 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000171F4 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000171F8 01                         byte_16D9E:	dc.b 1
000171F9 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000171FE 01                         byte_16DA4:	dc.b 1
000171FF F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017204 01                         byte_16DAA:	dc.b 1
00017205 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001720A 01                         byte_16DB0:	dc.b 1
0001720B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017210 01                         byte_16DB6:	dc.b 1
00017211 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017216 01                         byte_16DBC:	dc.b 1
00017217 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001721C 01                         byte_16DC2:	dc.b 1
0001721D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017222 01                         byte_16DC8:	dc.b 1
00017223 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017228 01                         byte_16DCE:	dc.b 1
00017229 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001722E 01                         byte_16DD4:	dc.b 1
0001722F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017234 01                         byte_16DDA:	dc.b 1
00017235 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001723A 01                         byte_16DE0:	dc.b 1
0001723B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017240 01                         byte_16DE6:	dc.b 1
00017241 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017246 01                         byte_16DEC:	dc.b 1
00017247 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001724C 01                         byte_16DF2:	dc.b 1
0001724D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017252 01                         byte_16DF8:	dc.b 1
00017253 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017258 01                         byte_16DFE:	dc.b 1
00017259 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001725E 01                         byte_16E04:	dc.b 1
0001725F F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017264 01                         byte_16E0A:	dc.b 1
00017265 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001726A 01                         byte_16E10:	dc.b 1
0001726B EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017270 01                         byte_16E16:	dc.b 1
00017271 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017276 01                         byte_16E1C:	dc.b 1
00017277 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001727C 01                         byte_16E22:	dc.b 1
0001727D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017282 01                         byte_16E28:	dc.b 1
00017283 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017288                            		even
00017288                            		even
00017288                            
00017288                            ; ===========================================================================
00017288                            ; ---------------------------------------------------------------------------
00017288                            ; Object 79 - lamppost
00017288                            ; ---------------------------------------------------------------------------
00017288                            
00017288                            Obj79:					; XREF: Obj_Index
00017288 7000                       		moveq	#0,d0
0001728A 1028 0024                  		move.b	$24(a0),d0
0001728E 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017292 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017296 4EFA 83B0                  		jmp	MarkObjGone
0001729A                            ; ===========================================================================
0001729A 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001729C 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001729E 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000172A0 0000                       		dc.w Obj79_Twirl-Obj79_Index
000172A2                            ; ===========================================================================
000172A2                            
000172A2                            Obj79_Main:				; XREF: Obj79_Index
000172A2 5428 0024                  		addq.b	#2,$24(a0)
000172A6 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000172AE 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
000172B4 117C 0004 0001             		move.b	#4,1(a0)
000172BA 117C 0008 0019             		move.b	#8,$19(a0)
000172C0 117C 0005 0018             		move.b	#5,$18(a0)
000172C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000172CA 7000                       		moveq	#0,d0
000172CC 1028 0023                  		move.b	$23(a0),d0
000172D0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000172D6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000172DC 6600                       		bne.s	Obj79_RedLamp
000172DE 1238 FE30                  		move.b	($FFFFFE30).w,d1
000172E2 0201 007F                  		andi.b	#$7F,d1
000172E6 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000172EA 0202 007F                  		andi.b	#$7F,d2
000172EE B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000172F0 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000172F2                            
000172F2                            Obj79_RedLamp:
000172F2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000172F8 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000172FE 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017304 4E75                       		rts	
00017306                            ; ===========================================================================
00017306                            
00017306                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017306 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001730A 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001730E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017312 6B00 0000                  		bmi.w	locret_16F90
00017316 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001731A 0201 007F                  		andi.b	#$7F,d1
0001731E 1428 0028                  		move.b	$28(a0),d2
00017322 0202 007F                  		andi.b	#$7F,d2
00017326 B202                       		cmp.b	d2,d1
00017328 6500                       		bcs.s	Obj79_HitLamp
0001732A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001732E 7000                       		moveq	#0,d0
00017330 1028 0023                  		move.b	$23(a0),d0
00017334 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001733A 117C 0004 0024             		move.b	#4,$24(a0)
00017340 117C 0003 001A             		move.b	#3,$1A(a0)
00017346 6000 0000                  		bra.w	locret_16F90
0001734A                            ; ===========================================================================
0001734A                            
0001734A                            Obj79_HitLamp:
0001734A 3038 D008                  		move.w	($FFFFD008).w,d0
0001734E 9068 0008                  		sub.w	8(a0),d0
00017352 5040                       		addq.w	#8,d0
00017354 0C40 0010                  		cmpi.w	#$10,d0
00017358 6400 0000                  		bcc.w	locret_16F90
0001735C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017360 9068 000C                  		sub.w	$C(a0),d0
00017364 0640 0040                  		addi.w	#$40,d0
00017368 0C40 0068                  		cmpi.w	#$68,d0
0001736C 6400                       		bcc.s	locret_16F90
0001736E 303C 00A1                  		move.w	#$A1,d0
00017372 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017378 5428 0024                  		addq.b	#2,$24(a0)
0001737C 4EB9 0000 DA36             		jsr	SingleObjLoad
00017382 6600                       		bne.s	loc_16F76
00017384 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017388 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001738E 3368 0008 0030             		move.w	8(a0),$30(a1)
00017394 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001739A 0469 0018 0032             		subi.w	#$18,$32(a1)
000173A0 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000173A8 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
000173AE 137C 0004 0001             		move.b	#4,1(a1)
000173B4 137C 0008 0019             		move.b	#8,$19(a1)
000173BA 137C 0004 0018             		move.b	#4,$18(a1)
000173C0 137C 0002 001A             		move.b	#2,$1A(a1)
000173C6 337C 0020 0036             		move.w	#$20,$36(a1)
000173CC                            
000173CC                            loc_16F76:
000173CC 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000173D2 6100 0000                  		bsr.w	Obj79_StoreInfo
000173D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000173DA 7000                       		moveq	#0,d0
000173DC 1028 0023                  		move.b	$23(a0),d0
000173E0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000173E6                            
000173E6                            locret_16F90:
000173E6 4E75                       		rts	
000173E8                            ; ===========================================================================
000173E8                            
000173E8                            Obj79_AfterHit:				; XREF: Obj79_Index
000173E8 4E75                       		rts	
000173EA                            ; ===========================================================================
000173EA                            
000173EA                            Obj79_Twirl:				; XREF: Obj79_Index
000173EA 5368 0036                  		subq.w	#1,$36(a0)
000173EE 6A00                       		bpl.s	loc_16FA0
000173F0 117C 0004 0024             		move.b	#4,$24(a0)
000173F6                            
000173F6                            loc_16FA0:
000173F6 1028 0026                  		move.b	$26(a0),d0
000173FA 0428 0010 0026             		subi.b	#$10,$26(a0)
00017400 0400 0040                  		subi.b	#$40,d0
00017404 4EB9 0000 29BA             		jsr	(CalcSine).l
0001740A C3FC 0C00                  		muls.w	#$C00,d1
0001740E 4841                       		swap	d1
00017410 D268 0030                  		add.w	$30(a0),d1
00017414 3141 0008                  		move.w	d1,8(a0)
00017418 C1FC 0C00                  		muls.w	#$C00,d0
0001741C 4840                       		swap	d0
0001741E D068 0032                  		add.w	$32(a0),d0
00017422 3140 000C                  		move.w	d0,$C(a0)
00017426 4E75                       		rts	
00017428                            ; ===========================================================================
00017428                            ; ---------------------------------------------------------------------------
00017428                            ; Subroutine to	store information when you hit a lamppost
00017428                            ; ---------------------------------------------------------------------------
00017428                            
00017428                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017428 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001742E 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017434 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001743A 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017440 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017446 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001744C 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017452 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017458 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001745E 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017464 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001746A 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017470 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017476 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001747C 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017482 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017488 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001748E 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017494 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001749A 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000174A0 4E75                       		rts	
000174A2                            
000174A2                            ; ---------------------------------------------------------------------------
000174A2                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000174A2                            ; ---------------------------------------------------------------------------
000174A2                            
000174A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174A2                            
000174A2                            
000174A2                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000174A2 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000174A8 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000174AE 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000174B4 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000174BA 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000174C0 4278 FE20                  		clr.w	($FFFFFE20).w
000174C4 4238 FE1B                  		clr.b	($FFFFFE1B).w
000174C8 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000174CE 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000174D4 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000174D8 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000174DE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000174E4 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000174EA 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000174F0 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000174F6 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000174FC 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017502 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017508 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001750E 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017514 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001751A 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017520 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017526 6600                       		bne.s	loc_170E4
00017528 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001752E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017534 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001753A                            
0001753A                            loc_170E4:
0001753A 4A38 FE30                  		tst.b	($FFFFFE30).w
0001753E 6A00                       		bpl.s	locret_170F6
00017540 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017544 0440 00A0                  		subi.w	#$A0,d0
00017548 31C0 F728                  		move.w	d0,($FFFFF728).w
0001754C                            
0001754C                            locret_170F6:
0001754C 4E75                       		rts	
0001754E                            ; End of function Obj79_LoadInfo
0001754E                            
0001754E                            ; ===========================================================================
0001754E                            ; ---------------------------------------------------------------------------
0001754E                            ; Sprite mappings - lamppost
0001754E                            ; ---------------------------------------------------------------------------
0001754E                            Map_obj79:
0001754E                            	include "_maps\obj79.asm"
0001754E                            ; ---------------------------------------------------------------------------
0001754E                            ; Sprite mappings - lamppost
0001754E                            ; ---------------------------------------------------------------------------
0001754E 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017552 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017556 06                         byte_17100:	dc.b 6
00017557 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001755C E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017561 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017566 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001756B D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017570 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017575 04                         byte_1711F:	dc.b 4
00017576 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001757B E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017580 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017585 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001758A 02                         byte_17134:	dc.b 2
0001758B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017590 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017595 06                         byte_1713F:	dc.b 6
00017596 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001759B E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000175A0 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000175A5 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000175AA D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000175AF D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000175B4                            		even
000175B4                            		even
000175B4                            
000175B4                            ; ===========================================================================
000175B4                            ; ---------------------------------------------------------------------------
000175B4                            ; Object 7D - hidden points at the end of a level
000175B4                            ; ---------------------------------------------------------------------------
000175B4                            
000175B4                            Obj7D:					; XREF: Obj_Index
000175B4 7000                       		moveq	#0,d0
000175B6 1028 0024                  		move.b	$24(a0),d0
000175BA 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000175BE 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000175C2                            ; ===========================================================================
000175C2 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000175C4 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000175C6                            ; ===========================================================================
000175C6                            
000175C6                            Obj7D_Main:				; XREF: Obj7D_Index
000175C6 7410                       		moveq	#$10,d2
000175C8 3602                       		move.w	d2,d3
000175CA D643                       		add.w	d3,d3
000175CC 43F8 D000                  		lea	($FFFFD000).w,a1
000175D0 3029 0008                  		move.w	8(a1),d0
000175D4 9068 0008                  		sub.w	8(a0),d0
000175D8 D042                       		add.w	d2,d0
000175DA B043                       		cmp.w	d3,d0
000175DC 6400                       		bcc.s	Obj7D_ChkDel
000175DE 3229 000C                  		move.w	$C(a1),d1
000175E2 9268 000C                  		sub.w	$C(a0),d1
000175E6 D242                       		add.w	d2,d1
000175E8 B243                       		cmp.w	d3,d1
000175EA 6400                       		bcc.s	Obj7D_ChkDel
000175EC 4A78 FE08                  		tst.w	($FFFFFE08).w
000175F0 6600                       		bne.s	Obj7D_ChkDel
000175F2 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000175F6 6600                       		bne.s	Obj7D_ChkDel
000175F8 5428 0024                  		addq.b	#2,$24(a0)
000175FC 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017604 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001760A 0028 0004 0001             		ori.b	#4,1(a0)
00017610 117C 0000 0018             		move.b	#0,$18(a0)
00017616 117C 0010 0019             		move.b	#$10,$19(a0)
0001761C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017622 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017628 303C 00C9                  		move.w	#$C9,d0
0001762C 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play bonus sound
00017632 7000                       		moveq	#0,d0
00017634 1028 0028                  		move.b	$28(a0),d0
00017638 D040                       		add.w	d0,d0
0001763A 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001763E 4EB9 0000 0000             		jsr	AddPoints
00017644                            
00017644                            Obj7D_ChkDel:
00017644 3028 0008                  		move.w	8(a0),d0
00017648 0240 FF80                  		andi.w	#$FF80,d0
0001764C 3238 F700                  		move.w	($FFFFF700).w,d1
00017650 0441 0080                  		subi.w	#$80,d1
00017654 0241 FF80                  		andi.w	#$FF80,d1
00017658 9041                       		sub.w	d1,d0
0001765A 0C40 0280                  		cmpi.w	#$280,d0
0001765E 6200                       		bhi.s	Obj7D_Delete
00017660 4E75                       		rts	
00017662                            ; ===========================================================================
00017662                            
00017662                            Obj7D_Delete:
00017662 4EF9 0000 D5EC             		jmp	DeleteObject
00017668                            ; ===========================================================================
00017668 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001766A 03E8                       		dc.w 1000
0001766C 0064                       		dc.w 100
0001766E 0001                       		dc.w 1
00017670                            ; ===========================================================================
00017670                            
00017670                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017670 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017674 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017676 3028 0008                  		move.w	8(a0),d0
0001767A 0240 FF80                  		andi.w	#-$80,d0
0001767E 3238 F700                  		move.w	($FFFFF700).w,d1
00017682 0441 0080                  		subi.w	#$80,d1
00017686 0241 FF80                  		andi.w	#-$80,d1
0001768A 9041                       		sub.w	d1,d0
0001768C 0C40 0280                  		cmpi.w	#$280,d0
00017690 6200                       		bhi.s	Obj7D_Delete2
00017692 4EF9 0000 D5B0             		jmp	DisplaySprite
00017698                            ; ===========================================================================
00017698                            
00017698                            Obj7D_Delete2:
00017698 4EF9 0000 D5EC             		jmp	DeleteObject
0001769E                            ; ===========================================================================
0001769E                            ; ---------------------------------------------------------------------------
0001769E                            ; Sprite mappings - hidden points at the end of	a level
0001769E                            ; ---------------------------------------------------------------------------
0001769E                            Map_obj7D:
0001769E                            	include "_maps\obj7D.asm"
0001769E                            ; ---------------------------------------------------------------------------
0001769E                            ; Sprite mappings - hidden points at the end of	a level
0001769E                            ; ---------------------------------------------------------------------------
0001769E 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000176A2 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000176A6 00                         byte_17250:	dc.b 0
000176A7 01                         byte_17251:	dc.b 1
000176A8 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000176AD 01                         byte_17257:	dc.b 1
000176AE F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000176B3 01                         byte_1725D:	dc.b 1
000176B4 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000176BA 00                         		even
000176BA 00                         		even
000176BA                            
000176BA                            ; ===========================================================================
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000176BA                            ; ---------------------------------------------------------------------------
000176BA                            
000176BA                            Obj8A:					; XREF: Obj_Index
000176BA 7000                       		moveq	#0,d0
000176BC 1028 0024                  		move.b	$24(a0),d0
000176C0 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000176C4 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000176C8                            ; ===========================================================================
000176C8 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000176CA 0000                       		dc.w Obj8A_Display-Obj8A_Index
000176CC                            ; ===========================================================================
000176CC                            
000176CC                            Obj8A_Main:				; XREF: Obj8A_Index
000176CC 5428 0024                  		addq.b	#2,$24(a0)
000176D0 317C 0120 0008             		move.w	#$120,8(a0)
000176D6 317C 00F0 000A             		move.w	#$F0,$A(a0)
000176DC 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000176E4 317C 05A0 0002             		move.w	#$5A0,2(a0)
000176EA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000176EE 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000176F2 117C 0000 0001             		move.b	#0,1(a0)
000176F8 117C 0000 0018             		move.b	#0,$18(a0)
000176FE 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017704 6600                       		bne.s	Obj8A_Display	; if not, branch
00017706 317C 00A6 0002             		move.w	#$A6,2(a0)
0001770C 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017712 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017716 6700                       		beq.s	Obj8A_Display	; if not, branch
00017718 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001771E 6600                       		bne.s	Obj8A_Display	; if not, branch
00017720 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017726 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001772C 4EF9 0000 D5EC             		jmp	DeleteObject
00017732                            ; ===========================================================================
00017732                            
00017732                            Obj8A_Display:				; XREF: Obj8A_Index
00017732 4EF9 0000 D5B0             		jmp	DisplaySprite
00017738                            ; ===========================================================================
00017738                            ; ---------------------------------------------------------------------------
00017738                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017738                            ; ---------------------------------------------------------------------------
00017738                            Map_obj8A:
00017738                            	include "_maps\obj8A.asm"
00017738                            ; ---------------------------------------------------------------------------
00017738                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017738                            ; ---------------------------------------------------------------------------
00017738 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001773C 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00017740 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00017744 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00017748 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001774C 0000                       		dc.w byte_176A9-Map_obj8A
0001774E 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
0001774F F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00017754 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00017759 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001775E F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00017763 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00017768 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001776D F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00017772 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00017777 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001777C F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017781 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00017786 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001778B F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017790 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00017795 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00017796 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001779B D805 0004 90               		dc.b $D8, 5, 0,	4, $90
000177A0 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
000177A5 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
000177AA D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
000177AF D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
000177B4 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
000177B9 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000177BE 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000177C3 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000177C8 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000177CD 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000177D2 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000177D7 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000177DC 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000177E1 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000177E6 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000177E7 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000177EC D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000177F1 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000177F6 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000177FB D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00017800 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00017805 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
0001780A 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
0001780F 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00017814 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00017819 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
0001781A D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
0001781F D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00017824 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00017829 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
0001782E D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017833 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00017838 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
0001783D D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00017842 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017847 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
0001784C D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00017851 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00017856 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001785B D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00017860 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00017865 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001786A 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
0001786F 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00017874 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00017879 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
0001787E 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00017883 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00017888 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
0001788D 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00017892 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00017893 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00017898 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
0001789D D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
000178A2 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
000178A7 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
000178AC D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
000178B1 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
000178B6 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
000178BB 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000178C0 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000178C5 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000178CA 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000178CF 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000178D4 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000178D9 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000178DE 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000178E3 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000178E8 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000178ED 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000178F2 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000178F7 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000178F8 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000178FD D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00017902 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00017907 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
0001790C D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00017911 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00017916 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001791B D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00017920 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00017925 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001792A D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
0001792F D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00017934 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00017939 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
0001793E 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00017943 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00017948 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
0001794D 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00017952 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00017957 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001795C 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00017961 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00017966 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001796B 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00017970 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00017975 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001797A 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001797B D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00017980 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00017985 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001798A D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001798F D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00017994 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00017999 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001799E D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
000179A3 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
000179A8 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
000179AD D005 0004 48               		dc.b $D0, 5, 0,	4, $48
000179B2 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
000179B7 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
000179BC 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000179C1 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000179C6 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000179CB 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000179D0 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000179D5 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000179DA 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000179DF 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000179E4 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000179E9 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000179EE 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000179EF D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000179F4 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000179F9 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000179FE D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00017A03 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00017A08 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017A0D D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00017A12 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00017A17 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00017A1C D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00017A21 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00017A26 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00017A2B D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00017A30 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00017A35 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00017A3A 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017A3F 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017A44 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00017A49 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00017A4E 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00017A53 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00017A58 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00017A5D 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00017A62 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00017A67 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00017A6C 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00017A71 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00017A76 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00017A7B 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00017A80 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00017A85 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00017A8A 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00017A8B F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00017A90 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00017A95 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00017A9A F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00017A9F F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00017AA4 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00017AA9 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00017AAE F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00017AB3 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00017AB8 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00017ABD F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00017AC2 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00017AC7 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00017ACC F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00017AD1 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00017AD6 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00017AD7 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00017ADC 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00017AE1 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00017AE6 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00017AEB 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00017AF0 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00017AF5 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00017AFA 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00017AFF                            byte_176A9:	incbin "mapbin\credits_map_0.bin"
00017B50                            		even
00017B50                            		even
00017B50                            
00017B50                            ; ===========================================================================
00017B50                            ; ---------------------------------------------------------------------------
00017B50                            ; Object 3D - Eggman (GHZ)
00017B50                            ; ---------------------------------------------------------------------------
00017B50                            
00017B50                            Obj3D:					; XREF: Obj_Index
00017B50 7000                       		moveq	#0,d0
00017B52 1028 0024                  		move.b	$24(a0),d0
00017B56 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017B5A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017B5E                            ; ===========================================================================
00017B5E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017B60 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017B62 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017B64 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017B66                            
00017B66 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017B68 0401                       		dc.b 4,	1
00017B6A 0607                       		dc.b 6,	7
00017B6C                            ; ===========================================================================
00017B6C                            
00017B6C                            Obj3D_Main:				; XREF: Obj3D_Index
00017B6C 45F9 0001 7B66             		lea	(Obj3D_ObjData).l,a2
00017B72 2248                       		movea.l	a0,a1
00017B74 7202                       		moveq	#2,d1
00017B76 6000                       		bra.s	Obj3D_LoadBoss
00017B78                            ; ===========================================================================
00017B78                            
00017B78                            Obj3D_Loop:
00017B78 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00017B7E 6600                       		bne.s	loc_17772
00017B80                            
00017B80                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017B80 135A 0024                  		move.b	(a2)+,$24(a1)
00017B84 12BC 003D                  		move.b	#$3D,0(a1)
00017B88 3368 0008 0008             		move.w	8(a0),8(a1)
00017B8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017B94 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017B9C 337C 0400 0002             		move.w	#$400,2(a1)
00017BA2 137C 0004 0001             		move.b	#4,1(a1)
00017BA8 137C 0020 0019             		move.b	#$20,$19(a1)
00017BAE 137C 0003 0018             		move.b	#3,$18(a1)
00017BB4 135A 001C                  		move.b	(a2)+,$1C(a1)
00017BB8 2348 0034                  		move.l	a0,$34(a1)
00017BBC 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017BC0                            
00017BC0                            loc_17772:
00017BC0 3168 0008 0030             		move.w	8(a0),$30(a0)
00017BC6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017BCC 117C 000F 0020             		move.b	#$F,$20(a0)
00017BD2                            		include "_param\bosshits.asm"
00017BD2 117C 0008 0021                            move.b  #8,$21(a0)
00017BD2 117C 0008 0021                            move.b  #8,$21(a0)
00017BD8                            
00017BD8                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017BD8 7000                       		moveq	#0,d0
00017BDA 1028 0025                  		move.b	$25(a0),d0
00017BDE 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017BE2 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017BE6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017BEC 4EB9 0000 A6EC             		jsr	AnimateSprite
00017BF2 1028 0022                  		move.b	$22(a0),d0
00017BF6 0200 0003                  		andi.b	#3,d0
00017BFA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017C00 8128 0001                  		or.b	d0,1(a0)
00017C04 4EF9 0000 D5B0             		jmp	DisplaySprite
00017C0A                            ; ===========================================================================
00017C0A 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017C0C 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017C0E 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017C10 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017C12 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017C14 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017C16 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017C18                            ; ===========================================================================
00017C18                            
00017C18                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017C18 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017C1E 6100 0000                  		bsr.w	BossMove
00017C22 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017C28 6600                       		bne.s	loc_177E6
00017C2A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017C30 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017C34                            
00017C34                            loc_177E6:
00017C34 1028 003F                  		move.b	$3F(a0),d0
00017C38 4EB9 0000 29BA             		jsr	(CalcSine).l
00017C3E EC40                       		asr.w	#6,d0
00017C40 D068 0038                  		add.w	$38(a0),d0
00017C44 3140 000C                  		move.w	d0,$C(a0)
00017C48 3168 0030 0008             		move.w	$30(a0),8(a0)
00017C4E 5428 003F                  		addq.b	#2,$3F(a0)
00017C52 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017C58 6400                       		bcc.s	locret_1784A
00017C5A 4A28 0022                  		tst.b	$22(a0)
00017C5E 6B00                       		bmi.s	loc_1784C
00017C60 4A28 0020                  		tst.b	$20(a0)
00017C64 6600                       		bne.s	locret_1784A
00017C66 4A28 003E                  		tst.b	$3E(a0)
00017C6A 6600                       		bne.s	Obj3D_ShipFlash
00017C6C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017C72 303C 00AC                  		move.w	#$AC,d0
00017C76 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017C7C                            
00017C7C                            Obj3D_ShipFlash:
00017C7C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017C80 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017C82 4A51                       		tst.w	(a1)
00017C84 6600                       		bne.s	loc_1783C
00017C86 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017C8A                            
00017C8A                            loc_1783C:
00017C8A 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017C8C 5328 003E                  		subq.b	#1,$3E(a0)
00017C90 6600                       		bne.s	locret_1784A
00017C92 117C 000F 0020             		move.b	#$F,$20(a0)
00017C98                            
00017C98                            locret_1784A:
00017C98 4E75                       		rts	
00017C9A                            ; ===========================================================================
00017C9A                            
00017C9A                            loc_1784C:				; XREF: loc_177E6
00017C9A 7064                       		moveq	#100,d0
00017C9C 6100 0000                  		bsr.w	AddPoints
00017CA0 117C 0008 0025             		move.b	#8,$25(a0)
00017CA6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017CAC 4E75                       		rts	
00017CAE                            
00017CAE                            ; ---------------------------------------------------------------------------
00017CAE                            ; Defeated boss	subroutine
00017CAE                            ; ---------------------------------------------------------------------------
00017CAE                            
00017CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CAE                            
00017CAE                            
00017CAE                            BossDefeated:
00017CAE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017CB2 0200 0007                  		andi.b	#7,d0
00017CB6 6600                       		bne.s	locret_178A2
00017CB8 4EB9 0000 DA36             		jsr	SingleObjLoad
00017CBE 6600                       		bne.s	locret_178A2
00017CC0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017CC4 3368 0008 0008             		move.w	8(a0),8(a1)
00017CCA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017CD0 4EB9 0000 2994             		jsr	(RandomNumber).l
00017CD6 3200                       		move.w	d0,d1
00017CD8 7200                       		moveq	#0,d1
00017CDA 1200                       		move.b	d0,d1
00017CDC E409                       		lsr.b	#2,d1
00017CDE 0441 0020                  		subi.w	#$20,d1
00017CE2 D369 0008                  		add.w	d1,8(a1)
00017CE6 E048                       		lsr.w	#8,d0
00017CE8 E608                       		lsr.b	#3,d0
00017CEA D169 000C                  		add.w	d0,$C(a1)
00017CEE                            
00017CEE                            locret_178A2:
00017CEE 4E75                       		rts	
00017CF0                            ; End of function BossDefeated
00017CF0                            
00017CF0                            ; ---------------------------------------------------------------------------
00017CF0                            ; Subroutine to	move a boss
00017CF0                            ; ---------------------------------------------------------------------------
00017CF0                            
00017CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017CF0                            
00017CF0                            
00017CF0                            BossMove:
00017CF0 2428 0030                  		move.l	$30(a0),d2
00017CF4 2628 0038                  		move.l	$38(a0),d3
00017CF8 3028 0010                  		move.w	$10(a0),d0
00017CFC 48C0                       		ext.l	d0
00017CFE E180                       		asl.l	#8,d0
00017D00 D480                       		add.l	d0,d2
00017D02 3028 0012                  		move.w	$12(a0),d0
00017D06 48C0                       		ext.l	d0
00017D08 E180                       		asl.l	#8,d0
00017D0A D680                       		add.l	d0,d3
00017D0C 2142 0030                  		move.l	d2,$30(a0)
00017D10 2143 0038                  		move.l	d3,$38(a0)
00017D14 4E75                       		rts	
00017D16                            ; End of function BossMove
00017D16                            
00017D16                            ; ===========================================================================
00017D16                            
00017D16                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017D16 317C FF00 0010             		move.w	#-$100,$10(a0)
00017D1C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017D22 6100 FFCC                  		bsr.w	BossMove
00017D26 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017D2C 6600                       		bne.s	loc_17916
00017D2E 317C 0000 0010             		move.w	#0,$10(a0)
00017D34 317C 0000 0012             		move.w	#0,$12(a0)
00017D3A 5428 0025                  		addq.b	#2,$25(a0)
00017D3E 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00017D44 6600                       		bne.s	loc_17910
00017D46 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017D4A 3368 0030 0008             		move.w	$30(a0),8(a1)
00017D50 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017D56 2348 0034                  		move.l	a0,$34(a1)
00017D5A                            
00017D5A                            loc_17910:
00017D5A 317C 0077 003C             		move.w	#$77,$3C(a0)
00017D60                            
00017D60                            loc_17916:
00017D60 6000 FED2                  		bra.w	loc_177E6
00017D64                            ; ===========================================================================
00017D64                            
00017D64                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017D64 5368 003C                  		subq.w	#1,$3C(a0)
00017D68 6A00                       		bpl.s	Obj3D_Reverse
00017D6A 5428 0025                  		addq.b	#2,$25(a0)
00017D6E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017D74 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017D7A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017D80 6600                       		bne.s	Obj3D_Reverse
00017D82 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017D88 317C 0040 0010             		move.w	#$40,$10(a0)
00017D8E                            
00017D8E                            Obj3D_Reverse:
00017D8E 0828 0000 0022             		btst	#0,$22(a0)
00017D94 6600                       		bne.s	loc_17950
00017D96 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017D9A                            
00017D9A                            loc_17950:
00017D9A 6000 FE98                  		bra.w	loc_177E6
00017D9E                            ; ===========================================================================
00017D9E                            
00017D9E                            loc_17954:				; XREF: Obj3D_ShipIndex
00017D9E 5368 003C                  		subq.w	#1,$3C(a0)
00017DA2 6B00                       		bmi.s	loc_17960
00017DA4 6100 FF4A                  		bsr.w	BossMove
00017DA8 6000                       		bra.s	loc_17976
00017DAA                            ; ===========================================================================
00017DAA                            
00017DAA                            loc_17960:
00017DAA 0868 0000 0022             		bchg	#0,$22(a0)
00017DB0 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017DB6 5528 0025                  		subq.b	#2,$25(a0)
00017DBA 317C 0000 0010             		move.w	#0,$10(a0)
00017DC0                            
00017DC0                            loc_17976:
00017DC0 6000 FE72                  		bra.w	loc_177E6
00017DC4                            ; ===========================================================================
00017DC4                            
00017DC4                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017DC4 5368 003C                  		subq.w	#1,$3C(a0)
00017DC8 6B00                       		bmi.s	loc_17984
00017DCA 6000 FEE2                  		bra.w	BossDefeated
00017DCE                            ; ===========================================================================
00017DCE                            
00017DCE                            loc_17984:
00017DCE 08E8 0000 0022             		bset	#0,$22(a0)
00017DD4 08A8 0007 0022             		bclr	#7,$22(a0)
00017DDA 4268 0010                  		clr.w	$10(a0)
00017DDE 5428 0025                  		addq.b	#2,$25(a0)
00017DE2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017DE8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017DEC 6600                       		bne.s	locret_179AA
00017DEE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017DF4                            
00017DF4                            locret_179AA:
00017DF4 4E75                       		rts	
00017DF6                            ; ===========================================================================
00017DF6                            
00017DF6                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017DF6 5268 003C                  		addq.w	#1,$3C(a0)
00017DFA 6700                       		beq.s	loc_179BC
00017DFC 6A00                       		bpl.s	loc_179C2
00017DFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00017E04 6000                       		bra.s	loc_179EE
00017E06                            ; ===========================================================================
00017E06                            
00017E06                            loc_179BC:
00017E06 4268 0012                  		clr.w	$12(a0)
00017E0A 6000                       		bra.s	loc_179EE
00017E0C                            ; ===========================================================================
00017E0C                            
00017E0C                            loc_179C2:
00017E0C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017E12 6500                       		bcs.s	loc_179DA
00017E14 6700                       		beq.s	loc_179E0
00017E16 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017E1C 6500                       		bcs.s	loc_179EE
00017E1E 5428 0025                  		addq.b	#2,$25(a0)
00017E22 6000                       		bra.s	loc_179EE
00017E24                            ; ===========================================================================
00017E24                            
00017E24                            loc_179DA:
00017E24 5168 0012                  		subq.w	#8,$12(a0)
00017E28 6000                       		bra.s	loc_179EE
00017E2A                            ; ===========================================================================
00017E2A                            
00017E2A                            loc_179E0:
00017E2A 4268 0012                  		clr.w	$12(a0)
00017E2E 303C 0083                  		move.w	#$83,d0
00017E32 4EB9 0000 12C6             		jsr	(PlaySound).l	; play GHZ music
00017E38                            
00017E38                            loc_179EE:
00017E38 6100 FEB6                  		bsr.w	BossMove
00017E3C 6000 FDF6                  		bra.w	loc_177E6
00017E40                            ; ===========================================================================
00017E40                            
00017E40                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017E40 317C 0400 0010             		move.w	#$400,$10(a0)
00017E46 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017E4C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017E52 6700                       		beq.s	loc_17A10
00017E54 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017E58 6000                       		bra.s	loc_17A16
00017E5A                            ; ===========================================================================
00017E5A                            
00017E5A                            loc_17A10:
00017E5A 4A28 0001                  		tst.b	1(a0)
00017E5E 6A00                       		bpl.s	Obj3D_ShipDel
00017E60                            
00017E60                            loc_17A16:
00017E60 6100 FE8E                  		bsr.w	BossMove
00017E64 6000 FDCE                  		bra.w	loc_177E6
00017E68                            ; ===========================================================================
00017E68                            
00017E68                            Obj3D_ShipDel:
00017E68 4EF9 0000 D5EC             		jmp	DeleteObject
00017E6E                            ; ===========================================================================
00017E6E                            
00017E6E                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017E6E 7000                       		moveq	#0,d0
00017E70 7201                       		moveq	#1,d1
00017E72 2268 0034                  		movea.l	$34(a0),a1
00017E76 1029 0025                  		move.b	$25(a1),d0
00017E7A 5900                       		subq.b	#4,d0
00017E7C 6600                       		bne.s	loc_17A3E
00017E7E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017E84 6600                       		bne.s	loc_17A46
00017E86 7204                       		moveq	#4,d1
00017E88                            
00017E88                            loc_17A3E:
00017E88 5D00                       		subq.b	#6,d0
00017E8A 6B00                       		bmi.s	loc_17A46
00017E8C 720A                       		moveq	#$A,d1
00017E8E 6000                       		bra.s	loc_17A5A
00017E90                            ; ===========================================================================
00017E90                            
00017E90                            loc_17A46:
00017E90 4A29 0020                  		tst.b	$20(a1)
00017E94 6600                       		bne.s	loc_17A50
00017E96 7205                       		moveq	#5,d1
00017E98 6000                       		bra.s	loc_17A5A
00017E9A                            ; ===========================================================================
00017E9A                            
00017E9A                            loc_17A50:
00017E9A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017EA0 6500                       		bcs.s	loc_17A5A
00017EA2 7204                       		moveq	#4,d1
00017EA4                            
00017EA4                            loc_17A5A:
00017EA4 1141 001C                  		move.b	d1,$1C(a0)
00017EA8 5500                       		subq.b	#2,d0
00017EAA 6600                       		bne.s	Obj3D_FaceDisp
00017EAC 117C 0006 001C             		move.b	#6,$1C(a0)
00017EB2 4A28 0001                  		tst.b	1(a0)
00017EB6 6A00                       		bpl.s	Obj3D_FaceDel
00017EB8                            
00017EB8                            Obj3D_FaceDisp:
00017EB8 6000                       		bra.s	Obj3D_Display
00017EBA                            ; ===========================================================================
00017EBA                            
00017EBA                            Obj3D_FaceDel:
00017EBA 4EF9 0000 D5EC             		jmp	DeleteObject
00017EC0                            ; ===========================================================================
00017EC0                            
00017EC0                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017EC0 117C 0007 001C             		move.b	#7,$1C(a0)
00017EC6 2268 0034                  		movea.l	$34(a0),a1
00017ECA 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017ED0 6600                       		bne.s	loc_17A96
00017ED2 117C 000B 001C             		move.b	#$B,$1C(a0)
00017ED8 4A28 0001                  		tst.b	1(a0)
00017EDC 6A00                       		bpl.s	Obj3D_FlameDel
00017EDE 6000                       		bra.s	Obj3D_FlameDisp
00017EE0                            ; ===========================================================================
00017EE0                            
00017EE0                            loc_17A96:
00017EE0 3029 0010                  		move.w	$10(a1),d0
00017EE4 6700                       		beq.s	Obj3D_FlameDisp
00017EE6 117C 0008 001C             		move.b	#8,$1C(a0)
00017EEC                            
00017EEC                            Obj3D_FlameDisp:
00017EEC 6000                       		bra.s	Obj3D_Display
00017EEE                            ; ===========================================================================
00017EEE                            
00017EEE                            Obj3D_FlameDel:
00017EEE 4EF9 0000 D5EC             		jmp	DeleteObject
00017EF4                            ; ===========================================================================
00017EF4                            
00017EF4                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017EF4 2268 0034                  		movea.l	$34(a0),a1
00017EF8 3169 0008 0008             		move.w	8(a1),8(a0)
00017EFE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017F04 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017F0A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017F10 4EB9 0000 A6EC             		jsr	AnimateSprite
00017F16 1028 0022                  		move.b	$22(a0),d0
00017F1A 0200 0003                  		andi.b	#3,d0
00017F1E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017F24 8128 0001                  		or.b	d0,1(a0)
00017F28 4EF9 0000 D5B0             		jmp	DisplaySprite
00017F2E                            ; ===========================================================================
00017F2E                            ; ---------------------------------------------------------------------------
00017F2E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017F2E                            ; ---------------------------------------------------------------------------
00017F2E                            
00017F2E                            Obj48:					; XREF: Obj_Index
00017F2E 7000                       		moveq	#0,d0
00017F30 1028 0024                  		move.b	$24(a0),d0
00017F34 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017F38 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017F3C                            ; ===========================================================================
00017F3C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017F3E 0000                       		dc.w Obj48_Base-Obj48_Index
00017F40 0000                       		dc.w Obj48_Display2-Obj48_Index
00017F42 0000                       		dc.w loc_17C68-Obj48_Index
00017F44 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017F46                            ; ===========================================================================
00017F46                            
00017F46                            Obj48_Main:				; XREF: Obj48_Index
00017F46 5428 0024                  		addq.b	#2,$24(a0)
00017F4A 317C 4080 0026             		move.w	#$4080,$26(a0)
00017F50 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017F56 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017F5E 317C 046C 0002             		move.w	#$46C,2(a0)
00017F64 45E8 0028                  		lea	$28(a0),a2
00017F68 14FC 0000                  		move.b	#0,(a2)+
00017F6C 7205                       		moveq	#5,d1
00017F6E 2248                       		movea.l	a0,a1
00017F70 6000                       		bra.s	loc_17B60
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            Obj48_MakeLinks:
00017F72 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00017F78 6600                       		bne.s	Obj48_MakeBall
00017F7A 3368 0008 0008             		move.w	8(a0),8(a1)
00017F80 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017F86 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017F8A 137C 0006 0024             		move.b	#6,$24(a1)
00017F90 237C 0000 7C38 0004        		move.l	#Map_obj15,4(a1)
00017F98 337C 0380 0002             		move.w	#$380,2(a1)
00017F9E 137C 0001 001A             		move.b	#1,$1A(a1)
00017FA4 5228 0028                  		addq.b	#1,$28(a0)
00017FA8                            
00017FA8                            loc_17B60:				; XREF: Obj48_Main
00017FA8 3A09                       		move.w	a1,d5
00017FAA 0445 D000                  		subi.w	#$D000,d5
00017FAE EC4D                       		lsr.w	#6,d5
00017FB0 0245 007F                  		andi.w	#$7F,d5
00017FB4 14C5                       		move.b	d5,(a2)+
00017FB6 137C 0004 0001             		move.b	#4,1(a1)
00017FBC 137C 0008 0019             		move.b	#8,$19(a1)
00017FC2 137C 0006 0018             		move.b	#6,$18(a1)
00017FC8 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017FCE 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017FD2                            
00017FD2                            Obj48_MakeBall:
00017FD2 137C 0008 0024             		move.b	#8,$24(a1)
00017FD8 237C 0000 8196 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017FE0 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017FE6 137C 0001 001A             		move.b	#1,$1A(a1)
00017FEC 137C 0005 0018             		move.b	#5,$18(a1)
00017FF2 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017FF8 4E75                       		rts	
00017FFA                            ; ===========================================================================
00017FFA                            
00017FFA 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018000                            
00018000                            ; ===========================================================================
00018000                            
00018000                            Obj48_Base:				; XREF: Obj48_Index
00018000 47F9 0001 7FFA             		lea	(Obj48_PosData).l,a3
00018006 45E8 0028                  		lea	$28(a0),a2
0001800A 7C00                       		moveq	#0,d6
0001800C 1C1A                       		move.b	(a2)+,d6
0001800E                            
0001800E                            loc_17BC6:
0001800E 7800                       		moveq	#0,d4
00018010 181A                       		move.b	(a2)+,d4
00018012 ED4C                       		lsl.w	#6,d4
00018014 0684 00FF D000             		addi.l	#$FFD000,d4
0001801A 2244                       		movea.l	d4,a1
0001801C 101B                       		move.b	(a3)+,d0
0001801E B029 003C                  		cmp.b	$3C(a1),d0
00018022 6700                       		beq.s	loc_17BE0
00018024 5229 003C                  		addq.b	#1,$3C(a1)
00018028                            
00018028                            loc_17BE0:
00018028 51CE FFE4                  		dbf	d6,loc_17BC6
0001802C                            
0001802C B029 003C                  		cmp.b	$3C(a1),d0
00018030 6600                       		bne.s	loc_17BFA
00018032 2268 0034                  		movea.l	$34(a0),a1
00018036 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001803C 6600                       		bne.s	loc_17BFA
0001803E 5428 0024                  		addq.b	#2,$24(a0)
00018042                            
00018042                            loc_17BFA:
00018042 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018048 6700                       		beq.s	Obj48_Display
0001804A 5268 0032                  		addq.w	#1,$32(a0)
0001804E                            
0001804E                            Obj48_Display:
0001804E 6100 0000                  		bsr.w	sub_17C2A
00018052 1028 0026                  		move.b	$26(a0),d0
00018056 4EB9 0000 7BAA             		jsr	(Obj15_Move2).l
0001805C 4EF9 0000 D5B0             		jmp	DisplaySprite
00018062                            ; ===========================================================================
00018062                            
00018062                            Obj48_Display2:				; XREF: Obj48_Index
00018062 6100 0000                  		bsr.w	sub_17C2A
00018066 4EB9 0000 7B6A             		jsr	(Obj48_Move).l
0001806C 4EF9 0000 D5B0             		jmp	DisplaySprite
00018072                            
00018072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018072                            
00018072                            
00018072                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018072 2268 0034                  		movea.l	$34(a0),a1
00018076 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001807C 6400                       		bcc.s	loc_17C3C
0001807E 0868 0000 001A             		bchg	#0,$1A(a0)
00018084                            
00018084                            loc_17C3C:
00018084 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001808A 3029 000C                  		move.w	$C(a1),d0
0001808E D068 0032                  		add.w	$32(a0),d0
00018092 3140 0038                  		move.w	d0,$38(a0)
00018096 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001809C 4A29 0022                  		tst.b	$22(a1)
000180A0 6A00                       		bpl.s	locret_17C66
000180A2 10BC 003F                  		move.b	#$3F,0(a0)
000180A6 117C 0000 0024             		move.b	#0,$24(a0)
000180AC                            
000180AC                            locret_17C66:
000180AC 4E75                       		rts	
000180AE                            ; End of function sub_17C2A
000180AE                            
000180AE                            ; ===========================================================================
000180AE                            
000180AE                            loc_17C68:				; XREF: Obj48_Index
000180AE 2268 0034                  		movea.l	$34(a0),a1
000180B2 4A29 0022                  		tst.b	$22(a1)
000180B6 6A00                       		bpl.s	Obj48_Display3
000180B8 10BC 003F                  		move.b	#$3F,0(a0)
000180BC 117C 0000 0024             		move.b	#0,$24(a0)
000180C2                            
000180C2                            Obj48_Display3:
000180C2 4EF9 0000 D5B0             		jmp	DisplaySprite
000180C8                            ; ===========================================================================
000180C8                            
000180C8                            Obj48_ChkVanish:			; XREF: Obj48_Index
000180C8 7000                       		moveq	#0,d0
000180CA 4A28 001A                  		tst.b	$1A(a0)
000180CE 6600                       		bne.s	Obj48_Vanish
000180D0 5200                       		addq.b	#1,d0
000180D2                            
000180D2                            Obj48_Vanish:
000180D2 1140 001A                  		move.b	d0,$1A(a0)
000180D6 2268 0034                  		movea.l	$34(a0),a1
000180DA 4A29 0022                  		tst.b	$22(a1)
000180DE 6A00                       		bpl.s	Obj48_Display4
000180E0 117C 0000 0020             		move.b	#0,$20(a0)
000180E6 6100 FBC6                  		bsr.w	BossDefeated
000180EA 5328 003C                  		subq.b	#1,$3C(a0)
000180EE 6A00                       		bpl.s	Obj48_Display4
000180F0 10BC 003F                  		move.b	#$3F,(a0)
000180F4 117C 0000 0024             		move.b	#0,$24(a0)
000180FA                            
000180FA                            Obj48_Display4:
000180FA 4EF9 0000 D5B0             		jmp	DisplaySprite
00018100                            ; ===========================================================================
00018100                            Ani_Eggman:
00018100                            	include "_anim\Eggman.asm"
00018100                            ; ---------------------------------------------------------------------------
00018100                            ; Animation script - Eggman (bosses)
00018100                            ; ---------------------------------------------------------------------------
00018100 0000                       		dc.w byte_17CD4-Ani_Eggman
00018102 0000                       		dc.w byte_17CD8-Ani_Eggman
00018104 0000                       		dc.w byte_17CDC-Ani_Eggman
00018106 0000                       		dc.w byte_17CE0-Ani_Eggman
00018108 0000                       		dc.w byte_17CE4-Ani_Eggman
0001810A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001810C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001810E 0000                       		dc.w byte_17CF0-Ani_Eggman
00018110 0000                       		dc.w byte_17CF4-Ani_Eggman
00018112 0000                       		dc.w byte_17CF8-Ani_Eggman
00018114 0000                       		dc.w byte_17CFC-Ani_Eggman
00018116 0000                       		dc.w byte_17D00-Ani_Eggman
00018118 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001811C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018120 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018124 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018128 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001812C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018130 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018134 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018138 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001813C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018140 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018144 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018150                            		even
00018150                            		even
00018150                            
00018150                            ; ---------------------------------------------------------------------------
00018150                            ; Sprite mappings - Eggman (boss levels)
00018150                            ; ---------------------------------------------------------------------------
00018150                            Map_Eggman:
00018150                            	include "_maps\Eggman.asm"
00018150                            ; ---------------------------------------------------------------------------
00018150                            ; Sprite mappings - Eggman (boss levels)
00018150                            ; ---------------------------------------------------------------------------
00018150 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00018154 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00018158 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
0001815C 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00018160 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00018164 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00018168 0000                       		dc.w byte_17DC8-Map_Eggman
0001816A 06                         byte_17D26:	dc.b 6
0001816B EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00018170 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00018175 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
0001817A FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0001817F 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00018184 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00018189 02                         byte_17D45:	dc.b 2
0001818A E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001818F EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00018194 02                         byte_17D50:	dc.b 2
00018195 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001819A EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001819F 03                         byte_17D5B:	dc.b 3
000181A0 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
000181A5 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
000181AA EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
000181AF 03                         byte_17D6B:	dc.b 3
000181B0 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
000181B5 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
000181BA EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
000181BF 03                         byte_17D7B:	dc.b 3
000181C0 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
000181C5 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
000181CA EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
000181CF 03                         byte_17D8B:	dc.b 3
000181D0 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
000181D5 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000181DA EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
000181DF 04                         byte_17D9B:	dc.b 4
000181E0 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
000181E5 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
000181EA EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
000181EF EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
000181F4 01                         byte_17DB0:	dc.b 1
000181F5 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
000181FA 01                         byte_17DB6:	dc.b 1
000181FB 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00018200 00                         byte_17DBC:	dc.b 0
00018201 02                         byte_17DBD:	dc.b 2
00018202 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00018207 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001820C 02                         byte_17DC8:	dc.b 2
0001820D F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00018212 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00018218 00                         		even
00018218 00                         		even
00018218                            
00018218                            ; ---------------------------------------------------------------------------
00018218                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018218                            ; ---------------------------------------------------------------------------
00018218                            Map_BossItems:
00018218                            	include "_maps\Boss items.asm"
00018218                            ; ---------------------------------------------------------------------------
00018218                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018218                            ; ---------------------------------------------------------------------------
00018218 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001821C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018220 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018224 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018228 01                         byte_17DE4:	dc.b 1
00018229 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001822E 02                         byte_17DEA:	dc.b 2
0001822F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018234 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018239 00                         		dc.b 0
0001823A 01                         byte_17DF6:	dc.b 1
0001823B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018240 01                         byte_17DFC:	dc.b 1
00018241 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018246 01                         byte_17E02:	dc.b 1
00018247 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001824C 04                         byte_17E08:	dc.b 4
0001824D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018252 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018257 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001825C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018261 00                         		dc.b 0
00018262 02                         byte_17E1E:	dc.b 2
00018263 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018268 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001826D 00                         		dc.b 0
0001826E 02                         byte_17E2A:	dc.b 2
0001826F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018274 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001827A 00                         		even
0001827A 00                         		even
0001827A                            
0001827A                            ; ===========================================================================
0001827A                            ; ---------------------------------------------------------------------------
0001827A                            ; Object 77 - Eggman (LZ)
0001827A                            ; ---------------------------------------------------------------------------
0001827A                            
0001827A                            Obj77:					; XREF: Obj_Index
0001827A 7000                       		moveq	#0,d0
0001827C 1028 0024                  		move.b	$24(a0),d0
00018280 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018284 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018288                            ; ===========================================================================
00018288 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001828A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001828C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001828E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018290                            
00018290 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018292 0401                       		dc.b 4,	1
00018294 0607                       		dc.b 6,	7
00018296                            ; ===========================================================================
00018296                            
00018296                            Obj77_Main:				; XREF: Obj77_Index
00018296 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001829C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000182A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000182A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000182AE 117C 000F 0020             		move.b	#$F,$20(a0)
000182B4                            		include "_param\bosshits.asm"
000182B4 117C 0008 0021                            move.b  #8,$21(a0)
000182B4 117C 0008 0021                            move.b  #8,$21(a0)
000182BA 117C 0004 0018             		move.b	#4,$18(a0)
000182C0 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
000182C4 2248                       		movea.l	a0,a1
000182C6 7202                       		moveq	#2,d1
000182C8 6000                       		bra.s	Obj77_LoadBoss
000182CA                            ; ===========================================================================
000182CA                            
000182CA                            Obj77_Loop:
000182CA 4EB9 0000 DA4C             		jsr	SingleObjLoad2
000182D0 6600                       		bne.s	Obj77_ShipMain
000182D2 12BC 0077                  		move.b	#$77,0(a1)
000182D6 3368 0008 0008             		move.w	8(a0),8(a1)
000182DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000182E2                            
000182E2                            Obj77_LoadBoss:				; XREF: Obj77_Main
000182E2 08A8 0000 0022             		bclr	#0,$22(a0)
000182E8 4229 0025                  		clr.b	$25(a1)
000182EC 135A 0024                  		move.b	(a2)+,$24(a1)
000182F0 135A 001C                  		move.b	(a2)+,$1C(a1)
000182F4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000182FA 237C 0001 8150 0004        		move.l	#Map_Eggman,4(a1)
00018302 337C 0400 0002             		move.w	#$400,2(a1)
00018308 137C 0004 0001             		move.b	#4,1(a1)
0001830E 137C 0020 0019             		move.b	#$20,$19(a1)
00018314 2348 0034                  		move.l	a0,$34(a1)
00018318 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001831C                            
0001831C                            Obj77_ShipMain:
0001831C 43F8 D000                  		lea	($FFFFD000).w,a1
00018320 7000                       		moveq	#0,d0
00018322 1028 0025                  		move.b	$25(a0),d0
00018326 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001832A 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001832E 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
00018334 4EB9 0000 A6EC             		jsr	AnimateSprite
0001833A 7003                       		moveq	#3,d0
0001833C C028 0022                  		and.b	$22(a0),d0
00018340 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018346 8128 0001                  		or.b	d0,1(a0)
0001834A 4EF9 0000 D5B0             		jmp	DisplaySprite
00018350                            ; ===========================================================================
00018350 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018354 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018358 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001835C 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018360                            ; ===========================================================================
00018360                            
00018360                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018360 3029 0008                  		move.w	8(a1),d0
00018364 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018368 6500                       		bcs.s	loc_17F38
0001836A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018370 317C 0060 0010             		move.w	#$60,$10(a0)
00018376 5428 0025                  		addq.b	#2,$25(a0)
0001837A                            
0001837A                            loc_17F38:
0001837A 6100 F974                  		bsr.w	BossMove
0001837E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018384 3168 0030 0008             		move.w	$30(a0),8(a0)
0001838A                            
0001838A                            loc_17F48:
0001838A 4A28 003D                  		tst.b	$3D(a0)
0001838E 6600                       		bne.s	loc_17F8E
00018390 4A28 0022                  		tst.b	$22(a0)
00018394 6B00                       		bmi.s	loc_17F92
00018396 4A28 0020                  		tst.b	$20(a0)
0001839A 6600                       		bne.s	locret_17F8C
0001839C 4A28 003E                  		tst.b	$3E(a0)
000183A0 6600                       		bne.s	loc_17F70
000183A2 117C 0020 003E             		move.b	#$20,$3E(a0)
000183A8 303C 00AC                  		move.w	#$AC,d0
000183AC 4EB9 0000 12CC             		jsr	(PlaySound_Special).l
000183B2                            
000183B2                            loc_17F70:
000183B2 43F8 FB22                  		lea	($FFFFFB22).w,a1
000183B6 7000                       		moveq	#0,d0
000183B8 4A51                       		tst.w	(a1)
000183BA 6600                       		bne.s	loc_17F7E
000183BC 303C 0EEE                  		move.w	#$EEE,d0
000183C0                            
000183C0                            loc_17F7E:
000183C0 3280                       		move.w	d0,(a1)
000183C2 5328 003E                  		subq.b	#1,$3E(a0)
000183C6 6600                       		bne.s	locret_17F8C
000183C8 117C 000F 0020             		move.b	#$F,$20(a0)
000183CE                            
000183CE                            locret_17F8C:
000183CE 4E75                       		rts	
000183D0                            ; ===========================================================================
000183D0                            
000183D0                            loc_17F8E:				; XREF: loc_17F48
000183D0 6000 F8DC                  		bra.w	BossDefeated
000183D4                            ; ===========================================================================
000183D4                            
000183D4                            loc_17F92:				; XREF: loc_17F48
000183D4 7064                       		moveq	#100,d0
000183D6 6100 0000                  		bsr.w	AddPoints
000183DA 117C 00FF 003D             		move.b	#-1,$3D(a0)
000183E0 4E75                       		rts	
000183E2                            ; ===========================================================================
000183E2                            
000183E2                            loc_17FA0:				; XREF: Obj77_ShipIndex
000183E2 70FE                       		moveq	#-2,d0
000183E4 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000183EA 6500                       		bcs.s	loc_17FB6
000183EC 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000183F2 4268 0010                  		clr.w	$10(a0)
000183F6 5240                       		addq.w	#1,d0
000183F8                            
000183F8                            loc_17FB6:
000183F8 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000183FE 6E00                       		bgt.s	loc_17FCA
00018400 317C 0500 0038             		move.w	#$500,$38(a0)
00018406 4268 0012                  		clr.w	$12(a0)
0001840A 5240                       		addq.w	#1,d0
0001840C                            
0001840C                            loc_17FCA:
0001840C 6600                       		bne.s	loc_17FDC
0001840E 317C 0140 0010             		move.w	#$140,$10(a0)
00018414 317C FE00 0012             		move.w	#-$200,$12(a0)
0001841A 5428 0025                  		addq.b	#2,$25(a0)
0001841E                            
0001841E                            loc_17FDC:
0001841E 6000 FF5A                  		bra.w	loc_17F38
00018422                            ; ===========================================================================
00018422                            
00018422                            loc_17FE0:				; XREF: Obj77_ShipIndex
00018422 70FE                       		moveq	#-2,d0
00018424 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001842A 6500                       		bcs.s	loc_17FF6
0001842C 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018432 4268 0010                  		clr.w	$10(a0)
00018436 5240                       		addq.w	#1,d0
00018438                            
00018438                            loc_17FF6:
00018438 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001843E 6E00                       		bgt.s	loc_1800A
00018440 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018446 4268 0012                  		clr.w	$12(a0)
0001844A 5240                       		addq.w	#1,d0
0001844C                            
0001844C                            loc_1800A:
0001844C 6600                       		bne.s	loc_1801A
0001844E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018454 5428 0025                  		addq.b	#2,$25(a0)
00018458 4228 003F                  		clr.b	$3F(a0)
0001845C                            
0001845C                            loc_1801A:
0001845C 6000 FF1C                  		bra.w	loc_17F38
00018460                            ; ===========================================================================
00018460                            
00018460                            loc_1801E:				; XREF: Obj77_ShipIndex
00018460 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018466 6E00                       		bgt.s	loc_1804E
00018468 317C 0100 0038             		move.w	#$100,$38(a0)
0001846E 317C 0140 0010             		move.w	#$140,$10(a0)
00018474 317C FF80 0012             		move.w	#-$80,$12(a0)
0001847A 4A28 003D                  		tst.b	$3D(a0)
0001847E 6700                       		beq.s	loc_18046
00018480 E1E8 0010                  		asl	$10(a0)
00018484 E1E8 0012                  		asl	$12(a0)
00018488                            
00018488                            loc_18046:
00018488 5428 0025                  		addq.b	#2,$25(a0)
0001848C 6000 FEEC                  		bra.w	loc_17F38
00018490                            ; ===========================================================================
00018490                            
00018490                            loc_1804E:
00018490 08E8 0000 0022             		bset	#0,$22(a0)
00018496 5428 003F                  		addq.b	#2,$3F(a0)
0001849A 1028 003F                  		move.b	$3F(a0),d0
0001849E 4EB9 0000 29BA             		jsr	(CalcSine).l
000184A4 4A41                       		tst.w	d1
000184A6 6A00                       		bpl.s	loc_1806C
000184A8 08A8 0000 0022             		bclr	#0,$22(a0)
000184AE                            
000184AE                            loc_1806C:
000184AE E840                       		asr.w	#4,d0
000184B0 4840                       		swap	d0
000184B2 4240                       		clr.w	d0
000184B4 D0A8 0030                  		add.l	$30(a0),d0
000184B8 4840                       		swap	d0
000184BA 3140 0008                  		move.w	d0,8(a0)
000184BE 3028 0012                  		move.w	$12(a0),d0
000184C2 3238 D00C                  		move.w	($FFFFD00C).w,d1
000184C6 9268 000C                  		sub.w	$C(a0),d1
000184CA 6500                       		bcs.s	loc_180A2
000184CC 0441 0048                  		subi.w	#$48,d1
000184D0 6500                       		bcs.s	loc_180A2
000184D2 E240                       		asr.w	#1,d0
000184D4 0441 0028                  		subi.w	#$28,d1
000184D8 6500                       		bcs.s	loc_180A2
000184DA E240                       		asr.w	#1,d0
000184DC 0441 0028                  		subi.w	#$28,d1
000184E0 6500                       		bcs.s	loc_180A2
000184E2 7000                       		moveq	#0,d0
000184E4                            
000184E4                            loc_180A2:
000184E4 48C0                       		ext.l	d0
000184E6 E180                       		asl.l	#8,d0
000184E8 4A28 003D                  		tst.b	$3D(a0)
000184EC 6700                       		beq.s	loc_180AE
000184EE D080                       		add.l	d0,d0
000184F0                            
000184F0                            loc_180AE:
000184F0 D1A8 0038                  		add.l	d0,$38(a0)
000184F4 3168 0038 000C             		move.w	$38(a0),$C(a0)
000184FA 6000 FE8E                  		bra.w	loc_17F48
000184FE                            ; ===========================================================================
000184FE                            
000184FE                            loc_180BC:				; XREF: Obj77_ShipIndex
000184FE 70FE                       		moveq	#-2,d0
00018500 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018506 6500                       		bcs.s	loc_180D2
00018508 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001850E 4268 0010                  		clr.w	$10(a0)
00018512 5240                       		addq.w	#1,d0
00018514                            
00018514                            loc_180D2:
00018514 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001851A 6E00                       		bgt.s	loc_180E6
0001851C 317C 00C0 0038             		move.w	#$C0,$38(a0)
00018522 4268 0012                  		clr.w	$12(a0)
00018526 5240                       		addq.w	#1,d0
00018528                            
00018528                            loc_180E6:
00018528 6600                       		bne.s	loc_180F2
0001852A 5428 0025                  		addq.b	#2,$25(a0)
0001852E 08A8 0000 0022             		bclr	#0,$22(a0)
00018534                            
00018534                            loc_180F2:
00018534 6000 FE44                  		bra.w	loc_17F38
00018538                            ; ===========================================================================
00018538                            
00018538                            loc_180F6:				; XREF: Obj77_ShipIndex
00018538 4A28 003D                  		tst.b	$3D(a0)
0001853C 6600                       		bne.s	loc_18112
0001853E 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018544 6D00                       		blt.s	loc_18126
00018546 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001854C 6E00                       		bgt.s	loc_18126
0001854E 117C 0032 003C             		move.b	#$32,$3C(a0)
00018554                            
00018554                            loc_18112:
00018554 303C 0086                  		move.w	#$86,d0
00018558 4EB9 0000 12C6             		jsr	(PlaySound).l	; play LZ music
0001855E 08E8 0000 0022             		bset	#0,$22(a0)
00018564 5428 0025                  		addq.b	#2,$25(a0)
00018568                            
00018568                            loc_18126:
00018568 6000 FE10                  		bra.w	loc_17F38
0001856C                            ; ===========================================================================
0001856C                            
0001856C                            loc_1812A:				; XREF: Obj77_ShipIndex
0001856C 4A28 003D                  		tst.b	$3D(a0)
00018570 6600                       		bne.s	loc_18136
00018572 5328 003C                  		subq.b	#1,$3C(a0)
00018576 6600                       		bne.s	loc_1814E
00018578                            
00018578                            loc_18136:
00018578 4228 003C                  		clr.b	$3C(a0)
0001857C 317C 0400 0010             		move.w	#$400,$10(a0)
00018582 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018588 4228 003D                  		clr.b	$3D(a0)
0001858C 5428 0025                  		addq.b	#2,$25(a0)
00018590                            
00018590                            loc_1814E:
00018590 6000 FDE8                  		bra.w	loc_17F38
00018594                            ; ===========================================================================
00018594                            
00018594                            loc_18152:				; XREF: Obj77_ShipIndex
00018594 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001859A 6400                       		bcc.s	loc_18160
0001859C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000185A0 6000                       		bra.s	loc_18166
000185A2                            ; ===========================================================================
000185A2                            
000185A2                            loc_18160:
000185A2 4A28 0001                  		tst.b	1(a0)
000185A6 6A00                       		bpl.s	Obj77_ShipDel
000185A8                            
000185A8                            loc_18166:
000185A8 6000 FDD0                  		bra.w	loc_17F38
000185AC                            ; ===========================================================================
000185AC                            
000185AC                            Obj77_ShipDel:
000185AC 4EF9 0000 D5EC             		jmp	DeleteObject
000185B2                            ; ===========================================================================
000185B2                            
000185B2                            Obj77_FaceMain:				; XREF: Obj77_Index
000185B2 2268 0034                  		movea.l	$34(a0),a1
000185B6 1011                       		move.b	(a1),d0
000185B8 B010                       		cmp.b	(a0),d0
000185BA 6600                       		bne.s	Obj77_FaceDel
000185BC 7000                       		moveq	#0,d0
000185BE 1029 0025                  		move.b	$25(a1),d0
000185C2 7201                       		moveq	#1,d1
000185C4 4A28 003D                  		tst.b	$3D(a0)
000185C8 6700                       		beq.s	loc_1818C
000185CA 720A                       		moveq	#$A,d1
000185CC 6000                       		bra.s	loc_181A0
000185CE                            ; ===========================================================================
000185CE                            
000185CE                            loc_1818C:
000185CE 4A29 0020                  		tst.b	$20(a1)
000185D2 6600                       		bne.s	loc_18196
000185D4 7205                       		moveq	#5,d1
000185D6 6000                       		bra.s	loc_181A0
000185D8                            ; ===========================================================================
000185D8                            
000185D8                            loc_18196:
000185D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000185DE 6500                       		bcs.s	loc_181A0
000185E0 7204                       		moveq	#4,d1
000185E2                            
000185E2                            loc_181A0:
000185E2 1141 001C                  		move.b	d1,$1C(a0)
000185E6 0C00 000E                  		cmpi.b	#$E,d0
000185EA 6600                       		bne.s	loc_181B6
000185EC 117C 0006 001C             		move.b	#6,$1C(a0)
000185F2 4A28 0001                  		tst.b	1(a0)
000185F6 6A00                       		bpl.s	Obj77_FaceDel
000185F8                            
000185F8                            loc_181B6:
000185F8 6000                       		bra.s	Obj77_Display
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            Obj77_FaceDel:
000185FA 4EF9 0000 D5EC             		jmp	DeleteObject
00018600                            ; ===========================================================================
00018600                            
00018600                            Obj77_FlameMain:			; XREF: Obj77_Index
00018600 117C 0007 001C             		move.b	#7,$1C(a0)
00018606 2268 0034                  		movea.l	$34(a0),a1
0001860A 1011                       		move.b	(a1),d0
0001860C B010                       		cmp.b	(a0),d0
0001860E 6600                       		bne.s	Obj77_FlameDel
00018610 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018616 6600                       		bne.s	loc_181F0
00018618 117C 000B 001C             		move.b	#$B,$1C(a0)
0001861E 4A28 0001                  		tst.b	1(a0)
00018622 6A00                       		bpl.s	Obj77_FlameDel
00018624 6000                       		bra.s	loc_181F0
00018626                            ; ===========================================================================
00018626 4A69 0010                  		tst.w	$10(a1)
0001862A 6700                       		beq.s	loc_181F0
0001862C 117C 0008 001C             		move.b	#8,$1C(a0)
00018632                            
00018632                            loc_181F0:
00018632 6000                       		bra.s	Obj77_Display
00018634                            ; ===========================================================================
00018634                            
00018634                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018634 4EF9 0000 D5EC             		jmp	DeleteObject
0001863A                            ; ===========================================================================
0001863A                            
0001863A                            Obj77_Display:
0001863A 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
00018640 4EB9 0000 A6EC             		jsr	AnimateSprite
00018646 2268 0034                  		movea.l	$34(a0),a1
0001864A 3169 0008 0008             		move.w	8(a1),8(a0)
00018650 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018656 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001865C 7003                       		moveq	#3,d0
0001865E C028 0022                  		and.b	$22(a0),d0
00018662 0228 00FC 0001             		andi.b	#-4,1(a0)
00018668 8128 0001                  		or.b	d0,1(a0)
0001866C 4EF9 0000 D5B0             		jmp	DisplaySprite
00018672                            ; ===========================================================================
00018672                            ; ---------------------------------------------------------------------------
00018672                            ; Object 73 - Eggman (MZ)
00018672                            ; ---------------------------------------------------------------------------
00018672                            
00018672                            Obj73:					; XREF: Obj_Index
00018672 7000                       		moveq	#0,d0
00018674 1028 0024                  		move.b	$24(a0),d0
00018678 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001867C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018680                            ; ===========================================================================
00018680 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018682 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018684 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018686 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018688 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001868A                            
0001868A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001868D 0401 04                    		dc.b 4,	1, 4
00018690 0607 04                    		dc.b 6,	7, 4
00018693 0800 03                    		dc.b 8,	0, 3
00018696                            ; ===========================================================================
00018696                            
00018696                            Obj73_Main:				; XREF: Obj73_Index
00018696 3168 0008 0030             		move.w	8(a0),$30(a0)
0001869C 3168 000C 0038             		move.w	$C(a0),$38(a0)
000186A2 117C 000F 0020             		move.b	#$F,$20(a0)
000186A8                            		include "_param\bosshits.asm"
000186A8 117C 0008 0021                            move.b  #8,$21(a0)
000186A8 117C 0008 0021                            move.b  #8,$21(a0)
000186AE 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000186B2 2248                       		movea.l	a0,a1
000186B4 7203                       		moveq	#3,d1
000186B6 6000                       		bra.s	Obj73_LoadBoss
000186B8                            ; ===========================================================================
000186B8                            
000186B8                            Obj73_Loop:
000186B8 4EB9 0000 DA4C             		jsr	SingleObjLoad2
000186BE 6600                       		bne.s	Obj73_ShipMain
000186C0 12BC 0073                  		move.b	#$73,0(a1)
000186C4 3368 0008 0008             		move.w	8(a0),8(a1)
000186CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186D0                            
000186D0                            Obj73_LoadBoss:				; XREF: Obj73_Main
000186D0 08A8 0000 0022             		bclr	#0,$22(a0)
000186D6 4229 0025                  		clr.b	$25(a1)
000186DA 135A 0024                  		move.b	(a2)+,$24(a1)
000186DE 135A 001C                  		move.b	(a2)+,$1C(a1)
000186E2 135A 0018                  		move.b	(a2)+,$18(a1)
000186E6 237C 0001 8150 0004        		move.l	#Map_Eggman,4(a1)
000186EE 337C 0400 0002             		move.w	#$400,2(a1)
000186F4 137C 0004 0001             		move.b	#4,1(a1)
000186FA 137C 0020 0019             		move.b	#$20,$19(a1)
00018700 2348 0034                  		move.l	a0,$34(a1)
00018704 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018708                            
00018708                            Obj73_ShipMain:
00018708 7000                       		moveq	#0,d0
0001870A 1028 0025                  		move.b	$25(a0),d0
0001870E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018712 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018716 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
0001871C 4EB9 0000 A6EC             		jsr	AnimateSprite
00018722 7003                       		moveq	#3,d0
00018724 C028 0022                  		and.b	$22(a0),d0
00018728 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001872E 8128 0001                  		or.b	d0,1(a0)
00018732 4EF9 0000 D5B0             		jmp	DisplaySprite
00018738                            ; ===========================================================================
00018738 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001873A 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001873C 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001873E 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018740 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018742                            ; ===========================================================================
00018742                            
00018742                            loc_18302:				; XREF: Obj73_ShipIndex
00018742 1028 003F                  		move.b	$3F(a0),d0
00018746 5428 003F                  		addq.b	#2,$3F(a0)
0001874A 4EB9 0000 29BA             		jsr	(CalcSine).l
00018750 E440                       		asr.w	#2,d0
00018752 3140 0012                  		move.w	d0,$12(a0)
00018756 317C FF00 0010             		move.w	#-$100,$10(a0)
0001875C 6100 F592                  		bsr.w	BossMove
00018760 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018766 6600                       		bne.s	loc_18334
00018768 5428 0025                  		addq.b	#2,$25(a0)
0001876C 4228 0028                  		clr.b	$28(a0)
00018770 42A8 0010                  		clr.l	$10(a0)
00018774                            
00018774                            loc_18334:
00018774 4EB9 0000 2994             		jsr	(RandomNumber).l
0001877A 1140 0034                  		move.b	d0,$34(a0)
0001877E                            
0001877E                            loc_1833E:
0001877E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018784 3168 0030 0008             		move.w	$30(a0),8(a0)
0001878A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018790 6400                       		bcc.s	locret_18390
00018792 4A28 0022                  		tst.b	$22(a0)
00018796 6B00                       		bmi.s	loc_18392
00018798 4A28 0020                  		tst.b	$20(a0)
0001879C 6600                       		bne.s	locret_18390
0001879E 4A28 003E                  		tst.b	$3E(a0)
000187A2 6600                       		bne.s	loc_18374
000187A4 117C 0028 003E             		move.b	#$28,$3E(a0)
000187AA 303C 00AC                  		move.w	#$AC,d0
000187AE 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play boss damage sound
000187B4                            
000187B4                            loc_18374:
000187B4 43F8 FB22                  		lea	($FFFFFB22).w,a1
000187B8 7000                       		moveq	#0,d0
000187BA 4A51                       		tst.w	(a1)
000187BC 6600                       		bne.s	loc_18382
000187BE 303C 0EEE                  		move.w	#$EEE,d0
000187C2                            
000187C2                            loc_18382:
000187C2 3280                       		move.w	d0,(a1)
000187C4 5328 003E                  		subq.b	#1,$3E(a0)
000187C8 6600                       		bne.s	locret_18390
000187CA 117C 000F 0020             		move.b	#$F,$20(a0)
000187D0                            
000187D0                            locret_18390:
000187D0 4E75                       		rts	
000187D2                            ; ===========================================================================
000187D2                            
000187D2                            loc_18392:				; XREF: loc_1833E
000187D2 7064                       		moveq	#100,d0
000187D4 6100 0000                  		bsr.w	AddPoints
000187D8 117C 0004 0025             		move.b	#4,$25(a0)
000187DE 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000187E4 4268 0010                  		clr.w	$10(a0)
000187E8 4E75                       		rts	
000187EA                            ; ===========================================================================
000187EA                            
000187EA                            loc_183AA:				; XREF: Obj73_ShipIndex
000187EA 7000                       		moveq	#0,d0
000187EC 1028 0028                  		move.b	$28(a0),d0
000187F0 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000187F4 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000187F8 0228 0006 0028             		andi.b	#6,$28(a0)
000187FE 6000 FF7E                  		bra.w	loc_1833E
00018802                            ; ===========================================================================
00018802 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018804 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018806 0000                       		dc.w loc_183CA-off_183C2
00018808 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001880A                            ; ===========================================================================
0001880A                            
0001880A                            loc_183CA:				; XREF: off_183C2
0001880A 4A68 0010                  		tst.w	$10(a0)
0001880E 6600                       		bne.s	loc_183FE
00018810 7040                       		moveq	#$40,d0
00018812 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018818 6700                       		beq.s	loc_183E6
0001881A 6500                       		bcs.s	loc_183DE
0001881C 4440                       		neg.w	d0
0001881E                            
0001881E                            loc_183DE:
0001881E 3140 0012                  		move.w	d0,$12(a0)
00018822 6000 F4CC                  		bra.w	BossMove
00018826                            ; ===========================================================================
00018826                            
00018826                            loc_183E6:
00018826 317C 0200 0010             		move.w	#$200,$10(a0)
0001882C 317C 0100 0012             		move.w	#$100,$12(a0)
00018832 0828 0000 0022             		btst	#0,$22(a0)
00018838 6600                       		bne.s	loc_183FE
0001883A 4468 0010                  		neg.w	$10(a0)
0001883E                            
0001883E                            loc_183FE:
0001883E 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018844 6400                       		bcc.s	Obj73_MakeLava
00018846 6100 F4A8                  		bsr.w	BossMove
0001884A 5968 0012                  		subq.w	#4,$12(a0)
0001884E                            
0001884E                            Obj73_MakeLava:
0001884E 5328 0034                  		subq.b	#1,$34(a0)
00018852 6400                       		bcc.s	loc_1845C
00018854 4EB9 0000 DA36             		jsr	SingleObjLoad
0001885A 6600                       		bne.s	loc_1844A
0001885C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018860 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018866 4EB9 0000 2994             		jsr	(RandomNumber).l
0001886C 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018872 80FC 0050                  		divu.w	#$50,d0
00018876 4840                       		swap	d0
00018878 0640 1878                  		addi.w	#$1878,d0
0001887C 3340 0008                  		move.w	d0,8(a1)
00018880 EE09                       		lsr.b	#7,d1
00018882 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018888                            
00018888                            loc_1844A:
00018888 4EB9 0000 2994             		jsr	(RandomNumber).l
0001888E 0200 001F                  		andi.b	#$1F,d0
00018892 0600 0040                  		addi.b	#$40,d0
00018896 1140 0034                  		move.b	d0,$34(a0)
0001889A                            
0001889A                            loc_1845C:
0001889A 0828 0000 0022             		btst	#0,$22(a0)
000188A0 6700                       		beq.s	loc_18474
000188A2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000188A8 6D00                       		blt.s	locret_1849C
000188AA 317C 1910 0030             		move.w	#$1910,$30(a0)
000188B0 6000                       		bra.s	loc_18482
000188B2                            ; ===========================================================================
000188B2                            
000188B2                            loc_18474:
000188B2 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000188B8 6E00                       		bgt.s	locret_1849C
000188BA 317C 1830 0030             		move.w	#$1830,$30(a0)
000188C0                            
000188C0                            loc_18482:
000188C0 4268 0010                  		clr.w	$10(a0)
000188C4 317C FE80 0012             		move.w	#-$180,$12(a0)
000188CA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000188D0 6400                       		bcc.s	loc_18498
000188D2 4468 0012                  		neg.w	$12(a0)
000188D6                            
000188D6                            loc_18498:
000188D6 5428 0028                  		addq.b	#2,$28(a0)
000188DA                            
000188DA                            locret_1849C:
000188DA 4E75                       		rts	
000188DC                            ; ===========================================================================
000188DC                            
000188DC                            Obj73_MakeLava2:			; XREF: off_183C2
000188DC 6100 F412                  		bsr.w	BossMove
000188E0 3028 0038                  		move.w	$38(a0),d0
000188E4 0440 022C                  		subi.w	#$22C,d0
000188E8 6E00                       		bgt.s	locret_184F4
000188EA 303C 022C                  		move.w	#$22C,d0
000188EE 4A68 0012                  		tst.w	$12(a0)
000188F2 6700                       		beq.s	loc_184EA
000188F4 4268 0012                  		clr.w	$12(a0)
000188F8 317C 0050 003C             		move.w	#$50,$3C(a0)
000188FE 0868 0000 0022             		bchg	#0,$22(a0)
00018904 4EB9 0000 DA36             		jsr	SingleObjLoad
0001890A 6600                       		bne.s	loc_184EA
0001890C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018912 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018918 0669 0018 000C             		addi.w	#$18,$C(a1)
0001891E 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018922 137C 0001 0028             		move.b	#1,$28(a1)
00018928                            
00018928                            loc_184EA:
00018928 5368 003C                  		subq.w	#1,$3C(a0)
0001892C 6600                       		bne.s	locret_184F4
0001892E 5428 0028                  		addq.b	#2,$28(a0)
00018932                            
00018932                            locret_184F4:
00018932 4E75                       		rts	
00018934                            ; ===========================================================================
00018934                            
00018934                            loc_184F6:				; XREF: Obj73_ShipIndex
00018934 5368 003C                  		subq.w	#1,$3C(a0)
00018938 6B00                       		bmi.s	loc_18500
0001893A 6000 F372                  		bra.w	BossDefeated
0001893E                            ; ===========================================================================
0001893E                            
0001893E                            loc_18500:
0001893E 08E8 0000 0022             		bset	#0,$22(a0)
00018944 08A8 0007 0022             		bclr	#7,$22(a0)
0001894A 4268 0010                  		clr.w	$10(a0)
0001894E 5428 0025                  		addq.b	#2,$25(a0)
00018952 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018958 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001895C 6600                       		bne.s	locret_1852A
0001895E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018964 4268 0012                  		clr.w	$12(a0)
00018968                            
00018968                            locret_1852A:
00018968 4E75                       		rts	
0001896A                            ; ===========================================================================
0001896A                            
0001896A                            loc_1852C:				; XREF: Obj73_ShipIndex
0001896A 5268 003C                  		addq.w	#1,$3C(a0)
0001896E 6700                       		beq.s	loc_18544
00018970 6A00                       		bpl.s	loc_1854E
00018972 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018978 6400                       		bcc.s	loc_18544
0001897A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018980 6000                       		bra.s	loc_1857A
00018982                            ; ===========================================================================
00018982                            
00018982                            loc_18544:
00018982 4268 0012                  		clr.w	$12(a0)
00018986 4268 003C                  		clr.w	$3C(a0)
0001898A 6000                       		bra.s	loc_1857A
0001898C                            ; ===========================================================================
0001898C                            
0001898C                            loc_1854E:
0001898C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018992 6500                       		bcs.s	loc_18566
00018994 6700                       		beq.s	loc_1856C
00018996 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001899C 6500                       		bcs.s	loc_1857A
0001899E 5428 0025                  		addq.b	#2,$25(a0)
000189A2 6000                       		bra.s	loc_1857A
000189A4                            ; ===========================================================================
000189A4                            
000189A4                            loc_18566:
000189A4 5168 0012                  		subq.w	#8,$12(a0)
000189A8 6000                       		bra.s	loc_1857A
000189AA                            ; ===========================================================================
000189AA                            
000189AA                            loc_1856C:
000189AA 4268 0012                  		clr.w	$12(a0)
000189AE 303C 0089                  		move.w	#$89,d0
000189B2 4EB9 0000 12C6             		jsr	(PlaySound).l	; play MZ music
000189B8                            
000189B8                            loc_1857A:
000189B8 6100 F336                  		bsr.w	BossMove
000189BC 6000 FDC0                  		bra.w	loc_1833E
000189C0                            ; ===========================================================================
000189C0                            
000189C0                            loc_18582:				; XREF: Obj73_ShipIndex
000189C0 317C 0500 0010             		move.w	#$500,$10(a0)
000189C6 317C FFC0 0012             		move.w	#-$40,$12(a0)
000189CC 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000189D2 6400                       		bcc.s	loc_1859C
000189D4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000189D8 6000                       		bra.s	loc_185A2
000189DA                            ; ===========================================================================
000189DA                            
000189DA                            loc_1859C:
000189DA 4A28 0001                  		tst.b	1(a0)
000189DE 6A00                       		bpl.s	Obj73_ShipDel
000189E0                            
000189E0                            loc_185A2:
000189E0 6100 F30E                  		bsr.w	BossMove
000189E4 6000 FD98                  		bra.w	loc_1833E
000189E8                            ; ===========================================================================
000189E8                            
000189E8                            Obj73_ShipDel:
000189E8 4EF9 0000 D5EC             		jmp	DeleteObject
000189EE                            ; ===========================================================================
000189EE                            
000189EE                            Obj73_FaceMain:				; XREF: Obj73_Index
000189EE 7000                       		moveq	#0,d0
000189F0 7201                       		moveq	#1,d1
000189F2 2268 0034                  		movea.l	$34(a0),a1
000189F6 1029 0025                  		move.b	$25(a1),d0
000189FA 5540                       		subq.w	#2,d0
000189FC 6600                       		bne.s	loc_185D2
000189FE 0829 0001 0028             		btst	#1,$28(a1)
00018A04 6700                       		beq.s	loc_185DA
00018A06 4A69 0012                  		tst.w	$12(a1)
00018A0A 6600                       		bne.s	loc_185DA
00018A0C 7204                       		moveq	#4,d1
00018A0E 6000                       		bra.s	loc_185EE
00018A10                            ; ===========================================================================
00018A10                            
00018A10                            loc_185D2:
00018A10 5500                       		subq.b	#2,d0
00018A12 6B00                       		bmi.s	loc_185DA
00018A14 720A                       		moveq	#$A,d1
00018A16 6000                       		bra.s	loc_185EE
00018A18                            ; ===========================================================================
00018A18                            
00018A18                            loc_185DA:
00018A18 4A29 0020                  		tst.b	$20(a1)
00018A1C 6600                       		bne.s	loc_185E4
00018A1E 7205                       		moveq	#5,d1
00018A20 6000                       		bra.s	loc_185EE
00018A22                            ; ===========================================================================
00018A22                            
00018A22                            loc_185E4:
00018A22 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018A28 6500                       		bcs.s	loc_185EE
00018A2A 7204                       		moveq	#4,d1
00018A2C                            
00018A2C                            loc_185EE:
00018A2C 1141 001C                  		move.b	d1,$1C(a0)
00018A30 5900                       		subq.b	#4,d0
00018A32 6600                       		bne.s	loc_18602
00018A34 117C 0006 001C             		move.b	#6,$1C(a0)
00018A3A 4A28 0001                  		tst.b	1(a0)
00018A3E 6A00                       		bpl.s	Obj73_FaceDel
00018A40                            
00018A40                            loc_18602:
00018A40 6000                       		bra.s	Obj73_Display
00018A42                            ; ===========================================================================
00018A42                            
00018A42                            Obj73_FaceDel:
00018A42 4EF9 0000 D5EC             		jmp	DeleteObject
00018A48                            ; ===========================================================================
00018A48                            
00018A48                            Obj73_FlameMain:			; XREF: Obj73_Index
00018A48 117C 0007 001C             		move.b	#7,$1C(a0)
00018A4E 2268 0034                  		movea.l	$34(a0),a1
00018A52 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018A58 6D00                       		blt.s	loc_1862A
00018A5A 117C 000B 001C             		move.b	#$B,$1C(a0)
00018A60 4A28 0001                  		tst.b	1(a0)
00018A64 6A00                       		bpl.s	Obj73_FlameDel
00018A66 6000                       		bra.s	loc_18636
00018A68                            ; ===========================================================================
00018A68                            
00018A68                            loc_1862A:
00018A68 4A69 0010                  		tst.w	$10(a1)
00018A6C 6700                       		beq.s	loc_18636
00018A6E 117C 0008 001C             		move.b	#8,$1C(a0)
00018A74                            
00018A74                            loc_18636:
00018A74 6000                       		bra.s	Obj73_Display
00018A76                            ; ===========================================================================
00018A76                            
00018A76                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018A76 4EF9 0000 D5EC             		jmp	DeleteObject
00018A7C                            ; ===========================================================================
00018A7C                            
00018A7C                            Obj73_Display:
00018A7C 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
00018A82 4EB9 0000 A6EC             		jsr	AnimateSprite
00018A88                            
00018A88                            loc_1864A:
00018A88 2268 0034                  		movea.l	$34(a0),a1
00018A8C 3169 0008 0008             		move.w	8(a1),8(a0)
00018A92 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018A98 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018A9E 7003                       		moveq	#3,d0
00018AA0 C028 0022                  		and.b	$22(a0),d0
00018AA4 0228 00FC 0001             		andi.b	#-4,1(a0)
00018AAA 8128 0001                  		or.b	d0,1(a0)
00018AAE 4EF9 0000 D5B0             		jmp	DisplaySprite
00018AB4                            ; ===========================================================================
00018AB4                            
00018AB4                            Obj73_TubeMain:				; XREF: Obj73_Index
00018AB4 2268 0034                  		movea.l	$34(a0),a1
00018AB8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018ABE 6600                       		bne.s	loc_18688
00018AC0 4A28 0001                  		tst.b	1(a0)
00018AC4 6A00                       		bpl.s	Obj73_TubeDel
00018AC6                            
00018AC6                            loc_18688:
00018AC6 217C 0001 8218 0004        		move.l	#Map_BossItems,4(a0)
00018ACE 317C 246C 0002             		move.w	#$246C,2(a0)
00018AD4 117C 0004 001A             		move.b	#4,$1A(a0)
00018ADA 60AC                       		bra.s	loc_1864A
00018ADC                            ; ===========================================================================
00018ADC                            
00018ADC                            Obj73_TubeDel:
00018ADC 4EF9 0000 D5EC             		jmp	DeleteObject
00018AE2                            ; ===========================================================================
00018AE2                            ; ---------------------------------------------------------------------------
00018AE2                            ; Object 74 - lava that	Eggman drops (MZ)
00018AE2                            ; ---------------------------------------------------------------------------
00018AE2                            
00018AE2                            Obj74:					; XREF: Obj_Index
00018AE2 7000                       		moveq	#0,d0
00018AE4 1028 0024                  		move.b	$24(a0),d0
00018AE8 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018AEC 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018AF0 4EF9 0000 D5B0             		jmp	DisplaySprite
00018AF6                            ; ===========================================================================
00018AF6 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018AF8 0000                       		dc.w Obj74_Action-Obj74_Index
00018AFA 0000                       		dc.w loc_18886-Obj74_Index
00018AFC 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018AFE                            ; ===========================================================================
00018AFE                            
00018AFE                            Obj74_Main:				; XREF: Obj74_Index
00018AFE 117C 0008 0016             		move.b	#8,$16(a0)
00018B04 117C 0008 0017             		move.b	#8,$17(a0)
00018B0A 217C 0000 B33E 0004        		move.l	#Map_obj14,4(a0)
00018B12 317C 0345 0002             		move.w	#$345,2(a0)
00018B18 117C 0004 0001             		move.b	#4,1(a0)
00018B1E 117C 0005 0018             		move.b	#5,$18(a0)
00018B24 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B2A 117C 0008 0019             		move.b	#8,$19(a0)
00018B30 5428 0024                  		addq.b	#2,$24(a0)
00018B34 4A28 0028                  		tst.b	$28(a0)
00018B38 6600                       		bne.s	loc_1870A
00018B3A 117C 008B 0020             		move.b	#$8B,$20(a0)
00018B40 5428 0024                  		addq.b	#2,$24(a0)
00018B44 6000 0000                  		bra.w	loc_18886
00018B48                            ; ===========================================================================
00018B48                            
00018B48                            loc_1870A:
00018B48 117C 001E 0029             		move.b	#$1E,$29(a0)
00018B4E 303C 00AE                  		move.w	#$AE,d0
00018B52 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play lava sound
00018B58                            
00018B58                            Obj74_Action:				; XREF: Obj74_Index
00018B58 7000                       		moveq	#0,d0
00018B5A 1028 0025                  		move.b	$25(a0),d0
00018B5E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018B62 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018B66 4EB9 0000 D58A             		jsr	SpeedToPos
00018B6C 43F9 0000 E46A             		lea	(Ani_obj14).l,a1
00018B72 4EB9 0000 A6EC             		jsr	AnimateSprite
00018B78 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018B7E 6200                       		bhi.s	Obj74_Delete
00018B80 4E75                       		rts	
00018B82                            ; ===========================================================================
00018B82                            
00018B82                            Obj74_Delete:
00018B82 4EF9 0000 D5EC             		jmp	DeleteObject
00018B88                            ; ===========================================================================
00018B88 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018B8A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018B8C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018B8E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018B90                            ; ===========================================================================
00018B90                            
00018B90                            Obj74_Drop:				; XREF: Obj74_Index2
00018B90 08E8 0001 0022             		bset	#1,$22(a0)
00018B96 5328 0029                  		subq.b	#1,$29(a0)
00018B9A 6A00                       		bpl.s	locret_18780
00018B9C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018BA2 4228 0028                  		clr.b	$28(a0)
00018BA6 0668 0018 0012             		addi.w	#$18,$12(a0)
00018BAC 08A8 0001 0022             		bclr	#1,$22(a0)
00018BB2 6100 C6CC                  		bsr.w	ObjHitFloor
00018BB6 4A41                       		tst.w	d1
00018BB8 6A00                       		bpl.s	locret_18780
00018BBA 5428 0025                  		addq.b	#2,$25(a0)
00018BBE                            
00018BBE                            locret_18780:
00018BBE 4E75                       		rts	
00018BC0                            ; ===========================================================================
00018BC0                            
00018BC0                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018BC0 5568 000C                  		subq.w	#2,$C(a0)
00018BC4 08E8 0007 0002             		bset	#7,2(a0)
00018BCA 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018BD0 4268 0012                  		clr.w	$12(a0)
00018BD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00018BDA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018BE0 117C 0003 0029             		move.b	#3,$29(a0)
00018BE6 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00018BEC 6600                       		bne.s	loc_187CA
00018BEE 47D1                       		lea	(a1),a3
00018BF0 45D0                       		lea	(a0),a2
00018BF2 7003                       		moveq	#3,d0
00018BF4                            
00018BF4                            Obj74_Loop:
00018BF4 26DA                       		move.l	(a2)+,(a3)+
00018BF6 26DA                       		move.l	(a2)+,(a3)+
00018BF8 26DA                       		move.l	(a2)+,(a3)+
00018BFA 26DA                       		move.l	(a2)+,(a3)+
00018BFC 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018C00                            
00018C00 4469 0010                  		neg.w	$10(a1)
00018C04 5429 0025                  		addq.b	#2,$25(a1)
00018C08                            
00018C08                            loc_187CA:
00018C08 5428 0025                  		addq.b	#2,$25(a0)
00018C0C 4E75                       		rts	
00018C0E                            
00018C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018C0E                            
00018C0E                            
00018C0E                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018C0E 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00018C14 6600                       		bne.s	locret_187EE
00018C16 3368 0008 0008             		move.w	8(a0),8(a1)
00018C1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C22 12BC 0074                  		move.b	#$74,(a1)
00018C26 337C 0067 0028             		move.w	#$67,$28(a1)
00018C2C                            
00018C2C                            locret_187EE:
00018C2C 4E75                       		rts	
00018C2E                            ; End of function Obj74_Duplicate2
00018C2E                            
00018C2E                            ; ===========================================================================
00018C2E                            
00018C2E                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018C2E 6100 C650                  		bsr.w	ObjHitFloor
00018C32 4A41                       		tst.w	d1
00018C34 6A00                       		bpl.s	loc_18826
00018C36 3028 0008                  		move.w	8(a0),d0
00018C3A 0C40 1940                  		cmpi.w	#$1940,d0
00018C3E 6E00                       		bgt.s	loc_1882C
00018C40 3228 0030                  		move.w	$30(a0),d1
00018C44 B240                       		cmp.w	d0,d1
00018C46 6700                       		beq.s	loc_1881E
00018C48 0240 0010                  		andi.w	#$10,d0
00018C4C 0241 0010                  		andi.w	#$10,d1
00018C50 B240                       		cmp.w	d0,d1
00018C52 6700                       		beq.s	loc_1881E
00018C54 61B8                       		bsr.s	Obj74_Duplicate2
00018C56 3168 0008 0032             		move.w	8(a0),$32(a0)
00018C5C                            
00018C5C                            loc_1881E:
00018C5C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018C62 4E75                       		rts	
00018C64                            ; ===========================================================================
00018C64                            
00018C64                            loc_18826:
00018C64 5428 0025                  		addq.b	#2,$25(a0)
00018C68 4E75                       		rts	
00018C6A                            ; ===========================================================================
00018C6A                            
00018C6A                            loc_1882C:
00018C6A 5428 0024                  		addq.b	#2,$24(a0)
00018C6E 4E75                       		rts	
00018C70                            ; ===========================================================================
00018C70                            
00018C70                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018C70 08A8 0001 0022             		bclr	#1,$22(a0)
00018C76 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018C7C 3028 0008                  		move.w	8(a0),d0
00018C80 9068 0032                  		sub.w	$32(a0),d0
00018C84 6A00                       		bpl.s	loc_1884A
00018C86 4440                       		neg.w	d0
00018C88                            
00018C88                            loc_1884A:
00018C88 0C40 0012                  		cmpi.w	#$12,d0
00018C8C 6600                       		bne.s	loc_18856
00018C8E 08A8 0007 0002             		bclr	#7,2(a0)
00018C94                            
00018C94                            loc_18856:
00018C94 6100 C5EA                  		bsr.w	ObjHitFloor
00018C98 4A41                       		tst.w	d1
00018C9A 6A00                       		bpl.s	locret_1887E
00018C9C 5328 0029                  		subq.b	#1,$29(a0)
00018CA0 6700                       		beq.s	Obj74_Delete2
00018CA2 4268 0012                  		clr.w	$12(a0)
00018CA6 3168 0032 0008             		move.w	$32(a0),8(a0)
00018CAC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018CB2 08E8 0007 0002             		bset	#7,2(a0)
00018CB8 5528 0025                  		subq.b	#2,$25(a0)
00018CBC                            
00018CBC                            locret_1887E:
00018CBC 4E75                       		rts	
00018CBE                            ; ===========================================================================
00018CBE                            
00018CBE                            Obj74_Delete2:
00018CBE 4EF9 0000 D5EC             		jmp	DeleteObject
00018CC4                            ; ===========================================================================
00018CC4                            
00018CC4                            loc_18886:				; XREF: Obj74_Index
00018CC4 08E8 0007 0002             		bset	#7,2(a0)
00018CCA 5328 0029                  		subq.b	#1,$29(a0)
00018CCE 6600                       		bne.s	Obj74_Animate
00018CD0 117C 0001 001C             		move.b	#1,$1C(a0)
00018CD6 5968 000C                  		subq.w	#4,$C(a0)
00018CDA 4228 0020                  		clr.b	$20(a0)
00018CDE                            
00018CDE                            Obj74_Animate:
00018CDE 43F9 0000 E46A             		lea	(Ani_obj14).l,a1
00018CE4 4EF9 0000 A6EC             		jmp	AnimateSprite
00018CEA                            ; ===========================================================================
00018CEA                            
00018CEA                            Obj74_Delete3:				; XREF: Obj74_Index
00018CEA 4EF9 0000 D5EC             		jmp	DeleteObject
00018CF0                            ; ===========================================================================
00018CF0                            
00018CF0                            Obj7A_Delete:
00018CF0 4EF9 0000 D5EC             		jmp	DeleteObject
00018CF6                            ; ===========================================================================
00018CF6                            ; ---------------------------------------------------------------------------
00018CF6                            ; Object 7A - Eggman (SLZ)
00018CF6                            ; ---------------------------------------------------------------------------
00018CF6                            
00018CF6                            Obj7A:					; XREF: Obj_Index
00018CF6 7000                       		moveq	#0,d0
00018CF8 1028 0024                  		move.b	$24(a0),d0
00018CFC 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018D00 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018D04                            ; ===========================================================================
00018D04 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018D06 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018D08 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018D0A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018D0C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018D0E                            
00018D0E 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D11 0401 04                    		dc.b 4,	1, 4
00018D14 0607 04                    		dc.b 6,	7, 4
00018D17 0800 03                    		dc.b 8,	0, 3
00018D1A                            ; ===========================================================================
00018D1A                            
00018D1A                            Obj7A_Main:				; XREF: Obj7A_Index
00018D1A 317C 2188 0008             		move.w	#$2188,8(a0)
00018D20 317C 0228 000C             		move.w	#$228,$C(a0)
00018D26 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D2C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D32 117C 000F 0020             		move.b	#$F,$20(a0)
00018D38                            		include "_param\bosshits.asm"
00018D38 117C 0008 0021                            move.b  #8,$21(a0)
00018D38 117C 0008 0021                            move.b  #8,$21(a0)
00018D3E 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018D42 2248                       		movea.l	a0,a1
00018D44 7203                       		moveq	#3,d1
00018D46 6000                       		bra.s	Obj7A_LoadBoss
00018D48                            ; ===========================================================================
00018D48                            
00018D48                            Obj7A_Loop:
00018D48 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00018D4E 6600                       		bne.s	loc_1895C
00018D50 12BC 007A                  		move.b	#$7A,0(a1)
00018D54 3368 0008 0008             		move.w	8(a0),8(a1)
00018D5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018D60                            
00018D60                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018D60 08A8 0000 0022             		bclr	#0,$22(a0)
00018D66 4229 0025                  		clr.b	$25(a1)
00018D6A 135A 0024                  		move.b	(a2)+,$24(a1)
00018D6E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018D72 135A 0018                  		move.b	(a2)+,$18(a1)
00018D76 237C 0001 8150 0004        		move.l	#Map_Eggman,4(a1)
00018D7E 337C 0400 0002             		move.w	#$400,2(a1)
00018D84 137C 0004 0001             		move.b	#4,1(a1)
00018D8A 137C 0020 0019             		move.b	#$20,$19(a1)
00018D90 2348 0034                  		move.l	a0,$34(a1)
00018D94 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018D98                            
00018D98                            loc_1895C:
00018D98 43F8 D040                  		lea	($FFFFD040).w,a1
00018D9C 45E8 002A                  		lea	$2A(a0),a2
00018DA0 705E                       		moveq	#$5E,d0
00018DA2 723E                       		moveq	#$3E,d1
00018DA4                            
00018DA4                            loc_18968:
00018DA4 B011                       		cmp.b	(a1),d0
00018DA6 6600                       		bne.s	loc_18974
00018DA8 4A29 0028                  		tst.b	$28(a1)
00018DAC 6700                       		beq.s	loc_18974
00018DAE 34C9                       		move.w	a1,(a2)+
00018DB0                            
00018DB0                            loc_18974:
00018DB0 D2FC 0040                  		adda.w	#$40,a1
00018DB4 51C9 FFEE                  		dbf	d1,loc_18968
00018DB8                            
00018DB8                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018DB8 7000                       		moveq	#0,d0
00018DBA 1028 0025                  		move.b	$25(a0),d0
00018DBE 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018DC2 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018DC6 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
00018DCC 4EB9 0000 A6EC             		jsr	AnimateSprite
00018DD2 7003                       		moveq	#3,d0
00018DD4 C028 0022                  		and.b	$22(a0),d0
00018DD8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018DDE 8128 0001                  		or.b	d0,1(a0)
00018DE2 4EF9 0000 D5B0             		jmp	DisplaySprite
00018DE8                            ; ===========================================================================
00018DE8 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018DEA 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018DEC 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018DEE 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018DF0 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018DF2 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018DF4                            ; ===========================================================================
00018DF4                            
00018DF4                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018DF4 317C FF00 0010             		move.w	#-$100,$10(a0)
00018DFA 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018E00 6400                       		bcc.s	loc_189CA
00018E02 5428 0025                  		addq.b	#2,$25(a0)
00018E06                            
00018E06                            loc_189CA:
00018E06 6100 EEE8                  		bsr.w	BossMove
00018E0A 1028 003F                  		move.b	$3F(a0),d0
00018E0E 5428 003F                  		addq.b	#2,$3F(a0)
00018E12 4EB9 0000 29BA             		jsr	(CalcSine).l
00018E18 EC40                       		asr.w	#6,d0
00018E1A D068 0038                  		add.w	$38(a0),d0
00018E1E 3140 000C                  		move.w	d0,$C(a0)
00018E22 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E28 6000                       		bra.s	loc_189FE
00018E2A                            ; ===========================================================================
00018E2A                            
00018E2A                            loc_189EE:
00018E2A 6100 EEC4                  		bsr.w	BossMove
00018E2E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E34 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E3A                            
00018E3A                            loc_189FE:
00018E3A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018E40 6400                       		bcc.s	locret_18A44
00018E42 4A28 0022                  		tst.b	$22(a0)
00018E46 6B00                       		bmi.s	loc_18A46
00018E48 4A28 0020                  		tst.b	$20(a0)
00018E4C 6600                       		bne.s	locret_18A44
00018E4E 4A28 003E                  		tst.b	$3E(a0)
00018E52 6600                       		bne.s	loc_18A28
00018E54 117C 0020 003E             		move.b	#$20,$3E(a0)
00018E5A 303C 00AC                  		move.w	#$AC,d0
00018E5E 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018E64                            
00018E64                            loc_18A28:
00018E64 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018E68 7000                       		moveq	#0,d0
00018E6A 4A51                       		tst.w	(a1)
00018E6C 6600                       		bne.s	loc_18A36
00018E6E 303C 0EEE                  		move.w	#$EEE,d0
00018E72                            
00018E72                            loc_18A36:
00018E72 3280                       		move.w	d0,(a1)
00018E74 5328 003E                  		subq.b	#1,$3E(a0)
00018E78 6600                       		bne.s	locret_18A44
00018E7A 117C 000F 0020             		move.b	#$F,$20(a0)
00018E80                            
00018E80                            locret_18A44:
00018E80 4E75                       		rts	
00018E82                            ; ===========================================================================
00018E82                            
00018E82                            loc_18A46:
00018E82 7064                       		moveq	#100,d0
00018E84 6100 0000                  		bsr.w	AddPoints
00018E88 117C 0006 0025             		move.b	#6,$25(a0)
00018E8E 117C 0078 003C             		move.b	#$78,$3C(a0)
00018E94 4268 0010                  		clr.w	$10(a0)
00018E98 4E75                       		rts	
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018E9A 3028 0030                  		move.w	$30(a0),d0
00018E9E 317C 0200 0010             		move.w	#$200,$10(a0)
00018EA4 0828 0000 0022             		btst	#0,$22(a0)
00018EAA 6600                       		bne.s	loc_18A7C
00018EAC 4468 0010                  		neg.w	$10(a0)
00018EB0 0C40 2008                  		cmpi.w	#$2008,d0
00018EB4 6E00                       		bgt.s	loc_18A88
00018EB6 6000                       		bra.s	loc_18A82
00018EB8                            ; ===========================================================================
00018EB8                            
00018EB8                            loc_18A7C:
00018EB8 0C40 2138                  		cmpi.w	#$2138,d0
00018EBC 6D00                       		blt.s	loc_18A88
00018EBE                            
00018EBE                            loc_18A82:
00018EBE 0868 0000 0022             		bchg	#0,$22(a0)
00018EC4                            
00018EC4                            loc_18A88:
00018EC4 3028 0008                  		move.w	8(a0),d0
00018EC8 72FF                       		moveq	#-1,d1
00018ECA 7402                       		moveq	#2,d2
00018ECC 45E8 002A                  		lea	$2A(a0),a2
00018ED0 7828                       		moveq	#$28,d4
00018ED2 4A68 0010                  		tst.w	$10(a0)
00018ED6 6A00                       		bpl.s	loc_18A9E
00018ED8 4444                       		neg.w	d4
00018EDA                            
00018EDA                            loc_18A9E:
00018EDA 321A                       		move.w	(a2)+,d1
00018EDC 2641                       		movea.l	d1,a3
00018EDE 082B 0003 0022             		btst	#3,$22(a3)
00018EE4 6600                       		bne.s	loc_18AB4
00018EE6 362B 0008                  		move.w	8(a3),d3
00018EEA D644                       		add.w	d4,d3
00018EEC 9640                       		sub.w	d0,d3
00018EEE 6700                       		beq.s	loc_18AC0
00018EF0                            
00018EF0                            loc_18AB4:
00018EF0 51CA FFE8                  		dbf	d2,loc_18A9E
00018EF4                            
00018EF4 1142 0028                  		move.b	d2,$28(a0)
00018EF8 6000 FF0C                  		bra.w	loc_189CA
00018EFC                            ; ===========================================================================
00018EFC                            
00018EFC                            loc_18AC0:
00018EFC 1142 0028                  		move.b	d2,$28(a0)
00018F00 5428 0025                  		addq.b	#2,$25(a0)
00018F04 117C 0028 003C             		move.b	#$28,$3C(a0)
00018F0A 6000 FEFA                  		bra.w	loc_189CA
00018F0E                            ; ===========================================================================
00018F0E                            
00018F0E                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018F0E 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018F14 6600                       		bne.s	loc_18B36
00018F16 70FF                       		moveq	#-1,d0
00018F18 1028 0028                  		move.b	$28(a0),d0
00018F1C 4880                       		ext.w	d0
00018F1E 6B00                       		bmi.s	loc_18B40
00018F20 5540                       		subq.w	#2,d0
00018F22 4440                       		neg.w	d0
00018F24 D040                       		add.w	d0,d0
00018F26 43E8 002A                  		lea	$2A(a0),a1
00018F2A 3031 0000                  		move.w	(a1,d0.w),d0
00018F2E 2440                       		movea.l	d0,a2
00018F30 43F8 D040                  		lea	($FFFFD040).w,a1
00018F34 723E                       		moveq	#$3E,d1
00018F36                            
00018F36                            loc_18AFA:
00018F36 B0A9 003C                  		cmp.l	$3C(a1),d0
00018F3A 6700                       		beq.s	loc_18B40
00018F3C D2FC 0040                  		adda.w	#$40,a1
00018F40 51C9 FFF4                  		dbf	d1,loc_18AFA
00018F44                            
00018F44 2F08                       		move.l	a0,-(sp)
00018F46 41D2                       		lea	(a2),a0
00018F48 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00018F4E 205F                       		movea.l	(sp)+,a0
00018F50 6600                       		bne.s	loc_18B40
00018F52 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018F56 3368 0008 0008             		move.w	8(a0),8(a1)
00018F5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F62 0669 0020 000C             		addi.w	#$20,$C(a1)
00018F68 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018F6E 234A 003C                  		move.l	a2,$3C(a1)
00018F72                            
00018F72                            loc_18B36:
00018F72 5328 003C                  		subq.b	#1,$3C(a0)
00018F76 6700                       		beq.s	loc_18B40
00018F78 6000 FEC0                  		bra.w	loc_189FE
00018F7C                            ; ===========================================================================
00018F7C                            
00018F7C                            loc_18B40:
00018F7C 5528 0025                  		subq.b	#2,$25(a0)
00018F80 6000 FE84                  		bra.w	loc_189CA
00018F84                            ; ===========================================================================
00018F84                            
00018F84                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018F84 5328 003C                  		subq.b	#1,$3C(a0)
00018F88 6B00                       		bmi.s	loc_18B52
00018F8A 6000 ED22                  		bra.w	BossDefeated
00018F8E                            ; ===========================================================================
00018F8E                            
00018F8E                            loc_18B52:
00018F8E 5428 0025                  		addq.b	#2,$25(a0)
00018F92 4268 0012                  		clr.w	$12(a0)
00018F96 08E8 0000 0022             		bset	#0,$22(a0)
00018F9C 08A8 0007 0022             		bclr	#7,$22(a0)
00018FA2 4268 0010                  		clr.w	$10(a0)
00018FA6 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018FAC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018FB0 6600                       		bne.s	loc_18B7C
00018FB2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018FB8                            
00018FB8                            loc_18B7C:
00018FB8 6000 FE80                  		bra.w	loc_189FE
00018FBC                            ; ===========================================================================
00018FBC                            
00018FBC                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018FBC 5228 003C                  		addq.b	#1,$3C(a0)
00018FC0 6700                       		beq.s	loc_18B90
00018FC2 6A00                       		bpl.s	loc_18B96
00018FC4 0668 0018 0012             		addi.w	#$18,$12(a0)
00018FCA 6000                       		bra.s	loc_18BC2
00018FCC                            ; ===========================================================================
00018FCC                            
00018FCC                            loc_18B90:
00018FCC 4268 0012                  		clr.w	$12(a0)
00018FD0 6000                       		bra.s	loc_18BC2
00018FD2                            ; ===========================================================================
00018FD2                            
00018FD2                            loc_18B96:
00018FD2 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018FD8 6500                       		bcs.s	loc_18BAE
00018FDA 6700                       		beq.s	loc_18BB4
00018FDC 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018FE2 6500                       		bcs.s	loc_18BC2
00018FE4 5428 0025                  		addq.b	#2,$25(a0)
00018FE8 6000                       		bra.s	loc_18BC2
00018FEA                            ; ===========================================================================
00018FEA                            
00018FEA                            loc_18BAE:
00018FEA 5168 0012                  		subq.w	#8,$12(a0)
00018FEE 6000                       		bra.s	loc_18BC2
00018FF0                            ; ===========================================================================
00018FF0                            
00018FF0                            loc_18BB4:
00018FF0 4268 0012                  		clr.w	$12(a0)
00018FF4 303C 008C                  		move.w	#$8C,d0
00018FF8 4EB9 0000 12C6             		jsr	(PlaySound).l	; play SLZ music
00018FFE                            
00018FFE                            loc_18BC2:
00018FFE 6000 FE2A                  		bra.w	loc_189EE
00019002                            ; ===========================================================================
00019002                            
00019002                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019002 317C 0400 0010             		move.w	#$400,$10(a0)
00019008 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001900E 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019014 6400                       		bcc.s	loc_18BE0
00019016 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001901A 6000                       		bra.s	loc_18BE8
0001901C                            ; ===========================================================================
0001901C                            
0001901C                            loc_18BE0:
0001901C 4A28 0001                  		tst.b	1(a0)
00019020 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019024                            
00019024                            loc_18BE8:
00019024 6100 ECCA                  		bsr.w	BossMove
00019028 6000 FDDC                  		bra.w	loc_189CA
0001902C                            ; ===========================================================================
0001902C                            
0001902C                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001902C 7000                       		moveq	#0,d0
0001902E 7201                       		moveq	#1,d1
00019030 2268 0034                  		movea.l	$34(a0),a1
00019034 1029 0025                  		move.b	$25(a1),d0
00019038 0C00 0006                  		cmpi.b	#6,d0
0001903C 6B00                       		bmi.s	loc_18C06
0001903E 720A                       		moveq	#$A,d1
00019040 6000                       		bra.s	loc_18C1A
00019042                            ; ===========================================================================
00019042                            
00019042                            loc_18C06:
00019042 4A29 0020                  		tst.b	$20(a1)
00019046 6600                       		bne.s	loc_18C10
00019048 7205                       		moveq	#5,d1
0001904A 6000                       		bra.s	loc_18C1A
0001904C                            ; ===========================================================================
0001904C                            
0001904C                            loc_18C10:
0001904C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019052 6500                       		bcs.s	loc_18C1A
00019054 7204                       		moveq	#4,d1
00019056                            
00019056                            loc_18C1A:
00019056 1141 001C                  		move.b	d1,$1C(a0)
0001905A 0C00 000A                  		cmpi.b	#$A,d0
0001905E 6600                       		bne.s	loc_18C32
00019060 117C 0006 001C             		move.b	#6,$1C(a0)
00019066 4A28 0001                  		tst.b	1(a0)
0001906A 6A00 FC84                  		bpl.w	Obj7A_Delete
0001906E                            
0001906E                            loc_18C32:
0001906E 6000                       		bra.s	loc_18C6C
00019070                            ; ===========================================================================
00019070                            
00019070                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019070 117C 0008 001C             		move.b	#8,$1C(a0)
00019076 2268 0034                  		movea.l	$34(a0),a1
0001907A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019080 6600                       		bne.s	loc_18C56
00019082 4A28 0001                  		tst.b	1(a0)
00019086 6A00 FC68                  		bpl.w	Obj7A_Delete
0001908A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019090 6000                       		bra.s	loc_18C6C
00019092                            ; ===========================================================================
00019092                            
00019092                            loc_18C56:
00019092 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019098 6E00                       		bgt.s	loc_18C6C
0001909A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000190A0 6D00                       		blt.s	loc_18C6C
000190A2 117C 0007 001C             		move.b	#7,$1C(a0)
000190A8                            
000190A8                            loc_18C6C:
000190A8 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
000190AE 4EB9 0000 A6EC             		jsr	AnimateSprite
000190B4                            
000190B4                            loc_18C78:
000190B4 2268 0034                  		movea.l	$34(a0),a1
000190B8 3169 0008 0008             		move.w	8(a1),8(a0)
000190BE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000190C4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000190CA 7003                       		moveq	#3,d0
000190CC C028 0022                  		and.b	$22(a0),d0
000190D0 0228 00FC 0001             		andi.b	#-4,1(a0)
000190D6 8128 0001                  		or.b	d0,1(a0)
000190DA 4EF9 0000 D5B0             		jmp	DisplaySprite
000190E0                            ; ===========================================================================
000190E0                            
000190E0                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000190E0 2268 0034                  		movea.l	$34(a0),a1
000190E4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000190EA 6600                       		bne.s	loc_18CB8
000190EC 4A28 0001                  		tst.b	1(a0)
000190F0 6A00 FBFE                  		bpl.w	Obj7A_Delete
000190F4                            
000190F4                            loc_18CB8:
000190F4 217C 0001 8218 0004        		move.l	#Map_BossItems,4(a0)
000190FC 317C 246C 0002             		move.w	#$246C,2(a0)
00019102 117C 0003 001A             		move.b	#3,$1A(a0)
00019108 60AA                       		bra.s	loc_18C78
0001910A                            ; ===========================================================================
0001910A                            ; ---------------------------------------------------------------------------
0001910A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001910A                            ; ---------------------------------------------------------------------------
0001910A                            
0001910A                            Obj7B:					; XREF: Obj_Index
0001910A 7000                       		moveq	#0,d0
0001910C 1028 0024                  		move.b	$24(a0),d0
00019110 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019114 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019118 3028 0030                  		move.w	$30(a0),d0
0001911C 0240 FF80                  		andi.w	#$FF80,d0
00019120 3238 F700                  		move.w	($FFFFF700).w,d1
00019124 0441 0080                  		subi.w	#$80,d1
00019128 0241 FF80                  		andi.w	#$FF80,d1
0001912C 9041                       		sub.w	d1,d0
0001912E 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019132 0C40 0280                  		cmpi.w	#$280,d0
00019136 6200 FBB8                  		bhi.w	Obj7A_Delete
0001913A 4EF9 0000 D5B0             		jmp	DisplaySprite
00019140                            ; ===========================================================================
00019140 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019142 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019144 0000                       		dc.w loc_18DC6-Obj7B_Index
00019146 0000                       		dc.w loc_18EAA-Obj7B_Index
00019148 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001914A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001914C                            ; ===========================================================================
0001914C                            
0001914C                            Obj7B_Main:				; XREF: Obj7B_Index
0001914C 217C 0001 196E 0004        		move.l	#Map_obj5Ea,4(a0)
00019154 317C 0518 0002             		move.w	#$518,2(a0)
0001915A 117C 0001 001A             		move.b	#1,$1A(a0)
00019160 0028 0004 0001             		ori.b	#4,1(a0)
00019166 117C 0004 0018             		move.b	#4,$18(a0)
0001916C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019172 117C 000C 0019             		move.b	#$C,$19(a0)
00019178 2268 003C                  		movea.l	$3C(a0),a1
0001917C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019182 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019188 08E8 0000 0022             		bset	#0,$22(a0)
0001918E 3028 0008                  		move.w	8(a0),d0
00019192 B069 0008                  		cmp.w	8(a1),d0
00019196 6E00                       		bgt.s	loc_18D68
00019198 08A8 0000 0022             		bclr	#0,$22(a0)
0001919E 117C 0002 003A             		move.b	#2,$3A(a0)
000191A4                            
000191A4                            loc_18D68:
000191A4 5428 0024                  		addq.b	#2,$24(a0)
000191A8                            
000191A8                            Obj7B_Fall:				; XREF: Obj7B_Index
000191A8 4EB9 0000 D55E             		jsr	ObjectFall
000191AE 2268 003C                  		movea.l	$3C(a0),a1
000191B2 45F9 0000 0000             		lea	(word_19018).l,a2
000191B8 7000                       		moveq	#0,d0
000191BA 1029 001A                  		move.b	$1A(a1),d0
000191BE 3228 0008                  		move.w	8(a0),d1
000191C2 9268 0030                  		sub.w	$30(a0),d1
000191C6 6400                       		bcc.s	loc_18D8E
000191C8 5440                       		addq.w	#2,d0
000191CA                            
000191CA                            loc_18D8E:
000191CA D040                       		add.w	d0,d0
000191CC 3228 0034                  		move.w	$34(a0),d1
000191D0 D272 0000                  		add.w	(a2,d0.w),d1
000191D4 B268 000C                  		cmp.w	$C(a0),d1
000191D8 6E00                       		bgt.s	locret_18DC4
000191DA 2268 003C                  		movea.l	$3C(a0),a1
000191DE 7202                       		moveq	#2,d1
000191E0 0828 0000 0022             		btst	#0,$22(a0)
000191E6 6700                       		beq.s	loc_18DAE
000191E8 7200                       		moveq	#0,d1
000191EA                            
000191EA                            loc_18DAE:
000191EA 317C 00F0 0028             		move.w	#$F0,$28(a0)
000191F0 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000191F6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000191FC 6000 0000                  		bra.w	loc_18FA2
00019200                            ; ===========================================================================
00019200                            
00019200                            locret_18DC4:
00019200 4E75                       		rts	
00019202                            ; ===========================================================================
00019202                            
00019202                            loc_18DC6:				; XREF: Obj7B_Index
00019202 2268 003C                  		movea.l	$3C(a0),a1
00019206 7000                       		moveq	#0,d0
00019208 1028 003A                  		move.b	$3A(a0),d0
0001920C 9029 003A                  		sub.b	$3A(a1),d0
00019210 6700                       		beq.s	loc_18E2A
00019212 6400                       		bcc.s	loc_18DDA
00019214 4400                       		neg.b	d0
00019216                            
00019216                            loc_18DDA:
00019216 323C F7E8                  		move.w	#-$818,d1
0001921A 343C FEEC                  		move.w	#-$114,d2
0001921E 0C00 0001                  		cmpi.b	#1,d0
00019222 6700                       		beq.s	loc_18E00
00019224 323C F6A0                  		move.w	#-$960,d1
00019228 343C FF0C                  		move.w	#-$F4,d2
0001922C 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019232 6D00                       		blt.s	loc_18E00
00019234 323C F5E0                  		move.w	#-$A20,d1
00019238 343C FF80                  		move.w	#-$80,d2
0001923C                            
0001923C                            loc_18E00:
0001923C 3141 0012                  		move.w	d1,$12(a0)
00019240 3142 0010                  		move.w	d2,$10(a0)
00019244 3028 0008                  		move.w	8(a0),d0
00019248 9068 0030                  		sub.w	$30(a0),d0
0001924C 6400                       		bcc.s	loc_18E16
0001924E 4468 0010                  		neg.w	$10(a0)
00019252                            
00019252                            loc_18E16:
00019252 117C 0001 001A             		move.b	#1,$1A(a0)
00019258 317C 0020 0028             		move.w	#$20,$28(a0)
0001925E 5428 0024                  		addq.b	#2,$24(a0)
00019262 6000 0000                  		bra.w	loc_18EAA
00019266                            ; ===========================================================================
00019266                            
00019266                            loc_18E2A:				; XREF: loc_18DC6
00019266 45F9 0000 0000             		lea	(word_19018).l,a2
0001926C 7000                       		moveq	#0,d0
0001926E 1029 001A                  		move.b	$1A(a1),d0
00019272 343C 0028                  		move.w	#$28,d2
00019276 3228 0008                  		move.w	8(a0),d1
0001927A 9268 0030                  		sub.w	$30(a0),d1
0001927E 6400                       		bcc.s	loc_18E48
00019280 4442                       		neg.w	d2
00019282 5440                       		addq.w	#2,d0
00019284                            
00019284                            loc_18E48:
00019284 D040                       		add.w	d0,d0
00019286 3228 0034                  		move.w	$34(a0),d1
0001928A D272 0000                  		add.w	(a2,d0.w),d1
0001928E 3141 000C                  		move.w	d1,$C(a0)
00019292 D468 0030                  		add.w	$30(a0),d2
00019296 3142 0008                  		move.w	d2,8(a0)
0001929A 4268 000E                  		clr.w	$E(a0)
0001929E 4268 000A                  		clr.w	$A(a0)
000192A2 5368 0028                  		subq.w	#1,$28(a0)
000192A6 6600                       		bne.s	loc_18E7A
000192A8 317C 0020 0028             		move.w	#$20,$28(a0)
000192AE 117C 0008 0024             		move.b	#8,$24(a0)
000192B4 4E75                       		rts	
000192B6                            ; ===========================================================================
000192B6                            
000192B6                            loc_18E7A:
000192B6 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000192BC 6600                       		bne.s	loc_18E88
000192BE 117C 0005 001F             		move.b	#5,$1F(a0)
000192C4                            
000192C4                            loc_18E88:
000192C4 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000192CA 6600                       		bne.s	loc_18E96
000192CC 117C 0002 001F             		move.b	#2,$1F(a0)
000192D2                            
000192D2                            loc_18E96:
000192D2 5328 001E                  		subq.b	#1,$1E(a0)
000192D6 6E00                       		bgt.s	locret_18EA8
000192D8 0868 0000 001A             		bchg	#0,$1A(a0)
000192DE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000192E4                            
000192E4                            locret_18EA8:
000192E4 4E75                       		rts	
000192E6                            ; ===========================================================================
000192E6                            
000192E6                            loc_18EAA:				; XREF: Obj7B_Index
000192E6 43F8 D040                  		lea	($FFFFD040).w,a1
000192EA 707A                       		moveq	#$7A,d0
000192EC 7240                       		moveq	#$40,d1
000192EE 743E                       		moveq	#$3E,d2
000192F0                            
000192F0                            loc_18EB4:
000192F0 B011                       		cmp.b	(a1),d0
000192F2 6700                       		beq.s	loc_18EC0
000192F4 D2C1                       		adda.w	d1,a1
000192F6 51CA FFF8                  		dbf	d2,loc_18EB4
000192FA                            
000192FA 6000                       		bra.s	loc_18F38
000192FC                            ; ===========================================================================
000192FC                            
000192FC                            loc_18EC0:
000192FC 3029 0008                  		move.w	8(a1),d0
00019300 3229 000C                  		move.w	$C(a1),d1
00019304 3428 0008                  		move.w	8(a0),d2
00019308 3628 000C                  		move.w	$C(a0),d3
0001930C 45FA 0000                  		lea	byte_19022(pc),a2
00019310 47FA 0000                  		lea	byte_19026(pc),a3
00019314 181A                       		move.b	(a2)+,d4
00019316 4884                       		ext.w	d4
00019318 D044                       		add.w	d4,d0
0001931A 181B                       		move.b	(a3)+,d4
0001931C 4884                       		ext.w	d4
0001931E D444                       		add.w	d4,d2
00019320 B440                       		cmp.w	d0,d2
00019322 6500                       		bcs.s	loc_18F38
00019324 181A                       		move.b	(a2)+,d4
00019326 4884                       		ext.w	d4
00019328 D044                       		add.w	d4,d0
0001932A 181B                       		move.b	(a3)+,d4
0001932C 4884                       		ext.w	d4
0001932E D444                       		add.w	d4,d2
00019330 B042                       		cmp.w	d2,d0
00019332 6500                       		bcs.s	loc_18F38
00019334 181A                       		move.b	(a2)+,d4
00019336 4884                       		ext.w	d4
00019338 D244                       		add.w	d4,d1
0001933A 181B                       		move.b	(a3)+,d4
0001933C 4884                       		ext.w	d4
0001933E D644                       		add.w	d4,d3
00019340 B641                       		cmp.w	d1,d3
00019342 6500                       		bcs.s	loc_18F38
00019344 181A                       		move.b	(a2)+,d4
00019346 4884                       		ext.w	d4
00019348 D244                       		add.w	d4,d1
0001934A 181B                       		move.b	(a3)+,d4
0001934C 4884                       		ext.w	d4
0001934E D644                       		add.w	d4,d3
00019350 B243                       		cmp.w	d3,d1
00019352 6500                       		bcs.s	loc_18F38
00019354 5428 0024                  		addq.b	#2,$24(a0)
00019358 4268 0028                  		clr.w	$28(a0)
0001935C 4229 0020                  		clr.b	$20(a1)
00019360 5329 0021                  		subq.b	#1,$21(a1)
00019364 6600                       		bne.s	loc_18F38
00019366 08E9 0007 0022             		bset	#7,$22(a1)
0001936C 4268 0010                  		clr.w	$10(a0)
00019370 4268 0012                  		clr.w	$12(a0)
00019374                            
00019374                            loc_18F38:
00019374 4A68 0012                  		tst.w	$12(a0)
00019378 6A00                       		bpl.s	loc_18F5C
0001937A 4EB9 0000 D55E             		jsr	ObjectFall
00019380 3028 0034                  		move.w	$34(a0),d0
00019384 0440 002F                  		subi.w	#$2F,d0
00019388 B068 000C                  		cmp.w	$C(a0),d0
0001938C 6E00                       		bgt.s	loc_18F58
0001938E 4EB9 0000 D55E             		jsr	ObjectFall
00019394                            
00019394                            loc_18F58:
00019394 6000 FF20                  		bra.w	loc_18E7A
00019398                            ; ===========================================================================
00019398                            
00019398                            loc_18F5C:
00019398 4EB9 0000 D55E             		jsr	ObjectFall
0001939E 2268 003C                  		movea.l	$3C(a0),a1
000193A2 45F9 0000 0000             		lea	(word_19018).l,a2
000193A8 7000                       		moveq	#0,d0
000193AA 1029 001A                  		move.b	$1A(a1),d0
000193AE 3228 0008                  		move.w	8(a0),d1
000193B2 9268 0030                  		sub.w	$30(a0),d1
000193B6 6400                       		bcc.s	loc_18F7E
000193B8 5440                       		addq.w	#2,d0
000193BA                            
000193BA                            loc_18F7E:
000193BA D040                       		add.w	d0,d0
000193BC 3228 0034                  		move.w	$34(a0),d1
000193C0 D272 0000                  		add.w	(a2,d0.w),d1
000193C4 B268 000C                  		cmp.w	$C(a0),d1
000193C8 6ECA                       		bgt.s	loc_18F58
000193CA 2268 003C                  		movea.l	$3C(a0),a1
000193CE 7202                       		moveq	#2,d1
000193D0 4A68 0010                  		tst.w	$10(a0)
000193D4 6B00                       		bmi.s	loc_18F9C
000193D6 7200                       		moveq	#0,d1
000193D8                            
000193D8                            loc_18F9C:
000193D8 317C 0000 0028             		move.w	#0,$28(a0)
000193DE                            
000193DE                            loc_18FA2:
000193DE 1341 003A                  		move.b	d1,$3A(a1)
000193E2 1141 003A                  		move.b	d1,$3A(a0)
000193E6 B229 001A                  		cmp.b	$1A(a1),d1
000193EA 6700                       		beq.s	loc_19008
000193EC 08A9 0003 0022             		bclr	#3,$22(a1)
000193F2 6700                       		beq.s	loc_19008
000193F4 4229 0025                  		clr.b	$25(a1)
000193F8 137C 0002 0024             		move.b	#2,$24(a1)
000193FE 45F8 D000                  		lea	($FFFFD000).w,a2
00019402 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019408 446A 0012                  		neg.w	$12(a2)
0001940C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019412 6600                       		bne.s	loc_18FDC
00019414 E0EA 0012                  		asr	$12(a2)
00019418                            
00019418                            loc_18FDC:
00019418 08EA 0001 0022             		bset	#1,$22(a2)
0001941E 08AA 0003 0022             		bclr	#3,$22(a2)
00019424 422A 003C                  		clr.b	$3C(a2)
00019428 2F08                       		move.l	a0,-(sp)
0001942A 41D2                       		lea	(a2),a0
0001942C 4EBA A25E                  		jsr	Obj01_ChkRoll
00019430 205F                       		movea.l	(sp)+,a0
00019432 157C 0002 0024             		move.b	#2,$24(a2)
00019438 303C 00CC                  		move.w	#$CC,d0
0001943C 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019442                            
00019442                            loc_19008:
00019442 4268 0010                  		clr.w	$10(a0)
00019446 4268 0012                  		clr.w	$12(a0)
0001944A 5428 0024                  		addq.b	#2,$24(a0)
0001944E 6000 FE66                  		bra.w	loc_18E7A
00019452                            ; ===========================================================================
00019452 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001945C                            		even
0001945C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019460                            		even
00019460 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019464                            		even
00019464                            ; ===========================================================================
00019464                            
00019464                            Obj7B_Explode:				; XREF: Obj7B_Index
00019464 10BC 003F                  		move.b	#$3F,(a0)
00019468 4228 0024                  		clr.b	$24(a0)
0001946C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019472 6700                       		beq.s	Obj7B_MakeFrag
00019474 4E75                       		rts	
00019476                            ; ===========================================================================
00019476                            
00019476                            Obj7B_MakeFrag:
00019476 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001947C 7203                       		moveq	#3,d1
0001947E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019482                            
00019482                            Obj7B_Loop:
00019482 4EB9 0000 DA36             		jsr	SingleObjLoad
00019488 6600                       		bne.s	loc_1909A
0001948A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001948E 137C 000A 0024             		move.b	#$A,$24(a1)
00019494 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001949C 137C 0003 0018             		move.b	#3,$18(a1)
000194A2 337C 0518 0002             		move.w	#$518,2(a1)
000194A8 3368 0008 0008             		move.w	8(a0),8(a1)
000194AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194B4 335A 0010                  		move.w	(a2)+,$10(a1)
000194B8 335A 0012                  		move.w	(a2)+,$12(a1)
000194BC 137C 0098 0020             		move.b	#$98,$20(a1)
000194C2 0029 0004 0001             		ori.b	#4,1(a1)
000194C8 08E9 0007 0001             		bset	#7,1(a1)
000194CE 137C 000C 0019             		move.b	#$C,$19(a1)
000194D4                            
000194D4                            loc_1909A:
000194D4 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000194D8                            
000194D8 4E75                       		rts	
000194DA                            ; ===========================================================================
000194DA FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000194DE FF60 FDC0                  		dc.w $FF60, $FDC0
000194E2 0100 FCC0                  		dc.w $100, $FCC0
000194E6 00A0 FDC0                  		dc.w $A0, $FDC0
000194EA                            ; ===========================================================================
000194EA                            
000194EA                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000194EA 4EB9 0000 D58A             		jsr	SpeedToPos
000194F0 3168 0008 0030             		move.w	8(a0),$30(a0)
000194F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000194FC 0668 0018 0012             		addi.w	#$18,$12(a0)
00019502 7004                       		moveq	#4,d0
00019504 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019508 E448                       		lsr.w	#2,d0
0001950A 1140 001A                  		move.b	d0,$1A(a0)
0001950E 4A28 0001                  		tst.b	1(a0)
00019512 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019516 4E75                       		rts	
00019518                            ; ===========================================================================
00019518                            ; ---------------------------------------------------------------------------
00019518                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019518                            ; ---------------------------------------------------------------------------
00019518                            Map_obj7B:
00019518                            	include "_maps\obj7B.asm"
00019518                            ; ---------------------------------------------------------------------------
00019518                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019518                            ; ---------------------------------------------------------------------------
00019518 0000                       		dc.w byte_190E2-Map_obj7B
0001951A 0000                       		dc.w byte_190E8-Map_obj7B
0001951C 01                         byte_190E2:	dc.b 1
0001951D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019522 01                         byte_190E8:	dc.b 1
00019523 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019528                            		even
00019528                            		even
00019528                            
00019528                            ; ===========================================================================
00019528                            ; ---------------------------------------------------------------------------
00019528                            ; Object 75 - Eggman (SYZ)
00019528                            ; ---------------------------------------------------------------------------
00019528                            
00019528                            Obj75:					; XREF: Obj_Index
00019528 7000                       		moveq	#0,d0
0001952A 1028 0024                  		move.b	$24(a0),d0
0001952E 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019532 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019536                            ; ===========================================================================
00019536 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019538 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001953A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001953C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001953E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019540                            
00019540 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019543 0401 05                    		dc.b 4,	1, 5
00019546 0607 05                    		dc.b 6,	7, 5
00019549 0800 05                    		dc.b 8,	0, 5
0001954C                            ; ===========================================================================
0001954C                            
0001954C                            Obj75_Main:				; XREF: Obj75_Index
0001954C 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019552 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019558 3168 0008 0030             		move.w	8(a0),$30(a0)
0001955E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019564 117C 000F 0020             		move.b	#$F,$20(a0)
0001956A                            		include "_param\bosshits.asm"
0001956A 117C 0008 0021                            move.b  #8,$21(a0)
0001956A 117C 0008 0021                            move.b  #8,$21(a0)
00019570 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019574 2248                       		movea.l	a0,a1
00019576 7203                       		moveq	#3,d1
00019578 6000                       		bra.s	Obj75_LoadBoss
0001957A                            ; ===========================================================================
0001957A                            
0001957A                            Obj75_Loop:
0001957A 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00019580 6600                       		bne.s	Obj75_ShipMain
00019582 12BC 0075                  		move.b	#$75,(a1)
00019586 3368 0008 0008             		move.w	8(a0),8(a1)
0001958C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019592                            
00019592                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019592 08A8 0000 0022             		bclr	#0,$22(a0)
00019598 4229 0025                  		clr.b	$25(a1)
0001959C 135A 0024                  		move.b	(a2)+,$24(a1)
000195A0 135A 001C                  		move.b	(a2)+,$1C(a1)
000195A4 135A 0018                  		move.b	(a2)+,$18(a1)
000195A8 237C 0001 8150 0004        		move.l	#Map_Eggman,4(a1)
000195B0 337C 0400 0002             		move.w	#$400,2(a1)
000195B6 137C 0004 0001             		move.b	#4,1(a1)
000195BC 137C 0020 0019             		move.b	#$20,$19(a1)
000195C2 2348 0034                  		move.l	a0,$34(a1)
000195C6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000195CA                            
000195CA                            Obj75_ShipMain:				; XREF: Obj75_Index
000195CA 7000                       		moveq	#0,d0
000195CC 1028 0025                  		move.b	$25(a0),d0
000195D0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000195D4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000195D8 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
000195DE 4EB9 0000 A6EC             		jsr	AnimateSprite
000195E4 7003                       		moveq	#3,d0
000195E6 C028 0022                  		and.b	$22(a0),d0
000195EA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000195F0 8128 0001                  		or.b	d0,1(a0)
000195F4 4EF9 0000 D5B0             		jmp	DisplaySprite
000195FA                            ; ===========================================================================
000195FA 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000195FE 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019602 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019606                            ; ===========================================================================
00019606                            
00019606                            loc_191CC:				; XREF: Obj75_ShipIndex
00019606 317C FF00 0010             		move.w	#-$100,$10(a0)
0001960C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019612 6400                       		bcc.s	loc_191DE
00019614 5428 0025                  		addq.b	#2,$25(a0)
00019618                            
00019618                            loc_191DE:
00019618 1028 003F                  		move.b	$3F(a0),d0
0001961C 5428 003F                  		addq.b	#2,$3F(a0)
00019620 4EB9 0000 29BA             		jsr	(CalcSine).l
00019626 E440                       		asr.w	#2,d0
00019628 3140 0012                  		move.w	d0,$12(a0)
0001962C                            
0001962C                            loc_191F2:
0001962C 6100 E6C2                  		bsr.w	BossMove
00019630 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019636 3168 0030 0008             		move.w	$30(a0),8(a0)
0001963C                            
0001963C                            loc_19202:
0001963C 3028 0008                  		move.w	8(a0),d0
00019640 0440 2C00                  		subi.w	#$2C00,d0
00019644 EA48                       		lsr.w	#5,d0
00019646 1140 0034                  		move.b	d0,$34(a0)
0001964A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019650 6400                       		bcc.s	locret_19256
00019652 4A28 0022                  		tst.b	$22(a0)
00019656 6B00                       		bmi.s	loc_19258
00019658 4A28 0020                  		tst.b	$20(a0)
0001965C 6600                       		bne.s	locret_19256
0001965E 4A28 003E                  		tst.b	$3E(a0)
00019662 6600                       		bne.s	loc_1923A
00019664 117C 0020 003E             		move.b	#$20,$3E(a0)
0001966A 303C 00AC                  		move.w	#$AC,d0
0001966E 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019674                            
00019674                            loc_1923A:
00019674 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019678 7000                       		moveq	#0,d0
0001967A 4A51                       		tst.w	(a1)
0001967C 6600                       		bne.s	loc_19248
0001967E 303C 0EEE                  		move.w	#$EEE,d0
00019682                            
00019682                            loc_19248:
00019682 3280                       		move.w	d0,(a1)
00019684 5328 003E                  		subq.b	#1,$3E(a0)
00019688 6600                       		bne.s	locret_19256
0001968A 117C 000F 0020             		move.b	#$F,$20(a0)
00019690                            
00019690                            locret_19256:
00019690 4E75                       		rts	
00019692                            ; ===========================================================================
00019692                            
00019692                            loc_19258:				; XREF: loc_19202
00019692 7064                       		moveq	#100,d0
00019694 6100 0000                  		bsr.w	AddPoints
00019698 117C 0006 0025             		move.b	#6,$25(a0)
0001969E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000196A4 4268 0010                  		clr.w	$10(a0)
000196A8 4E75                       		rts	
000196AA                            ; ===========================================================================
000196AA                            
000196AA                            loc_19270:				; XREF: Obj75_ShipIndex
000196AA 3028 0030                  		move.w	$30(a0),d0
000196AE 317C 0140 0010             		move.w	#$140,$10(a0)
000196B4 0828 0000 0022             		btst	#0,$22(a0)
000196BA 6600                       		bne.s	loc_1928E
000196BC 4468 0010                  		neg.w	$10(a0)
000196C0 0C40 2C08                  		cmpi.w	#$2C08,d0
000196C4 6E00                       		bgt.s	loc_1929E
000196C6 6000                       		bra.s	loc_19294
000196C8                            ; ===========================================================================
000196C8                            
000196C8                            loc_1928E:
000196C8 0C40 2D38                  		cmpi.w	#$2D38,d0
000196CC 6D00                       		blt.s	loc_1929E
000196CE                            
000196CE                            loc_19294:
000196CE 0868 0000 0022             		bchg	#0,$22(a0)
000196D4 4228 003D                  		clr.b	$3D(a0)
000196D8                            
000196D8                            loc_1929E:
000196D8 0440 2C10                  		subi.w	#$2C10,d0
000196DC 0240 001F                  		andi.w	#$1F,d0
000196E0 0440 001F                  		subi.w	#$1F,d0
000196E4 6A00                       		bpl.s	loc_192AE
000196E6 4440                       		neg.w	d0
000196E8                            
000196E8                            loc_192AE:
000196E8 5340                       		subq.w	#1,d0
000196EA 6E00                       		bgt.s	loc_192E8
000196EC 4A28 003D                  		tst.b	$3D(a0)
000196F0 6600                       		bne.s	loc_192E8
000196F2 3238 D008                  		move.w	($FFFFD008).w,d1
000196F6 0441 2C00                  		subi.w	#$2C00,d1
000196FA EA41                       		asr.w	#5,d1
000196FC B228 0034                  		cmp.b	$34(a0),d1
00019700 6600                       		bne.s	loc_192E8
00019702 7000                       		moveq	#0,d0
00019704 1028 0034                  		move.b	$34(a0),d0
00019708 EB40                       		asl.w	#5,d0
0001970A 0640 2C10                  		addi.w	#$2C10,d0
0001970E 3140 0030                  		move.w	d0,$30(a0)
00019712 6100 0000                  		bsr.w	Obj75_FindBlocks
00019716 5428 0025                  		addq.b	#2,$25(a0)
0001971A 4268 0028                  		clr.w	$28(a0)
0001971E 4268 0010                  		clr.w	$10(a0)
00019722                            
00019722                            loc_192E8:
00019722 6000 FEF4                  		bra.w	loc_191DE
00019726                            ; ===========================================================================
00019726                            
00019726                            loc_192EC:				; XREF: Obj75_ShipIndex
00019726 7000                       		moveq	#0,d0
00019728 1028 0028                  		move.b	$28(a0),d0
0001972C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019730 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019734                            ; ===========================================================================
00019734 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019736 0000                       		dc.w loc_19348-off_192FA
00019738 0000                       		dc.w loc_1938E-off_192FA
0001973A 0000                       		dc.w loc_193D0-off_192FA
0001973C                            ; ===========================================================================
0001973C                            
0001973C                            loc_19302:				; XREF: off_192FA
0001973C 317C 0180 0012             		move.w	#$180,$12(a0)
00019742 3028 0038                  		move.w	$38(a0),d0
00019746 0C40 0556                  		cmpi.w	#$556,d0
0001974A 6500                       		bcs.s	loc_19344
0001974C 317C 0556 0038             		move.w	#$556,$38(a0)
00019752 4268 003C                  		clr.w	$3C(a0)
00019756 70FF                       		moveq	#-1,d0
00019758 3028 0036                  		move.w	$36(a0),d0
0001975C 6700                       		beq.s	loc_1933C
0001975E 2240                       		movea.l	d0,a1
00019760 137C 00FF 0029             		move.b	#-1,$29(a1)
00019766 117C 00FF 0029             		move.b	#-1,$29(a0)
0001976C 2348 0034                  		move.l	a0,$34(a1)
00019770 317C 0032 003C             		move.w	#$32,$3C(a0)
00019776                            
00019776                            loc_1933C:
00019776 4268 0012                  		clr.w	$12(a0)
0001977A 5428 0028                  		addq.b	#2,$28(a0)
0001977E                            
0001977E                            loc_19344:
0001977E 6000 FEAC                  		bra.w	loc_191F2
00019782                            ; ===========================================================================
00019782                            
00019782                            loc_19348:				; XREF: off_192FA
00019782 5368 003C                  		subq.w	#1,$3C(a0)
00019786 6A00                       		bpl.s	loc_19366
00019788 5428 0028                  		addq.b	#2,$28(a0)
0001978C 317C F800 0012             		move.w	#-$800,$12(a0)
00019792 4A68 0036                  		tst.w	$36(a0)
00019796 6600                       		bne.s	loc_19362
00019798 E0E8 0012                  		asr	$12(a0)
0001979C                            
0001979C                            loc_19362:
0001979C 7000                       		moveq	#0,d0
0001979E 6000                       		bra.s	loc_1937C
000197A0                            ; ===========================================================================
000197A0                            
000197A0                            loc_19366:
000197A0 7000                       		moveq	#0,d0
000197A2 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
000197A8 6E00                       		bgt.s	loc_1937C
000197AA 7002                       		moveq	#2,d0
000197AC 0828 0001 003D             		btst	#1,$3D(a0)
000197B2 6700                       		beq.s	loc_1937C
000197B4 4440                       		neg.w	d0
000197B6                            
000197B6                            loc_1937C:
000197B6 D068 0038                  		add.w	$38(a0),d0
000197BA 3140 000C                  		move.w	d0,$C(a0)
000197BE 3168 0030 0008             		move.w	$30(a0),8(a0)
000197C4 6000 FE76                  		bra.w	loc_19202
000197C8                            ; ===========================================================================
000197C8                            
000197C8                            loc_1938E:				; XREF: off_192FA
000197C8 303C 04DA                  		move.w	#$4DA,d0
000197CC 4A68 0036                  		tst.w	$36(a0)
000197D0 6700                       		beq.s	loc_1939C
000197D2 0440 0018                  		subi.w	#$18,d0
000197D6                            
000197D6                            loc_1939C:
000197D6 B068 0038                  		cmp.w	$38(a0),d0
000197DA 6D00                       		blt.s	loc_193BE
000197DC 317C 0008 003C             		move.w	#8,$3C(a0)
000197E2 4A68 0036                  		tst.w	$36(a0)
000197E6 6700                       		beq.s	loc_193B4
000197E8 317C 002D 003C             		move.w	#$2D,$3C(a0)
000197EE                            
000197EE                            loc_193B4:
000197EE 5428 0028                  		addq.b	#2,$28(a0)
000197F2 4268 0012                  		clr.w	$12(a0)
000197F6 6000                       		bra.s	loc_193CC
000197F8                            ; ===========================================================================
000197F8                            
000197F8                            loc_193BE:
000197F8 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000197FE 6C00                       		bge.s	loc_193CC
00019800 0668 000C 0012             		addi.w	#$C,$12(a0)
00019806                            
00019806                            loc_193CC:
00019806 6000 FE24                  		bra.w	loc_191F2
0001980A                            ; ===========================================================================
0001980A                            
0001980A                            loc_193D0:				; XREF: off_192FA
0001980A 5368 003C                  		subq.w	#1,$3C(a0)
0001980E 6E00                       		bgt.s	loc_19406
00019810 6B00                       		bmi.s	loc_193EE
00019812 70FF                       		moveq	#-1,d0
00019814 3028 0036                  		move.w	$36(a0),d0
00019818 6700                       		beq.s	loc_193E8
0001981A 2240                       		movea.l	d0,a1
0001981C 137C 000A 0029             		move.b	#$A,$29(a1)
00019822                            
00019822                            loc_193E8:
00019822 4268 0036                  		clr.w	$36(a0)
00019826 6000                       		bra.s	loc_19406
00019828                            ; ===========================================================================
00019828                            
00019828                            loc_193EE:
00019828 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001982E 6600                       		bne.s	loc_19406
00019830 4228 0029                  		clr.b	$29(a0)
00019834 5528 0025                  		subq.b	#2,$25(a0)
00019838 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001983E 6000                       		bra.s	loc_19446
00019840                            ; ===========================================================================
00019840                            
00019840                            loc_19406:
00019840 7001                       		moveq	#1,d0
00019842 4A68 0036                  		tst.w	$36(a0)
00019846 6700                       		beq.s	loc_19410
00019848 7002                       		moveq	#2,d0
0001984A                            
0001984A                            loc_19410:
0001984A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019850 6700                       		beq.s	loc_19424
00019852 6D00                       		blt.s	loc_1941C
00019854 4440                       		neg.w	d0
00019856                            
00019856                            loc_1941C:
00019856 4A68 0036                  		tst.w	$36(a0)
0001985A D168 0038                  		add.w	d0,$38(a0)
0001985E                            
0001985E                            loc_19424:
0001985E 7000                       		moveq	#0,d0
00019860 4A68 0036                  		tst.w	$36(a0)
00019864 6700                       		beq.s	loc_19438
00019866 7002                       		moveq	#2,d0
00019868 0828 0000 003D             		btst	#0,$3D(a0)
0001986E 6700                       		beq.s	loc_19438
00019870 4440                       		neg.w	d0
00019872                            
00019872                            loc_19438:
00019872 D068 0038                  		add.w	$38(a0),d0
00019876 3140 000C                  		move.w	d0,$C(a0)
0001987A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019880                            
00019880                            loc_19446:
00019880 6000 FDBA                  		bra.w	loc_19202
00019884                            
00019884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019884                            
00019884                            
00019884                            Obj75_FindBlocks:			; XREF: loc_192AE
00019884 4268 0036                  		clr.w	$36(a0)
00019888 43F8 D040                  		lea	($FFFFD040).w,a1
0001988C 703E                       		moveq	#$3E,d0
0001988E 7276                       		moveq	#$76,d1
00019890 1428 0034                  		move.b	$34(a0),d2
00019894                            
00019894                            Obj75_FindLoop:
00019894 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019896 6600                       		bne.s	loc_1946A	; if not, branch
00019898 B429 0028                  		cmp.b	$28(a1),d2
0001989C 6600                       		bne.s	loc_1946A
0001989E 3149 0036                  		move.w	a1,$36(a0)
000198A2 6000                       		bra.s	locret_19472
000198A4                            ; ===========================================================================
000198A4                            
000198A4                            loc_1946A:
000198A4 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
000198A8 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
000198AC                            
000198AC                            locret_19472:
000198AC 4E75                       		rts	
000198AE                            ; End of function Obj75_FindBlocks
000198AE                            
000198AE                            ; ===========================================================================
000198AE                            
000198AE                            loc_19474:				; XREF: Obj75_ShipIndex
000198AE 5368 003C                  		subq.w	#1,$3C(a0)
000198B2 6B00                       		bmi.s	loc_1947E
000198B4 6000 E3F8                  		bra.w	BossDefeated
000198B8                            ; ===========================================================================
000198B8                            
000198B8                            loc_1947E:
000198B8 5428 0025                  		addq.b	#2,$25(a0)
000198BC 4268 0012                  		clr.w	$12(a0)
000198C0 08E8 0000 0022             		bset	#0,$22(a0)
000198C6 08A8 0007 0022             		bclr	#7,$22(a0)
000198CC 4268 0010                  		clr.w	$10(a0)
000198D0 317C FFFF 003C             		move.w	#-1,$3C(a0)
000198D6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000198DA 6600                       		bne.s	loc_194A8
000198DC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000198E2                            
000198E2                            loc_194A8:
000198E2 6000 FD58                  		bra.w	loc_19202
000198E6                            ; ===========================================================================
000198E6                            
000198E6                            loc_194AC:				; XREF: Obj75_ShipIndex
000198E6 5268 003C                  		addq.w	#1,$3C(a0)
000198EA 6700                       		beq.s	loc_194BC
000198EC 6A00                       		bpl.s	loc_194C2
000198EE 0668 0018 0012             		addi.w	#$18,$12(a0)
000198F4 6000                       		bra.s	loc_194EE
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            loc_194BC:
000198F6 4268 0012                  		clr.w	$12(a0)
000198FA 6000                       		bra.s	loc_194EE
000198FC                            ; ===========================================================================
000198FC                            
000198FC                            loc_194C2:
000198FC 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019902 6500                       		bcs.s	loc_194DA
00019904 6700                       		beq.s	loc_194E0
00019906 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001990C 6500                       		bcs.s	loc_194EE
0001990E 5428 0025                  		addq.b	#2,$25(a0)
00019912 6000                       		bra.s	loc_194EE
00019914                            ; ===========================================================================
00019914                            
00019914                            loc_194DA:
00019914 5168 0012                  		subq.w	#8,$12(a0)
00019918 6000                       		bra.s	loc_194EE
0001991A                            ; ===========================================================================
0001991A                            
0001991A                            loc_194E0:
0001991A 4268 0012                  		clr.w	$12(a0)
0001991E 303C 008F                  		move.w	#$8F,d0
00019922 4EB9 0000 12C6             		jsr	(PlaySound).l	; play SYZ music
00019928                            
00019928                            loc_194EE:
00019928 6000 FD02                  		bra.w	loc_191F2
0001992C                            ; ===========================================================================
0001992C                            
0001992C                            loc_194F2:				; XREF: Obj75_ShipIndex
0001992C 317C 0400 0010             		move.w	#$400,$10(a0)
00019932 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019938 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001993E 6400                       		bcc.s	loc_1950C
00019940 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019944 6000                       		bra.s	loc_19512
00019946                            ; ===========================================================================
00019946                            
00019946                            loc_1950C:
00019946 4A28 0001                  		tst.b	1(a0)
0001994A 6A00                       		bpl.s	Obj75_ShipDelete
0001994C                            
0001994C                            loc_19512:
0001994C 6100 E3A2                  		bsr.w	BossMove
00019950 6000 FCC6                  		bra.w	loc_191DE
00019954                            ; ===========================================================================
00019954                            
00019954                            Obj75_ShipDelete:
00019954 4EF9 0000 D5EC             		jmp	DeleteObject
0001995A                            ; ===========================================================================
0001995A                            
0001995A                            Obj75_FaceMain:				; XREF: Obj75_Index
0001995A 7201                       		moveq	#1,d1
0001995C 2268 0034                  		movea.l	$34(a0),a1
00019960 7000                       		moveq	#0,d0
00019962 1029 0025                  		move.b	$25(a1),d0
00019966 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001996A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001996E 1141 001C                  		move.b	d1,$1C(a0)
00019972 1010                       		move.b	(a0),d0
00019974 B011                       		cmp.b	(a1),d0
00019976 6600                       		bne.s	Obj75_FaceDelete
00019978 6000                       		bra.s	loc_195BE
0001997A                            ; ===========================================================================
0001997A                            
0001997A                            Obj75_FaceDelete:
0001997A 4EF9 0000 D5EC             		jmp	DeleteObject
00019980                            ; ===========================================================================
00019980 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019984 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019988 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001998C                            ; ===========================================================================
0001998C                            
0001998C                            loc_19552:				; XREF: off_19546
0001998C 720A                       		moveq	#$A,d1
0001998E 4E75                       		rts	
00019990                            ; ===========================================================================
00019990                            
00019990                            loc_19556:				; XREF: off_19546
00019990 7206                       		moveq	#6,d1
00019992 4E75                       		rts	
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_1955A:				; XREF: off_19546
00019994 7000                       		moveq	#0,d0
00019996 1029 0028                  		move.b	$28(a1),d0
0001999A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001999E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
000199A2                            ; ===========================================================================
000199A2 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
000199A6 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
000199AA                            ; ===========================================================================
000199AA                            
000199AA                            loc_19570:				; XREF: off_19568
000199AA 6000                       		bra.s	loc_19574
000199AC                            ; ===========================================================================
000199AC                            
000199AC                            loc_19572:				; XREF: off_19568
000199AC 7206                       		moveq	#6,d1
000199AE                            
000199AE                            loc_19574:				; XREF: off_19546
000199AE 4A29 0020                  		tst.b	$20(a1)
000199B2 6600                       		bne.s	loc_1957E
000199B4 7205                       		moveq	#5,d1
000199B6 4E75                       		rts	
000199B8                            ; ===========================================================================
000199B8                            
000199B8                            loc_1957E:
000199B8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000199BE 6500                       		bcs.s	locret_19588
000199C0 7204                       		moveq	#4,d1
000199C2                            
000199C2                            locret_19588:
000199C2 4E75                       		rts	
000199C4                            ; ===========================================================================
000199C4                            
000199C4                            Obj75_FlameMain:			; XREF: Obj75_Index
000199C4 117C 0007 001C             		move.b	#7,$1C(a0)
000199CA 2268 0034                  		movea.l	$34(a0),a1
000199CE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000199D4 6600                       		bne.s	loc_195AA
000199D6 117C 000B 001C             		move.b	#$B,$1C(a0)
000199DC 4A28 0001                  		tst.b	1(a0)
000199E0 6A00                       		bpl.s	Obj75_FlameDelete
000199E2 6000                       		bra.s	loc_195B6
000199E4                            ; ===========================================================================
000199E4                            
000199E4                            loc_195AA:
000199E4 4A69 0010                  		tst.w	$10(a1)
000199E8 6700                       		beq.s	loc_195B6
000199EA 117C 0008 001C             		move.b	#8,$1C(a0)
000199F0                            
000199F0                            loc_195B6:
000199F0 6000                       		bra.s	loc_195BE
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            Obj75_FlameDelete:
000199F2 4EF9 0000 D5EC             		jmp	DeleteObject
000199F8                            ; ===========================================================================
000199F8                            
000199F8                            loc_195BE:
000199F8 43F9 0001 8100             		lea	(Ani_Eggman).l,a1
000199FE 4EB9 0000 A6EC             		jsr	AnimateSprite
00019A04 2268 0034                  		movea.l	$34(a0),a1
00019A08 3169 0008 0008             		move.w	8(a1),8(a0)
00019A0E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A14                            
00019A14                            loc_195DA:
00019A14 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019A1A 7003                       		moveq	#3,d0
00019A1C C028 0022                  		and.b	$22(a0),d0
00019A20 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A26 8128 0001                  		or.b	d0,1(a0)
00019A2A 4EF9 0000 D5B0             		jmp	DisplaySprite
00019A30                            ; ===========================================================================
00019A30                            
00019A30                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019A30 217C 0001 8218 0004        		move.l	#Map_BossItems,4(a0)
00019A38 317C 246C 0002             		move.w	#$246C,2(a0)
00019A3E 117C 0005 001A             		move.b	#5,$1A(a0)
00019A44 2268 0034                  		movea.l	$34(a0),a1
00019A48 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019A4E 6600                       		bne.s	loc_1961C
00019A50 4A28 0001                  		tst.b	1(a0)
00019A54 6A00                       		bpl.s	Obj75_SpikeDelete
00019A56                            
00019A56                            loc_1961C:
00019A56 3169 0008 0008             		move.w	8(a1),8(a0)
00019A5C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019A62 3028 003C                  		move.w	$3C(a0),d0
00019A66 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019A6C 6600                       		bne.s	loc_19652
00019A6E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019A74 6700                       		beq.s	loc_1964C
00019A76 4A29 0028                  		tst.b	$28(a1)
00019A7A 6600                       		bne.s	loc_19658
00019A7C 0C40 0094                  		cmpi.w	#$94,d0
00019A80 6C00                       		bge.s	loc_19658
00019A82 5E40                       		addq.w	#7,d0
00019A84 6000                       		bra.s	loc_19658
00019A86                            ; ===========================================================================
00019A86                            
00019A86                            loc_1964C:
00019A86 4A69 003C                  		tst.w	$3C(a1)
00019A8A 6A00                       		bpl.s	loc_19658
00019A8C                            
00019A8C                            loc_19652:
00019A8C 4A40                       		tst.w	d0
00019A8E 6F00                       		ble.s	loc_19658
00019A90 5B40                       		subq.w	#5,d0
00019A92                            
00019A92                            loc_19658:
00019A92 3140 003C                  		move.w	d0,$3C(a0)
00019A96 E440                       		asr.w	#2,d0
00019A98 D168 000C                  		add.w	d0,$C(a0)
00019A9C 117C 0008 0019             		move.b	#8,$19(a0)
00019AA2 117C 000C 0016             		move.b	#$C,$16(a0)
00019AA8 4228 0020                  		clr.b	$20(a0)
00019AAC 2268 0034                  		movea.l	$34(a0),a1
00019AB0 4A29 0020                  		tst.b	$20(a1)
00019AB4 6700                       		beq.s	loc_19688
00019AB6 4A29 0029                  		tst.b	$29(a1)
00019ABA 6600                       		bne.s	loc_19688
00019ABC 117C 0084 0020             		move.b	#$84,$20(a0)
00019AC2                            
00019AC2                            loc_19688:
00019AC2 6000 FF50                  		bra.w	loc_195DA
00019AC6                            ; ===========================================================================
00019AC6                            
00019AC6                            Obj75_SpikeDelete:
00019AC6 4EF9 0000 D5EC             		jmp	DeleteObject
00019ACC                            ; ===========================================================================
00019ACC                            ; ---------------------------------------------------------------------------
00019ACC                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019ACC                            ; ---------------------------------------------------------------------------
00019ACC                            
00019ACC                            Obj76:					; XREF: Obj_Index
00019ACC 7000                       		moveq	#0,d0
00019ACE 1028 0024                  		move.b	$24(a0),d0
00019AD2 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019AD6 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019ADA                            ; ===========================================================================
00019ADA 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019ADC 0000                       		dc.w Obj76_Action-Obj76_Index
00019ADE 0000                       		dc.w loc_19762-Obj76_Index
00019AE0                            ; ===========================================================================
00019AE0                            
00019AE0                            Obj76_Main:				; XREF: Obj76_Index
00019AE0 7800                       		moveq	#0,d4
00019AE2 3A3C 2C10                  		move.w	#$2C10,d5
00019AE6 7C09                       		moveq	#9,d6
00019AE8 43D0                       		lea	(a0),a1
00019AEA 6000                       		bra.s	Obj76_MakeBlock
00019AEC                            ; ===========================================================================
00019AEC                            
00019AEC                            Obj76_Loop:
00019AEC 4EB9 0000 DA36             		jsr	SingleObjLoad
00019AF2 6600                       		bne.s	Obj76_ExitLoop
00019AF4                            
00019AF4                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019AF4 12BC 0076                  		move.b	#$76,(a1)
00019AF8 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019B00 337C 4000 0002             		move.w	#$4000,2(a1)
00019B06 137C 0004 0001             		move.b	#4,1(a1)
00019B0C 137C 0010 0019             		move.b	#$10,$19(a1)
00019B12 137C 0010 0016             		move.b	#$10,$16(a1)
00019B18 137C 0003 0018             		move.b	#3,$18(a1)
00019B1E 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019B22 337C 0582 000C             		move.w	#$582,$C(a1)
00019B28 3344 0028                  		move.w	d4,$28(a1)
00019B2C 0644 0101                  		addi.w	#$101,d4
00019B30 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019B34 5429 0024                  		addq.b	#2,$24(a1)
00019B38 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019B3C                            
00019B3C                            Obj76_ExitLoop:
00019B3C 4E75                       		rts	
00019B3E                            ; ===========================================================================
00019B3E                            
00019B3E                            Obj76_Action:				; XREF: Obj76_Index
00019B3E 1028 0029                  		move.b	$29(a0),d0
00019B42 B028 0028                  		cmp.b	$28(a0),d0
00019B46 6700                       		beq.s	Obj76_Solid
00019B48 4A00                       		tst.b	d0
00019B4A 6B00                       		bmi.s	loc_19718
00019B4C                            
00019B4C                            loc_19712:
00019B4C 6100 0000                  		bsr.w	Obj76_Break
00019B50 6000                       		bra.s	Obj76_Display
00019B52                            ; ===========================================================================
00019B52                            
00019B52                            loc_19718:
00019B52 2268 0034                  		movea.l	$34(a0),a1
00019B56 4A29 0021                  		tst.b	$21(a1)
00019B5A 67F0                       		beq.s	loc_19712
00019B5C 3169 0008 0008             		move.w	8(a1),8(a0)
00019B62 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019B68 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019B6E B2C8                       		cmpa.w	a0,a1
00019B70 6500                       		bcs.s	Obj76_Display
00019B72 3029 0012                  		move.w	$12(a1),d0
00019B76 48C0                       		ext.l	d0
00019B78 E080                       		asr.l	#8,d0
00019B7A D168 000C                  		add.w	d0,$C(a0)
00019B7E 6000                       		bra.s	Obj76_Display
00019B80                            ; ===========================================================================
00019B80                            
00019B80                            Obj76_Solid:				; XREF: Obj76_Action
00019B80 323C 001B                  		move.w	#$1B,d1
00019B84 343C 0010                  		move.w	#$10,d2
00019B88 363C 0011                  		move.w	#$11,d3
00019B8C 3828 0008                  		move.w	8(a0),d4
00019B90 4EB9 0000 F970             		jsr	SolidObject
00019B96                            
00019B96                            Obj76_Display:				; XREF: Obj76_Action
00019B96 4EF9 0000 D5B0             		jmp	DisplaySprite
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            loc_19762:				; XREF: Obj76_Index
00019B9C 4A28 0001                  		tst.b	1(a0)
00019BA0 6A00                       		bpl.s	Obj76_Delete
00019BA2 4EB9 0000 D55E             		jsr	ObjectFall
00019BA8 4EF9 0000 D5B0             		jmp	DisplaySprite
00019BAE                            ; ===========================================================================
00019BAE                            
00019BAE                            Obj76_Delete:
00019BAE 4EF9 0000 D5EC             		jmp	DeleteObject
00019BB4                            
00019BB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019BB4                            
00019BB4                            
00019BB4                            Obj76_Break:				; XREF: Obj76_Action
00019BB4 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019BB8 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019BBC 7801                       		moveq	#1,d4
00019BBE 7203                       		moveq	#3,d1
00019BC0 7438                       		moveq	#$38,d2
00019BC2 5428 0024                  		addq.b	#2,$24(a0)
00019BC6 117C 0008 0019             		move.b	#8,$19(a0)
00019BCC 117C 0008 0016             		move.b	#8,$16(a0)
00019BD2 43D0                       		lea	(a0),a1
00019BD4 6000                       		bra.s	Obj76_MakeFrag
00019BD6                            ; ===========================================================================
00019BD6                            
00019BD6                            Obj76_LoopFrag:
00019BD6 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00019BDC 6600                       		bne.s	loc_197D4
00019BDE                            
00019BDE                            Obj76_MakeFrag:
00019BDE 45D0                       		lea	(a0),a2
00019BE0 47D1                       		lea	(a1),a3
00019BE2 7603                       		moveq	#3,d3
00019BE4                            
00019BE4                            loc_197AA:
00019BE4 26DA                       		move.l	(a2)+,(a3)+
00019BE6 26DA                       		move.l	(a2)+,(a3)+
00019BE8 26DA                       		move.l	(a2)+,(a3)+
00019BEA 26DA                       		move.l	(a2)+,(a3)+
00019BEC 51CB FFF6                  		dbf	d3,loc_197AA
00019BF0                            
00019BF0 335C 0010                  		move.w	(a4)+,$10(a1)
00019BF4 335C 0012                  		move.w	(a4)+,$12(a1)
00019BF8 361D                       		move.w	(a5)+,d3
00019BFA D769 0008                  		add.w	d3,8(a1)
00019BFE 361D                       		move.w	(a5)+,d3
00019C00 D769 000C                  		add.w	d3,$C(a1)
00019C04 1344 001A                  		move.b	d4,$1A(a1)
00019C08 5244                       		addq.w	#1,d4
00019C0A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019C0E                            
00019C0E                            loc_197D4:
00019C0E 303C 00CB                  		move.w	#$CB,d0
00019C12 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019C18                            ; End of function Obj76_Break
00019C18                            
00019C18                            ; ===========================================================================
00019C18 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019C1C 0180 FE00                  		dc.w $180, $FE00
00019C20 FF00 FF00                  		dc.w $FF00, $FF00
00019C24 0100 FF00                  		dc.w $100, $FF00
00019C28 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019C2C 0010 0000                  		dc.w $10, 0
00019C30 0000 0010                  		dc.w 0,	$10
00019C34 0010 0010                  		dc.w $10, $10
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            Map_obj76:
00019C38                            	include "_maps\obj76.asm"
00019C38                            ; ---------------------------------------------------------------------------
00019C38                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019C38                            ; ---------------------------------------------------------------------------
00019C38 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019C3C 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019C40 0000                       		dc.w byte_19826-Map_obj76
00019C42 02                         byte_19808:	dc.b 2
00019C43 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019C48 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019C4D 00                         		dc.b 0
00019C4E 01                         byte_19814:	dc.b 1
00019C4F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019C54 01                         byte_1981A:	dc.b 1
00019C55 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019C5A 01                         byte_19820:	dc.b 1
00019C5B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019C60 01                         byte_19826:	dc.b 1
00019C61 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019C66                            		even
00019C66                            		even
00019C66                            
00019C66                            ; ===========================================================================
00019C66                            
00019C66                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019C66 4EF9 0000 D5EC             		jmp	DeleteObject
00019C6C                            ; ===========================================================================
00019C6C                            ; ---------------------------------------------------------------------------
00019C6C                            ; Object 82 - Eggman (SBZ2)
00019C6C                            ; ---------------------------------------------------------------------------
00019C6C                            
00019C6C                            Obj82:					; XREF: Obj_Index
00019C6C 7000                       		moveq	#0,d0
00019C6E 1028 0024                  		move.b	$24(a0),d0
00019C72 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019C76 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019C7A                            ; ===========================================================================
00019C7A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019C7C 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019C7E 0000                       		dc.w Obj82_Switch-Obj82_Index
00019C80                            
00019C80 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019C83 0400 03                    		dc.b 4,	0, 3
00019C86                            ; ===========================================================================
00019C86                            
00019C86                            Obj82_Main:				; XREF: Obj82_Index
00019C86 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019C8A 317C 2160 0008             		move.w	#$2160,8(a0)
00019C90 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019C96 117C 000F 0020             		move.b	#$F,$20(a0)
00019C9C 117C 0010 0021             		move.b	#$10,$21(a0)
00019CA2 08A8 0000 0022             		bclr	#0,$22(a0)
00019CA8 4228 0025                  		clr.b	$25(a0)
00019CAC 115A 0024                  		move.b	(a2)+,$24(a0)
00019CB0 115A 001C                  		move.b	(a2)+,$1C(a0)
00019CB4 115A 0018                  		move.b	(a2)+,$18(a0)
00019CB8 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019CC0 317C 0400 0002             		move.w	#$400,2(a0)
00019CC6 117C 0004 0001             		move.b	#4,1(a0)
00019CCC 08E8 0007 0001             		bset	#7,1(a0)
00019CD2 117C 0020 0019             		move.b	#$20,$19(a0)
00019CD8 4EB9 0000 DA4C             		jsr	SingleObjLoad2
00019CDE 6600                       		bne.s	Obj82_Eggman
00019CE0 2348 0034                  		move.l	a0,$34(a1)
00019CE4 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019CE8 337C 2130 0008             		move.w	#$2130,8(a1)
00019CEE 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019CF4 4228 0025                  		clr.b	$25(a0)
00019CF8 135A 0024                  		move.b	(a2)+,$24(a1)
00019CFC 135A 001C                  		move.b	(a2)+,$1C(a1)
00019D00 135A 0018                  		move.b	(a2)+,$18(a1)
00019D04 237C 0000 BE6E 0004        		move.l	#Map_obj32,4(a1)
00019D0C 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019D12 137C 0004 0001             		move.b	#4,1(a1)
00019D18 08E9 0007 0001             		bset	#7,1(a1)
00019D1E 137C 0010 0019             		move.b	#$10,$19(a1)
00019D24 137C 0000 001A             		move.b	#0,$1A(a1)
00019D2A                            
00019D2A                            Obj82_Eggman:				; XREF: Obj82_Index
00019D2A 7000                       		moveq	#0,d0
00019D2C 1028 0025                  		move.b	$25(a0),d0
00019D30 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019D34 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019D38 43FA 0000                  		lea	Ani_obj82(pc),a1
00019D3C 4EB9 0000 A6EC             		jsr	AnimateSprite
00019D42 4EF9 0000 D5B0             		jmp	DisplaySprite
00019D48                            ; ===========================================================================
00019D48 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019D4A 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019D4C 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019D4E 0000                       		dc.w loc_19934-Obj82_EggIndex
00019D50                            ; ===========================================================================
00019D50                            
00019D50                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019D50 3028 0008                  		move.w	8(a0),d0
00019D54 9078 D008                  		sub.w	($FFFFD008).w,d0
00019D58 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019D5C 6400                       		bcc.s	loc_19934	; if not, branch
00019D5E 5428 0025                  		addq.b	#2,$25(a0)
00019D62 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019D68 117C 0001 001C             		move.b	#1,$1C(a0)
00019D6E                            
00019D6E                            loc_19934:				; XREF: Obj82_EggIndex
00019D6E 4EF9 0000 D58A             		jmp	SpeedToPos
00019D74                            ; ===========================================================================
00019D74                            
00019D74                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019D74 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019D78 6600                       		bne.s	loc_19954	; if time remains, branch
00019D7A 5428 0025                  		addq.b	#2,$25(a0)
00019D7E 117C 0002 001C             		move.b	#2,$1C(a0)
00019D84 5868 000C                  		addq.w	#4,$C(a0)
00019D88 317C 000F 003C             		move.w	#15,$3C(a0)
00019D8E                            
00019D8E                            loc_19954:
00019D8E 60DE                       		bra.s	loc_19934
00019D90                            ; ===========================================================================
00019D90                            
00019D90                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019D90 5368 003C                  		subq.w	#1,$3C(a0)
00019D94 6E00                       		bgt.s	loc_199D0
00019D96 6600                       		bne.s	loc_1996A
00019D98 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019D9E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019DA4                            
00019DA4                            loc_1996A:
00019DA4 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019DAA 6E00                       		bgt.s	loc_19976
00019DAC 4268 0010                  		clr.w	$10(a0)
00019DB0                            
00019DB0                            loc_19976:
00019DB0 0668 0024 0012             		addi.w	#$24,$12(a0)
00019DB6 4A68 0012                  		tst.w	$12(a0)
00019DBA 6B00                       		bmi.s	Obj82_FindBlocks
00019DBC 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019DC2 6500                       		bcs.s	Obj82_FindBlocks
00019DC4 317C 5357 0028             		move.w	#$5357,$28(a0)
00019DCA 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019DD0 6500                       		bcs.s	Obj82_FindBlocks
00019DD2 317C 059B 000C             		move.w	#$59B,$C(a0)
00019DD8 4268 0012                  		clr.w	$12(a0)
00019DDC                            
00019DDC                            Obj82_FindBlocks:
00019DDC 3028 0010                  		move.w	$10(a0),d0
00019DE0 8068 0012                  		or.w	$12(a0),d0
00019DE4 6600                       		bne.s	loc_199D0
00019DE6 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019DEA 703E                       		moveq	#$3E,d0
00019DEC 7240                       		moveq	#$40,d1
00019DEE                            
00019DEE                            Obj82_FindLoop:	
00019DEE D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019DF0 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019DF4 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019DF8                            
00019DF8 6600                       		bne.s	loc_199D0
00019DFA 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019E00 5428 0025                  		addq.b	#2,$25(a0)
00019E04 117C 0001 001C             		move.b	#1,$1C(a0)
00019E0A                            
00019E0A                            loc_199D0:
00019E0A 6000 FF62                  		bra.w	loc_19934
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            Obj82_Switch:				; XREF: Obj82_Index
00019E0E 7000                       		moveq	#0,d0
00019E10 1028 0025                  		move.b	$25(a0),d0
00019E14 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019E18 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019E1C                            ; ===========================================================================
00019E1C 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019E1E 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019E20                            ; ===========================================================================
00019E20                            
00019E20                            loc_199E6:				; XREF: Obj82_SwIndex
00019E20 2268 0034                  		movea.l	$34(a0),a1
00019E24 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019E2A 6600                       		bne.s	Obj82_SwDisplay
00019E2C 117C 0001 001A             		move.b	#1,$1A(a0)
00019E32 5428 0025                  		addq.b	#2,$25(a0)
00019E36                            
00019E36                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019E36 4EF9 0000 D5B0             		jmp	DisplaySprite
00019E3C                            ; ===========================================================================
00019E3C                            Ani_obj82:
00019E3C                            	include "_anim\obj82.asm"
00019E3C                            ; ---------------------------------------------------------------------------
00019E3C                            ; Animation script - Eggman (SBZ2)
00019E3C                            ; ---------------------------------------------------------------------------
00019E3C 0000                       		dc.w byte_19A10-Ani_obj82
00019E3E 0000                       		dc.w byte_19A14-Ani_obj82
00019E40 0000                       		dc.w byte_19A18-Ani_obj82
00019E42 0000                       		dc.w byte_19A20-Ani_obj82
00019E44 0000                       		dc.w byte_19A24-Ani_obj82
00019E46 0000                       		dc.w byte_19A2A-Ani_obj82
00019E48 0000                       		dc.w byte_19A30-Ani_obj82
00019E4A 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019E4E 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019E52 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019E5A 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019E5E 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019E64 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019E6A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019E6E                            		even
00019E6E                            		even
00019E6E                            
00019E6E                            ; ---------------------------------------------------------------------------
00019E6E                            ; Sprite mappings - Eggman (SBZ2)
00019E6E                            ; ---------------------------------------------------------------------------
00019E6E                            Map_obj82:
00019E6E                            	include "_maps\obj82.asm"
00019E6E                            ; ---------------------------------------------------------------------------
00019E6E                            ; Sprite mappings - Eggman (SBZ2)
00019E6E                            ; ---------------------------------------------------------------------------
00019E6E 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019E72 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019E76 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019E7A 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019E7E 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019E82 0000                       		dc.w byte_19B4F-Map_obj82
00019E84 03                         byte_19A4A:	dc.b 3
00019E85 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019E8A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E8F 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019E94 04                         byte_19A5A:	dc.b 4
00019E95 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019E9A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019E9F 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019EA4 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019EA9 00                         		dc.b 0
00019EAA 04                         byte_19A70:	dc.b 4
00019EAB E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019EB0 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019EB5 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019EBA FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019EBF 00                         		dc.b 0
00019EC0 04                         byte_19A86:	dc.b 4
00019EC1 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019EC6 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019ECB 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019ED0 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019ED5 00                         		dc.b 0
00019ED6 04                         byte_19A9C:	dc.b 4
00019ED7 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019EDC F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019EE1 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019EE6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019EEB 00                         		dc.b 0
00019EEC 04                         byte_19AB2:	dc.b 4
00019EED E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019EF2 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019EF7 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019EFC 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019F01 00                         		dc.b 0
00019F02 07                         byte_19AC8:	dc.b 7
00019F03 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019F08 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019F0D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019F12 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019F17 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019F1C F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019F21 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019F26 05                         byte_19AEC:	dc.b 5
00019F27 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019F2C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019F31 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019F36 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019F3B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019F40 06                         byte_19B06:	dc.b 6
00019F41 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019F46 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019F4B 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019F50 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019F55 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019F5A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019F5F 00                         		dc.b 0
00019F60 08                         byte_19B26:	dc.b 8
00019F61 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019F66 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019F6B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019F70 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019F75 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019F7A F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019F7F 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019F84 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019F89 03                         byte_19B4F:	dc.b 3
00019F8A EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019F8F F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019F94 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019F9A 00                         		even
00019F9A 00                         		even
00019F9A                            
00019F9A                            ; ===========================================================================
00019F9A                            ; ---------------------------------------------------------------------------
00019F9A                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019F9A                            ; ---------------------------------------------------------------------------
00019F9A                            
00019F9A                            Obj83:					; XREF: Obj_Index
00019F9A 7000                       		moveq	#0,d0
00019F9C 1028 0024                  		move.b	$24(a0),d0
00019FA0 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019FA4 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019FA8                            ; ===========================================================================
00019FA8 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019FAA 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019FAC 0000                       		dc.w loc_19C36-Obj83_Index
00019FAE 0000                       		dc.w loc_19C62-Obj83_Index
00019FB0 0000                       		dc.w loc_19C72-Obj83_Index
00019FB2 0000                       		dc.w loc_19C80-Obj83_Index
00019FB4                            ; ===========================================================================
00019FB4                            
00019FB4                            Obj83_Main:				; XREF: Obj83_Index
00019FB4 317C 2080 0008             		move.w	#$2080,8(a0)
00019FBA 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019FC0 117C 0080 0019             		move.b	#$80,$19(a0)
00019FC6 117C 0010 0016             		move.b	#$10,$16(a0)
00019FCC 117C 0004 0001             		move.b	#4,1(a0)
00019FD2 08E8 0007 0001             		bset	#7,1(a0)
00019FD8 7800                       		moveq	#0,d4
00019FDA 3A3C 2010                  		move.w	#$2010,d5
00019FDE 7C07                       		moveq	#7,d6
00019FE0 45E8 0030                  		lea	$30(a0),a2
00019FE4                            
00019FE4                            Obj83_MakeBlock:
00019FE4 4EB9 0000 DA36             		jsr	SingleObjLoad
00019FEA 6600                       		bne.s	Obj83_ExitMake
00019FEC 34C9                       		move.w	a1,(a2)+
00019FEE 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019FF2 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019FFA 337C 4518 0002             		move.w	#$4518,2(a1)
0001A000 137C 0004 0001             		move.b	#4,1(a1)
0001A006 137C 0010 0019             		move.b	#$10,$19(a1)
0001A00C 137C 0010 0016             		move.b	#$10,$16(a1)
0001A012 137C 0003 0018             		move.b	#3,$18(a1)
0001A018 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A01C 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A022 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A026 137C 0008 0024             		move.b	#8,$24(a1)
0001A02C 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A030                            
0001A030                            Obj83_ExitMake:
0001A030 5428 0024                  		addq.b	#2,$24(a0)
0001A034 4E75                       		rts	
0001A036                            ; ===========================================================================
0001A036                            
0001A036                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A036 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A03C 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A03E 4228 001A                  		clr.b	$1A(a0)
0001A042 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A046                            
0001A046                            Obj83_Solid:
0001A046 7000                       		moveq	#0,d0
0001A048 1028 001A                  		move.b	$1A(a0),d0
0001A04C 4400                       		neg.b	d0
0001A04E 4880                       		ext.w	d0
0001A050 5040                       		addq.w	#8,d0
0001A052 E940                       		asl.w	#4,d0
0001A054 383C 2100                  		move.w	#$2100,d4
0001A058 9840                       		sub.w	d0,d4
0001A05A 1140 0019                  		move.b	d0,$19(a0)
0001A05E 3144 0008                  		move.w	d4,8(a0)
0001A062 720B                       		moveq	#$B,d1
0001A064 D240                       		add.w	d0,d1
0001A066 7410                       		moveq	#$10,d2
0001A068 7611                       		moveq	#$11,d3
0001A06A 4EF9 0000 F970             		jmp	SolidObject
0001A070                            ; ===========================================================================
0001A070                            
0001A070                            loc_19C36:				; XREF: Obj83_Index
0001A070 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A076 6400                       		bcc.s	Obj83_Solid2
0001A078 70FF                       		moveq	#-1,d0
0001A07A 1028 001A                  		move.b	$1A(a0),d0
0001A07E 4880                       		ext.w	d0
0001A080 D040                       		add.w	d0,d0
0001A082 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A086 2240                       		movea.l	d0,a1
0001A088 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A08E 5228 001A                  		addq.b	#1,$1A(a0)
0001A092 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A098 6700                       		beq.s	loc_19C62
0001A09A                            
0001A09A                            Obj83_Solid2:
0001A09A 60AA                       		bra.s	Obj83_Solid
0001A09C                            ; ===========================================================================
0001A09C                            
0001A09C                            loc_19C62:				; XREF: Obj83_Index
0001A09C 08A8 0003 0022             		bclr	#3,$22(a0)
0001A0A2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A0A8 6000 FBBC                  		bra.w	loc_1982C
0001A0AC                            ; ===========================================================================
0001A0AC                            
0001A0AC                            loc_19C72:				; XREF: Obj83_Index
0001A0AC 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A0B2 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A0B4 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A0BA                            ; ===========================================================================
0001A0BA                            
0001A0BA                            loc_19C80:				; XREF: Obj83_Index
0001A0BA 4A28 0001                  		tst.b	1(a0)
0001A0BE 6A00 FBA6                  		bpl.w	loc_1982C
0001A0C2 4EB9 0000 D55E             		jsr	ObjectFall
0001A0C8 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A0CE                            ; ===========================================================================
0001A0CE                            
0001A0CE                            Obj83_Break:				; XREF: loc_19C72
0001A0CE 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A0D2 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A0D6 7801                       		moveq	#1,d4
0001A0D8 7203                       		moveq	#3,d1
0001A0DA 7438                       		moveq	#$38,d2
0001A0DC 5428 0024                  		addq.b	#2,$24(a0)
0001A0E0 117C 0008 0019             		move.b	#8,$19(a0)
0001A0E6 117C 0008 0016             		move.b	#8,$16(a0)
0001A0EC 43D0                       		lea	(a0),a1
0001A0EE 6000                       		bra.s	Obj83_MakeFrag
0001A0F0                            ; ===========================================================================
0001A0F0                            
0001A0F0                            Obj83_LoopFrag:
0001A0F0 4EB9 0000 DA4C             		jsr	SingleObjLoad2
0001A0F6 6600                       		bne.s	Obj83_BreakSnd
0001A0F8                            
0001A0F8                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A0F8 45D0                       		lea	(a0),a2
0001A0FA 47D1                       		lea	(a1),a3
0001A0FC 7603                       		moveq	#3,d3
0001A0FE                            
0001A0FE                            loc_19CC4:
0001A0FE 26DA                       		move.l	(a2)+,(a3)+
0001A100 26DA                       		move.l	(a2)+,(a3)+
0001A102 26DA                       		move.l	(a2)+,(a3)+
0001A104 26DA                       		move.l	(a2)+,(a3)+
0001A106 51CB FFF6                  		dbf	d3,loc_19CC4
0001A10A                            
0001A10A 335C 0012                  		move.w	(a4)+,$12(a1)
0001A10E 361D                       		move.w	(a5)+,d3
0001A110 D769 0008                  		add.w	d3,8(a1)
0001A114 361D                       		move.w	(a5)+,d3
0001A116 D769 000C                  		add.w	d3,$C(a1)
0001A11A 1344 001A                  		move.b	d4,$1A(a1)
0001A11E 5244                       		addq.w	#1,d4
0001A120 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A124                            
0001A124                            Obj83_BreakSnd:
0001A124 303C 00CB                  		move.w	#$CB,d0
0001A128 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A12E 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A134                            ; ===========================================================================
0001A134 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A138 0120 00C0                  		dc.w $120, $C0
0001A13C FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A140 0010 0000                  		dc.w $10, 0
0001A144 0000 0010                  		dc.w 0,	$10
0001A148 0010 0010                  		dc.w $10, $10
0001A14C                            ; ---------------------------------------------------------------------------
0001A14C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A14C                            ; ---------------------------------------------------------------------------
0001A14C                            Map_obj83:
0001A14C                            	include "_maps\obj83.asm"
0001A14C                            ; ---------------------------------------------------------------------------
0001A14C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A14C                            ; ---------------------------------------------------------------------------
0001A14C 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A150 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A154 0000                       		dc.w byte_19D46-Map_obj83
0001A156 01                         byte_19D1C:	dc.b 1
0001A157 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A15C 02                         byte_19D22:	dc.b 2
0001A15D F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A162 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A167 00                         		dc.b 0
0001A168 02                         byte_19D2E:	dc.b 2
0001A169 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A16E F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A173 00                         		dc.b 0
0001A174 02                         byte_19D3A:	dc.b 2
0001A175 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A17A F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A17F 00                         		dc.b 0
0001A180 02                         byte_19D46:	dc.b 2
0001A181 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A186 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A18C 00                         		even
0001A18C 00                         		even
0001A18C                            
0001A18C                            ; ===========================================================================
0001A18C                            ; ---------------------------------------------------------------------------
0001A18C                            ; Object 85 - Eggman (FZ)
0001A18C                            ; ---------------------------------------------------------------------------
0001A18C                            
0001A18C                            Obj85_Delete:
0001A18C 4EF9 0000 D5EC             		jmp	DeleteObject
0001A192                            ; ===========================================================================
0001A192                            
0001A192                            Obj85:					; XREF: Obj_Index
0001A192 7000                       		moveq	#0,d0
0001A194 1028 0024                  		move.b	$24(a0),d0
0001A198 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A19C 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A1A0                            ; ===========================================================================
0001A1A0 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A1A2 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A1A4 0000                       		dc.w loc_1A38E-Obj85_Index
0001A1A6 0000                       		dc.w loc_1A346-Obj85_Index
0001A1A8 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A1AA 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A1AC 0000                       		dc.w loc_1A264-Obj85_Index
0001A1AE                            
0001A1AE 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A1B4 0001 9E6E                  		dc.l Map_obj82		; mappings pointer
0001A1B8 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A1BE 0000 0000                  		dc.l Map_obj84
0001A1C2 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A1C8 0000 0000                  		dc.l Map_FZBoss
0001A1CC 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A1D2 0001 9E6E                  		dc.l Map_obj82
0001A1D6 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A1DC 0001 8150                  		dc.l Map_Eggman
0001A1E0 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A1E6 0001 8150                  		dc.l Map_Eggman
0001A1EA                            
0001A1EA 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A1EF 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A1F4 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A1F9 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A1FE 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A203 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A208                            ; ===========================================================================
0001A208                            
0001A208                            Obj85_Main:				; XREF: Obj85_Index
0001A208 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A20C 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A210 2248                       		movea.l	a0,a1
0001A212 7205                       		moveq	#5,d1
0001A214 6000                       		bra.s	Obj85_LoadBoss
0001A216                            ; ===========================================================================
0001A216                            
0001A216                            Obj85_Loop:
0001A216 4EB9 0000 DA4C             		jsr	SingleObjLoad2
0001A21C 6600                       		bne.s	loc_19E20
0001A21E                            
0001A21E                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A21E 12BC 0085                  		move.b	#$85,(a1)
0001A222 335A 0008                  		move.w	(a2)+,8(a1)
0001A226 335A 000C                  		move.w	(a2)+,$C(a1)
0001A22A 335A 0002                  		move.w	(a2)+,2(a1)
0001A22E 235A 0004                  		move.l	(a2)+,4(a1)
0001A232 135B 0024                  		move.b	(a3)+,$24(a1)
0001A236 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A23A 135B 0018                  		move.b	(a3)+,$18(a1)
0001A23E 135B 0017                  		move.b	(a3)+,$17(a1)
0001A242 135B 0016                  		move.b	(a3)+,$16(a1)
0001A246 137C 0004 0001             		move.b	#4,1(a1)
0001A24C 08E8 0007 0001             		bset	#7,1(a0)
0001A252 2348 0034                  		move.l	a0,$34(a1)
0001A256 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A25A                            
0001A25A                            loc_19E20:
0001A25A 45E8 0036                  		lea	$36(a0),a2
0001A25E 4EB9 0000 DA36             		jsr	SingleObjLoad
0001A264 6600                       		bne.s	loc_19E5A
0001A266 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A26A 3489                       		move.w	a1,(a2)
0001A26C 2348 0034                  		move.l	a0,$34(a1)
0001A270 45E8 0038                  		lea	$38(a0),a2
0001A274 7400                       		moveq	#0,d2
0001A276 7203                       		moveq	#3,d1
0001A278                            
0001A278                            loc_19E3E:
0001A278 4EB9 0000 DA4C             		jsr	SingleObjLoad2
0001A27E 6600                       		bne.s	loc_19E5A
0001A280 34C9                       		move.w	a1,(a2)+
0001A282 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A286 2348 0034                  		move.l	a0,$34(a1)
0001A28A 1342 0028                  		move.b	d2,$28(a1)
0001A28E 5442                       		addq.w	#2,d2
0001A290 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A294                            
0001A294                            loc_19E5A:
0001A294 317C 0000 0034             		move.w	#0,$34(a0)
0001A29A                            		include "_param\bosshits.asm"
0001A29A 117C 0008 0021                            move.b  #8,$21(a0)
0001A29A 117C 0008 0021                            move.b  #8,$21(a0)
0001A2A0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A2A6                            
0001A2A6                            Obj85_Eggman:				; XREF: Obj85_Index
0001A2A6 7000                       		moveq	#0,d0
0001A2A8 1028 0034                  		move.b	$34(a0),d0
0001A2AC 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A2B0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A2B4 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A2BA                            ; ===========================================================================
0001A2BA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A2BE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A2C2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A2C6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A2CA                            ; ===========================================================================
0001A2CA                            
0001A2CA                            loc_19E90:				; XREF: off_19E80
0001A2CA 4AB8 F680                  		tst.l	($FFFFF680).w
0001A2CE 6600                       		bne.s	loc_19EA2
0001A2D0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A2D6 6500                       		bcs.s	loc_19EA2
0001A2D8 5428 0034                  		addq.b	#2,$34(a0)
0001A2DC                            
0001A2DC                            loc_19EA2:
0001A2DC 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A2E0 4E75                       		rts	
0001A2E2                            ; ===========================================================================
0001A2E2                            
0001A2E2                            loc_19EA8:				; XREF: off_19E80
0001A2E2 4A68 0030                  		tst.w	$30(a0)
0001A2E6 6A00                       		bpl.s	loc_19F10
0001A2E8 4268 0030                  		clr.w	$30(a0)
0001A2EC 4EB9 0000 2994             		jsr	(RandomNumber).l
0001A2F2 0240 000C                  		andi.w	#$C,d0
0001A2F6 3200                       		move.w	d0,d1
0001A2F8 5441                       		addq.w	#2,d1
0001A2FA 4A80                       		tst.l	d0
0001A2FC 6A00                       		bpl.s	loc_19EC6
0001A2FE C141                       		exg	d1,d0
0001A300                            
0001A300                            loc_19EC6:
0001A300 43FA 0000                  		lea	word_19FD6(pc),a1
0001A304 3031 0000                  		move.w	(a1,d0.w),d0
0001A308 3231 1000                  		move.w	(a1,d1.w),d1
0001A30C 3140 0030                  		move.w	d0,$30(a0)
0001A310 74FF                       		moveq	#-1,d2
0001A312 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A316 2242                       		movea.l	d2,a1
0001A318 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A31E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A324 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A328 2242                       		movea.l	d2,a1
0001A32A 137C 0001 0029             		move.b	#1,$29(a1)
0001A330 337C 0000 0030             		move.w	#0,$30(a1)
0001A336 317C 0001 0032             		move.w	#1,$32(a0)
0001A33C 4228 0035                  		clr.b	$35(a0)
0001A340 303C 00B7                  		move.w	#$B7,d0
0001A344 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A34A                            
0001A34A                            loc_19F10:
0001A34A 4A68 0032                  		tst.w	$32(a0)
0001A34E 6B00 0000                  		bmi.w	loc_19FA6
0001A352 08A8 0000 0022             		bclr	#0,$22(a0)
0001A358 3038 D008                  		move.w	($FFFFD008).w,d0
0001A35C 9068 0008                  		sub.w	8(a0),d0
0001A360 6500                       		bcs.s	loc_19F2E
0001A362 08E8 0000 0022             		bset	#0,$22(a0)
0001A368                            
0001A368                            loc_19F2E:
0001A368 323C 002B                  		move.w	#$2B,d1
0001A36C 343C 0014                  		move.w	#$14,d2
0001A370 363C 0014                  		move.w	#$14,d3
0001A374 3828 0008                  		move.w	8(a0),d4
0001A378 4EB9 0000 F970             		jsr	SolidObject
0001A37E 4A44                       		tst.w	d4
0001A380 6E00                       		bgt.s	loc_19F50
0001A382                            
0001A382                            loc_19F48:
0001A382 4A28 0035                  		tst.b	$35(a0)
0001A386 6600                       		bne.s	loc_19F88
0001A388 6000                       		bra.s	loc_19F96
0001A38A                            ; ===========================================================================
0001A38A                            
0001A38A                            loc_19F50:
0001A38A 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A38E 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A394 66EC                       		bne.s	loc_19F48
0001A396 303C 0300                  		move.w	#$300,d0
0001A39A 0828 0000 0022             		btst	#0,$22(a0)
0001A3A0 6600                       		bne.s	loc_19F6A
0001A3A2 4440                       		neg.w	d0
0001A3A4                            
0001A3A4                            loc_19F6A:
0001A3A4 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A3A8 4A28 0035                  		tst.b	$35(a0)
0001A3AC 6600                       		bne.s	loc_19F88
0001A3AE 5328 0021                  		subq.b	#1,$21(a0)
0001A3B2 117C 0064 0035             		move.b	#$64,$35(a0)
0001A3B8 303C 00AC                  		move.w	#$AC,d0
0001A3BC 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3C2                            
0001A3C2                            loc_19F88:
0001A3C2 5328 0035                  		subq.b	#1,$35(a0)
0001A3C6 6700                       		beq.s	loc_19F96
0001A3C8 117C 0003 001C             		move.b	#3,$1C(a0)
0001A3CE 6000                       		bra.s	loc_19F9C
0001A3D0                            ; ===========================================================================
0001A3D0                            
0001A3D0                            loc_19F96:
0001A3D0 117C 0001 001C             		move.b	#1,$1C(a0)
0001A3D6                            
0001A3D6                            loc_19F9C:
0001A3D6 43FA FA64                  		lea	Ani_obj82(pc),a1
0001A3DA 4EF9 0000 A6EC             		jmp	AnimateSprite
0001A3E0                            ; ===========================================================================
0001A3E0                            
0001A3E0                            loc_19FA6:
0001A3E0 4A28 0021                  		tst.b	$21(a0)
0001A3E4 6700                       		beq.s	loc_19FBC
0001A3E6 5428 0034                  		addq.b	#2,$34(a0)
0001A3EA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A3F0 4268 0032                  		clr.w	$32(a0)
0001A3F4 4E75                       		rts	
0001A3F6                            ; ===========================================================================
0001A3F6                            
0001A3F6                            loc_19FBC:
0001A3F6 117C 0006 0034             		move.b	#6,$34(a0)
0001A3FC 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A402 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A408 117C 0014 0016             		move.b	#$14,$16(a0)
0001A40E 4E75                       		rts	
0001A410                            ; ===========================================================================
0001A410 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A420                            ; ===========================================================================
0001A420                            
0001A420                            loc_19FE6:				; XREF: off_19E80
0001A420 70FF                       		moveq	#-1,d0
0001A422 3028 0036                  		move.w	$36(a0),d0
0001A426 2240                       		movea.l	d0,a1
0001A428 4A68 0030                  		tst.w	$30(a0)
0001A42C 6A00                       		bpl.s	loc_1A000
0001A42E 4268 0030                  		clr.w	$30(a0)
0001A432 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A438 6100                       		bsr.s	loc_1A020
0001A43A                            
0001A43A                            loc_1A000:
0001A43A 700F                       		moveq	#$F,d0
0001A43C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A440 6600                       		bne.s	loc_1A00A
0001A442 6100                       		bsr.s	loc_1A020
0001A444                            
0001A444                            loc_1A00A:
0001A444 4A68 0032                  		tst.w	$32(a0)
0001A448 6700                       		beq.s	locret_1A01E
0001A44A 5528 0034                  		subq.b	#2,$34(a0)
0001A44E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A454 4268 0032                  		clr.w	$32(a0)
0001A458                            
0001A458                            locret_1A01E:
0001A458 4E75                       		rts	
0001A45A                            ; ===========================================================================
0001A45A                            
0001A45A                            loc_1A020:
0001A45A 303C 00B1                  		move.w	#$B1,d0
0001A45E 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A464                            ; ===========================================================================
0001A464                            
0001A464                            loc_1A02A:				; XREF: off_19E80
0001A464 117C 0030 0017             		move.b	#$30,$17(a0)
0001A46A 08E8 0000 0022             		bset	#0,$22(a0)
0001A470 4EB9 0000 D58A             		jsr	SpeedToPos
0001A476 117C 0006 001A             		move.b	#6,$1A(a0)
0001A47C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A482 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A488 6500                       		bcs.s	loc_1A070
0001A48A 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A490 5428 0034                  		addq.b	#2,$34(a0)
0001A494 117C 0020 0017             		move.b	#$20,$17(a0)
0001A49A 317C 0100 0010             		move.w	#$100,$10(a0)
0001A4A0 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A4A6 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A4AA                            
0001A4AA                            loc_1A070:
0001A4AA 6000 0000                  		bra.w	loc_1A166
0001A4AE                            ; ===========================================================================
0001A4AE                            
0001A4AE                            loc_1A074:				; XREF: off_19E80
0001A4AE 08E8 0000 0022             		bset	#0,$22(a0)
0001A4B4 117C 0004 001C             		move.b	#4,$1C(a0)
0001A4BA 4EB9 0000 D58A             		jsr	SpeedToPos
0001A4C0 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A4C6 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A4CC 6500                       		bcs.s	loc_1A09A
0001A4CE 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A4D4                            
0001A4D4                            loc_1A09A:
0001A4D4 317C 0400 0010             		move.w	#$400,$10(a0)
0001A4DA 3028 0008                  		move.w	8(a0),d0
0001A4DE 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A4E2 6A00                       		bpl.s	loc_1A0B4
0001A4E4 317C 0500 0010             		move.w	#$500,$10(a0)
0001A4EA 6000 0000                  		bra.w	loc_1A0F2
0001A4EE                            ; ===========================================================================
0001A4EE                            
0001A4EE                            loc_1A0B4:
0001A4EE 0440 0070                  		subi.w	#$70,d0
0001A4F2 6500                       		bcs.s	loc_1A0F2
0001A4F4 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A4FA 5140                       		subq.w	#8,d0
0001A4FC 6500                       		bcs.s	loc_1A0F2
0001A4FE 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A504 5140                       		subq.w	#8,d0
0001A506 6500                       		bcs.s	loc_1A0F2
0001A508 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A50E 5140                       		subq.w	#8,d0
0001A510 6500                       		bcs.s	loc_1A0F2
0001A512 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A518 5140                       		subq.w	#8,d0
0001A51A 6500                       		bcs.s	loc_1A0F2
0001A51C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A522 0440 0038                  		subi.w	#$38,d0
0001A526 6500                       		bcs.s	loc_1A0F2
0001A528 4268 0010                  		clr.w	$10(a0)
0001A52C                            
0001A52C                            loc_1A0F2:
0001A52C 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A532 6500                       		bcs.s	loc_1A110
0001A534 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A53A 317C 0240 0010             		move.w	#$240,$10(a0)
0001A540 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A546 5428 0034                  		addq.b	#2,$34(a0)
0001A54A                            
0001A54A                            loc_1A110:
0001A54A 6000                       		bra.s	loc_1A15C
0001A54C                            ; ===========================================================================
0001A54C                            
0001A54C                            loc_1A112:				; XREF: off_19E80
0001A54C 4EB9 0000 D58A             		jsr	SpeedToPos
0001A552 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A558 6500                       		bcs.s	loc_1A124
0001A55A 4268 0010                  		clr.w	$10(a0)
0001A55E                            
0001A55E                            loc_1A124:
0001A55E 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A564 4A68 0012                  		tst.w	$12(a0)
0001A568 6B00                       		bmi.s	loc_1A142
0001A56A 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A570 6500                       		bcs.s	loc_1A142
0001A572 317C 0592 000C             		move.w	#$592,$C(a0)
0001A578 4268 0012                  		clr.w	$12(a0)
0001A57C                            
0001A57C                            loc_1A142:
0001A57C 3028 0010                  		move.w	$10(a0),d0
0001A580 8068 0012                  		or.w	$12(a0),d0
0001A584 6600                       		bne.s	loc_1A15C
0001A586 5428 0034                  		addq.b	#2,$34(a0)
0001A58A 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A590 117C 0001 0021             		move.b	#1,$21(a0)
0001A596                            
0001A596                            loc_1A15C:
0001A596 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A59A 4EB9 0000 A6EC             		jsr	AnimateSprite
0001A5A0                            
0001A5A0                            loc_1A166:
0001A5A0 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A5A6 6C00                       		bge.s	loc_1A172
0001A5A8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A5AC                            
0001A5AC                            loc_1A172:
0001A5AC 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A5B2 6C00                       		bge.s	locret_1A190
0001A5B4 323C 001B                  		move.w	#$1B,d1
0001A5B8 343C 0070                  		move.w	#$70,d2
0001A5BC 363C 0071                  		move.w	#$71,d3
0001A5C0 3828 0008                  		move.w	8(a0),d4
0001A5C4 4EF9 0000 F970             		jmp	SolidObject
0001A5CA                            ; ===========================================================================
0001A5CA                            
0001A5CA                            locret_1A190:
0001A5CA 4E75                       		rts	
0001A5CC                            ; ===========================================================================
0001A5CC                            
0001A5CC                            loc_1A192:				; XREF: off_19E80
0001A5CC 217C 0001 8150 0004        		move.l	#Map_Eggman,4(a0)
0001A5D4 317C 0400 0002             		move.w	#$400,2(a0)
0001A5DA 117C 0000 001C             		move.b	#0,$1C(a0)
0001A5E0 08E8 0000 0022             		bset	#0,$22(a0)
0001A5E6 4EB9 0000 D58A             		jsr	SpeedToPos
0001A5EC 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A5F2 6400                       		bcc.s	loc_1A1D0
0001A5F4 317C 0180 0010             		move.w	#$180,$10(a0)
0001A5FA 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A600 117C 000F 0020             		move.b	#$F,$20(a0)
0001A606 5428 0034                  		addq.b	#2,$34(a0)
0001A60A                            
0001A60A                            loc_1A1D0:
0001A60A 6000 FF8A                  		bra.w	loc_1A15C
0001A60E                            ; ===========================================================================
0001A60E                            
0001A60E                            loc_1A1D4:				; XREF: off_19E80
0001A60E 08E8 0000 0022             		bset	#0,$22(a0)
0001A614 4EB9 0000 D58A             		jsr	SpeedToPos
0001A61A 4A68 0030                  		tst.w	$30(a0)
0001A61E 6600                       		bne.s	loc_1A1FC
0001A620 4A28 0020                  		tst.b	$20(a0)
0001A624 6600                       		bne.s	loc_1A216
0001A626 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A62C 303C 00AC                  		move.w	#$AC,d0
0001A630 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A636                            
0001A636                            loc_1A1FC:
0001A636 5368 0030                  		subq.w	#1,$30(a0)
0001A63A 6600                       		bne.s	loc_1A216
0001A63C 4A28 0022                  		tst.b	$22(a0)
0001A640 6A00                       		bpl.s	loc_1A210
0001A642 317C 0060 0012             		move.w	#$60,$12(a0)
0001A648 6000                       		bra.s	loc_1A216
0001A64A                            ; ===========================================================================
0001A64A                            
0001A64A                            loc_1A210:
0001A64A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A650                            
0001A650                            loc_1A216:
0001A650 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A656 6D00                       		blt.s	loc_1A23A
0001A658 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A65E 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A664 4278 D014                  		clr.w	($FFFFD014).w
0001A668 4A68 0012                  		tst.w	$12(a0)
0001A66C 6A00                       		bpl.s	loc_1A248
0001A66E 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A674                            
0001A674                            loc_1A23A:
0001A674 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A67A 6D00                       		blt.s	loc_1A248
0001A67C 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A682                            
0001A682                            loc_1A248:
0001A682 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A688 6500                       		bcs.s	loc_1A260
0001A68A 4A28 0001                  		tst.b	1(a0)
0001A68E 6B00                       		bmi.s	loc_1A260
0001A690 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A696 6000 FAF4                  		bra.w	Obj85_Delete
0001A69A                            ; ===========================================================================
0001A69A                            
0001A69A                            loc_1A260:
0001A69A 6000 FEFA                  		bra.w	loc_1A15C
0001A69E                            ; ===========================================================================
0001A69E                            
0001A69E                            loc_1A264:				; XREF: Obj85_Index
0001A69E 2268 0034                  		movea.l	$34(a0),a1
0001A6A2 1011                       		move.b	(a1),d0
0001A6A4 B010                       		cmp.b	(a0),d0
0001A6A6 6600 FAE4                  		bne.w	Obj85_Delete
0001A6AA 117C 0007 001C             		move.b	#7,$1C(a0)
0001A6B0 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A6B6 6C00                       		bge.s	loc_1A280
0001A6B8 6000                       		bra.s	loc_1A2A6
0001A6BA                            ; ===========================================================================
0001A6BA                            
0001A6BA                            loc_1A280:
0001A6BA 4A69 0010                  		tst.w	$10(a1)
0001A6BE 6700                       		beq.s	loc_1A28C
0001A6C0 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A6C6                            
0001A6C6                            loc_1A28C:
0001A6C6 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A6CA 4EB9 0000 A6EC             		jsr	AnimateSprite
0001A6D0                            
0001A6D0                            loc_1A296:
0001A6D0 2268 0034                  		movea.l	$34(a0),a1
0001A6D4 3169 0008 0008             		move.w	8(a1),8(a0)
0001A6DA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A6E0                            
0001A6E0                            loc_1A2A6:
0001A6E0 2268 0034                  		movea.l	$34(a0),a1
0001A6E4 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A6EA 7003                       		moveq	#3,d0
0001A6EC C028 0022                  		and.b	$22(a0),d0
0001A6F0 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A6F6 8128 0001                  		or.b	d0,1(a0)
0001A6FA 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A700                            ; ===========================================================================
0001A700                            
0001A700                            loc_1A2C6:				; XREF: Obj85_Index
0001A700 2268 0034                  		movea.l	$34(a0),a1
0001A704 1011                       		move.b	(a1),d0
0001A706 B010                       		cmp.b	(a0),d0
0001A708 6600 FA82                  		bne.w	Obj85_Delete
0001A70C 0CA9 0001 8150 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A714 6700                       		beq.s	loc_1A2E4
0001A716 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A71C 60C2                       		bra.s	loc_1A2A6
0001A71E                            ; ===========================================================================
0001A71E                            
0001A71E                            loc_1A2E4:
0001A71E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A724 4A29 0021                  		tst.b	$21(a1)
0001A728 6F00                       		ble.s	loc_1A312
0001A72A 117C 0006 001C             		move.b	#6,$1C(a0)
0001A730 217C 0001 8150 0004        		move.l	#Map_Eggman,4(a0)
0001A738 317C 0400 0002             		move.w	#$400,2(a0)
0001A73E 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A742 4EB9 0000 A6EC             		jsr	AnimateSprite
0001A748 6000 FF86                  		bra.w	loc_1A296
0001A74C                            ; ===========================================================================
0001A74C                            
0001A74C                            loc_1A312:
0001A74C 4A28 0001                  		tst.b	1(a0)
0001A750 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A754 6100 D558                  		bsr.w	BossDefeated
0001A758 117C 0002 0018             		move.b	#2,$18(a0)
0001A75E 117C 0000 001C             		move.b	#0,$1C(a0)
0001A764 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A76C 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A772 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A776 4EB9 0000 A6EC             		jsr	AnimateSprite
0001A77C 6000 FF52                  		bra.w	loc_1A296
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            loc_1A346:				; XREF: Obj85_Index
0001A780 08E8 0000 0022             		bset	#0,$22(a0)
0001A786 2268 0034                  		movea.l	$34(a0),a1
0001A78A 0CA9 0001 8150 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A792 6700                       		beq.s	loc_1A35E
0001A794 6000 FF4A                  		bra.w	loc_1A2A6
0001A798                            ; ===========================================================================
0001A798                            
0001A798                            loc_1A35E:
0001A798 3169 0008 0008             		move.w	8(a1),8(a0)
0001A79E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A7A4 4A28 001E                  		tst.b	$1E(a0)
0001A7A8 6600                       		bne.s	loc_1A376
0001A7AA 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A7B0                            
0001A7B0                            loc_1A376:
0001A7B0 5328 001E                  		subq.b	#1,$1E(a0)
0001A7B4 6E00                       		bgt.s	loc_1A38A
0001A7B6 5228 001A                  		addq.b	#1,$1A(a0)
0001A7BA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A7C0 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A7C4                            
0001A7C4                            loc_1A38A:
0001A7C4 6000 FF0A                  		bra.w	loc_1A296
0001A7C8                            ; ===========================================================================
0001A7C8                            
0001A7C8                            loc_1A38E:				; XREF: Obj85_Index
0001A7C8 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A7CE 3038 D008                  		move.w	($FFFFD008).w,d0
0001A7D2 9068 0008                  		sub.w	8(a0),d0
0001A7D6 6500                       		bcs.s	loc_1A3A6
0001A7D8 4A28 0001                  		tst.b	1(a0)
0001A7DC 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A7E0                            
0001A7E0                            loc_1A3A6:
0001A7E0 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A7E6                            ; ===========================================================================
0001A7E6                            
0001A7E6                            loc_1A3AC:				; XREF: Obj85_Index
0001A7E6 117C 0000 001A             		move.b	#0,$1A(a0)
0001A7EC 08E8 0000 0022             		bset	#0,$22(a0)
0001A7F2 2268 0034                  		movea.l	$34(a0),a1
0001A7F6 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A7FC 6600                       		bne.s	loc_1A3D0
0001A7FE 0CA9 0001 8150 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A806 6700 F984                  		beq.w	Obj85_Delete
0001A80A                            
0001A80A                            loc_1A3D0:
0001A80A 6000 FED4                  		bra.w	loc_1A2A6
0001A80E                            ; ===========================================================================
0001A80E                            Ani_obj85:
0001A80E                            	include "_anim\obj85.asm"
0001A80E                            ; ---------------------------------------------------------------------------
0001A80E                            ; Animation script - Eggman (FZ)
0001A80E                            ; ---------------------------------------------------------------------------
0001A80E 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A810 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A814                            		even
0001A814                            		even
0001A814                            
0001A814                            Map_Eggman2:
0001A814                            	include "_maps\Eggman2.asm"
0001A814                            ; ---------------------------------------------------------------------------
0001A814                            ; Sprite mappings - Eggman (FZ)
0001A814                            ; ---------------------------------------------------------------------------
0001A814 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A816 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A818 06                         byte_1A3DE:	dc.b 6
0001A819 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A81E EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A823 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A828 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A82D FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A832 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A837 06                         byte_1A3FD:	dc.b 6
0001A838 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A83D EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A842 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A847 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A84C FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A851 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A856                            		even
0001A856                            		even
0001A856                            
0001A856                            Map_FZBoss:
0001A856                            	include "_maps\FZ boss.asm"
0001A856                            ; ---------------------------------------------------------------------------
0001A856                            ; Sprite mappings - boss (FZ)
0001A856                            ; ---------------------------------------------------------------------------
0001A856 0000                       		dc.w byte_1A422-Map_FZBoss
0001A858 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A85A 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A85C 02                         byte_1A422:	dc.b 2
0001A85D 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A862 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A867 03                         byte_1A42D:	dc.b 3
0001A868 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A86D 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A872 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A877 02                         byte_1A43D:	dc.b 2
0001A878 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A87D 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A882                            		even
0001A882                            		even
0001A882                            
0001A882                            ; ===========================================================================
0001A882                            
0001A882                            Obj84_Delete:
0001A882 4EF9 0000 D5EC             		jmp	DeleteObject
0001A888                            ; ===========================================================================
0001A888                            ; ---------------------------------------------------------------------------
0001A888                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A888                            ; ---------------------------------------------------------------------------
0001A888                            
0001A888                            Obj84:					; XREF: Obj_Index
0001A888 7000                       		moveq	#0,d0
0001A88A 1028 0024                  		move.b	$24(a0),d0
0001A88E 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A892 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A896                            ; ===========================================================================
0001A896 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A898 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A89A 0000                       		dc.w loc_1A57E-Obj84_Index
0001A89C                            
0001A89C 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A8A0 2550 0620                  		dc.w $2550, $620
0001A8A4 2490 04C0                  		dc.w $2490, $4C0
0001A8A8 2510 04C0                  		dc.w $2510, $4C0
0001A8AC                            ; ===========================================================================
0001A8AC                            
0001A8AC                            Obj84_Main:				; XREF: Obj84_Index
0001A8AC 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A8B0 7000                       		moveq	#0,d0
0001A8B2 1028 0028                  		move.b	$28(a0),d0
0001A8B6 D040                       		add.w	d0,d0
0001A8B8 D2C0                       		adda.w	d0,a1
0001A8BA 117C 0004 0001             		move.b	#4,1(a0)
0001A8C0 08E8 0007 0001             		bset	#7,1(a0)
0001A8C6 08E8 0004 0001             		bset	#4,1(a0)
0001A8CC 317C 0300 0002             		move.w	#$300,2(a0)
0001A8D2 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A8DA 3159 0008                  		move.w	(a1)+,8(a0)
0001A8DE 3151 000C                  		move.w	(a1),$C(a0)
0001A8E2 3159 0038                  		move.w	(a1)+,$38(a0)
0001A8E6 117C 0020 0016             		move.b	#$20,$16(a0)
0001A8EC 117C 0060 0017             		move.b	#$60,$17(a0)
0001A8F2 117C 0020 0019             		move.b	#$20,$19(a0)
0001A8F8 117C 0060 0016             		move.b	#$60,$16(a0)
0001A8FE 117C 0003 0018             		move.b	#3,$18(a0)
0001A904 5428 0024                  		addq.b	#2,$24(a0)
0001A908                            
0001A908                            loc_1A4CE:				; XREF: Obj84_Index
0001A908 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A90E 6F00                       		ble.s	loc_1A4DC
0001A910 08E8 0001 0001             		bset	#1,1(a0)
0001A916                            
0001A916                            loc_1A4DC:
0001A916 42A8 003C                  		clr.l	$3C(a0)
0001A91A 4A28 0029                  		tst.b	$29(a0)
0001A91E 6700                       		beq.s	loc_1A4EA
0001A920 5428 0024                  		addq.b	#2,$24(a0)
0001A924                            
0001A924                            loc_1A4EA:
0001A924 2028 003C                  		move.l	$3C(a0),d0
0001A928 2228 0038                  		move.l	$38(a0),d1
0001A92C D280                       		add.l	d0,d1
0001A92E 4841                       		swap	d1
0001A930 3141 000C                  		move.w	d1,$C(a0)
0001A934 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A93A 6600                       		bne.s	loc_1A524
0001A93C 4A68 0030                  		tst.w	$30(a0)
0001A940 6A00                       		bpl.s	loc_1A524
0001A942 70F6                       		moveq	#-$A,d0
0001A944 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A94A 6F00                       		ble.s	loc_1A514
0001A94C 700E                       		moveq	#$E,d0
0001A94E                            
0001A94E                            loc_1A514:
0001A94E D240                       		add.w	d0,d1
0001A950 2268 0034                  		movea.l	$34(a0),a1
0001A954 3341 000C                  		move.w	d1,$C(a1)
0001A958 3368 0008 0008             		move.w	8(a0),8(a1)
0001A95E                            
0001A95E                            loc_1A524:
0001A95E 323C 002B                  		move.w	#$2B,d1
0001A962 343C 0060                  		move.w	#$60,d2
0001A966 363C 0061                  		move.w	#$61,d3
0001A96A 3828 0008                  		move.w	8(a0),d4
0001A96E 4EB9 0000 F970             		jsr	SolidObject
0001A974 7000                       		moveq	#0,d0
0001A976 3228 003C                  		move.w	$3C(a0),d1
0001A97A 6A00                       		bpl.s	loc_1A550
0001A97C 4441                       		neg.w	d1
0001A97E 5141                       		subq.w	#8,d1
0001A980 6500                       		bcs.s	loc_1A55C
0001A982 5200                       		addq.b	#1,d0
0001A984 E841                       		asr.w	#4,d1
0001A986 D041                       		add.w	d1,d0
0001A988 6000                       		bra.s	loc_1A55C
0001A98A                            ; ===========================================================================
0001A98A                            
0001A98A                            loc_1A550:
0001A98A 0441 0027                  		subi.w	#$27,d1
0001A98E 6500                       		bcs.s	loc_1A55C
0001A990 5200                       		addq.b	#1,d0
0001A992 E841                       		asr.w	#4,d1
0001A994 D041                       		add.w	d1,d0
0001A996                            
0001A996                            loc_1A55C:
0001A996 1140 001A                  		move.b	d0,$1A(a0)
0001A99A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A99E 9068 0008                  		sub.w	8(a0),d0
0001A9A2 6B00                       		bmi.s	loc_1A578
0001A9A4 0440 0140                  		subi.w	#$140,d0
0001A9A8 6B00                       		bmi.s	loc_1A578
0001A9AA 4A28 0001                  		tst.b	1(a0)
0001A9AE 6A00 FED2                  		bpl.w	Obj84_Delete
0001A9B2                            
0001A9B2                            loc_1A578:
0001A9B2 4EF9 0000 D5B0             		jmp	DisplaySprite
0001A9B8                            ; ===========================================================================
0001A9B8                            
0001A9B8                            loc_1A57E:				; XREF: Obj84_Index
0001A9B8 7000                       		moveq	#0,d0
0001A9BA 1028 0028                  		move.b	$28(a0),d0
0001A9BE 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A9C2 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A9C6 6000 FF5C                  		bra.w	loc_1A4EA
0001A9CA                            ; ===========================================================================
0001A9CA 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A9CC 0000                       		dc.w loc_1A598-off_1A590
0001A9CE 0000                       		dc.w loc_1A604-off_1A590
0001A9D0 0000                       		dc.w loc_1A604-off_1A590
0001A9D2                            ; ===========================================================================
0001A9D2                            
0001A9D2                            loc_1A598:				; XREF: off_1A590
0001A9D2 4A28 0029                  		tst.b	$29(a0)
0001A9D6 6600                       		bne.s	loc_1A5D4
0001A9D8 2268 0034                  		movea.l	$34(a0),a1
0001A9DC 4A29 0021                  		tst.b	$21(a1)
0001A9E0 6600                       		bne.s	loc_1A5B4
0001A9E2 6100 D2CA                  		bsr.w	BossDefeated
0001A9E6 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A9EE                            
0001A9EE                            loc_1A5B4:
0001A9EE 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A9F6 6400                       		bcc.s	locret_1A602
0001A9F8 42A8 003C                  		clr.l	$3C(a0)
0001A9FC 2268 0034                  		movea.l	$34(a0),a1
0001AA00 5369 0032                  		subq.w	#1,$32(a1)
0001AA04 4269 0030                  		clr.w	$30(a1)
0001AA08 5528 0024                  		subq.b	#2,$24(a0)
0001AA0C 4E75                       		rts	
0001AA0E                            ; ===========================================================================
0001AA0E                            
0001AA0E                            loc_1A5D4:
0001AA0E 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AA14 6C00                       		bge.s	loc_1A5E4
0001AA16 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AA1E                            
0001AA1E                            loc_1A5E4:
0001AA1E 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AA26 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AA2C 6E00                       		bgt.s	locret_1A602
0001AA2E 4268 003E                  		clr.w	$3E(a0)
0001AA32 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AA38 4228 0029                  		clr.b	$29(a0)
0001AA3C                            
0001AA3C                            locret_1A602:
0001AA3C 4E75                       		rts	
0001AA3E                            ; ===========================================================================
0001AA3E                            
0001AA3E                            loc_1A604:				; XREF: off_1A590
0001AA3E 08E8 0001 0001             		bset	#1,1(a0)
0001AA44 4A28 0029                  		tst.b	$29(a0)
0001AA48 6600                       		bne.s	loc_1A646
0001AA4A 2268 0034                  		movea.l	$34(a0),a1
0001AA4E 4A29 0021                  		tst.b	$21(a1)
0001AA52 6600                       		bne.s	loc_1A626
0001AA54 6100 D258                  		bsr.w	BossDefeated
0001AA58 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AA60                            
0001AA60                            loc_1A626:
0001AA60 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AA68 6400                       		bcc.s	locret_1A674
0001AA6A 42A8 003C                  		clr.l	$3C(a0)
0001AA6E 2268 0034                  		movea.l	$34(a0),a1
0001AA72 5369 0032                  		subq.w	#1,$32(a1)
0001AA76 4269 0030                  		clr.w	$30(a1)
0001AA7A 5528 0024                  		subq.b	#2,$24(a0)
0001AA7E 4E75                       		rts	
0001AA80                            ; ===========================================================================
0001AA80                            
0001AA80                            loc_1A646:
0001AA80 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AA86 6D00                       		blt.s	loc_1A656
0001AA88 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AA90                            
0001AA90                            loc_1A656:
0001AA90 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AA98 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AA9E 6D00                       		blt.s	locret_1A674
0001AAA0 4268 003E                  		clr.w	$3E(a0)
0001AAA4 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AAAA 4228 0029                  		clr.b	$29(a0)
0001AAAE                            
0001AAAE                            locret_1A674:
0001AAAE 4E75                       		rts	
0001AAB0                            ; ===========================================================================
0001AAB0                            ; ---------------------------------------------------------------------------
0001AAB0                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AAB0                            ; ---------------------------------------------------------------------------
0001AAB0                            Map_obj84:
0001AAB0                            	include "_maps\obj84.asm"
0001AAB0                            ; ---------------------------------------------------------------------------
0001AAB0                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AAB0                            ; ---------------------------------------------------------------------------
0001AAB0 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AAB4 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AAB8 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AABC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AAC0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AAC4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AAC8 06                         byte_1A68E:	dc.b 6
0001AAC9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AACE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AAD3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AAD8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AADD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AAE2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AAE7 08                         byte_1A6AD:	dc.b 8
0001AAE8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AAED A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AAF2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AAF7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AAFC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB01 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB06 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB0B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB10 0A                         byte_1A6D6:	dc.b $A
0001AB11 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB16 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB1B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB20 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB25 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB2A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB2F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB34 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB39 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB3E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB43 0C                         byte_1A709:	dc.b $C
0001AB44 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB49 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB4E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB53 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB58 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB5D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB62 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AB67 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AB6C F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AB71 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AB76 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AB7B 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AB80 0D                         byte_1A746:	dc.b $D
0001AB81 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AB86 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AB8B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AB90 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AB95 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AB9A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AB9F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ABA4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ABA9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ABAE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ABB3 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ABB8 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ABBD 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ABC2 0E                         byte_1A788:	dc.b $E
0001ABC3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ABC8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ABCD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ABD2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ABD7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ABDC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ABE1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ABE6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ABEB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ABF0 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ABF5 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ABFA 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ABFF 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AC04 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AC09 02                         byte_1A7CF:	dc.b 2
0001AC0A F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AC0F 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AC14                            		even
0001AC14                            		even
0001AC14                            
0001AC14                            ; ===========================================================================
0001AC14                            ; ---------------------------------------------------------------------------
0001AC14                            ; Object 86 - energy balls (FZ)
0001AC14                            ; ---------------------------------------------------------------------------
0001AC14                            
0001AC14                            Obj86:					; XREF: Obj_Index
0001AC14 7000                       		moveq	#0,d0
0001AC16 1028 0024                  		move.b	$24(a0),d0
0001AC1A 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AC1E 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AC22                            ; ===========================================================================
0001AC22 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AC24 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AC26 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AC28 0000                       		dc.w loc_1A962-Obj86_Index
0001AC2A 0000                       		dc.w loc_1A982-Obj86_Index
0001AC2C                            ; ===========================================================================
0001AC2C                            
0001AC2C                            Obj86_Main:				; XREF: Obj86_Index
0001AC2C 317C 2588 0008             		move.w	#$2588,8(a0)
0001AC32 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AC38 317C 0300 0002             		move.w	#$300,2(a0)
0001AC3E 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AC46 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC4C 117C 0003 0018             		move.b	#3,$18(a0)
0001AC52 117C 0008 0017             		move.b	#8,$17(a0)
0001AC58 117C 0008 0016             		move.b	#8,$16(a0)
0001AC5E 117C 0004 0001             		move.b	#4,1(a0)
0001AC64 08E8 0007 0001             		bset	#7,1(a0)
0001AC6A 5428 0024                  		addq.b	#2,$24(a0)
0001AC6E                            
0001AC6E                            Obj86_Generator:			; XREF: Obj86_Index
0001AC6E 2268 0034                  		movea.l	$34(a0),a1
0001AC72 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AC78 6600                       		bne.s	loc_1A850
0001AC7A 10BC 003F                  		move.b	#$3F,(a0)
0001AC7E 117C 0000 0024             		move.b	#0,$24(a0)
0001AC84 4EF9 0000 D5B0             		jmp	DisplaySprite
0001AC8A                            ; ===========================================================================
0001AC8A                            
0001AC8A                            loc_1A850:
0001AC8A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC90 4A28 0029                  		tst.b	$29(a0)
0001AC94 6700                       		beq.s	loc_1A86C
0001AC96 5428 0024                  		addq.b	#2,$24(a0)
0001AC9A 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACA0 117C 003E 0028             		move.b	#$3E,$28(a0)
0001ACA6                            
0001ACA6                            loc_1A86C:
0001ACA6 323C 0013                  		move.w	#$13,d1
0001ACAA 343C 0008                  		move.w	#8,d2
0001ACAE 363C 0011                  		move.w	#$11,d3
0001ACB2 3828 0008                  		move.w	8(a0),d4
0001ACB6 4EB9 0000 F970             		jsr	SolidObject
0001ACBC 3038 D008                  		move.w	($FFFFD008).w,d0
0001ACC0 9068 0008                  		sub.w	8(a0),d0
0001ACC4 6B00                       		bmi.s	loc_1A89A
0001ACC6 0440 0140                  		subi.w	#$140,d0
0001ACCA 6B00                       		bmi.s	loc_1A89A
0001ACCC 4A28 0001                  		tst.b	1(a0)
0001ACD0 6A00 FBB0                  		bpl.w	Obj84_Delete
0001ACD4                            
0001ACD4                            loc_1A89A:
0001ACD4 43FA 0000                  		lea	Ani_obj86(pc),a1
0001ACD8 4EB9 0000 A6EC             		jsr	AnimateSprite
0001ACDE 4EF9 0000 D5B0             		jmp	DisplaySprite
0001ACE4                            ; ===========================================================================
0001ACE4                            
0001ACE4                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001ACE4 4A28 0029                  		tst.b	$29(a0)
0001ACE8 6700 0000                  		beq.w	loc_1A954
0001ACEC 4228 0029                  		clr.b	$29(a0)
0001ACF0 D068 0030                  		add.w	$30(a0),d0
0001ACF4 0240 001E                  		andi.w	#$1E,d0
0001ACF8 D4C0                       		adda.w	d0,a2
0001ACFA 5868 0030                  		addq.w	#4,$30(a0)
0001ACFE 4268 0032                  		clr.w	$32(a0)
0001AD02 7403                       		moveq	#3,d2
0001AD04                            
0001AD04                            Obj86_Loop:
0001AD04 4EB9 0000 DA4C             		jsr	SingleObjLoad2
0001AD0A 6600 0000                  		bne.w	loc_1A954
0001AD0E 12BC 0086                  		move.b	#$86,(a1)
0001AD12 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD18 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AD1E 137C 0008 0024             		move.b	#8,$24(a1)
0001AD24 337C 2300 0002             		move.w	#$2300,2(a1)
0001AD2A 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AD32 137C 000C 0016             		move.b	#$C,$16(a1)
0001AD38 137C 000C 0017             		move.b	#$C,$17(a1)
0001AD3E 137C 0000 0020             		move.b	#0,$20(a1)
0001AD44 137C 0003 0018             		move.b	#3,$18(a1)
0001AD4A 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AD50 137C 0004 0001             		move.b	#4,1(a1)
0001AD56 08E9 0007 0001             		bset	#7,1(a1)
0001AD5C 2348 0034                  		move.l	a0,$34(a1)
0001AD60 4EB9 0000 2994             		jsr	(RandomNumber).l
0001AD66 3228 0032                  		move.w	$32(a0),d1
0001AD6A C3FC FFB1                  		muls.w	#-$4F,d1
0001AD6E 0641 2578                  		addi.w	#$2578,d1
0001AD72 0240 001F                  		andi.w	#$1F,d0
0001AD76 0440 0010                  		subi.w	#$10,d0
0001AD7A D041                       		add.w	d1,d0
0001AD7C 3340 0030                  		move.w	d0,$30(a1)
0001AD80 5268 0032                  		addq.w	#1,$32(a0)
0001AD84 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AD8A 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AD8E                            
0001AD8E                            loc_1A954:
0001AD8E 4A68 0032                  		tst.w	$32(a0)
0001AD92 6600                       		bne.s	loc_1A95E
0001AD94 5428 0024                  		addq.b	#2,$24(a0)
0001AD98                            
0001AD98                            loc_1A95E:
0001AD98 6000 FF0C                  		bra.w	loc_1A86C
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            loc_1A962:				; XREF: Obj86_Index
0001AD9C 117C 0002 001C             		move.b	#2,$1C(a0)
0001ADA2 4A68 0038                  		tst.w	$38(a0)
0001ADA6 6600                       		bne.s	loc_1A97E
0001ADA8 117C 0002 0024             		move.b	#2,$24(a0)
0001ADAE 2268 0034                  		movea.l	$34(a0),a1
0001ADB2 337C FFFF 0032             		move.w	#-1,$32(a1)
0001ADB8                            
0001ADB8                            loc_1A97E:
0001ADB8 6000 FEEC                  		bra.w	loc_1A86C
0001ADBC                            ; ===========================================================================
0001ADBC                            
0001ADBC                            loc_1A982:				; XREF: Obj86_Index
0001ADBC 7000                       		moveq	#0,d0
0001ADBE 1028 0025                  		move.b	$25(a0),d0
0001ADC2 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001ADC6 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001ADCA 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001ADCE 4EB9 0000 A6EC             		jsr	AnimateSprite
0001ADD4 4EF9 0000 D5B0             		jmp	DisplaySprite
0001ADDA                            ; ===========================================================================
0001ADDA 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001ADDC 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001ADDE 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001ADE0                            ; ===========================================================================
0001ADE0                            
0001ADE0                            loc_1A9A6:				; XREF: Obj86_Index2
0001ADE0 3028 0030                  		move.w	$30(a0),d0
0001ADE4 9068 0008                  		sub.w	8(a0),d0
0001ADE8 E940                       		asl.w	#4,d0
0001ADEA 3140 0010                  		move.w	d0,$10(a0)
0001ADEE 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001ADF4 5428 0025                  		addq.b	#2,$25(a0)
0001ADF8 4E75                       		rts	
0001ADFA                            ; ===========================================================================
0001ADFA                            
0001ADFA                            loc_1A9C0:				; XREF: Obj86_Index2
0001ADFA 4A68 0010                  		tst.w	$10(a0)
0001ADFE 6700                       		beq.s	loc_1A9E6
0001AE00 4EB9 0000 D58A             		jsr	SpeedToPos
0001AE06 3028 0008                  		move.w	8(a0),d0
0001AE0A 9068 0030                  		sub.w	$30(a0),d0
0001AE0E 6400                       		bcc.s	loc_1A9E6
0001AE10 4268 0010                  		clr.w	$10(a0)
0001AE14 D168 0008                  		add.w	d0,8(a0)
0001AE18 2268 0034                  		movea.l	$34(a0),a1
0001AE1C 5369 0032                  		subq.w	#1,$32(a1)
0001AE20                            
0001AE20                            loc_1A9E6:
0001AE20 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE26 5368 0028                  		subq.w	#1,$28(a0)
0001AE2A 6600                       		bne.s	locret_1AA1C
0001AE2C 5428 0025                  		addq.b	#2,$25(a0)
0001AE30 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE36 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AE3C 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AE42 7000                       		moveq	#0,d0
0001AE44 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE48 9068 0008                  		sub.w	8(a0),d0
0001AE4C 3140 0010                  		move.w	d0,$10(a0)
0001AE50 317C 0140 0012             		move.w	#$140,$12(a0)
0001AE56                            
0001AE56                            locret_1AA1C:
0001AE56 4E75                       		rts	
0001AE58                            ; ===========================================================================
0001AE58                            
0001AE58                            loc_1AA1E:				; XREF: Obj86_Index2
0001AE58 4EB9 0000 D58A             		jsr	SpeedToPos
0001AE5E 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AE64 6400                       		bcc.s	loc_1AA34
0001AE66 5368 0028                  		subq.w	#1,$28(a0)
0001AE6A 6700                       		beq.s	loc_1AA34
0001AE6C 4E75                       		rts	
0001AE6E                            ; ===========================================================================
0001AE6E                            
0001AE6E                            loc_1AA34:
0001AE6E 2268 0034                  		movea.l	$34(a0),a1
0001AE72 5369 0038                  		subq.w	#1,$38(a1)
0001AE76 6000 FA0A                  		bra.w	Obj84_Delete
0001AE7A                            ; ===========================================================================
0001AE7A                            Ani_obj86:
0001AE7A                            	include "_anim\obj86.asm"
0001AE7A                            ; ---------------------------------------------------------------------------
0001AE7A                            ; Animation script - energy ball launcher (FZ)
0001AE7A                            ; ---------------------------------------------------------------------------
0001AE7A 0000                       		dc.w byte_1AA46-Ani_obj86
0001AE7C 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AE7E 0000                       		dc.w byte_1AA50-Ani_obj86
0001AE80 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AE84 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AE8A 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AE90                            		even
0001AE90                            		even
0001AE90                            
0001AE90                            ; ---------------------------------------------------------------------------
0001AE90                            ; Sprite mappings - energy ball	launcher (FZ)
0001AE90                            ; ---------------------------------------------------------------------------
0001AE90                            Map_obj86:
0001AE90                            	include "_maps\obj86.asm"
0001AE90                            ; ---------------------------------------------------------------------------
0001AE90                            ; Sprite mappings - energy ball	launcher (FZ)
0001AE90                            ; ---------------------------------------------------------------------------
0001AE90 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AE94 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AE98 01                         byte_1AA5E:	dc.b 1
0001AE99 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AE9E 01                         byte_1AA64:	dc.b 1
0001AE9F F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AEA4 01                         byte_1AA6A:	dc.b 1
0001AEA5 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AEAA 01                         byte_1AA70:	dc.b 1
0001AEAB F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AEB0                            		even
0001AEB0                            		even
0001AEB0                            
0001AEB0                            Ani_obj86a:
0001AEB0                            	include "_anim\obj86a.asm"
0001AEB0                            ; ---------------------------------------------------------------------------
0001AEB0                            ; Animation script - energy balls (FZ)
0001AEB0                            ; ---------------------------------------------------------------------------
0001AEB0 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AEB2 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AEB4 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AEC3 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AED2 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AED6 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AEE0                            		even
0001AEE0                            		even
0001AEE0                            
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0                            ; Sprite mappings - energy balls (FZ)
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0                            Map_obj86a:
0001AEE0                            	include "_maps\obj86a.asm"
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0                            ; Sprite mappings - energy balls (FZ)
0001AEE0                            ; ---------------------------------------------------------------------------
0001AEE0 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AEE4 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AEE8 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AEEC 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AEF0 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AEF4 0000                       		dc.w byte_1AB20-Map_obj86a
0001AEF6 02                         byte_1AABC:	dc.b 2
0001AEF7 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AEFC 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AF01 02                         byte_1AAC7:	dc.b 2
0001AF02 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AF07 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AF0C 02                         byte_1AAD2:	dc.b 2
0001AF0D F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AF12 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AF17 02                         byte_1AADD:	dc.b 2
0001AF18 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AF1D 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AF22 02                         byte_1AAE8:	dc.b 2
0001AF23 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AF28 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AF2D 02                         byte_1AAF3:	dc.b 2
0001AF2E F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AF33 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AF38 01                         byte_1AAFE:	dc.b 1
0001AF39 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AF3E 01                         byte_1AB04:	dc.b 1
0001AF3F F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AF44 02                         byte_1AB0A:	dc.b 2
0001AF45 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AF4A 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AF4F 02                         byte_1AB15:	dc.b 2
0001AF50 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AF55 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AF5A 00                         byte_1AB20:	dc.b 0
0001AF5C 00                         		even
0001AF5C 00                         		even
0001AF5C                            
0001AF5C                            ; ===========================================================================
0001AF5C                            ; ---------------------------------------------------------------------------
0001AF5C                            ; Object 3E - prison capsule
0001AF5C                            ; ---------------------------------------------------------------------------
0001AF5C                            
0001AF5C                            Obj3E:					; XREF: Obj_Index
0001AF5C 7000                       		moveq	#0,d0
0001AF5E 1028 0024                  		move.b	$24(a0),d0
0001AF62 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AF66 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AF6A 3028 0008                  		move.w	8(a0),d0
0001AF6E 0240 FF80                  		andi.w	#$FF80,d0
0001AF72 3238 F700                  		move.w	($FFFFF700).w,d1
0001AF76 0441 0080                  		subi.w	#$80,d1
0001AF7A 0241 FF80                  		andi.w	#$FF80,d1
0001AF7E 9041                       		sub.w	d1,d0
0001AF80 0C40 0280                  		cmpi.w	#$280,d0
0001AF84 6200                       		bhi.s	Obj3E_Delete
0001AF86 4EF9 0000 D5B0             		jmp	DisplaySprite
0001AF8C                            ; ===========================================================================
0001AF8C                            
0001AF8C                            Obj3E_Delete:
0001AF8C 4EF9 0000 D5EC             		jmp	DeleteObject
0001AF92                            ; ===========================================================================
0001AF92 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AF94 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AF96 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AF98 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF9A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF9C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AF9E 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AFA0 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AFA2                            
0001AFA2 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AFA6 040C 0501                  		dc.b 4,	$C, 5, 1
0001AFAA 0610 0403                  		dc.b 6,	$10, 4,	3
0001AFAE 0810 0305                  		dc.b 8,	$10, 3,	5
0001AFB2                            ; ===========================================================================
0001AFB2                            
0001AFB2                            Obj3E_Main:				; XREF: Obj3E_Index
0001AFB2 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AFBA 317C 049D 0002             		move.w	#$49D,2(a0)
0001AFC0 117C 0004 0001             		move.b	#4,1(a0)
0001AFC6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AFCC 7000                       		moveq	#0,d0
0001AFCE 1028 0028                  		move.b	$28(a0),d0
0001AFD2 E548                       		lsl.w	#2,d0
0001AFD4 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AFD8 1159 0024                  		move.b	(a1)+,$24(a0)
0001AFDC 1159 0019                  		move.b	(a1)+,$19(a0)
0001AFE0 1159 0018                  		move.b	(a1)+,$18(a0)
0001AFE4 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AFE8 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AFEC 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AFEE 117C 0006 0020             		move.b	#6,$20(a0)
0001AFF4 117C 0008 0021             		move.b	#8,$21(a0)
0001AFFA                            
0001AFFA                            Obj3E_Not02:
0001AFFA 4E75                       		rts	
0001AFFC                            ; ===========================================================================
0001AFFC                            
0001AFFC                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AFFC 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B002 6700                       		beq.s	Obj3E_ChkOpened
0001B004 323C 002B                  		move.w	#$2B,d1
0001B008 343C 0018                  		move.w	#$18,d2
0001B00C 363C 0018                  		move.w	#$18,d3
0001B010 3828 0008                  		move.w	8(a0),d4
0001B014 4EF9 0000 F970             		jmp	SolidObject
0001B01A                            ; ===========================================================================
0001B01A                            
0001B01A                            Obj3E_ChkOpened:
0001B01A 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B01E 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B020 4228 0025                  		clr.b	$25(a0)
0001B024 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B02A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B030                            
0001B030                            Obj3E_DoOpen:
0001B030 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B036 4E75                       		rts	
0001B038                            ; ===========================================================================
0001B038                            
0001B038                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B038 323C 0017                  		move.w	#$17,d1
0001B03C 343C 0008                  		move.w	#8,d2
0001B040 363C 0008                  		move.w	#8,d3
0001B044 3828 0008                  		move.w	8(a0),d4
0001B048 4EB9 0000 F970             		jsr	SolidObject
0001B04E 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B054 4EB9 0000 A6EC             		jsr	AnimateSprite
0001B05A 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B060 4A28 0025                  		tst.b	$25(a0)
0001B064 6700                       		beq.s	locret_1AC60
0001B066 5068 000C                  		addq.w	#8,$C(a0)
0001B06A 117C 000A 0024             		move.b	#$A,$24(a0)
0001B070 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B076 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B07A 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B07E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B084 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B08A 4228 0025                  		clr.b	$25(a0)
0001B08E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B094 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B09A                            
0001B09A                            locret_1AC60:
0001B09A 4E75                       		rts	
0001B09C                            ; ===========================================================================
0001B09C                            
0001B09C                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B09C 7007                       		moveq	#7,d0
0001B09E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B0A2 6600                       		bne.s	loc_1ACA0
0001B0A4 4EB9 0000 DA36             		jsr	SingleObjLoad
0001B0AA 6600                       		bne.s	loc_1ACA0
0001B0AC 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B0B0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B0BC 4EB9 0000 2994             		jsr	(RandomNumber).l
0001B0C2 7200                       		moveq	#0,d1
0001B0C4 1200                       		move.b	d0,d1
0001B0C6 E409                       		lsr.b	#2,d1
0001B0C8 0441 0020                  		subi.w	#$20,d1
0001B0CC D369 0008                  		add.w	d1,8(a1)
0001B0D0 E048                       		lsr.w	#8,d0
0001B0D2 E608                       		lsr.b	#3,d0
0001B0D4 D169 000C                  		add.w	d0,$C(a1)
0001B0D8                            
0001B0D8                            loc_1ACA0:
0001B0D8 5368 001E                  		subq.w	#1,$1E(a0)
0001B0DC 6700                       		beq.s	Obj3E_MakeAnimal
0001B0DE 4E75                       		rts	
0001B0E0                            ; ===========================================================================
0001B0E0                            
0001B0E0                            Obj3E_MakeAnimal:
0001B0E0 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B0E6 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B0EC 117C 0006 001A             		move.b	#6,$1A(a0)
0001B0F2 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B0F8 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B0FE 7C07                       		moveq	#7,d6
0001B100 3A3C 009A                  		move.w	#$9A,d5
0001B104 78E4                       		moveq	#-$1C,d4
0001B106                            
0001B106                            Obj3E_Loop:
0001B106 4EB9 0000 DA36             		jsr	SingleObjLoad
0001B10C 6600                       		bne.s	locret_1ACF8
0001B10E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B112 3368 0008 0008             		move.w	8(a0),8(a1)
0001B118 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B11E D969 0008                  		add.w	d4,8(a1)
0001B122 5E44                       		addq.w	#7,d4
0001B124 3345 0036                  		move.w	d5,$36(a1)
0001B128 5145                       		subq.w	#8,d5
0001B12A 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B12E                            
0001B12E                            locret_1ACF8:
0001B12E 4E75                       		rts	
0001B130                            ; ===========================================================================
0001B130                            
0001B130                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B130 7007                       		moveq	#7,d0
0001B132 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B136 6600                       		bne.s	loc_1AD38
0001B138 4EB9 0000 DA36             		jsr	SingleObjLoad
0001B13E 6600                       		bne.s	loc_1AD38
0001B140 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B144 3368 0008 0008             		move.w	8(a0),8(a1)
0001B14A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B150 4EB9 0000 2994             		jsr	(RandomNumber).l
0001B156 0240 001F                  		andi.w	#$1F,d0
0001B15A 5D40                       		subq.w	#6,d0
0001B15C 4A41                       		tst.w	d1
0001B15E 6A00                       		bpl.s	loc_1AD2E
0001B160 4440                       		neg.w	d0
0001B162                            
0001B162                            loc_1AD2E:
0001B162 D169 0008                  		add.w	d0,8(a1)
0001B166 337C 000C 0036             		move.w	#$C,$36(a1)
0001B16C                            
0001B16C                            loc_1AD38:
0001B16C 5368 001E                  		subq.w	#1,$1E(a0)
0001B170 6600                       		bne.s	locret_1AD48
0001B172 5428 0024                  		addq.b	#2,$24(a0)
0001B176 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B17C                            
0001B17C                            locret_1AD48:
0001B17C 4E75                       		rts	
0001B17E                            ; ===========================================================================
0001B17E                            
0001B17E                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B17E 703E                       		moveq	#$3E,d0
0001B180 7228                       		moveq	#$28,d1
0001B182 7440                       		moveq	#$40,d2
0001B184 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B188                            
0001B188                            Obj3E_FindObj28:
0001B188 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B18A 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B18C D2C2                       		adda.w	d2,a1		; next object RAM
0001B18E 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B192                            
0001B192 4EB9 0000 EC2C             		jsr	GotThroughAct
0001B198 4EF9 0000 D5EC             		jmp	DeleteObject
0001B19E                            ; ===========================================================================
0001B19E                            
0001B19E                            Obj3E_Obj28Found:
0001B19E 4E75                       		rts	
0001B1A0                            ; ===========================================================================
0001B1A0                            Ani_obj3E:
0001B1A0                            	include "_anim\obj3E.asm"
0001B1A0                            ; ---------------------------------------------------------------------------
0001B1A0                            ; Animation script - prison capsule
0001B1A0                            ; ---------------------------------------------------------------------------
0001B1A0 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B1A2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B1A4 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B1A8                            		even
0001B1A8                            		even
0001B1A8                            
0001B1A8                            ; ---------------------------------------------------------------------------
0001B1A8                            ; Sprite mappings - prison capsule
0001B1A8                            ; ---------------------------------------------------------------------------
0001B1A8                            Map_obj3E:
0001B1A8                            	include "_maps\obj3E.asm"
0001B1A8                            ; ---------------------------------------------------------------------------
0001B1A8                            ; Sprite mappings - prison capsule
0001B1A8                            ; ---------------------------------------------------------------------------
0001B1A8 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B1AC 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B1B0 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B1B4 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B1B6 07                         byte_1AD82:	dc.b 7
0001B1B7 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B1BC E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B1C1 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B1C6 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B1CB F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B1D0 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B1D5 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B1DA 01                         byte_1ADA6:	dc.b 1
0001B1DB F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B1E0 06                         byte_1ADAC:	dc.b 6
0001B1E1 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B1E6 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B1EB 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B1F0 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B1F5 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B1FA 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B1FF 01                         byte_1ADCB:	dc.b 1
0001B200 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B205 02                         byte_1ADD1:	dc.b 2
0001B206 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B20B 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B210 01                         byte_1ADDC:	dc.b 1
0001B211 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B216 00                         byte_1ADE2:	dc.b 0
0001B218 00                         		even
0001B218 00                         		even
0001B218                            
0001B218                            ; ---------------------------------------------------------------------------
0001B218                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B218                            ; ---------------------------------------------------------------------------
0001B218                            
0001B218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B218                            
0001B218                            
0001B218                            TouchResponse:				; XREF: Obj01
0001B218 4E71                       		nop	
0001B21A 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B21E 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B222 5142                       		subq.w	#8,d2
0001B224 7A00                       		moveq	#0,d5
0001B226 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B22A 5705                       		subq.b	#3,d5
0001B22C 9645                       		sub.w	d5,d3
0001B22E 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B234 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B236 0643 000C                  		addi.w	#$C,d3
0001B23A 7A0A                       		moveq	#$A,d5
0001B23C                            
0001B23C                            Touch_NoDuck:
0001B23C 383C 0010                  		move.w	#$10,d4
0001B240 DA45                       		add.w	d5,d5
0001B242 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B246 3C3C 005F                  		move.w	#$5F,d6
0001B24A                            
0001B24A                            Touch_Loop:
0001B24A 4A29 0001                  		tst.b	1(a1)
0001B24E 6A00                       		bpl.s	Touch_NextObj
0001B250 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B254 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B256                            
0001B256                            Touch_NextObj:
0001B256 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B25A 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B25E                            
0001B25E 7000                       		moveq	#0,d0
0001B260 4E75                       		rts	
0001B262                            ; ===========================================================================
0001B262 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B264 0C14                       		dc.b   $C, $14
0001B266 140C                       		dc.b  $14,  $C
0001B268 0410                       		dc.b	4, $10
0001B26A 0C12                       		dc.b   $C, $12
0001B26C 1010                       		dc.b  $10, $10
0001B26E 0606                       		dc.b	6,   6
0001B270 180C                       		dc.b  $18,  $C
0001B272 0C10                       		dc.b   $C, $10
0001B274 100C                       		dc.b  $10,  $C
0001B276 0808                       		dc.b	8,   8
0001B278 1410                       		dc.b  $14, $10
0001B27A 1408                       		dc.b  $14,   8
0001B27C 0E0E                       		dc.b   $E,  $E
0001B27E 1818                       		dc.b  $18, $18
0001B280 2810                       		dc.b  $28, $10
0001B282 1018                       		dc.b  $10, $18
0001B284 0810                       		dc.b	8, $10
0001B286 2070                       		dc.b  $20, $70
0001B288 4020                       		dc.b  $40, $20
0001B28A 8020                       		dc.b  $80, $20
0001B28C 2020                       		dc.b  $20, $20
0001B28E 0808                       		dc.b	8,   8
0001B290 0404                       		dc.b	4,   4
0001B292 2008                       		dc.b  $20,   8
0001B294 0C0C                       		dc.b   $C,  $C
0001B296 0804                       		dc.b	8,   4
0001B298 1804                       		dc.b  $18,   4
0001B29A 2804                       		dc.b  $28,   4
0001B29C 0408                       		dc.b	4,   8
0001B29E 0418                       		dc.b	4, $18
0001B2A0 0428                       		dc.b	4, $28
0001B2A2 0420                       		dc.b	4, $20
0001B2A4 1818                       		dc.b  $18, $18
0001B2A6 0C18                       		dc.b   $C, $18
0001B2A8 4808                       		dc.b  $48,   8
0001B2AA                            ; ===========================================================================
0001B2AA                            
0001B2AA                            Touch_Height:				; XREF: TouchResponse
0001B2AA 0240 003F                  		andi.w	#$3F,d0
0001B2AE D040                       		add.w	d0,d0
0001B2B0 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B2B4 7200                       		moveq	#0,d1
0001B2B6 121A                       		move.b	(a2)+,d1
0001B2B8 3029 0008                  		move.w	8(a1),d0
0001B2BC 9041                       		sub.w	d1,d0
0001B2BE 9042                       		sub.w	d2,d0
0001B2C0 6400                       		bcc.s	loc_1AE98
0001B2C2 D241                       		add.w	d1,d1
0001B2C4 D041                       		add.w	d1,d0
0001B2C6 6500                       		bcs.s	Touch_Width
0001B2C8 6000 FF8C                  		bra.w	Touch_NextObj
0001B2CC                            ; ===========================================================================
0001B2CC                            
0001B2CC                            loc_1AE98:
0001B2CC B044                       		cmp.w	d4,d0
0001B2CE 6200 FF86                  		bhi.w	Touch_NextObj
0001B2D2                            
0001B2D2                            Touch_Width:
0001B2D2 7200                       		moveq	#0,d1
0001B2D4 121A                       		move.b	(a2)+,d1
0001B2D6 3029 000C                  		move.w	$C(a1),d0
0001B2DA 9041                       		sub.w	d1,d0
0001B2DC 9043                       		sub.w	d3,d0
0001B2DE 6400                       		bcc.s	loc_1AEB6
0001B2E0 D241                       		add.w	d1,d1
0001B2E2 D240                       		add.w	d0,d1
0001B2E4 6500                       		bcs.s	Touch_ChkValue
0001B2E6 6000 FF6E                  		bra.w	Touch_NextObj
0001B2EA                            ; ===========================================================================
0001B2EA                            
0001B2EA                            loc_1AEB6:
0001B2EA B045                       		cmp.w	d5,d0
0001B2EC 6200 FF68                  		bhi.w	Touch_NextObj
0001B2F0                            
0001B2F0                            Touch_ChkValue:
0001B2F0 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B2F4 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B2F8 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B2FC 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B300 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B304 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B306 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B30A                            
0001B30A                            ; touch	response is $40-$7F
0001B30A                            
0001B30A 1029 0020                  		move.b	$20(a1),d0
0001B30E 0200 003F                  		andi.b	#$3F,d0
0001B312 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B316 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B318 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B31E 6400 0000                  		bcc.w	locret_1AEF2
0001B322 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B326                            
0001B326                            locret_1AEF2:
0001B326 4E75                       		rts	
0001B328                            ; ===========================================================================
0001B328                            
0001B328                            Touch_Monitor:
0001B328 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B32C 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B32E 3028 000C                  		move.w	$C(a0),d0
0001B332 0440 0010                  		subi.w	#$10,d0
0001B336 B069 000C                  		cmp.w	$C(a1),d0
0001B33A 6500                       		bcs.s	locret_1AF2E
0001B33C 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B340 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B346 4A29 0025                  		tst.b	$25(a1)
0001B34A 6600                       		bne.s	locret_1AF2E
0001B34C 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B350 4E75                       		rts	
0001B352                            ; ===========================================================================
0001B352                            
0001B352                            loc_1AF1E:
0001B352 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B358 6600                       		bne.s	locret_1AF2E
0001B35A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B35E 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B362                            
0001B362                            locret_1AF2E:
0001B362 4E75                       		rts	
0001B364                            ; ===========================================================================
0001B364                            
0001B364                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B364 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B368 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B36A 0C28 001F 001C             		cmpi.b	#$1F,$1C(a0)	; is Sonic Spin Dashing?
0001B370 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001B374 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B37A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B37E                            
0001B37E                            loc_1AF40:
0001B37E 4A29 0021                  		tst.b	$21(a1)
0001B382 6700                       		beq.s	Touch_KillEnemy
0001B384 4468 0010                  		neg.w	$10(a0)
0001B388 4468 0012                  		neg.w	$12(a0)
0001B38C E0E8 0010                  		asr	$10(a0)
0001B390 E0E8 0012                  		asr	$12(a0)
0001B394 137C 0000 0020             		move.b	#0,$20(a1)
0001B39A 5329 0021                  		subq.b	#1,$21(a1)
0001B39E 6600                       		bne.s	locret_1AF68
0001B3A0 08E9 0007 0022             		bset	#7,$22(a1)
0001B3A6                            
0001B3A6                            locret_1AF68:
0001B3A6 4E75                       		rts	
0001B3A8                            ; ===========================================================================
0001B3A8                            
0001B3A8                            Touch_KillEnemy:
0001B3A8 08E9 0007 0022             		bset	#7,$22(a1)
0001B3AE 7000                       		moveq	#0,d0
0001B3B0 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B3B4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B3B8 0C40 0006                  		cmpi.w	#6,d0
0001B3BC 6500                       		bcs.s	loc_1AF82
0001B3BE 7006                       		moveq	#6,d0
0001B3C0                            
0001B3C0                            loc_1AF82:
0001B3C0 3340 003E                  		move.w	d0,$3E(a1)
0001B3C4 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B3C8 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B3CE 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B3D0 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B3D4 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B3DA                            
0001B3DA                            loc_1AF9C:
0001B3DA 6100 0000                  		bsr.w	AddPoints
0001B3DE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B3E2 137C 0000 0024             		move.b	#0,$24(a1)
0001B3E8 4A68 0012                  		tst.w	$12(a0)
0001B3EC 6B00                       		bmi.s	loc_1AFC2
0001B3EE 3028 000C                  		move.w	$C(a0),d0
0001B3F2 B069 000C                  		cmp.w	$C(a1),d0
0001B3F6 6400                       		bcc.s	loc_1AFCA
0001B3F8 4468 0012                  		neg.w	$12(a0)
0001B3FC 4E75                       		rts	
0001B3FE                            ; ===========================================================================
0001B3FE                            
0001B3FE                            loc_1AFC2:
0001B3FE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B404 4E75                       		rts	
0001B406                            ; ===========================================================================
0001B406                            
0001B406                            loc_1AFCA:
0001B406 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B40C 4E75                       		rts	
0001B40E                            ; ===========================================================================
0001B40E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B416                            ; ===========================================================================
0001B416                            
0001B416                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B416 08E9 0007 0022             		bset	#7,$22(a1)
0001B41C                            
0001B41C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B41C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B420 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B422                            
0001B422                            loc_1AFE6:				; XREF: Touch_Hurt
0001B422 70FF                       		moveq	#-1,d0
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B426 4E71                       		nop	
0001B428 4A68 0030                  		tst.w	$30(a0)
0001B42C 66F4                       		bne.s	loc_1AFE6
0001B42E 2449                       		movea.l	a1,a2
0001B430                            
0001B430                            ; End of function TouchResponse
0001B430                            ; continue straight to HurtSonic
0001B430                            
0001B430                            ; ---------------------------------------------------------------------------
0001B430                            ; Hurting Sonic	subroutine
0001B430                            ; ---------------------------------------------------------------------------
0001B430                            
0001B430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B430                            
0001B430                            
0001B430                            HurtSonic:
0001B430 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B434 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B436 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B43A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B43E 4EB9 0000 DA36             		jsr	SingleObjLoad
0001B444 6600                       		bne.s	Hurt_Shield
0001B446 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B44A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B450 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B456                            
0001B456                            Hurt_Shield:
0001B456 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B45C 117C 0004 0024             		move.b	#4,$24(a0)
0001B462 6100 87B6                  		bsr.w	Sonic_ResetOnFloor
0001B466 08E8 0001 0022             		bset	#1,$22(a0)
0001B46C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B472 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B478 0828 0006 0022             		btst	#6,$22(a0)
0001B47E 6700                       		beq.s	Hurt_Reverse
0001B480 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B486 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B48C                            
0001B48C                            Hurt_Reverse:
0001B48C 3028 0008                  		move.w	8(a0),d0
0001B490 B06A 0008                  		cmp.w	8(a2),d0
0001B494 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B496 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B49A                            
0001B49A                            Hurt_ChkSpikes:
0001B49A 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001B4A0 317C 0000 0014                             move.w	#0,$14(a0)
0001B4A6 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B4AC 317C 0078 0030             		move.w	#$78,$30(a0)
0001B4B2 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B4B6 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B4BA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B4BC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B4C0 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B4C2 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B4C6                            
0001B4C6                            Hurt_Sound:
0001B4C6 4EB9 0000 12CC             		jsr	(PlaySound_Special).l
0001B4CC 70FF                       		moveq	#-1,d0
0001B4CE 4E75                       		rts	
0001B4D0                            ; ===========================================================================
0001B4D0                            
0001B4D0                            Hurt_NoRings:
0001B4D0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B4D4 6600 FF80                  		bne.w	Hurt_Shield	; if yes, branch
0001B4D8                            ; End of function HurtSonic
0001B4D8                            
0001B4D8                            ; ---------------------------------------------------------------------------
0001B4D8                            ; Subroutine to	kill Sonic
0001B4D8                            ; ---------------------------------------------------------------------------
0001B4D8                            
0001B4D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4D8                            
0001B4D8                            
0001B4D8                            KillSonic:
0001B4D8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B4DC 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B4DE 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B4E4 117C 0006 0024             		move.b	#6,$24(a0)
0001B4EA 6100 872E                  		bsr.w	Sonic_ResetOnFloor
0001B4EE 08E8 0001 0022             		bset	#1,$22(a0)
0001B4F4 317C F900 0012             		move.w	#-$700,$12(a0)
0001B4FA 317C 0000 0010             		move.w	#0,$10(a0)
0001B500 317C 0000 0014             		move.w	#0,$14(a0)
0001B506 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B50C 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B512 08E8 0007 0002             		bset	#7,2(a0)
0001B518 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B51C 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B520 6600                       		bne.s	Kill_Sound
0001B522 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B526                            
0001B526                            Kill_Sound:
0001B526 4EB9 0000 12CC             		jsr	(PlaySound_Special).l
0001B52C                            
0001B52C                            Kill_NoDeath:
0001B52C 70FF                       		moveq	#-1,d0
0001B52E 4E75                       		rts	
0001B530                            ; End of function KillSonic
0001B530                            
0001B530                            
0001B530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B530                            
0001B530                            
0001B530                            Touch_Special:				; XREF: Touch_ChkValue
0001B530 1229 0020                  		move.b	$20(a1),d1
0001B534 0201 003F                  		andi.b	#$3F,d1
0001B538 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B53C 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B53E 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B542 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B544 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B548 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B54A 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B54E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B550 4E75                       		rts	
0001B552                            ; ===========================================================================
0001B552                            
0001B552                            Touch_CatKiller:			; XREF: Touch_Special
0001B552 6000 FEC2                  		bra.w	loc_1AFDA
0001B556                            ; ===========================================================================
0001B556                            
0001B556                            Touch_Yadrin:				; XREF: Touch_Special
0001B556 9A40                       		sub.w	d0,d5
0001B558 0C45 0008                  		cmpi.w	#8,d5
0001B55C 6400                       		bcc.s	loc_1B144
0001B55E 3029 0008                  		move.w	8(a1),d0
0001B562 5940                       		subq.w	#4,d0
0001B564 0829 0000 0022             		btst	#0,$22(a1)
0001B56A 6700                       		beq.s	loc_1B130
0001B56C 0440 0010                  		subi.w	#$10,d0
0001B570                            
0001B570                            loc_1B130:
0001B570 9042                       		sub.w	d2,d0
0001B572 6400                       		bcc.s	loc_1B13C
0001B574 0640 0018                  		addi.w	#$18,d0
0001B578 6500                       		bcs.s	loc_1B140
0001B57A 6000                       		bra.s	loc_1B144
0001B57C                            ; ===========================================================================
0001B57C                            
0001B57C                            loc_1B13C:
0001B57C B044                       		cmp.w	d4,d0
0001B57E 6200                       		bhi.s	loc_1B144
0001B580                            
0001B580                            loc_1B140:
0001B580 6000 FE9A                  		bra.w	Touch_ChkHurt
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            loc_1B144:
0001B584 6000 FDDE                  		bra.w	Touch_Enemy
0001B588                            ; ===========================================================================
0001B588                            
0001B588                            Touch_D7orE1:				; XREF: Touch_Special
0001B588 5229 0021                  		addq.b	#1,$21(a1)
0001B58C 4E75                       		rts	
0001B58E                            ; End of function Touch_Special
0001B58E                            
0001B58E                            ; ---------------------------------------------------------------------------
0001B58E                            ; Subroutine to	show the special stage layout
0001B58E                            ; ---------------------------------------------------------------------------
0001B58E                            
0001B58E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B58E                            
0001B58E                            
0001B58E                            SS_ShowLayout:				; XREF: SpecialStage
0001B58E 6100 0000                  		bsr.w	SS_AniWallsRings
0001B592 6100 0000                  		bsr.w	SS_AniItems
0001B596 3F05                       		move.w	d5,-(sp)
0001B598 43F8 8000                  		lea	($FFFF8000).w,a1
0001B59C 1038 F780                  		move.b	($FFFFF780).w,d0
0001B5A0 0200 00FC                  		andi.b	#$FC,d0
0001B5A4 4EB9 0000 29BA             		jsr	(CalcSine).l
0001B5AA 3800                       		move.w	d0,d4
0001B5AC 3A01                       		move.w	d1,d5
0001B5AE C9FC 0018                  		muls.w	#$18,d4
0001B5B2 CBFC 0018                  		muls.w	#$18,d5
0001B5B6 7400                       		moveq	#0,d2
0001B5B8 3438 F700                  		move.w	($FFFFF700).w,d2
0001B5BC 84FC 0018                  		divu.w	#$18,d2
0001B5C0 4842                       		swap	d2
0001B5C2 4442                       		neg.w	d2
0001B5C4 0642 FF4C                  		addi.w	#-$B4,d2
0001B5C8 7600                       		moveq	#0,d3
0001B5CA 3638 F704                  		move.w	($FFFFF704).w,d3
0001B5CE 86FC 0018                  		divu.w	#$18,d3
0001B5D2 4843                       		swap	d3
0001B5D4 4443                       		neg.w	d3
0001B5D6 0643 FF4C                  		addi.w	#-$B4,d3
0001B5DA 3E3C 000F                  		move.w	#$F,d7
0001B5DE                            
0001B5DE                            loc_1B19E:
0001B5DE 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B5E2 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B5E6 4440                       		neg.w	d0
0001B5E8 C3C2                       		muls.w	d2,d1
0001B5EA C1C3                       		muls.w	d3,d0
0001B5EC 2C00                       		move.l	d0,d6
0001B5EE DC81                       		add.l	d1,d6
0001B5F0 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B5F4 C1C2                       		muls.w	d2,d0
0001B5F6 C3C3                       		muls.w	d3,d1
0001B5F8 D280                       		add.l	d0,d1
0001B5FA 2406                       		move.l	d6,d2
0001B5FC 3C3C 000F                  		move.w	#$F,d6
0001B600                            
0001B600                            loc_1B1C0:
0001B600 2002                       		move.l	d2,d0
0001B602 E080                       		asr.l	#8,d0
0001B604 32C0                       		move.w	d0,(a1)+
0001B606 2001                       		move.l	d1,d0
0001B608 E080                       		asr.l	#8,d0
0001B60A 32C0                       		move.w	d0,(a1)+
0001B60C D485                       		add.l	d5,d2
0001B60E D284                       		add.l	d4,d1
0001B610 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B614                            
0001B614 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B618 0643 0018                  		addi.w	#$18,d3
0001B61C 51CF FFC0                  		dbf	d7,loc_1B19E
0001B620                            
0001B620 3A1F                       		move.w	(sp)+,d5
0001B622 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B628 7000                       		moveq	#0,d0
0001B62A 3038 F704                  		move.w	($FFFFF704).w,d0
0001B62E 80FC 0018                  		divu.w	#$18,d0
0001B632 C0FC 0080                  		mulu.w	#$80,d0
0001B636 D1C0                       		adda.l	d0,a0
0001B638 7000                       		moveq	#0,d0
0001B63A 3038 F700                  		move.w	($FFFFF700).w,d0
0001B63E 80FC 0018                  		divu.w	#$18,d0
0001B642 D0C0                       		adda.w	d0,a0
0001B644 49F8 8000                  		lea	($FFFF8000).w,a4
0001B648 3E3C 000F                  		move.w	#$F,d7
0001B64C                            
0001B64C                            loc_1B20C:
0001B64C 3C3C 000F                  		move.w	#$F,d6
0001B650                            
0001B650                            loc_1B210:
0001B650 7000                       		moveq	#0,d0
0001B652 1018                       		move.b	(a0)+,d0
0001B654 6700                       		beq.s	loc_1B268
0001B656 0C00 004E                  		cmpi.b	#$4E,d0
0001B65A 6200                       		bhi.s	loc_1B268
0001B65C 3614                       		move.w	(a4),d3
0001B65E 0643 0120                  		addi.w	#$120,d3
0001B662 0C43 0070                  		cmpi.w	#$70,d3
0001B666 6500                       		bcs.s	loc_1B268
0001B668 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B66C 6400                       		bcc.s	loc_1B268
0001B66E 342C 0002                  		move.w	2(a4),d2
0001B672 0642 00F0                  		addi.w	#$F0,d2
0001B676 0C42 0070                  		cmpi.w	#$70,d2
0001B67A 6500                       		bcs.s	loc_1B268
0001B67C 0C42 0170                  		cmpi.w	#$170,d2
0001B680 6400                       		bcc.s	loc_1B268
0001B682 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B688 E748                       		lsl.w	#3,d0
0001B68A 4BF5 0000                  		lea	(a5,d0.w),a5
0001B68E 225D                       		movea.l	(a5)+,a1
0001B690 321D                       		move.w	(a5)+,d1
0001B692 D241                       		add.w	d1,d1
0001B694 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B698 365D                       		movea.w	(a5)+,a3
0001B69A 7200                       		moveq	#0,d1
0001B69C 1219                       		move.b	(a1)+,d1
0001B69E 5301                       		subq.b	#1,d1
0001B6A0 6B00                       		bmi.s	loc_1B268
0001B6A2 4EB9 0000 D70E             		jsr	sub_D762
0001B6A8                            
0001B6A8                            loc_1B268:
0001B6A8 584C                       		addq.w	#4,a4
0001B6AA 51CE FFA4                  		dbf	d6,loc_1B210
0001B6AE                            
0001B6AE 41E8 0070                  		lea	$70(a0),a0
0001B6B2 51CF FF98                  		dbf	d7,loc_1B20C
0001B6B6                            
0001B6B6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B6BA 0C05 0050                  		cmpi.b	#$50,d5
0001B6BE 6700                       		beq.s	loc_1B288
0001B6C0 24BC 0000 0000             		move.l	#0,(a2)
0001B6C6 4E75                       		rts	
0001B6C8                            ; ===========================================================================
0001B6C8                            
0001B6C8                            loc_1B288:
0001B6C8 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B6CE 4E75                       		rts	
0001B6D0                            ; End of function SS_ShowLayout
0001B6D0                            
0001B6D0                            ; ---------------------------------------------------------------------------
0001B6D0                            ; Subroutine to	animate	walls and rings	in the special stage
0001B6D0                            ; ---------------------------------------------------------------------------
0001B6D0                            
0001B6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6D0                            
0001B6D0                            
0001B6D0                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B6D0 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B6D6 7000                       		moveq	#0,d0
0001B6D8 1038 F780                  		move.b	($FFFFF780).w,d0
0001B6DC E408                       		lsr.b	#2,d0
0001B6DE 0240 000F                  		andi.w	#$F,d0
0001B6E2 7223                       		moveq	#$23,d1
0001B6E4                            
0001B6E4                            loc_1B2A4:
0001B6E4 3280                       		move.w	d0,(a1)
0001B6E6 5049                       		addq.w	#8,a1
0001B6E8 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B6EC                            
0001B6EC 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B6F2 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B6F6 6A00                       		bpl.s	loc_1B2C8
0001B6F8 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B6FE 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B702 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B708                            
0001B708                            loc_1B2C8:
0001B708 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B70E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B712 6A00                       		bpl.s	loc_1B2E4
0001B714 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B71A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B71E 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B724                            
0001B724                            loc_1B2E4:
0001B724 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B728 1340 0138                  		move.b	d0,$138(a1)
0001B72C 1340 0160                  		move.b	d0,$160(a1)
0001B730 1340 0148                  		move.b	d0,$148(a1)
0001B734 1340 0150                  		move.b	d0,$150(a1)
0001B738 1340 01D8                  		move.b	d0,$1D8(a1)
0001B73C 1340 01E0                  		move.b	d0,$1E0(a1)
0001B740 1340 01E8                  		move.b	d0,$1E8(a1)
0001B744 1340 01F0                  		move.b	d0,$1F0(a1)
0001B748 1340 01F8                  		move.b	d0,$1F8(a1)
0001B74C 1340 0200                  		move.b	d0,$200(a1)
0001B750 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B754 6A00                       		bpl.s	loc_1B326
0001B756 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B75C 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B760 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B766                            
0001B766                            loc_1B326:
0001B766 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B76A 1340 0168                  		move.b	d0,$168(a1)
0001B76E 1340 0170                  		move.b	d0,$170(a1)
0001B772 1340 0178                  		move.b	d0,$178(a1)
0001B776 1340 0180                  		move.b	d0,$180(a1)
0001B77A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B77E 6A00                       		bpl.s	loc_1B350
0001B780 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B786 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B78A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B790                            
0001B790                            loc_1B350:
0001B790 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B796 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B79C 7000                       		moveq	#0,d0
0001B79E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B7A2 D040                       		add.w	d0,d0
0001B7A4 41F0 0000                  		lea	(a0,d0.w),a0
0001B7A8 3290                       		move.w	(a0),(a1)
0001B7AA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B7B0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B7B6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B7BC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B7C2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B7C8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B7CE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B7D4 D0FC 0020                  		adda.w	#$20,a0
0001B7D8 D2FC 0048                  		adda.w	#$48,a1
0001B7DC 3290                       		move.w	(a0),(a1)
0001B7DE 3368 0002 0008             		move.w	2(a0),8(a1)
0001B7E4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B7EA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B7F0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B7F6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B7FC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B802 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B808 D0FC 0020                  		adda.w	#$20,a0
0001B80C D2FC 0048                  		adda.w	#$48,a1
0001B810 3290                       		move.w	(a0),(a1)
0001B812 3368 0002 0008             		move.w	2(a0),8(a1)
0001B818 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B81E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B824 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B82A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B830 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B836 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B83C D0FC 0020                  		adda.w	#$20,a0
0001B840 D2FC 0048                  		adda.w	#$48,a1
0001B844 3290                       		move.w	(a0),(a1)
0001B846 3368 0002 0008             		move.w	2(a0),8(a1)
0001B84C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B852 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B858 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B85E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B864 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B86A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B870 D0FC 0020                  		adda.w	#$20,a0
0001B874 D2FC 0048                  		adda.w	#$48,a1
0001B878 4E75                       		rts	
0001B87A                            ; End of function SS_AniWallsRings
0001B87A                            
0001B87A                            ; ===========================================================================
0001B87A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B88A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B89A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B8AA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B8BA 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B8CA 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B8DA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B8EA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B8FA                            ; ---------------------------------------------------------------------------
0001B8FA                            ; Subroutine to	remove items when you collect them in the special stage
0001B8FA                            ; ---------------------------------------------------------------------------
0001B8FA                            
0001B8FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8FA                            
0001B8FA                            
0001B8FA                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B8FA 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B900 303C 001F                  		move.w	#$1F,d0
0001B904                            
0001B904                            loc_1B4C4:
0001B904 4A12                       		tst.b	(a2)
0001B906 6700                       		beq.s	locret_1B4CE
0001B908 504A                       		addq.w	#8,a2
0001B90A 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B90E                            
0001B90E                            locret_1B4CE:
0001B90E 4E75                       		rts	
0001B910                            ; End of function SS_RemoveCollectedItem
0001B910                            
0001B910                            ; ---------------------------------------------------------------------------
0001B910                            ; Subroutine to	animate	special	stage items when you touch them
0001B910                            ; ---------------------------------------------------------------------------
0001B910                            
0001B910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B910                            
0001B910                            
0001B910                            SS_AniItems:				; XREF: SS_ShowLayout
0001B910 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B916 3E3C 001F                  		move.w	#$1F,d7
0001B91A                            
0001B91A                            loc_1B4DA:
0001B91A 7000                       		moveq	#0,d0
0001B91C 1010                       		move.b	(a0),d0
0001B91E 6700                       		beq.s	loc_1B4E8
0001B920 E548                       		lsl.w	#2,d0
0001B922 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B926 4E91                       		jsr	(a1)
0001B928                            
0001B928                            loc_1B4E8:
0001B928 5048                       		addq.w	#8,a0
0001B92A                            
0001B92A                            loc_1B4EA:
0001B92A 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B92E                            
0001B92E 4E75                       		rts	
0001B930                            ; End of function SS_AniItems
0001B930                            
0001B930                            ; ===========================================================================
0001B930 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B934 0000 0000                  		dc.l SS_AniBumper
0001B938 0000 0000                  		dc.l SS_Ani1Up
0001B93C 0000 0000                  		dc.l SS_AniReverse
0001B940 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B944 0000 0000                  		dc.l SS_AniGlassBlock
0001B948                            ; ===========================================================================
0001B948                            
0001B948                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B948 5328 0002                  		subq.b	#1,2(a0)
0001B94C 6A00                       		bpl.s	locret_1B530
0001B94E 117C 0005 0002             		move.b	#5,2(a0)
0001B954 7000                       		moveq	#0,d0
0001B956 1028 0003                  		move.b	3(a0),d0
0001B95A 5228 0003                  		addq.b	#1,3(a0)
0001B95E 2268 0004                  		movea.l	4(a0),a1
0001B962 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B966 1280                       		move.b	d0,(a1)
0001B968 6600                       		bne.s	locret_1B530
0001B96A 4290                       		clr.l	(a0)
0001B96C 42A8 0004                  		clr.l	4(a0)
0001B970                            
0001B970                            locret_1B530:
0001B970 4E75                       		rts	
0001B972                            ; ===========================================================================
0001B972 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            SS_AniBumper:				; XREF: SS_AniIndex
0001B978 5328 0002                  		subq.b	#1,2(a0)
0001B97C 6A00                       		bpl.s	locret_1B566
0001B97E 117C 0007 0002             		move.b	#7,2(a0)
0001B984 7000                       		moveq	#0,d0
0001B986 1028 0003                  		move.b	3(a0),d0
0001B98A 5228 0003                  		addq.b	#1,3(a0)
0001B98E 2268 0004                  		movea.l	4(a0),a1
0001B992 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B996 6600                       		bne.s	loc_1B564
0001B998 4290                       		clr.l	(a0)
0001B99A 42A8 0004                  		clr.l	4(a0)
0001B99E 12BC 0025                  		move.b	#$25,(a1)
0001B9A2 4E75                       		rts	
0001B9A4                            ; ===========================================================================
0001B9A4                            
0001B9A4                            loc_1B564:
0001B9A4 1280                       		move.b	d0,(a1)
0001B9A6                            
0001B9A6                            locret_1B566:
0001B9A6 4E75                       		rts	
0001B9A8                            ; ===========================================================================
0001B9A8 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B9AE                            ; ===========================================================================
0001B9AE                            
0001B9AE                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B9AE 5328 0002                  		subq.b	#1,2(a0)
0001B9B2 6A00                       		bpl.s	locret_1B596
0001B9B4 117C 0005 0002             		move.b	#5,2(a0)
0001B9BA 7000                       		moveq	#0,d0
0001B9BC 1028 0003                  		move.b	3(a0),d0
0001B9C0 5228 0003                  		addq.b	#1,3(a0)
0001B9C4 2268 0004                  		movea.l	4(a0),a1
0001B9C8 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B9CC 1280                       		move.b	d0,(a1)
0001B9CE 6600                       		bne.s	locret_1B596
0001B9D0 4290                       		clr.l	(a0)
0001B9D2 42A8 0004                  		clr.l	4(a0)
0001B9D6                            
0001B9D6                            locret_1B596:
0001B9D6 4E75                       		rts	
0001B9D8                            ; ===========================================================================
0001B9D8 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B9DE                            ; ===========================================================================
0001B9DE                            
0001B9DE                            SS_AniReverse:				; XREF: SS_AniIndex
0001B9DE 5328 0002                  		subq.b	#1,2(a0)
0001B9E2 6A00                       		bpl.s	locret_1B5CC
0001B9E4 117C 0007 0002             		move.b	#7,2(a0)
0001B9EA 7000                       		moveq	#0,d0
0001B9EC 1028 0003                  		move.b	3(a0),d0
0001B9F0 5228 0003                  		addq.b	#1,3(a0)
0001B9F4 2268 0004                  		movea.l	4(a0),a1
0001B9F8 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B9FC 6600                       		bne.s	loc_1B5CA
0001B9FE 4290                       		clr.l	(a0)
0001BA00 42A8 0004                  		clr.l	4(a0)
0001BA04 12BC 002B                  		move.b	#$2B,(a1)
0001BA08 4E75                       		rts	
0001BA0A                            ; ===========================================================================
0001BA0A                            
0001BA0A                            loc_1B5CA:
0001BA0A 1280                       		move.b	d0,(a1)
0001BA0C                            
0001BA0C                            locret_1B5CC:
0001BA0C 4E75                       		rts	
0001BA0E                            ; ===========================================================================
0001BA0E 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BA14                            ; ===========================================================================
0001BA14                            
0001BA14                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BA14 5328 0002                  		subq.b	#1,2(a0)
0001BA18 6A00                       		bpl.s	locret_1B60C
0001BA1A 117C 0005 0002             		move.b	#5,2(a0)
0001BA20 7000                       		moveq	#0,d0
0001BA22 1028 0003                  		move.b	3(a0),d0
0001BA26 5228 0003                  		addq.b	#1,3(a0)
0001BA2A 2268 0004                  		movea.l	4(a0),a1
0001BA2E 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BA32 1280                       		move.b	d0,(a1)
0001BA34 6600                       		bne.s	locret_1B60C
0001BA36 4290                       		clr.l	(a0)
0001BA38 42A8 0004                  		clr.l	4(a0)
0001BA3C 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BA42 303C 00A8                  		move.w	#$A8,d0
0001BA46 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BA4C                            
0001BA4C                            locret_1B60C:
0001BA4C 4E75                       		rts	
0001BA4E                            ; ===========================================================================
0001BA4E 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BA54                            ; ===========================================================================
0001BA54                            
0001BA54                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BA54 5328 0002                  		subq.b	#1,2(a0)
0001BA58 6A00                       		bpl.s	locret_1B640
0001BA5A 117C 0001 0002             		move.b	#1,2(a0)
0001BA60 7000                       		moveq	#0,d0
0001BA62 1028 0003                  		move.b	3(a0),d0
0001BA66 5228 0003                  		addq.b	#1,3(a0)
0001BA6A 2268 0004                  		movea.l	4(a0),a1
0001BA6E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BA72 1280                       		move.b	d0,(a1)
0001BA74 6600                       		bne.s	locret_1B640
0001BA76 12A8 0004                  		move.b	4(a0),(a1)
0001BA7A 4290                       		clr.l	(a0)
0001BA7C 42A8 0004                  		clr.l	4(a0)
0001BA80                            
0001BA80                            locret_1B640:
0001BA80 4E75                       		rts	
0001BA82                            ; ===========================================================================
0001BA82 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BA8C                            ; ---------------------------------------------------------------------------
0001BA8C                            ; Special stage	layout pointers
0001BA8C                            ; ---------------------------------------------------------------------------
0001BA8C                            SS_LayoutIndex:
0001BA8C                            	include "_inc\Special stage layout pointers.asm"
0001BA8C                            ; ---------------------------------------------------------------------------
0001BA8C                            ; Special stage	layout pointers
0001BA8C                            ; ---------------------------------------------------------------------------
0001BA8C 0000 0000                  	dc.l SS_1
0001BA90 0000 0000                  	dc.l SS_2
0001BA94 0000 0000                  	dc.l SS_3
0001BA98 0000 0000                  	dc.l SS_4
0001BA9C 0000 0000                  	dc.l SS_5
0001BAA0 0000 0000                  	dc.l SS_6
0001BAA4                            	even
0001BAA4                            	even
0001BAA4                            
0001BAA4                            ; ---------------------------------------------------------------------------
0001BAA4                            ; Special stage	start locations
0001BAA4                            ; ---------------------------------------------------------------------------
0001BAA4                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BABC                            		even
0001BABC                            
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            ; Subroutine to	load special stage layout
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            
0001BABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BABC                            
0001BABC                            
0001BABC                            SS_Load:				; XREF: SpecialStage
0001BABC 7000                       		moveq	#0,d0
0001BABE 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BAC2 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BAC6 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BACC 6500                       		bcs.s	SS_ChkEmldNum
0001BACE 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BAD4                            
0001BAD4                            SS_ChkEmldNum:
0001BAD4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BADA 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BADC 7200                       		moveq	#0,d1
0001BADE 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BAE2 5301                       		subq.b	#1,d1
0001BAE4 6500                       		bcs.s	SS_LoadData
0001BAE6 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BAEA                            
0001BAEA                            SS_ChkEmldLoop:	
0001BAEA B033 1000                  		cmp.b	(a3,d1.w),d0
0001BAEE 6600                       		bne.s	SS_ChkEmldRepeat
0001BAF0 60CA                       		bra.s	SS_Load
0001BAF2                            ; ===========================================================================
0001BAF2                            
0001BAF2                            SS_ChkEmldRepeat:
0001BAF2 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BAF6                            
0001BAF6                            SS_LoadData:
0001BAF6 E548                       		lsl.w	#2,d0
0001BAF8 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BAFC 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BB00 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BB04 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BB08 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BB0E 303C 0000                  		move.w	#0,d0
0001BB12 4EB9 0000 16DE             		jsr	(EniDec).l
0001BB18 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BB1E 303C 0FFF                  		move.w	#$FFF,d0
0001BB22                            
0001BB22                            SS_ClrRAM3:
0001BB22 4299                       		clr.l	(a1)+
0001BB24 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BB28                            
0001BB28 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BB2E 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BB34 723F                       		moveq	#$3F,d1
0001BB36                            
0001BB36                            loc_1B6F6:
0001BB36 743F                       		moveq	#$3F,d2
0001BB38                            
0001BB38                            loc_1B6F8:
0001BB38 12D8                       		move.b	(a0)+,(a1)+
0001BB3A 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BB3E                            
0001BB3E 43E9 0040                  		lea	$40(a1),a1
0001BB42 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BB46                            
0001BB46 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BB4C 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BB52 724D                       		moveq	#$4D,d1
0001BB54                            
0001BB54                            loc_1B714:
0001BB54 22D8                       		move.l	(a0)+,(a1)+
0001BB56 32FC 0000                  		move.w	#0,(a1)+
0001BB5A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BB60 32D8                       		move.w	(a0)+,(a1)+
0001BB62 51C9 FFF0                  		dbf	d1,loc_1B714
0001BB66                            
0001BB66 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BB6C 323C 003F                  		move.w	#$3F,d1
0001BB70                            
0001BB70                            loc_1B730:
0001BB70                            
0001BB70 4299                       		clr.l	(a1)+
0001BB72 51C9 FFFC                  		dbf	d1,loc_1B730
0001BB76                            
0001BB76 4E75                       		rts	
0001BB78                            ; End of function SS_Load
0001BB78                            
0001BB78                            ; ===========================================================================
0001BB78                            ; ---------------------------------------------------------------------------
0001BB78                            ; Special stage	mappings and VRAM pointers
0001BB78                            ; ---------------------------------------------------------------------------
0001BB78                            SS_MapIndex:
0001BB78                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BB78                            ; ---------------------------------------------------------------------------
0001BB78                            ; Special stage	mappings and VRAM pointers
0001BB78                            ; ---------------------------------------------------------------------------
0001BB78 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BB7C 0142                       	dc.w $142		; VRAM setting
0001BB7E 0000 0000                  	dc.l Map_SSWalls
0001BB82 0142                       	dc.w $142
0001BB84 0000 0000                  	dc.l Map_SSWalls
0001BB88 0142                       	dc.w $142
0001BB8A 0000 0000                  	dc.l Map_SSWalls
0001BB8E 0142                       	dc.w $142
0001BB90 0000 0000                  	dc.l Map_SSWalls
0001BB94 0142                       	dc.w $142
0001BB96 0000 0000                  	dc.l Map_SSWalls
0001BB9A 0142                       	dc.w $142
0001BB9C 0000 0000                  	dc.l Map_SSWalls
0001BBA0 0142                       	dc.w $142
0001BBA2 0000 0000                  	dc.l Map_SSWalls
0001BBA6 0142                       	dc.w $142
0001BBA8 0000 0000                  	dc.l Map_SSWalls
0001BBAC 0142                       	dc.w $142
0001BBAE 0000 0000                  	dc.l Map_SSWalls
0001BBB2 2142                       	dc.w $2142
0001BBB4 0000 0000                  	dc.l Map_SSWalls
0001BBB8 2142                       	dc.w $2142
0001BBBA 0000 0000                  	dc.l Map_SSWalls
0001BBBE 2142                       	dc.w $2142
0001BBC0 0000 0000                  	dc.l Map_SSWalls
0001BBC4 2142                       	dc.w $2142
0001BBC6 0000 0000                  	dc.l Map_SSWalls
0001BBCA 2142                       	dc.w $2142
0001BBCC 0000 0000                  	dc.l Map_SSWalls
0001BBD0 2142                       	dc.w $2142
0001BBD2 0000 0000                  	dc.l Map_SSWalls
0001BBD6 2142                       	dc.w $2142
0001BBD8 0000 0000                  	dc.l Map_SSWalls
0001BBDC 2142                       	dc.w $2142
0001BBDE 0000 0000                  	dc.l Map_SSWalls
0001BBE2 2142                       	dc.w $2142
0001BBE4 0000 0000                  	dc.l Map_SSWalls
0001BBE8 4142                       	dc.w $4142
0001BBEA 0000 0000                  	dc.l Map_SSWalls
0001BBEE 4142                       	dc.w $4142
0001BBF0 0000 0000                  	dc.l Map_SSWalls
0001BBF4 4142                       	dc.w $4142
0001BBF6 0000 0000                  	dc.l Map_SSWalls
0001BBFA 4142                       	dc.w $4142
0001BBFC 0000 0000                  	dc.l Map_SSWalls
0001BC00 4142                       	dc.w $4142
0001BC02 0000 0000                  	dc.l Map_SSWalls
0001BC06 4142                       	dc.w $4142
0001BC08 0000 0000                  	dc.l Map_SSWalls
0001BC0C 4142                       	dc.w $4142
0001BC0E 0000 0000                  	dc.l Map_SSWalls
0001BC12 4142                       	dc.w $4142
0001BC14 0000 0000                  	dc.l Map_SSWalls
0001BC18 4142                       	dc.w $4142
0001BC1A 0000 0000                  	dc.l Map_SSWalls
0001BC1E 6142                       	dc.w $6142
0001BC20 0000 0000                  	dc.l Map_SSWalls
0001BC24 6142                       	dc.w $6142
0001BC26 0000 0000                  	dc.l Map_SSWalls
0001BC2A 6142                       	dc.w $6142
0001BC2C 0000 0000                  	dc.l Map_SSWalls
0001BC30 6142                       	dc.w $6142
0001BC32 0000 0000                  	dc.l Map_SSWalls
0001BC36 6142                       	dc.w $6142
0001BC38 0000 0000                  	dc.l Map_SSWalls
0001BC3C 6142                       	dc.w $6142
0001BC3E 0000 0000                  	dc.l Map_SSWalls
0001BC42 6142                       	dc.w $6142
0001BC44 0000 0000                  	dc.l Map_SSWalls
0001BC48 6142                       	dc.w $6142
0001BC4A 0000 0000                  	dc.l Map_SSWalls
0001BC4E 6142                       	dc.w $6142
0001BC50 0000 EAA4                  	dc.l Map_obj47
0001BC54 023B                       	dc.w $23B
0001BC56 0000 0000                  	dc.l Map_SS_R
0001BC5A 0570                       	dc.w $570
0001BC5C 0000 0000                  	dc.l Map_SS_R
0001BC60 0251                       	dc.w $251
0001BC62 0000 0000                  	dc.l Map_SS_R
0001BC66 0370                       	dc.w $370
0001BC68 0000 0000                  	dc.l Map_SS_Up
0001BC6C 0263                       	dc.w $263
0001BC6E 0000 0000                  	dc.l Map_SS_Down
0001BC72 0263                       	dc.w $263
0001BC74 0000 0000                  	dc.l Map_SS_R
0001BC78 22F0                       	dc.w $22F0
0001BC7A 0000 0000                  	dc.l Map_SS_Glass
0001BC7E 0470                       	dc.w $470
0001BC80 0000 0000                  	dc.l Map_SS_Glass
0001BC84 05F0                       	dc.w $5F0
0001BC86 0000 0000                  	dc.l Map_SS_Glass
0001BC8A 65F0                       	dc.w $65F0
0001BC8C 0000 0000                  	dc.l Map_SS_Glass
0001BC90 25F0                       	dc.w $25F0
0001BC92 0000 0000                  	dc.l Map_SS_Glass
0001BC96 45F0                       	dc.w $45F0
0001BC98 0000 0000                  	dc.l Map_SS_R
0001BC9C 02F0                       	dc.w $2F0
0001BC9E 0100 EAA4                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BCA2 023B                       	dc.w $23B
0001BCA4 0200 EAA4                  	dc.l Map_obj47+$2000000
0001BCA8 023B                       	dc.w $23B
0001BCAA 0000 0000                  	dc.l Map_SS_R
0001BCAE 0797                       	dc.w $797
0001BCB0 0000 0000                  	dc.l Map_SS_R
0001BCB4 07A0                       	dc.w $7A0
0001BCB6 0000 0000                  	dc.l Map_SS_R
0001BCBA 07A9                       	dc.w $7A9
0001BCBC 0000 0000                  	dc.l Map_SS_R
0001BCC0 0797                       	dc.w $797
0001BCC2 0000 0000                  	dc.l Map_SS_R
0001BCC6 07A0                       	dc.w $7A0
0001BCC8 0000 0000                  	dc.l Map_SS_R
0001BCCC 07A9                       	dc.w $7A9
0001BCCE 0000 9F60                  	dc.l Map_obj25
0001BCD2 27B2                       	dc.w $27B2
0001BCD4 0000 0000                  	dc.l Map_SS_Chaos3
0001BCD8 0770                       	dc.w $770
0001BCDA 0000 0000                  	dc.l Map_SS_Chaos3
0001BCDE 2770                       	dc.w $2770
0001BCE0 0000 0000                  	dc.l Map_SS_Chaos3
0001BCE4 4770                       	dc.w $4770
0001BCE6 0000 0000                  	dc.l Map_SS_Chaos3
0001BCEA 6770                       	dc.w $6770
0001BCEC 0000 0000                  	dc.l Map_SS_Chaos1
0001BCF0 0770                       	dc.w $770
0001BCF2 0000 0000                  	dc.l Map_SS_Chaos2
0001BCF6 0770                       	dc.w $770
0001BCF8 0000 0000                  	dc.l Map_SS_R
0001BCFC 04F0                       	dc.w $4F0
0001BCFE 0400 9F60                  	dc.l Map_obj25+$4000000
0001BD02 27B2                       	dc.w $27B2
0001BD04 0500 9F60                  	dc.l Map_obj25+$5000000
0001BD08 27B2                       	dc.w $27B2
0001BD0A 0600 9F60                  	dc.l Map_obj25+$6000000
0001BD0E 27B2                       	dc.w $27B2
0001BD10 0700 9F60                  	dc.l Map_obj25+$7000000
0001BD14 27B2                       	dc.w $27B2
0001BD16 0000 0000                  	dc.l Map_SS_Glass
0001BD1A 23F0                       	dc.w $23F0
0001BD1C 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BD20 23F0                       	dc.w $23F0
0001BD22 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BD26 23F0                       	dc.w $23F0
0001BD28 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BD2C 23F0                       	dc.w $23F0
0001BD2E 0000 0000                  	dc.l Map_SS_R+$2000000
0001BD32 04F0                       	dc.w $4F0
0001BD34 0000 0000                  	dc.l Map_SS_Glass
0001BD38 05F0                       	dc.w $5F0
0001BD3A 0000 0000                  	dc.l Map_SS_Glass
0001BD3E 65F0                       	dc.w $65F0
0001BD40 0000 0000                  	dc.l Map_SS_Glass
0001BD44 25F0                       	dc.w $25F0
0001BD46 0000 0000                  	dc.l Map_SS_Glass
0001BD4A 45F0                       	dc.w $45F0
0001BD4A 45F0                       	dc.w $45F0
0001BD4C                            
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C                            ; Sprite mappings - special stage "R" block
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C                            Map_SS_R:
0001BD4C                            	include "_maps\SSRblock.asm"
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C                            ; Sprite mappings - special stage "R" block
0001BD4C                            ; ---------------------------------------------------------------------------
0001BD4C 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BD50 0000                       		dc.w byte_1B91E-Map_SS_R
0001BD52 01                         byte_1B912:	dc.b 1
0001BD53 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BD58 01                         byte_1B918:	dc.b 1
0001BD59 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BD5E 00                         byte_1B91E:	dc.b 0
0001BD60 00                         		even
0001BD60 00                         		even
0001BD60                            
0001BD60                            ; ---------------------------------------------------------------------------
0001BD60                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BD60                            ; ---------------------------------------------------------------------------
0001BD60                            Map_SS_Glass:
0001BD60                            	include "_maps\SSglassblock.asm"
0001BD60                            ; ---------------------------------------------------------------------------
0001BD60                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BD60                            ; ---------------------------------------------------------------------------
0001BD60 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BD64 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BD68 01                         byte_1B928:	dc.b 1
0001BD69 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BD6E 01                         byte_1B92E:	dc.b 1
0001BD6F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BD74 01                         byte_1B934:	dc.b 1
0001BD75 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BD7A 01                         byte_1B93A:	dc.b 1
0001BD7B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BD80                            		even
0001BD80                            		even
0001BD80                            
0001BD80                            ; ---------------------------------------------------------------------------
0001BD80                            ; Sprite mappings - special stage "UP" block
0001BD80                            ; ---------------------------------------------------------------------------
0001BD80                            Map_SS_Up:
0001BD80                            	include "_maps\SSUPblock.asm"
0001BD80                            ; ---------------------------------------------------------------------------
0001BD80                            ; Sprite mappings - special stage "UP" block
0001BD80                            ; ---------------------------------------------------------------------------
0001BD80 0000                       		dc.w byte_1B944-Map_SS_Up
0001BD82 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BD84 01                         byte_1B944:	dc.b 1
0001BD85 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BD8A 01                         byte_1B94A:	dc.b 1
0001BD8B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BD90                            		even
0001BD90                            		even
0001BD90                            
0001BD90                            ; ---------------------------------------------------------------------------
0001BD90                            ; Sprite mappings - special stage "DOWN" block
0001BD90                            ; ---------------------------------------------------------------------------
0001BD90                            Map_SS_Down:
0001BD90                            	include "_maps\SSDOWNblock.asm"
0001BD90                            ; ---------------------------------------------------------------------------
0001BD90                            ; Sprite mappings - special stage "DOWN" block
0001BD90                            ; ---------------------------------------------------------------------------
0001BD90 0000                       		dc.w byte_1B954-Map_SS_Down
0001BD92 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BD94 01                         byte_1B954:	dc.b 1
0001BD95 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BD9A 01                         byte_1B95A:	dc.b 1
0001BD9B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BDA0                            		even
0001BDA0                            		even
0001BDA0                            
0001BDA0                            ; ---------------------------------------------------------------------------
0001BDA0                            ; Sprite mappings - special stage chaos	emeralds
0001BDA0                            ; ---------------------------------------------------------------------------
0001BDA0 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BDA2 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BDA4 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BDA6 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BDA8 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BDAA 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BDAC 01                         byte_1B96C:	dc.b 1
0001BDAD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BDB2 01                         byte_1B972:	dc.b 1
0001BDB3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BDB8 01                         byte_1B978:	dc.b 1
0001BDB9 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BDBE 01                         byte_1B97E:	dc.b 1
0001BDBF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BDC4                            		even
0001BDC4                            ; ===========================================================================
0001BDC4                            ; ---------------------------------------------------------------------------
0001BDC4                            ; Object 09 - Sonic (special stage)
0001BDC4                            ; ---------------------------------------------------------------------------
0001BDC4                            
0001BDC4                            Obj09:					; XREF: Obj_Index
0001BDC4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BDC8 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BDCA 6100 0000                  		bsr.w	SS_FixCamera
0001BDCE 6000 0000                  		bra.w	DebugMode
0001BDD2                            ; ===========================================================================
0001BDD2                            
0001BDD2                            Obj09_Normal:
0001BDD2 7000                       		moveq	#0,d0
0001BDD4 1028 0024                  		move.b	$24(a0),d0
0001BDD8 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BDDC 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BDE0                            ; ===========================================================================
0001BDE0 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BDE2 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BDE4 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BDE6 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BDE8                            ; ===========================================================================
0001BDE8                            
0001BDE8                            Obj09_Main:				; XREF: Obj09_Index
0001BDE8 5428 0024                  		addq.b	#2,$24(a0)
0001BDEC 117C 000E 0016             		move.b	#$E,$16(a0)
0001BDF2 117C 0007 0017             		move.b	#7,$17(a0)
0001BDF8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BE00 317C 0780 0002             		move.w	#$780,2(a0)
0001BE06 117C 0004 0001             		move.b	#4,1(a0)
0001BE0C 117C 0000 0018             		move.b	#0,$18(a0)
0001BE12 117C 0002 001C             		move.b	#2,$1C(a0)
0001BE18 08E8 0002 0022             		bset	#2,$22(a0)
0001BE1E 08E8 0001 0022             		bset	#1,$22(a0)
0001BE24                            
0001BE24                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BE24 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BE28 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BE2A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BE30 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BE32 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BE38                            
0001BE38                            Obj09_NoDebug:
0001BE38 117C 0000 0030             		move.b	#0,$30(a0)
0001BE3E 7000                       		moveq	#0,d0
0001BE40 1028 0022                  		move.b	$22(a0),d0
0001BE44 0240 0002                  		andi.w	#2,d0
0001BE48 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BE4C 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BE50 4EBA 826C                  		jsr	LoadSonicDynPLC
0001BE54 4EF9 0000 D5B0             		jmp	DisplaySprite
0001BE5A                            ; ===========================================================================
0001BE5A 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BE5C 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BE5E                            ; ===========================================================================
0001BE5E                            
0001BE5E                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BE5E 6100 0000                  		bsr.w	Obj09_Jump
0001BE62 6100 0000                  		bsr.w	Obj09_Move
0001BE66 6100 0000                  		bsr.w	Obj09_Fall
0001BE6A 6000                       		bra.s	Obj09_Display
0001BE6C                            ; ===========================================================================
0001BE6C                            
0001BE6C                            Obj09_InAir:				; XREF: Obj09_Modes
0001BE6C 6100 0000                  		bsr.w	nullsub_2
0001BE70 6100 0000                  		bsr.w	Obj09_Move
0001BE74 6100 0000                  		bsr.w	Obj09_Fall
0001BE78                            
0001BE78                            Obj09_Display:				; XREF: Obj09_OnWall
0001BE78 6100 0000                  		bsr.w	Obj09_ChkItems
0001BE7C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BE80 4EB9 0000 D58A             		jsr	SpeedToPos
0001BE86 6100 0000                  		bsr.w	SS_FixCamera
0001BE8A 3038 F780                  		move.w	($FFFFF780).w,d0
0001BE8E D078 F782                  		add.w	($FFFFF782).w,d0
0001BE92 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BE96 4EB9 0001 3E36             		jsr	Sonic_Animate
0001BE9C 4E75                       		rts	
0001BE9E                            
0001BE9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE9E                            
0001BE9E                            
0001BE9E                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BE9E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BEA4 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BEA6 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BEAA                            
0001BEAA                            Obj09_ChkRight:
0001BEAA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BEB0 6700                       		beq.s	loc_1BA78	; if not, branch
0001BEB2 6100 0000                  		bsr.w	Obj09_MoveRight
0001BEB6                            
0001BEB6                            loc_1BA78:
0001BEB6 1038 F602                  		move.b	($FFFFF602).w,d0
0001BEBA 0200 000C                  		andi.b	#$C,d0
0001BEBE 6600                       		bne.s	loc_1BAA8
0001BEC0 3028 0014                  		move.w	$14(a0),d0
0001BEC4 6700                       		beq.s	loc_1BAA8
0001BEC6 6B00                       		bmi.s	loc_1BA9A
0001BEC8 0440 000C                  		subi.w	#$C,d0
0001BECC 6400                       		bcc.s	loc_1BA94
0001BECE 303C 0000                  		move.w	#0,d0
0001BED2                            
0001BED2                            loc_1BA94:
0001BED2 3140 0014                  		move.w	d0,$14(a0)
0001BED6 6000                       		bra.s	loc_1BAA8
0001BED8                            ; ===========================================================================
0001BED8                            
0001BED8                            loc_1BA9A:
0001BED8 0640 000C                  		addi.w	#$C,d0
0001BEDC 6400                       		bcc.s	loc_1BAA4
0001BEDE 303C 0000                  		move.w	#0,d0
0001BEE2                            
0001BEE2                            loc_1BAA4:
0001BEE2 3140 0014                  		move.w	d0,$14(a0)
0001BEE6                            
0001BEE6                            loc_1BAA8:
0001BEE6 1038 F780                  		move.b	($FFFFF780).w,d0
0001BEEA 0600 0020                  		addi.b	#$20,d0
0001BEEE 0200 00C0                  		andi.b	#$C0,d0
0001BEF2 4400                       		neg.b	d0
0001BEF4 4EB9 0000 29BA             		jsr	(CalcSine).l
0001BEFA C3E8 0014                  		muls.w	$14(a0),d1
0001BEFE D3A8 0008                  		add.l	d1,8(a0)
0001BF02 C1E8 0014                  		muls.w	$14(a0),d0
0001BF06 D1A8 000C                  		add.l	d0,$C(a0)
0001BF0A 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BF0E 2428 000C                  		move.l	$C(a0),d2
0001BF12 2628 0008                  		move.l	8(a0),d3
0001BF16 6100 0000                  		bsr.w	sub_1BCE8
0001BF1A 6700                       		beq.s	loc_1BAF2
0001BF1C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BF20 93A8 0008                  		sub.l	d1,8(a0)
0001BF24 91A8 000C                  		sub.l	d0,$C(a0)
0001BF28 317C 0000 0014             		move.w	#0,$14(a0)
0001BF2E 4E75                       		rts	
0001BF30                            ; ===========================================================================
0001BF30                            
0001BF30                            loc_1BAF2:
0001BF30 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BF34 4E75                       		rts	
0001BF36                            ; End of function Obj09_Move
0001BF36                            
0001BF36                            
0001BF36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF36                            
0001BF36                            
0001BF36                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BF36 08E8 0000 0022             		bset	#0,$22(a0)
0001BF3C 3028 0014                  		move.w	$14(a0),d0
0001BF40 6700                       		beq.s	loc_1BB06
0001BF42 6A00                       		bpl.s	loc_1BB1A
0001BF44                            
0001BF44                            loc_1BB06:
0001BF44 0440 000C                  		subi.w	#$C,d0
0001BF48 0C40 F800                  		cmpi.w	#-$800,d0
0001BF4C 6E00                       		bgt.s	loc_1BB14
0001BF4E 303C F800                  		move.w	#-$800,d0
0001BF52                            
0001BF52                            loc_1BB14:
0001BF52 3140 0014                  		move.w	d0,$14(a0)
0001BF56 4E75                       		rts	
0001BF58                            ; ===========================================================================
0001BF58                            
0001BF58                            loc_1BB1A:
0001BF58 0440 0040                  		subi.w	#$40,d0
0001BF5C 6400                       		bcc.s	loc_1BB22
0001BF5E 4E71                       		nop	
0001BF60                            
0001BF60                            loc_1BB22:
0001BF60 3140 0014                  		move.w	d0,$14(a0)
0001BF64 4E75                       		rts	
0001BF66                            ; End of function Obj09_MoveLeft
0001BF66                            
0001BF66                            
0001BF66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF66                            
0001BF66                            
0001BF66                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BF66 08A8 0000 0022             		bclr	#0,$22(a0)
0001BF6C 3028 0014                  		move.w	$14(a0),d0
0001BF70 6B00                       		bmi.s	loc_1BB48
0001BF72 0640 000C                  		addi.w	#$C,d0
0001BF76 0C40 0800                  		cmpi.w	#$800,d0
0001BF7A 6D00                       		blt.s	loc_1BB42
0001BF7C 303C 0800                  		move.w	#$800,d0
0001BF80                            
0001BF80                            loc_1BB42:
0001BF80 3140 0014                  		move.w	d0,$14(a0)
0001BF84 6000                       		bra.s	locret_1BB54
0001BF86                            ; ===========================================================================
0001BF86                            
0001BF86                            loc_1BB48:
0001BF86 0640 0040                  		addi.w	#$40,d0
0001BF8A 6400                       		bcc.s	loc_1BB50
0001BF8C 4E71                       		nop	
0001BF8E                            
0001BF8E                            loc_1BB50:
0001BF8E 3140 0014                  		move.w	d0,$14(a0)
0001BF92                            
0001BF92                            locret_1BB54:
0001BF92 4E75                       		rts	
0001BF94                            ; End of function Obj09_MoveRight
0001BF94                            
0001BF94                            
0001BF94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF94                            
0001BF94                            
0001BF94                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BF94 1038 F603                  		move.b	($FFFFF603).w,d0
0001BF98 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BF9C 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BF9E 1038 F780                  		move.b	($FFFFF780).w,d0
0001BFA2 0200 00FC                  		andi.b	#$FC,d0
0001BFA6 4400                       		neg.b	d0
0001BFA8 0400 0040                  		subi.b	#$40,d0
0001BFAC 4EB9 0000 29BA             		jsr	(CalcSine).l
0001BFB2 C3FC 0680                  		muls.w	#$680,d1
0001BFB6 E081                       		asr.l	#8,d1
0001BFB8 3141 0010                  		move.w	d1,$10(a0)
0001BFBC C1FC 0680                  		muls.w	#$680,d0
0001BFC0 E080                       		asr.l	#8,d0
0001BFC2 3140 0012                  		move.w	d0,$12(a0)
0001BFC6 08E8 0001 0022             		bset	#1,$22(a0)
0001BFCC 303C 00A0                  		move.w	#$A0,d0
0001BFD0 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BFD6                            
0001BFD6                            Obj09_NoJump:
0001BFD6 4E75                       		rts	
0001BFD8                            ; End of function Obj09_Jump
0001BFD8                            
0001BFD8                            
0001BFD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFD8                            
0001BFD8                            
0001BFD8                            nullsub_2:				; XREF: Obj09_InAir
0001BFD8 4E75                       		rts	
0001BFDA                            ; End of function nullsub_2
0001BFDA                            
0001BFDA                            ; ===========================================================================
0001BFDA                            ; ---------------------------------------------------------------------------
0001BFDA                            ; unused subroutine to limit Sonic's upward vertical speed
0001BFDA                            ; ---------------------------------------------------------------------------
0001BFDA 323C FC00                  		move.w	#-$400,d1
0001BFDE B268 0012                  		cmp.w	$12(a0),d1
0001BFE2 6F00                       		ble.s	locret_1BBB4
0001BFE4 1038 F602                  		move.b	($FFFFF602).w,d0
0001BFE8 0200 0070                  		andi.b	#$70,d0
0001BFEC 6600                       		bne.s	locret_1BBB4
0001BFEE 3141 0012                  		move.w	d1,$12(a0)
0001BFF2                            
0001BFF2                            locret_1BBB4:
0001BFF2 4E75                       		rts	
0001BFF4                            ; ---------------------------------------------------------------------------
0001BFF4                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BFF4                            ; ---------------------------------------------------------------------------
0001BFF4                            
0001BFF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFF4                            
0001BFF4                            
0001BFF4                            SS_FixCamera:				; XREF: Obj09
0001BFF4 3428 000C                  		move.w	$C(a0),d2
0001BFF8 3628 0008                  		move.w	8(a0),d3
0001BFFC 3038 F700                  		move.w	($FFFFF700).w,d0
0001C000 0443 00A0                  		subi.w	#$A0,d3
0001C004 6500                       		bcs.s	loc_1BBCE
0001C006 9043                       		sub.w	d3,d0
0001C008 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C00C                            
0001C00C                            loc_1BBCE:
0001C00C 3038 F704                  		move.w	($FFFFF704).w,d0
0001C010 0442 0070                  		subi.w	#$70,d2
0001C014 6500                       		bcs.s	locret_1BBDE
0001C016 9042                       		sub.w	d2,d0
0001C018 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C01C                            
0001C01C                            locret_1BBDE:
0001C01C 4E75                       		rts	
0001C01E                            ; End of function SS_FixCamera
0001C01E                            
0001C01E                            ; ===========================================================================
0001C01E                            
0001C01E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C01E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C024 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C02A 6600                       		bne.s	loc_1BBF4
0001C02C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C032                            
0001C032                            loc_1BBF4:
0001C032 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C038 6D00                       		blt.s	loc_1BC12
0001C03A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C040 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C046 5428 0024                  		addq.b	#2,$24(a0)
0001C04A 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C050                            
0001C050                            loc_1BC12:
0001C050 3038 F780                  		move.w	($FFFFF780).w,d0
0001C054 D078 F782                  		add.w	($FFFFF782).w,d0
0001C058 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C05C 4EB9 0001 3E36             		jsr	Sonic_Animate
0001C062 4EBA 805A                  		jsr	LoadSonicDynPLC
0001C066 6100 FF8C                  		bsr.w	SS_FixCamera
0001C06A 4EF9 0000 D5B0             		jmp	DisplaySprite
0001C070                            ; ===========================================================================
0001C070                            
0001C070                            Obj09_Exit2:				; XREF: Obj09_Index
0001C070 5368 0038                  		subq.w	#1,$38(a0)
0001C074 6600                       		bne.s	loc_1BC40
0001C076 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C07C                            
0001C07C                            loc_1BC40:
0001C07C 4EB9 0001 3E36             		jsr	Sonic_Animate
0001C082 4EBA 803A                  		jsr	LoadSonicDynPLC
0001C086 6100 FF6C                  		bsr.w	SS_FixCamera
0001C08A 4EF9 0000 D5B0             		jmp	DisplaySprite
0001C090                            
0001C090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C090                            
0001C090                            
0001C090                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C090 2428 000C                  		move.l	$C(a0),d2
0001C094 2628 0008                  		move.l	8(a0),d3
0001C098 1038 F780                  		move.b	($FFFFF780).w,d0
0001C09C 0200 00FC                  		andi.b	#$FC,d0
0001C0A0 4EB9 0000 29BA             		jsr	(CalcSine).l
0001C0A6 3828 0010                  		move.w	$10(a0),d4
0001C0AA 48C4                       		ext.l	d4
0001C0AC E184                       		asl.l	#8,d4
0001C0AE C1FC 002A                  		muls.w	#$2A,d0
0001C0B2 D084                       		add.l	d4,d0
0001C0B4 3828 0012                  		move.w	$12(a0),d4
0001C0B8 48C4                       		ext.l	d4
0001C0BA E184                       		asl.l	#8,d4
0001C0BC C3FC 002A                  		muls.w	#$2A,d1
0001C0C0 D284                       		add.l	d4,d1
0001C0C2 D680                       		add.l	d0,d3
0001C0C4 6100 0000                  		bsr.w	sub_1BCE8
0001C0C8 6700                       		beq.s	loc_1BCB0
0001C0CA 9680                       		sub.l	d0,d3
0001C0CC 7000                       		moveq	#0,d0
0001C0CE 3140 0010                  		move.w	d0,$10(a0)
0001C0D2 08A8 0001 0022             		bclr	#1,$22(a0)
0001C0D8 D481                       		add.l	d1,d2
0001C0DA 6100 0000                  		bsr.w	sub_1BCE8
0001C0DE 6700                       		beq.s	loc_1BCC6
0001C0E0 9481                       		sub.l	d1,d2
0001C0E2 7200                       		moveq	#0,d1
0001C0E4 3141 0012                  		move.w	d1,$12(a0)
0001C0E8 4E75                       		rts	
0001C0EA                            ; ===========================================================================
0001C0EA                            
0001C0EA                            loc_1BCB0:
0001C0EA D481                       		add.l	d1,d2
0001C0EC 6100 0000                  		bsr.w	sub_1BCE8
0001C0F0 6700                       		beq.s	loc_1BCD4
0001C0F2 9481                       		sub.l	d1,d2
0001C0F4 7200                       		moveq	#0,d1
0001C0F6 3141 0012                  		move.w	d1,$12(a0)
0001C0FA 08A8 0001 0022             		bclr	#1,$22(a0)
0001C100                            
0001C100                            loc_1BCC6:
0001C100 E080                       		asr.l	#8,d0
0001C102 E081                       		asr.l	#8,d1
0001C104 3140 0010                  		move.w	d0,$10(a0)
0001C108 3141 0012                  		move.w	d1,$12(a0)
0001C10C 4E75                       		rts	
0001C10E                            ; ===========================================================================
0001C10E                            
0001C10E                            loc_1BCD4:
0001C10E E080                       		asr.l	#8,d0
0001C110 E081                       		asr.l	#8,d1
0001C112 3140 0010                  		move.w	d0,$10(a0)
0001C116 3141 0012                  		move.w	d1,$12(a0)
0001C11A 08E8 0001 0022             		bset	#1,$22(a0)
0001C120 4E75                       		rts	
0001C122                            ; End of function Obj09_Fall
0001C122                            
0001C122                            
0001C122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C122                            
0001C122                            
0001C122                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C122 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C128 7800                       		moveq	#0,d4
0001C12A 4842                       		swap	d2
0001C12C 3802                       		move.w	d2,d4
0001C12E 4842                       		swap	d2
0001C130 0644 0044                  		addi.w	#$44,d4
0001C134 88FC 0018                  		divu.w	#$18,d4
0001C138 C8FC 0080                  		mulu.w	#$80,d4
0001C13C D3C4                       		adda.l	d4,a1
0001C13E 7800                       		moveq	#0,d4
0001C140 4843                       		swap	d3
0001C142 3803                       		move.w	d3,d4
0001C144 4843                       		swap	d3
0001C146 0644 0014                  		addi.w	#$14,d4
0001C14A 88FC 0018                  		divu.w	#$18,d4
0001C14E D2C4                       		adda.w	d4,a1
0001C150 7A00                       		moveq	#0,d5
0001C152 1819                       		move.b	(a1)+,d4
0001C154 6100                       		bsr.s	sub_1BD30
0001C156 1819                       		move.b	(a1)+,d4
0001C158 6100                       		bsr.s	sub_1BD30
0001C15A D2FC 007E                  		adda.w	#$7E,a1
0001C15E 1819                       		move.b	(a1)+,d4
0001C160 6100                       		bsr.s	sub_1BD30
0001C162 1819                       		move.b	(a1)+,d4
0001C164 6100                       		bsr.s	sub_1BD30
0001C166 4A05                       		tst.b	d5
0001C168 4E75                       		rts	
0001C16A                            ; End of function sub_1BCE8
0001C16A                            
0001C16A                            
0001C16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C16A                            
0001C16A                            
0001C16A                            sub_1BD30:				; XREF: sub_1BCE8
0001C16A 6700                       		beq.s	locret_1BD44
0001C16C 0C04 0028                  		cmpi.b	#$28,d4
0001C170 6700                       		beq.s	locret_1BD44
0001C172 0C04 003A                  		cmpi.b	#$3A,d4
0001C176 6500                       		bcs.s	loc_1BD46
0001C178 0C04 004B                  		cmpi.b	#$4B,d4
0001C17C 6400                       		bcc.s	loc_1BD46
0001C17E                            
0001C17E                            locret_1BD44:
0001C17E 4E75                       		rts	
0001C180                            ; ===========================================================================
0001C180                            
0001C180                            loc_1BD46:
0001C180 1144 0030                  		move.b	d4,$30(a0)
0001C184 2149 0032                  		move.l	a1,$32(a0)
0001C188 7AFF                       		moveq	#-1,d5
0001C18A 4E75                       		rts	
0001C18C                            ; End of function sub_1BD30
0001C18C                            
0001C18C                            
0001C18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C18C                            
0001C18C                            
0001C18C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C18C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C192 7800                       		moveq	#0,d4
0001C194 3828 000C                  		move.w	$C(a0),d4
0001C198 0644 0050                  		addi.w	#$50,d4
0001C19C 88FC 0018                  		divu.w	#$18,d4
0001C1A0 C8FC 0080                  		mulu.w	#$80,d4
0001C1A4 D3C4                       		adda.l	d4,a1
0001C1A6 7800                       		moveq	#0,d4
0001C1A8 3828 0008                  		move.w	8(a0),d4
0001C1AC 0644 0020                  		addi.w	#$20,d4
0001C1B0 88FC 0018                  		divu.w	#$18,d4
0001C1B4 D2C4                       		adda.w	d4,a1
0001C1B6 1811                       		move.b	(a1),d4
0001C1B8 6600                       		bne.s	Obj09_ChkCont
0001C1BA 4A28 003A                  		tst.b	$3A(a0)
0001C1BE 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C1C2 7800                       		moveq	#0,d4
0001C1C4 4E75                       		rts	
0001C1C6                            ; ===========================================================================
0001C1C6                            
0001C1C6                            Obj09_ChkCont:
0001C1C6 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C1CA 6600                       		bne.s	Obj09_Chk1Up
0001C1CC 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001C1D0 6600                       		bne.s	Obj09_GetCont
0001C1D2 14BC 0001                  		move.b	#1,(a2)
0001C1D6 2549 0004                  		move.l	a1,4(a2)
0001C1DA                            
0001C1DA                            Obj09_GetCont:
0001C1DA 4EB9 0000 9C48             		jsr	CollectRing
0001C1E0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C1E6 6500                       		bcs.s	Obj09_NoCont
0001C1E8 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C1EE 6600                       		bne.s	Obj09_NoCont
0001C1F0 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C1F4 303C 00BF                  		move.w	#$BF,d0
0001C1F8 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra continue sound
0001C1FE                            
0001C1FE                            Obj09_NoCont:
0001C1FE 7800                       		moveq	#0,d4
0001C200 4E75                       		rts	
0001C202                            ; ===========================================================================
0001C202                            
0001C202                            Obj09_Chk1Up:
0001C202 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C206 6600                       		bne.s	Obj09_ChkEmer
0001C208 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001C20C 6600                       		bne.s	Obj09_Get1Up
0001C20E 14BC 0003                  		move.b	#3,(a2)
0001C212 2549 0004                  		move.l	a1,4(a2)
0001C216                            
0001C216                            Obj09_Get1Up:
0001C216 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C21A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C21E 303C 009F                  		move.w	#$9F,d0
0001C222 4EB9 0000 12C6             		jsr	(PlaySound).l	; play extra life music
0001C228 7800                       		moveq	#0,d4
0001C22A 4E75                       		rts	
0001C22C                            ; ===========================================================================
0001C22C                            
0001C22C                            Obj09_ChkEmer:
0001C22C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C230 6500                       		bcs.s	Obj09_ChkGhost
0001C232 0C04 0040                  		cmpi.b	#$40,d4
0001C236 6200                       		bhi.s	Obj09_ChkGhost
0001C238 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001C23C 6600                       		bne.s	Obj09_GetEmer
0001C23E 14BC 0005                  		move.b	#5,(a2)
0001C242 2549 0004                  		move.l	a1,4(a2)
0001C246                            
0001C246                            Obj09_GetEmer:
0001C246 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C24C 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C24E 0404 003B                  		subi.b	#$3B,d4
0001C252 7000                       		moveq	#0,d0
0001C254 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C258 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C25C 1584 0000                  		move.b	d4,(a2,d0.w)
0001C260 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C264                            
0001C264                            Obj09_NoEmer:
0001C264 303C 0096                  		move.w	#$96,d0
0001C268 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C26E 7800                       		moveq	#0,d4
0001C270 4E75                       		rts	
0001C272                            ; ===========================================================================
0001C272                            
0001C272                            Obj09_ChkGhost:
0001C272 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C276 6600                       		bne.s	Obj09_ChkGhostTag
0001C278 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C27E                            
0001C27E                            Obj09_ChkGhostTag:
0001C27E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C282 6600                       		bne.s	Obj09_NoGhost
0001C284 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C28A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C28C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C292                            
0001C292                            Obj09_NoGhost:
0001C292 78FF                       		moveq	#-1,d4
0001C294 4E75                       		rts	
0001C296                            ; ===========================================================================
0001C296                            
0001C296                            Obj09_MakeGhostSolid:
0001C296 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C29C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C29E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C2A4 723F                       		moveq	#$3F,d1
0001C2A6                            
0001C2A6                            Obj09_GhostLoop2:
0001C2A6 743F                       		moveq	#$3F,d2
0001C2A8                            
0001C2A8                            Obj09_GhostLoop:
0001C2A8 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C2AC 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C2AE 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C2B2                            
0001C2B2                            Obj09_NoReplace:
0001C2B2 5249                       		addq.w	#1,a1
0001C2B4 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C2B8 43E9 0040                  		lea	$40(a1),a1
0001C2BC 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C2C0                            
0001C2C0                            Obj09_GhostNotSolid:
0001C2C0 4228 003A                  		clr.b	$3A(a0)
0001C2C4 7800                       		moveq	#0,d4
0001C2C6 4E75                       		rts	
0001C2C8                            ; End of function Obj09_ChkItems
0001C2C8                            
0001C2C8                            
0001C2C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2C8                            
0001C2C8                            
0001C2C8                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C2C8 1028 0030                  		move.b	$30(a0),d0
0001C2CC 6600                       		bne.s	Obj09_ChkBumper
0001C2CE 5328 0036                  		subq.b	#1,$36(a0)
0001C2D2 6A00                       		bpl.s	loc_1BEA0
0001C2D4 117C 0000 0036             		move.b	#0,$36(a0)
0001C2DA                            
0001C2DA                            loc_1BEA0:
0001C2DA 5328 0037                  		subq.b	#1,$37(a0)
0001C2DE 6A00                       		bpl.s	locret_1BEAC
0001C2E0 117C 0000 0037             		move.b	#0,$37(a0)
0001C2E6                            
0001C2E6                            locret_1BEAC:
0001C2E6 4E75                       		rts	
0001C2E8                            ; ===========================================================================
0001C2E8                            
0001C2E8                            Obj09_ChkBumper:
0001C2E8 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C2EC 6600                       		bne.s	Obj09_GOAL
0001C2EE 2228 0032                  		move.l	$32(a0),d1
0001C2F2 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C2F8 3401                       		move.w	d1,d2
0001C2FA 0241 007F                  		andi.w	#$7F,d1
0001C2FE C2FC 0018                  		mulu.w	#$18,d1
0001C302 0441 0014                  		subi.w	#$14,d1
0001C306 EE4A                       		lsr.w	#7,d2
0001C308 0242 007F                  		andi.w	#$7F,d2
0001C30C C4FC 0018                  		mulu.w	#$18,d2
0001C310 0442 0044                  		subi.w	#$44,d2
0001C314 9268 0008                  		sub.w	8(a0),d1
0001C318 9468 000C                  		sub.w	$C(a0),d2
0001C31C 4EB9 0000 2C88             		jsr	(CalcAngle).l
0001C322 4EB9 0000 29BA             		jsr	(CalcSine).l
0001C328 C3FC F900                  		muls.w	#-$700,d1
0001C32C E081                       		asr.l	#8,d1
0001C32E 3141 0010                  		move.w	d1,$10(a0)
0001C332 C1FC F900                  		muls.w	#-$700,d0
0001C336 E080                       		asr.l	#8,d0
0001C338 3140 0012                  		move.w	d0,$12(a0)
0001C33C 08E8 0001 0022             		bset	#1,$22(a0)
0001C342 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001C346 6600                       		bne.s	Obj09_BumpSnd
0001C348 14BC 0002                  		move.b	#2,(a2)
0001C34C 2028 0032                  		move.l	$32(a0),d0
0001C350 5380                       		subq.l	#1,d0
0001C352 2540 0004                  		move.l	d0,4(a2)
0001C356                            
0001C356                            Obj09_BumpSnd:
0001C356 303C 00B4                  		move.w	#$B4,d0
0001C35A 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C360                            ; ===========================================================================
0001C360                            
0001C360                            Obj09_GOAL:
0001C360 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C364 6600                       		bne.s	Obj09_UPblock
0001C366 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C36A 303C 00A8                  		move.w	#$A8,d0		; change item
0001C36E 4EB9 0000 12CC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C374 4E75                       		rts	
0001C376                            ; ===========================================================================
0001C376                            
0001C376                            Obj09_UPblock:
0001C376 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C37A 6600                       		bne.s	Obj09_DOWNblock
0001C37C 4A28 0036                  		tst.b	$36(a0)
0001C380 6600 0000                  		bne.w	Obj09_NoGlass
0001C384 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C38A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C390 6700                       		beq.s	Obj09_UPsnd
0001C392 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C396 2268 0032                  		movea.l	$32(a0),a1
0001C39A 5389                       		subq.l	#1,a1
0001C39C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C3A0                            
0001C3A0                            Obj09_UPsnd:
0001C3A0 303C 00A9                  		move.w	#$A9,d0
0001C3A4 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C3AA                            ; ===========================================================================
0001C3AA                            
0001C3AA                            Obj09_DOWNblock:
0001C3AA 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C3AE 6600                       		bne.s	Obj09_Rblock
0001C3B0 4A28 0036                  		tst.b	$36(a0)
0001C3B4 6600 0000                  		bne.w	Obj09_NoGlass
0001C3B8 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C3BE 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C3C4 6600                       		bne.s	Obj09_DOWNsnd
0001C3C6 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C3CA 2268 0032                  		movea.l	$32(a0),a1
0001C3CE 5389                       		subq.l	#1,a1
0001C3D0 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C3D4                            
0001C3D4                            Obj09_DOWNsnd:
0001C3D4 303C 00A9                  		move.w	#$A9,d0
0001C3D8 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C3DE                            ; ===========================================================================
0001C3DE                            
0001C3DE                            Obj09_Rblock:
0001C3DE 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C3E2 6600                       		bne.s	Obj09_ChkGlass
0001C3E4 4A28 0037                  		tst.b	$37(a0)
0001C3E8 6600 0000                  		bne.w	Obj09_NoGlass
0001C3EC 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C3F2 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001C3F6 6600                       		bne.s	Obj09_RevStage
0001C3F8 14BC 0004                  		move.b	#4,(a2)
0001C3FC 2028 0032                  		move.l	$32(a0),d0
0001C400 5380                       		subq.l	#1,d0
0001C402 2540 0004                  		move.l	d0,4(a2)
0001C406                            
0001C406                            Obj09_RevStage:
0001C406 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C40A 303C 00A9                  		move.w	#$A9,d0
0001C40E 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play sound
0001C414                            ; ===========================================================================
0001C414                            
0001C414                            Obj09_ChkGlass:
0001C414 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C418 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C41A 0C00 002E                  		cmpi.b	#$2E,d0
0001C41E 6700                       		beq.s	Obj09_Glass
0001C420 0C00 002F                  		cmpi.b	#$2F,d0
0001C424 6700                       		beq.s	Obj09_Glass
0001C426 0C00 0030                  		cmpi.b	#$30,d0
0001C42A 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C42C                            
0001C42C                            Obj09_Glass:
0001C42C 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001C430 6600                       		bne.s	Obj09_GlassSnd
0001C432 14BC 0006                  		move.b	#6,(a2)
0001C436 2268 0032                  		movea.l	$32(a0),a1
0001C43A 5389                       		subq.l	#1,a1
0001C43C 2549 0004                  		move.l	a1,4(a2)
0001C440 1011                       		move.b	(a1),d0
0001C442 5200                       		addq.b	#1,d0		; change glass type when touched
0001C444 0C00 0030                  		cmpi.b	#$30,d0
0001C448 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C44A 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C44C                            
0001C44C                            Obj09_GlassUpdate:
0001C44C 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C450                            
0001C450                            Obj09_GlassSnd:
0001C450 303C 00BA                  		move.w	#$BA,d0
0001C454 4EF9 0000 12CC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C45A                            ; ===========================================================================
0001C45A                            
0001C45A                            Obj09_NoGlass:
0001C45A 4E75                       		rts	
0001C45C                            ; End of function Obj09_ChkItems2
0001C45C                            
0001C45C                            ; ===========================================================================
0001C45C                            ; ---------------------------------------------------------------------------
0001C45C                            ; Object 10 - blank
0001C45C                            ; ---------------------------------------------------------------------------
0001C45C                            
0001C45C                            Obj10:					; XREF: Obj_Index
0001C45C 4E75                       		rts	
0001C45E                            ; ---------------------------------------------------------------------------
0001C45E                            ; Subroutine to	animate	level graphics
0001C45E                            ; ---------------------------------------------------------------------------
0001C45E                            
0001C45E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C45E                            
0001C45E                            
0001C45E                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C45E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C462 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C464 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C46A 6100 0000                  		bsr.w	AniArt_GiantRing
0001C46E 7000                       		moveq	#0,d0
0001C470 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C474 D040                       		add.w	d0,d0
0001C476 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C47A 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C47E                            ; ===========================================================================
0001C47E                            
0001C47E                            AniArt_Pause:
0001C47E 4E75                       		rts	
0001C480                            ; End of function AniArt_Load
0001C480                            
0001C480                            ; ===========================================================================
0001C480 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C484 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C488 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C48C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C48E                            ; ===========================================================================
0001C48E                            ; ---------------------------------------------------------------------------
0001C48E                            ; Animated pattern routine - Green Hill
0001C48E                            ; ---------------------------------------------------------------------------
0001C48E                            
0001C48E                            AniArt_GHZ:				; XREF: AniArt_Index
0001C48E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C492 6A00                       		bpl.s	loc_1C08A
0001C494 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C49A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C4A0 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C4A4 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C4A8 0240 0001                  		andi.w	#1,d0
0001C4AC 6700                       		beq.s	loc_1C078
0001C4AE 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C4B2                            
0001C4B2                            loc_1C078:
0001C4B2 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C4BC 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C4C0 6000 0000                  		bra.w	LoadTiles
0001C4C4                            ; ===========================================================================
0001C4C4                            
0001C4C4                            loc_1C08A:
0001C4C4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C4C8 6A00                       		bpl.s	loc_1C0C0
0001C4CA 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C4D0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C4D6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C4DA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C4DE 0240 0001                  		andi.w	#1,d0
0001C4E2 6700                       		beq.s	loc_1C0AE
0001C4E4 43E9 0200                  		lea	$200(a1),a1
0001C4E8                            
0001C4E8                            loc_1C0AE:
0001C4E8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C4F2 323C 000F                  		move.w	#$F,d1
0001C4F6 6000 0000                  		bra.w	LoadTiles
0001C4FA                            ; ===========================================================================
0001C4FA                            
0001C4FA                            loc_1C0C0:
0001C4FA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C4FE 6A00                       		bpl.s	locret_1C10C
0001C500 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C506 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C50A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C50E 0240 0003                  		andi.w	#3,d0
0001C512 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C516 0800 0000                  		btst	#0,d0
0001C51A 6600                       		bne.s	loc_1C0E8
0001C51C 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C522                            
0001C522                            loc_1C0E8:
0001C522 EF48                       		lsl.w	#7,d0
0001C524 3200                       		move.w	d0,d1
0001C526 D040                       		add.w	d0,d0
0001C528 D041                       		add.w	d1,d0
0001C52A 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C534 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C53A 43F1 0000                  		lea	(a1,d0.w),a1
0001C53E 323C 000B                  		move.w	#$B,d1
0001C542 6100 0000                  		bsr.w	LoadTiles
0001C546                            
0001C546                            locret_1C10C:
0001C546 4E75                       		rts	
0001C548                            ; ===========================================================================
0001C548 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C54C                            ; ===========================================================================
0001C54C                            ; ---------------------------------------------------------------------------
0001C54C                            ; Animated pattern routine - Marble
0001C54C                            ; ---------------------------------------------------------------------------
0001C54C                            
0001C54C                            AniArt_MZ:				; XREF: AniArt_Index
0001C54C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C550 6A00                       		bpl.s	loc_1C150
0001C552 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C558 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C55E 7000                       		moveq	#0,d0
0001C560 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C564 5200                       		addq.b	#1,d0
0001C566 0C00 0003                  		cmpi.b	#3,d0
0001C56A 6600                       		bne.s	loc_1C134
0001C56C 7000                       		moveq	#0,d0
0001C56E                            
0001C56E                            loc_1C134:
0001C56E 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C572 C0FC 0100                  		mulu.w	#$100,d0
0001C576 D2C0                       		adda.w	d0,a1
0001C578 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C582 323C 0007                  		move.w	#7,d1
0001C586 6100 0000                  		bsr.w	LoadTiles
0001C58A                            
0001C58A                            loc_1C150:
0001C58A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C58E 6A00                       		bpl.s	loc_1C1AE
0001C590 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C596 7000                       		moveq	#0,d0
0001C598 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C59C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C5A2 EE58                       		ror.w	#7,d0
0001C5A4 D8C0                       		adda.w	d0,a4
0001C5A6 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C5B0 7600                       		moveq	#0,d3
0001C5B2 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C5B6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C5BA 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C5BE 343C 0003                  		move.w	#3,d2
0001C5C2                            
0001C5C2                            loc_1C188:
0001C5C2 3003                       		move.w	d3,d0
0001C5C4 D040                       		add.w	d0,d0
0001C5C6 0240 001E                  		andi.w	#$1E,d0
0001C5CA 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C5D0 3033 0000                  		move.w	(a3,d0.w),d0
0001C5D4 47F3 0000                  		lea	(a3,d0.w),a3
0001C5D8 224C                       		movea.l	a4,a1
0001C5DA 323C 001F                  		move.w	#$1F,d1
0001C5DE 4E93                       		jsr	(a3)
0001C5E0 5843                       		addq.w	#4,d3
0001C5E2 51CA FFDE                  		dbf	d2,loc_1C188
0001C5E6 4E75                       		rts	
0001C5E8                            ; ===========================================================================
0001C5E8                            
0001C5E8                            loc_1C1AE:
0001C5E8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C5EC 6A00 0000                  		bpl.w	locret_1C1EA
0001C5F0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C5F6 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C5FC 7000                       		moveq	#0,d0
0001C5FE 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C602 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C606 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C60C C0FC 00C0                  		mulu.w	#$C0,d0
0001C610 D2C0                       		adda.w	d0,a1
0001C612 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C61C 323C 0005                  		move.w	#5,d1
0001C620 6000 0000                  		bra.w	LoadTiles
0001C624                            ; ===========================================================================
0001C624                            
0001C624                            locret_1C1EA:
0001C624 4E75                       		rts	
0001C626                            ; ===========================================================================
0001C626                            ; ---------------------------------------------------------------------------
0001C626                            ; Animated pattern routine - Scrap Brain
0001C626                            ; ---------------------------------------------------------------------------
0001C626                            
0001C626                            AniArt_SBZ:				; XREF: AniArt_Index
0001C626 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C62A 6700                       		beq.s	loc_1C1F8
0001C62C 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C630 6000                       		bra.s	loc_1C250
0001C632                            ; ===========================================================================
0001C632                            
0001C632                            loc_1C1F8:
0001C632 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C636 6A00                       		bpl.s	loc_1C250
0001C638 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C63E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C644 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C64E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C652 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C656 0240 0007                  		andi.w	#7,d0
0001C65A 6700                       		beq.s	loc_1C234
0001C65C 5340                       		subq.w	#1,d0
0001C65E C0FC 0180                  		mulu.w	#$180,d0
0001C662 43F1 0000                  		lea	(a1,d0.w),a1
0001C666 323C 000B                  		move.w	#$B,d1
0001C66A 6000 0000                  		bra.w	LoadTiles
0001C66E                            ; ===========================================================================
0001C66E                            
0001C66E                            loc_1C234:
0001C66E 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C674                            
0001C674                            loc_1C23A:
0001C674 323C 0005                  		move.w	#5,d1
0001C678 6100 0000                  		bsr.w	LoadTiles
0001C67C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C682 323C 0005                  		move.w	#5,d1
0001C686 6000 0000                  		bra.w	LoadTiles
0001C68A                            ; ===========================================================================
0001C68A                            
0001C68A                            loc_1C250:
0001C68A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C68E 6700                       		beq.s	loc_1C25C
0001C690 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C694 6000                       		bra.s	locret_1C2A0
0001C696                            ; ===========================================================================
0001C696                            
0001C696                            loc_1C25C:
0001C696 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C69A 6A00                       		bpl.s	locret_1C2A0
0001C69C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C6A2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C6A8 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C6B2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6B6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6BA 0240 0007                  		andi.w	#7,d0
0001C6BE 6700                       		beq.s	loc_1C298
0001C6C0 5340                       		subq.w	#1,d0
0001C6C2 C0FC 0180                  		mulu.w	#$180,d0
0001C6C6 43F1 0000                  		lea	(a1,d0.w),a1
0001C6CA 323C 000B                  		move.w	#$B,d1
0001C6CE 6000 0000                  		bra.w	LoadTiles
0001C6D2                            ; ===========================================================================
0001C6D2                            
0001C6D2                            loc_1C298:
0001C6D2 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C6D8 609A                       		bra.s	loc_1C23A
0001C6DA                            ; ===========================================================================
0001C6DA                            
0001C6DA                            locret_1C2A0:
0001C6DA 4E75                       		rts	
0001C6DC                            ; ===========================================================================
0001C6DC                            ; ---------------------------------------------------------------------------
0001C6DC                            ; Animated pattern routine - ending sequence
0001C6DC                            ; ---------------------------------------------------------------------------
0001C6DC                            
0001C6DC                            AniArt_Ending:				; XREF: AniArt_Index
0001C6DC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6E0 6A00                       		bpl.s	loc_1C2F4
0001C6E2 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C6E8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6EE 45F8 9400                  		lea	($FFFF9400).w,a2
0001C6F2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6F6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6FA 0240 0001                  		andi.w	#1,d0
0001C6FE 6700                       		beq.s	loc_1C2CE
0001C700 43E9 0200                  		lea	$200(a1),a1
0001C704 45EA 0200                  		lea	$200(a2),a2
0001C708                            
0001C708                            loc_1C2CE:
0001C708 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C712 323C 000F                  		move.w	#$F,d1
0001C716 6100 0000                  		bsr.w	LoadTiles
0001C71A 224A                       		movea.l	a2,a1
0001C71C 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C726 323C 000F                  		move.w	#$F,d1
0001C72A 6000 0000                  		bra.w	LoadTiles
0001C72E                            ; ===========================================================================
0001C72E                            
0001C72E                            loc_1C2F4:
0001C72E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C732 6A00                       		bpl.s	loc_1C33C
0001C734 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C73A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C73E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C742 0240 0007                  		andi.w	#7,d0
0001C746 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C74A EF48                       		lsl.w	#7,d0
0001C74C 3200                       		move.w	d0,d1
0001C74E D040                       		add.w	d0,d0
0001C750 D041                       		add.w	d1,d0
0001C752 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C75C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C762 43F1 0000                  		lea	(a1,d0.w),a1
0001C766 323C 000B                  		move.w	#$B,d1
0001C76A 6000 0000                  		bra.w	LoadTiles
0001C76E                            ; ===========================================================================
0001C76E 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C776                            ; ===========================================================================
0001C776                            
0001C776                            loc_1C33C:
0001C776 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C77A 6A00                       		bpl.s	loc_1C37A
0001C77C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C782 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C786 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C78A 0240 0003                  		andi.w	#3,d0
0001C78E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C792 E148                       		lsl.w	#8,d0
0001C794 D040                       		add.w	d0,d0
0001C796 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C7A0 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C7A4 43F1 0000                  		lea	(a1,d0.w),a1
0001C7A8 323C 000F                  		move.w	#$F,d1
0001C7AC 6000 0000                  		bra.w	LoadTiles
0001C7B0                            ; ===========================================================================
0001C7B0 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C7B4                            ; ===========================================================================
0001C7B4                            
0001C7B4                            loc_1C37A:
0001C7B4 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C7B8 6A00                       		bpl.s	locret_1C3B4
0001C7BA 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C7C0 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C7C4 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C7C8 0240 0003                  		andi.w	#3,d0
0001C7CC 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C7D0 E148                       		lsl.w	#8,d0
0001C7D2 D040                       		add.w	d0,d0
0001C7D4 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C7DE 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C7E2 43F1 0000                  		lea	(a1,d0.w),a1
0001C7E6 323C 000F                  		move.w	#$F,d1
0001C7EA 6000 0000                  		bra.w	LoadTiles
0001C7EE                            ; ===========================================================================
0001C7EE                            
0001C7EE                            locret_1C3B4:
0001C7EE 4E75                       		rts	
0001C7F0                            ; ===========================================================================
0001C7F0                            
0001C7F0                            AniArt_none:				; XREF: AniArt_Index
0001C7F0 4E75                       		rts	
0001C7F2                            
0001C7F2                            ; ---------------------------------------------------------------------------
0001C7F2                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C7F2                            ; ---------------------------------------------------------------------------
0001C7F2                            
0001C7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7F2                            
0001C7F2                            
0001C7F2                            LoadTiles:
0001C7F2 2C99                       		move.l	(a1)+,(a6)
0001C7F4 2C99                       		move.l	(a1)+,(a6)
0001C7F6 2C99                       		move.l	(a1)+,(a6)
0001C7F8 2C99                       		move.l	(a1)+,(a6)
0001C7FA 2C99                       		move.l	(a1)+,(a6)
0001C7FC 2C99                       		move.l	(a1)+,(a6)
0001C7FE 2C99                       		move.l	(a1)+,(a6)
0001C800 2C99                       		move.l	(a1)+,(a6)
0001C802 51C9 FFEE                  		dbf	d1,LoadTiles
0001C806 4E75                       		rts	
0001C808                            ; End of function LoadTiles
0001C808                            
0001C808                            ; ===========================================================================
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            ; Animated pattern routine - more Marble Zone
0001C808                            ; ---------------------------------------------------------------------------
0001C808 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C80C 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C810 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C814 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C818 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C81C 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C820 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C824 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C828                            ; ===========================================================================
0001C828                            
0001C828                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C828 2C91                       		move.l	(a1),(a6)
0001C82A 43E9 0010                  		lea	$10(a1),a1
0001C82E 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C832 4E75                       		rts	
0001C834                            ; ===========================================================================
0001C834                            
0001C834                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C834 2029 0002                  		move.l	2(a1),d0
0001C838 1029 0001                  		move.b	1(a1),d0
0001C83C E098                       		ror.l	#8,d0
0001C83E 2C80                       		move.l	d0,(a6)
0001C840 43E9 0010                  		lea	$10(a1),a1
0001C844 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C848 4E75                       		rts	
0001C84A                            ; ===========================================================================
0001C84A                            
0001C84A                            loc_1C410:				; XREF: AniArt_MZextra
0001C84A 2CA9 0002                  		move.l	2(a1),(a6)
0001C84E 43E9 0010                  		lea	$10(a1),a1
0001C852 51C9 FFF6                  		dbf	d1,loc_1C410
0001C856 4E75                       		rts	
0001C858                            ; ===========================================================================
0001C858                            
0001C858                            loc_1C41E:				; XREF: AniArt_MZextra
0001C858 2029 0004                  		move.l	4(a1),d0
0001C85C 1029 0003                  		move.b	3(a1),d0
0001C860 E098                       		ror.l	#8,d0
0001C862 2C80                       		move.l	d0,(a6)
0001C864 43E9 0010                  		lea	$10(a1),a1
0001C868 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C86C 4E75                       		rts	
0001C86E                            ; ===========================================================================
0001C86E                            
0001C86E                            loc_1C434:				; XREF: AniArt_MZextra
0001C86E 2CA9 0004                  		move.l	4(a1),(a6)
0001C872 43E9 0010                  		lea	$10(a1),a1
0001C876 51C9 FFF6                  		dbf	d1,loc_1C434
0001C87A 4E75                       		rts	
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            loc_1C442:				; XREF: AniArt_MZextra
0001C87C 2029 0006                  		move.l	6(a1),d0
0001C880 1029 0005                  		move.b	5(a1),d0
0001C884 E098                       		ror.l	#8,d0
0001C886 2C80                       		move.l	d0,(a6)
0001C888 43E9 0010                  		lea	$10(a1),a1
0001C88C 51C9 FFEE                  		dbf	d1,loc_1C442
0001C890 4E75                       		rts	
0001C892                            ; ===========================================================================
0001C892                            
0001C892                            loc_1C458:				; XREF: AniArt_MZextra
0001C892 2CA9 0006                  		move.l	6(a1),(a6)
0001C896 43E9 0010                  		lea	$10(a1),a1
0001C89A 51C9 FFF6                  		dbf	d1,loc_1C458
0001C89E 4E75                       		rts	
0001C8A0                            ; ===========================================================================
0001C8A0                            
0001C8A0                            loc_1C466:				; XREF: AniArt_MZextra
0001C8A0 2029 0008                  		move.l	8(a1),d0
0001C8A4 1029 0007                  		move.b	7(a1),d0
0001C8A8 E098                       		ror.l	#8,d0
0001C8AA 2C80                       		move.l	d0,(a6)
0001C8AC 43E9 0010                  		lea	$10(a1),a1
0001C8B0 51C9 FFEE                  		dbf	d1,loc_1C466
0001C8B4 4E75                       		rts	
0001C8B6                            ; ===========================================================================
0001C8B6                            
0001C8B6                            loc_1C47C:				; XREF: AniArt_MZextra
0001C8B6 2CA9 0008                  		move.l	8(a1),(a6)
0001C8BA 43E9 0010                  		lea	$10(a1),a1
0001C8BE 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C8C2 4E75                       		rts	
0001C8C4                            ; ===========================================================================
0001C8C4                            
0001C8C4                            loc_1C48A:				; XREF: AniArt_MZextra
0001C8C4 2029 000A                  		move.l	$A(a1),d0
0001C8C8 1029 0009                  		move.b	9(a1),d0
0001C8CC E098                       		ror.l	#8,d0
0001C8CE 2C80                       		move.l	d0,(a6)
0001C8D0 43E9 0010                  		lea	$10(a1),a1
0001C8D4 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C8D8 4E75                       		rts	
0001C8DA                            ; ===========================================================================
0001C8DA                            
0001C8DA                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C8DA 2CA9 000A                  		move.l	$A(a1),(a6)
0001C8DE 43E9 0010                  		lea	$10(a1),a1
0001C8E2 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C8E6 4E75                       		rts	
0001C8E8                            ; ===========================================================================
0001C8E8                            
0001C8E8                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C8E8 2029 000C                  		move.l	$C(a1),d0
0001C8EC 1029 000B                  		move.b	$B(a1),d0
0001C8F0 E098                       		ror.l	#8,d0
0001C8F2 2C80                       		move.l	d0,(a6)
0001C8F4 43E9 0010                  		lea	$10(a1),a1
0001C8F8 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C8FC 4E75                       		rts	
0001C8FE                            ; ===========================================================================
0001C8FE                            
0001C8FE                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C8FE 2CA9 000C                  		move.l	$C(a1),(a6)
0001C902 43E9 0010                  		lea	$10(a1),a1
0001C906 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C90A 4E75                       		rts	
0001C90C                            ; ===========================================================================
0001C90C                            
0001C90C                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C90C 2029 000C                  		move.l	$C(a1),d0
0001C910 E198                       		rol.l	#8,d0
0001C912 1011                       		move.b	0(a1),d0
0001C914 2C80                       		move.l	d0,(a6)
0001C916 43E9 0010                  		lea	$10(a1),a1
0001C91A 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C91E 4E75                       		rts	
0001C920                            ; ===========================================================================
0001C920                            
0001C920                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C920 3CA9 000E                  		move.w	$E(a1),(a6)
0001C924 3C91                       		move.w	0(a1),(a6)
0001C926 43E9 0010                  		lea	$10(a1),a1
0001C92A 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C92E 4E75                       		rts	
0001C930                            ; ===========================================================================
0001C930                            
0001C930                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C930 2011                       		move.l	0(a1),d0
0001C932 1029 000F                  		move.b	$F(a1),d0
0001C936 E098                       		ror.l	#8,d0
0001C938 2C80                       		move.l	d0,(a6)
0001C93A 43E9 0010                  		lea	$10(a1),a1
0001C93E 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C942 4E75                       		rts	
0001C944                            
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            ; Animated pattern routine - giant ring
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            
0001C944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C944                            
0001C944                            
0001C944                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C944 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C948 6600                       		bne.s	loc_1C518
0001C94A 4E75                       		rts	
0001C94C                            ; ===========================================================================
0001C94C                            
0001C94C                            loc_1C518:
0001C94C 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C952 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C958 7000                       		moveq	#0,d0
0001C95A 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C95E 43F1 0000                  		lea	(a1,d0.w),a1
0001C962 0640 8000                  		addi.w	#$8000,d0
0001C966 E588                       		lsl.l	#2,d0
0001C968 E448                       		lsr.w	#2,d0
0001C96A 0040 4000                  		ori.w	#$4000,d0
0001C96E 4840                       		swap	d0
0001C970 2D40 0004                  		move.l	d0,4(a6)
0001C974 323C 000D                  		move.w	#$D,d1
0001C978 6000 FE78                  		bra.w	LoadTiles
0001C97C                            ; End of function AniArt_GiantRing
0001C97C                            
0001C97C                            ; ===========================================================================
0001C97C                            ; ---------------------------------------------------------------------------
0001C97C                            ; Object 21 - SCORE, TIME, RINGS
0001C97C                            ; ---------------------------------------------------------------------------
0001C97C                            
0001C97C                            Obj21:					; XREF: Obj_Index
0001C97C 7000                       		moveq	#0,d0
0001C97E 1028 0024                  		move.b	$24(a0),d0
0001C982 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C986 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C98A                            ; ===========================================================================
0001C98A 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C98C 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C98E                            ; ===========================================================================
0001C98E                            
0001C98E                            Obj21_Main:				; XREF: Obj21_Main
0001C98E 5428 0024                  		addq.b	#2,$24(a0)
0001C992 317C 0090 0008             		move.w	#$90,8(a0)
0001C998 317C 0108 000A             		move.w	#$108,$A(a0)
0001C99E 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C9A6 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C9AC 117C 0000 0001             		move.b	#0,1(a0)
0001C9B2 117C 0000 0018             		move.b	#0,$18(a0)
0001C9B8                            
0001C9B8                            Obj21_Flash:				; XREF: Obj21_Main
0001C9B8 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C9BC 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C9BE 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C9C2 4EF9 0000 D5B0             		jmp	DisplaySprite
0001C9C8                            ; ===========================================================================
0001C9C8                            
0001C9C8                            Obj21_Flash2:
0001C9C8 7000                       		moveq	#0,d0
0001C9CA 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C9D0 6600                       		bne.s	Obj21_Display
0001C9D2 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C9D4 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C9DA 6600                       		bne.s	Obj21_Display	; if not, branch
0001C9DC 5440                       		addq.w	#2,d0		; make time counter flash red
0001C9DE                            
0001C9DE                            Obj21_Display:
0001C9DE 1140 001A                  		move.b	d0,$1A(a0)
0001C9E2 4EF9 0000 D5B0             		jmp	DisplaySprite
0001C9E8                            ; ===========================================================================
0001C9E8                            ; ---------------------------------------------------------------------------
0001C9E8                            ; Sprite mappings - SCORE, TIME, RINGS
0001C9E8                            ; ---------------------------------------------------------------------------
0001C9E8                            Map_obj21:
0001C9E8                            	include "_maps\obj21.asm"
0001C9E8                            Map_640e:
0001C9E8 0000                       Map_640e_0: 	dc.w Map_640e_8-Map_640e
0001C9EA 0000                       Map_640e_2: 	dc.w Map_640e_36-Map_640e
0001C9EC 0000                       Map_640e_4: 	dc.w Map_640e_5F-Map_640e
0001C9EE 0000                       Map_640e_6: 	dc.w Map_640e_88-Map_640e
0001C9F0 09                         Map_640e_8: 	dc.b $9
0001C9F1 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001C9F6 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001C9FB 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001CA00 900D 8010 00               	dc.b $90, $D, $80, $10, $0
0001CA05 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001CA0A A00D 8008 00               	dc.b $A0, $D, $80, $8, $0
0001CA0F A009 8030 28               	dc.b $A0, $9, $80, $30, $28
0001CA14 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001CA19 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001CA1E 08                         Map_640e_36: 	dc.b $8
0001CA1F 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001CA24 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001CA29 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001CA2E 900D 8010 00               	dc.b $90, $D, $80, $10, $0
0001CA33 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001CA38 A009 8030 28               	dc.b $A0, $9, $80, $30, $28
0001CA3D 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001CA42 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001CA47 08                         Map_640e_5F: 	dc.b $8
0001CA48 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001CA4D 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001CA52 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001CA57 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001CA5C A00D 8008 00               	dc.b $A0, $D, $80, $8, $0
0001CA61 A009 8030 28               	dc.b $A0, $9, $80, $30, $28
0001CA66 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001CA6B 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001CA70 07                         Map_640e_88: 	dc.b $7
0001CA71 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001CA76 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001CA7B 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001CA80 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001CA85 A009 8030 28               	dc.b $A0, $9, $80, $30, $28
0001CA8A 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001CA8F 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001CA94                            	even
0001CA94                            	even
0001CA94                            
0001CA94                            ; ---------------------------------------------------------------------------
0001CA94                            ; Add points subroutine
0001CA94                            ; ---------------------------------------------------------------------------
0001CA94                            
0001CA94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA94                            
0001CA94                            
0001CA94                            AddPoints:
0001CA94 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CA9A 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CA9E 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CAA2 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CAA4 223C 000F 423F             		move.l	#999999,d1
0001CAAA B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CAAC 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CAB0 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CAB2 2481                       		move.l	d1,(a2)
0001CAB4                            
0001CAB4                            loc_1C6AC:
0001CAB4 2013                       		move.l	(a3),d0
0001CAB6 B092                       		cmp.l	(a2),d0
0001CAB8 6500 0000                  		bcs.w	locret_1C6B6
0001CABC 2480                       		move.l	d0,(a2)
0001CABE                            
0001CABE                            locret_1C6B6:
0001CABE 4E75                       		rts	
0001CAC0                            ; End of function AddPoints
0001CAC0                            
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0                            ; Subroutine to	update the HUD
0001CAC0                            ; ---------------------------------------------------------------------------
0001CAC0                            
0001CAC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC0                            
0001CAC0                            
0001CAC0                            HudUpdate:
0001CAC0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CAC4 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CAC8 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CACC 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CACE 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CAD2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CAD8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CADC 6100 0000                  		bsr.w	Hud_Score
0001CAE0                            
0001CAE0                            Hud_ChkRings:
0001CAE0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CAE4 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CAE6 6A00                       		bpl.s	loc_1C6E4
0001CAE8 6100 0000                  		bsr.w	Hud_LoadZero
0001CAEC                            
0001CAEC                            loc_1C6E4:
0001CAEC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CAF0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CAF6 7200                       		moveq	#0,d1
0001CAF8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CAFC 6100 0000                  		bsr.w	Hud_Rings
0001CB00                            
0001CB00                            Hud_ChkTime:
0001CB00 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CB04 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CB06 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CB0A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CB0C 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CB10 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CB16 6700                       		beq.s	TimeOver	; if yes, branch
0001CB18 5221                       		addq.b	#1,-(a1)
0001CB1A 0C11 003C                  		cmpi.b	#60,(a1)
0001CB1E 6500                       		bcs.s	Hud_ChkLives
0001CB20 12BC 0000                  		move.b	#0,(a1)
0001CB24 5221                       		addq.b	#1,-(a1)
0001CB26 0C11 003C                  		cmpi.b	#60,(a1)
0001CB2A 6500                       		bcs.s	loc_1C734
0001CB2C 12BC 0000                  		move.b	#0,(a1)
0001CB30 5221                       		addq.b	#1,-(a1)
0001CB32 0C11 0009                  		cmpi.b	#9,(a1)
0001CB36 6500                       		bcs.s	loc_1C734
0001CB38 12BC 0009                  		move.b	#9,(a1)
0001CB3C                            
0001CB3C                            loc_1C734:
0001CB3C 203C 5E40 0003             		move.l	#$5E400003,d0
0001CB42 7200                       		moveq	#0,d1
0001CB44 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CB48 6100 0000                  		bsr.w	Hud_Mins
0001CB4C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CB52 7200                       		moveq	#0,d1
0001CB54 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CB58 6100 0000                  		bsr.w	Hud_Secs
0001CB5C                            
0001CB5C                            Hud_ChkLives:
0001CB5C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CB60 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CB62 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CB66 6100 0000                  		bsr.w	Hud_Lives
0001CB6A                            
0001CB6A                            Hud_ChkBonus:
0001CB6A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CB6E 6700                       		beq.s	Hud_End		; if not, branch
0001CB70 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CB74 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CB7E 7200                       		moveq	#0,d1
0001CB80 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CB84 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CB88 7200                       		moveq	#0,d1
0001CB8A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CB8E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CB92                            
0001CB92                            Hud_End:
0001CB92 4E75                       		rts	
0001CB94                            ; ===========================================================================
0001CB94                            
0001CB94                            TimeOver:				; XREF: Hud_ChkTime
0001CB94 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CB98 41F8 D000                  		lea	($FFFFD000).w,a0
0001CB9C 2448                       		movea.l	a0,a2
0001CB9E 6100 E938                  		bsr.w	KillSonic
0001CBA2 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CBA8 4E75                       		rts	
0001CBAA                            ; ===========================================================================
0001CBAA                            
0001CBAA                            HudDebug:				; XREF: HudUpdate
0001CBAA 6100 0000                  		bsr.w	HudDb_XY
0001CBAE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CBB2 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CBB4 6A00                       		bpl.s	HudDb_Rings
0001CBB6 6100 0000                  		bsr.w	Hud_LoadZero
0001CBBA                            
0001CBBA                            HudDb_Rings:
0001CBBA 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CBBE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CBC4 7200                       		moveq	#0,d1
0001CBC6 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CBCA 6100 0000                  		bsr.w	Hud_Rings
0001CBCE                            
0001CBCE                            HudDb_ObjCount:
0001CBCE 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CBD4 7200                       		moveq	#0,d1
0001CBD6 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CBDA 6100 0000                  		bsr.w	Hud_Secs
0001CBDE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CBE2 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CBE4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CBE8 6100 0000                  		bsr.w	Hud_Lives
0001CBEC                            
0001CBEC                            HudDb_ChkBonus:
0001CBEC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CBF0 6700                       		beq.s	HudDb_End	; if not, branch
0001CBF2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CBF6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CC00 7200                       		moveq	#0,d1
0001CC02 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CC06 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC0A 7200                       		moveq	#0,d1
0001CC0C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CC10 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CC14                            
0001CC14                            HudDb_End:
0001CC14 4E75                       		rts	
0001CC16                            ; End of function HudUpdate
0001CC16                            
0001CC16                            ; ---------------------------------------------------------------------------
0001CC16                            ; Subroutine to	load "0" on the	HUD
0001CC16                            ; ---------------------------------------------------------------------------
0001CC16                            
0001CC16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC16                            
0001CC16                            
0001CC16                            Hud_LoadZero:				; XREF: HudUpdate
0001CC16 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CC20 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CC24 343C 0002                  		move.w	#2,d2
0001CC28 6000                       		bra.s	loc_1C83E
0001CC2A                            ; End of function Hud_LoadZero
0001CC2A                            
0001CC2A                            ; ---------------------------------------------------------------------------
0001CC2A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CC2A                            ; ---------------------------------------------------------------------------
0001CC2A                            
0001CC2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC2A                            
0001CC2A                            
0001CC2A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CC2A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CC30 6100 0000                  		bsr.w	Hud_Lives
0001CC34 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CC3E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CC42 343C 000E                  		move.w	#$E,d2
0001CC46                            
0001CC46                            loc_1C83E:				; XREF: Hud_LoadZero
0001CC46 43FA 0000                  		lea	Art_Hud(pc),a1
0001CC4A                            
0001CC4A                            loc_1C842:
0001CC4A 323C 000F                  		move.w	#$F,d1
0001CC4E 101A                       		move.b	(a2)+,d0
0001CC50 6B00                       		bmi.s	loc_1C85E
0001CC52 4880                       		ext.w	d0
0001CC54 EB48                       		lsl.w	#5,d0
0001CC56 47F1 0000                  		lea	(a1,d0.w),a3
0001CC5A                            
0001CC5A                            loc_1C852:
0001CC5A 2C9B                       		move.l	(a3)+,(a6)
0001CC5C 51C9 FFFC                  		dbf	d1,loc_1C852
0001CC60                            
0001CC60                            loc_1C858:
0001CC60 51CA FFE8                  		dbf	d2,loc_1C842
0001CC64                            
0001CC64 4E75                       		rts	
0001CC66                            ; ===========================================================================
0001CC66                            
0001CC66                            loc_1C85E:
0001CC66 2CBC 0000 0000             		move.l	#0,(a6)
0001CC6C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CC70                            
0001CC70 60EE                       		bra.s	loc_1C858
0001CC72                            ; End of function Hud_Base
0001CC72                            
0001CC72                            ; ===========================================================================
0001CC72 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CC7E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CC82                            ; ---------------------------------------------------------------------------
0001CC82                            ; Subroutine to	load debug mode	numbers	patterns
0001CC82                            ; ---------------------------------------------------------------------------
0001CC82                            
0001CC82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC82                            
0001CC82                            
0001CC82                            HudDb_XY:				; XREF: HudDebug
0001CC82 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CC8C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CC90 4841                       		swap	d1
0001CC92 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CC96 6100                       		bsr.s	HudDb_XY2
0001CC98 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CC9C 4841                       		swap	d1
0001CC9E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CCA2                            ; End of function HudDb_XY
0001CCA2                            
0001CCA2                            
0001CCA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCA2                            
0001CCA2                            
0001CCA2                            HudDb_XY2:
0001CCA2 7C07                       		moveq	#7,d6
0001CCA4 43F9 0000 05C6             		lea	(Art_Text).l,a1
0001CCAA                            
0001CCAA                            HudDb_XYLoop:
0001CCAA E959                       		rol.w	#4,d1
0001CCAC 3401                       		move.w	d1,d2
0001CCAE 0242 000F                  		andi.w	#$F,d2
0001CCB2 0C42 000A                  		cmpi.w	#$A,d2
0001CCB6 6500                       		bcs.s	loc_1C8B2
0001CCB8 5E42                       		addq.w	#7,d2
0001CCBA                            
0001CCBA                            loc_1C8B2:
0001CCBA EB4A                       		lsl.w	#5,d2
0001CCBC 47F1 2000                  		lea	(a1,d2.w),a3
0001CCC0 2C9B                       		move.l	(a3)+,(a6)
0001CCC2 2C9B                       		move.l	(a3)+,(a6)
0001CCC4 2C9B                       		move.l	(a3)+,(a6)
0001CCC6 2C9B                       		move.l	(a3)+,(a6)
0001CCC8 2C9B                       		move.l	(a3)+,(a6)
0001CCCA 2C9B                       		move.l	(a3)+,(a6)
0001CCCC 2C9B                       		move.l	(a3)+,(a6)
0001CCCE 2C9B                       		move.l	(a3)+,(a6)
0001CCD0 4841                       		swap	d1
0001CCD2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CCD6                            
0001CCD6 4E75                       		rts	
0001CCD8                            ; End of function HudDb_XY2
0001CCD8                            
0001CCD8                            ; ---------------------------------------------------------------------------
0001CCD8                            ; Subroutine to	load rings numbers patterns
0001CCD8                            ; ---------------------------------------------------------------------------
0001CCD8                            
0001CCD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCD8                            
0001CCD8                            
0001CCD8                            Hud_Rings:				; XREF: HudUpdate
0001CCD8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CCDE 7C02                       		moveq	#2,d6
0001CCE0 6000                       		bra.s	Hud_LoadArt
0001CCE2                            ; End of function Hud_Rings
0001CCE2                            
0001CCE2                            ; ---------------------------------------------------------------------------
0001CCE2                            ; Subroutine to	load score numbers patterns
0001CCE2                            ; ---------------------------------------------------------------------------
0001CCE2                            
0001CCE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCE2                            
0001CCE2                            
0001CCE2                            Hud_Score:				; XREF: HudUpdate
0001CCE2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CCE8 7C05                       		moveq	#5,d6
0001CCEA                            
0001CCEA                            Hud_LoadArt:
0001CCEA 7800                       		moveq	#0,d4
0001CCEC 43FA 0000                  		lea	Art_Hud(pc),a1
0001CCF0                            
0001CCF0                            Hud_ScoreLoop:
0001CCF0 7400                       		moveq	#0,d2
0001CCF2 261A                       		move.l	(a2)+,d3
0001CCF4                            
0001CCF4                            loc_1C8EC:
0001CCF4 9283                       		sub.l	d3,d1
0001CCF6 6500                       		bcs.s	loc_1C8F4
0001CCF8 5242                       		addq.w	#1,d2
0001CCFA 60F8                       		bra.s	loc_1C8EC
0001CCFC                            ; ===========================================================================
0001CCFC                            
0001CCFC                            loc_1C8F4:
0001CCFC D283                       		add.l	d3,d1
0001CCFE 4A42                       		tst.w	d2
0001CD00 6700                       		beq.s	loc_1C8FE
0001CD02 383C 0001                  		move.w	#1,d4
0001CD06                            
0001CD06                            loc_1C8FE:
0001CD06 4A44                       		tst.w	d4
0001CD08 6700                       		beq.s	loc_1C92C
0001CD0A ED4A                       		lsl.w	#6,d2
0001CD0C 2D40 0004                  		move.l	d0,4(a6)
0001CD10 47F1 2000                  		lea	(a1,d2.w),a3
0001CD14 2C9B                       		move.l	(a3)+,(a6)
0001CD16 2C9B                       		move.l	(a3)+,(a6)
0001CD18 2C9B                       		move.l	(a3)+,(a6)
0001CD1A 2C9B                       		move.l	(a3)+,(a6)
0001CD1C 2C9B                       		move.l	(a3)+,(a6)
0001CD1E 2C9B                       		move.l	(a3)+,(a6)
0001CD20 2C9B                       		move.l	(a3)+,(a6)
0001CD22 2C9B                       		move.l	(a3)+,(a6)
0001CD24 2C9B                       		move.l	(a3)+,(a6)
0001CD26 2C9B                       		move.l	(a3)+,(a6)
0001CD28 2C9B                       		move.l	(a3)+,(a6)
0001CD2A 2C9B                       		move.l	(a3)+,(a6)
0001CD2C 2C9B                       		move.l	(a3)+,(a6)
0001CD2E 2C9B                       		move.l	(a3)+,(a6)
0001CD30 2C9B                       		move.l	(a3)+,(a6)
0001CD32 2C9B                       		move.l	(a3)+,(a6)
0001CD34                            
0001CD34                            loc_1C92C:
0001CD34 0680 0040 0000             		addi.l	#$400000,d0
0001CD3A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CD3E                            
0001CD3E 4E75                       		rts	
0001CD40                            ; End of function Hud_Score
0001CD40                            
0001CD40                            ; ---------------------------------------------------------------------------
0001CD40                            ; Subroutine to	load countdown numbers on the continue screen
0001CD40                            ; ---------------------------------------------------------------------------
0001CD40                            
0001CD40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD40                            
0001CD40                            
0001CD40                            ContScrCounter:				; XREF: ContinueScreen
0001CD40 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CD4A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CD50 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CD56 7C01                       		moveq	#1,d6
0001CD58 7800                       		moveq	#0,d4
0001CD5A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CD5E                            
0001CD5E                            ContScr_Loop:
0001CD5E 7400                       		moveq	#0,d2
0001CD60 261A                       		move.l	(a2)+,d3
0001CD62                            
0001CD62                            loc_1C95A:
0001CD62 9283                       		sub.l	d3,d1
0001CD64 6500                       		bcs.s	loc_1C962
0001CD66 5242                       		addq.w	#1,d2
0001CD68 60F8                       		bra.s	loc_1C95A
0001CD6A                            ; ===========================================================================
0001CD6A                            
0001CD6A                            loc_1C962:
0001CD6A D283                       		add.l	d3,d1
0001CD6C ED4A                       		lsl.w	#6,d2
0001CD6E 47F1 2000                  		lea	(a1,d2.w),a3
0001CD72 2C9B                       		move.l	(a3)+,(a6)
0001CD74 2C9B                       		move.l	(a3)+,(a6)
0001CD76 2C9B                       		move.l	(a3)+,(a6)
0001CD78 2C9B                       		move.l	(a3)+,(a6)
0001CD7A 2C9B                       		move.l	(a3)+,(a6)
0001CD7C 2C9B                       		move.l	(a3)+,(a6)
0001CD7E 2C9B                       		move.l	(a3)+,(a6)
0001CD80 2C9B                       		move.l	(a3)+,(a6)
0001CD82 2C9B                       		move.l	(a3)+,(a6)
0001CD84 2C9B                       		move.l	(a3)+,(a6)
0001CD86 2C9B                       		move.l	(a3)+,(a6)
0001CD88 2C9B                       		move.l	(a3)+,(a6)
0001CD8A 2C9B                       		move.l	(a3)+,(a6)
0001CD8C 2C9B                       		move.l	(a3)+,(a6)
0001CD8E 2C9B                       		move.l	(a3)+,(a6)
0001CD90 2C9B                       		move.l	(a3)+,(a6)
0001CD92 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CD96                            
0001CD96 4E75                       		rts	
0001CD98                            ; End of function ContScrCounter
0001CD98                            
0001CD98                            ; ===========================================================================
0001CD98                            ; ---------------------------------------------------------------------------
0001CD98                            ; HUD counter sizes
0001CD98                            ; ---------------------------------------------------------------------------
0001CD98 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CD9C 0000 2710                  Hud_10000:	dc.l 10000
0001CDA0 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CDA4 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CDA8 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CDAC 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CDB0                            
0001CDB0                            ; ---------------------------------------------------------------------------
0001CDB0                            ; Subroutine to	load time numbers patterns
0001CDB0                            ; ---------------------------------------------------------------------------
0001CDB0                            
0001CDB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDB0                            
0001CDB0                            
0001CDB0                            Hud_Mins:				; XREF: Hud_ChkTime
0001CDB0 45F9 0001 CDAC             		lea	(Hud_1).l,a2
0001CDB6 7C00                       		moveq	#0,d6
0001CDB8 6000                       		bra.s	loc_1C9BA
0001CDBA                            ; End of function Hud_Mins
0001CDBA                            
0001CDBA                            
0001CDBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDBA                            
0001CDBA                            
0001CDBA                            Hud_Secs:				; XREF: Hud_ChkTime
0001CDBA 45F9 0001 CDA8             		lea	(Hud_10).l,a2
0001CDC0 7C01                       		moveq	#1,d6
0001CDC2                            
0001CDC2                            loc_1C9BA:
0001CDC2 7800                       		moveq	#0,d4
0001CDC4 43FA 0000                  		lea	Art_Hud(pc),a1
0001CDC8                            
0001CDC8                            Hud_TimeLoop:
0001CDC8 7400                       		moveq	#0,d2
0001CDCA 261A                       		move.l	(a2)+,d3
0001CDCC                            
0001CDCC                            loc_1C9C4:
0001CDCC 9283                       		sub.l	d3,d1
0001CDCE 6500                       		bcs.s	loc_1C9CC
0001CDD0 5242                       		addq.w	#1,d2
0001CDD2 60F8                       		bra.s	loc_1C9C4
0001CDD4                            ; ===========================================================================
0001CDD4                            
0001CDD4                            loc_1C9CC:
0001CDD4 D283                       		add.l	d3,d1
0001CDD6 4A42                       		tst.w	d2
0001CDD8 6700                       		beq.s	loc_1C9D6
0001CDDA 383C 0001                  		move.w	#1,d4
0001CDDE                            
0001CDDE                            loc_1C9D6:
0001CDDE ED4A                       		lsl.w	#6,d2
0001CDE0 2D40 0004                  		move.l	d0,4(a6)
0001CDE4 47F1 2000                  		lea	(a1,d2.w),a3
0001CDE8 2C9B                       		move.l	(a3)+,(a6)
0001CDEA 2C9B                       		move.l	(a3)+,(a6)
0001CDEC 2C9B                       		move.l	(a3)+,(a6)
0001CDEE 2C9B                       		move.l	(a3)+,(a6)
0001CDF0 2C9B                       		move.l	(a3)+,(a6)
0001CDF2 2C9B                       		move.l	(a3)+,(a6)
0001CDF4 2C9B                       		move.l	(a3)+,(a6)
0001CDF6 2C9B                       		move.l	(a3)+,(a6)
0001CDF8 2C9B                       		move.l	(a3)+,(a6)
0001CDFA 2C9B                       		move.l	(a3)+,(a6)
0001CDFC 2C9B                       		move.l	(a3)+,(a6)
0001CDFE 2C9B                       		move.l	(a3)+,(a6)
0001CE00 2C9B                       		move.l	(a3)+,(a6)
0001CE02 2C9B                       		move.l	(a3)+,(a6)
0001CE04 2C9B                       		move.l	(a3)+,(a6)
0001CE06 2C9B                       		move.l	(a3)+,(a6)
0001CE08 0680 0040 0000             		addi.l	#$400000,d0
0001CE0E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CE12                            
0001CE12 4E75                       		rts	
0001CE14                            ; End of function Hud_Secs
0001CE14                            
0001CE14                            ; ---------------------------------------------------------------------------
0001CE14                            ; Subroutine to	load time/ring bonus numbers patterns
0001CE14                            ; ---------------------------------------------------------------------------
0001CE14                            
0001CE14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE14                            
0001CE14                            
0001CE14                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CE14 45F9 0001 CDA0             		lea	(Hud_1000).l,a2
0001CE1A 7C03                       		moveq	#3,d6
0001CE1C 7800                       		moveq	#0,d4
0001CE1E 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE22                            
0001CE22                            Hud_BonusLoop:
0001CE22 7400                       		moveq	#0,d2
0001CE24 261A                       		move.l	(a2)+,d3
0001CE26                            
0001CE26                            loc_1CA1E:
0001CE26 9283                       		sub.l	d3,d1
0001CE28 6500                       		bcs.s	loc_1CA26
0001CE2A 5242                       		addq.w	#1,d2
0001CE2C 60F8                       		bra.s	loc_1CA1E
0001CE2E                            ; ===========================================================================
0001CE2E                            
0001CE2E                            loc_1CA26:
0001CE2E D283                       		add.l	d3,d1
0001CE30 4A42                       		tst.w	d2
0001CE32 6700                       		beq.s	loc_1CA30
0001CE34 383C 0001                  		move.w	#1,d4
0001CE38                            
0001CE38                            loc_1CA30:
0001CE38 4A44                       		tst.w	d4
0001CE3A 6700                       		beq.s	Hud_ClrBonus
0001CE3C ED4A                       		lsl.w	#6,d2
0001CE3E 47F1 2000                  		lea	(a1,d2.w),a3
0001CE42 2C9B                       		move.l	(a3)+,(a6)
0001CE44 2C9B                       		move.l	(a3)+,(a6)
0001CE46 2C9B                       		move.l	(a3)+,(a6)
0001CE48 2C9B                       		move.l	(a3)+,(a6)
0001CE4A 2C9B                       		move.l	(a3)+,(a6)
0001CE4C 2C9B                       		move.l	(a3)+,(a6)
0001CE4E 2C9B                       		move.l	(a3)+,(a6)
0001CE50 2C9B                       		move.l	(a3)+,(a6)
0001CE52 2C9B                       		move.l	(a3)+,(a6)
0001CE54 2C9B                       		move.l	(a3)+,(a6)
0001CE56 2C9B                       		move.l	(a3)+,(a6)
0001CE58 2C9B                       		move.l	(a3)+,(a6)
0001CE5A 2C9B                       		move.l	(a3)+,(a6)
0001CE5C 2C9B                       		move.l	(a3)+,(a6)
0001CE5E 2C9B                       		move.l	(a3)+,(a6)
0001CE60 2C9B                       		move.l	(a3)+,(a6)
0001CE62                            
0001CE62                            loc_1CA5A:
0001CE62 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CE66                            
0001CE66 4E75                       		rts	
0001CE68                            ; ===========================================================================
0001CE68                            
0001CE68                            Hud_ClrBonus:
0001CE68 7A0F                       		moveq	#$F,d5
0001CE6A                            
0001CE6A                            Hud_ClrBonusLoop:
0001CE6A 2CBC 0000 0000             		move.l	#0,(a6)
0001CE70 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CE74                            
0001CE74 60EC                       		bra.s	loc_1CA5A
0001CE76                            ; End of function Hud_TimeRingBonus
0001CE76                            
0001CE76                            ; ---------------------------------------------------------------------------
0001CE76                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CE76                            ; ---------------------------------------------------------------------------
0001CE76                            
0001CE76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE76                            
0001CE76                            
0001CE76                            Hud_Lives:				; XREF: Hud_ChkLives
0001CE76 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CE7C 7200                       		moveq	#0,d1
0001CE7E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CE82 45F9 0001 CDA8             		lea	(Hud_10).l,a2
0001CE88 7C01                       		moveq	#1,d6
0001CE8A 7800                       		moveq	#0,d4
0001CE8C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CE90                            
0001CE90                            Hud_LivesLoop:
0001CE90 2D40 0004                  		move.l	d0,4(a6)
0001CE94 7400                       		moveq	#0,d2
0001CE96 261A                       		move.l	(a2)+,d3
0001CE98                            
0001CE98                            loc_1CA90:
0001CE98 9283                       		sub.l	d3,d1
0001CE9A 6500                       		bcs.s	loc_1CA98
0001CE9C 5242                       		addq.w	#1,d2
0001CE9E 60F8                       		bra.s	loc_1CA90
0001CEA0                            ; ===========================================================================
0001CEA0                            
0001CEA0                            loc_1CA98:
0001CEA0 D283                       		add.l	d3,d1
0001CEA2 4A42                       		tst.w	d2
0001CEA4 6700                       		beq.s	loc_1CAA2
0001CEA6 383C 0001                  		move.w	#1,d4
0001CEAA                            
0001CEAA                            loc_1CAA2:
0001CEAA 4A44                       		tst.w	d4
0001CEAC 6700                       		beq.s	Hud_ClrLives
0001CEAE                            
0001CEAE                            loc_1CAA6:
0001CEAE EB4A                       		lsl.w	#5,d2
0001CEB0 47F1 2000                  		lea	(a1,d2.w),a3
0001CEB4 2C9B                       		move.l	(a3)+,(a6)
0001CEB6 2C9B                       		move.l	(a3)+,(a6)
0001CEB8 2C9B                       		move.l	(a3)+,(a6)
0001CEBA 2C9B                       		move.l	(a3)+,(a6)
0001CEBC 2C9B                       		move.l	(a3)+,(a6)
0001CEBE 2C9B                       		move.l	(a3)+,(a6)
0001CEC0 2C9B                       		move.l	(a3)+,(a6)
0001CEC2 2C9B                       		move.l	(a3)+,(a6)
0001CEC4                            
0001CEC4                            loc_1CABC:
0001CEC4 0680 0040 0000             		addi.l	#$400000,d0
0001CECA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CECE                            
0001CECE 4E75                       		rts	
0001CED0                            ; ===========================================================================
0001CED0                            
0001CED0                            Hud_ClrLives:
0001CED0 4A46                       		tst.w	d6
0001CED2 67DA                       		beq.s	loc_1CAA6
0001CED4 7A07                       		moveq	#7,d5
0001CED6                            
0001CED6                            Hud_ClrLivesLoop:
0001CED6 2CBC 0000 0000             		move.l	#0,(a6)
0001CEDC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CEE0 60E2                       		bra.s	loc_1CABC
0001CEE2                            ; End of function Hud_Lives
0001CEE2                            
0001CEE2                            ; ===========================================================================
0001CEE2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D1E2                            		even
0001D1E2                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D322                            		even
0001D322                            ; ===========================================================================
0001D322                            ; ---------------------------------------------------------------------------
0001D322                            ; When debug mode is currently in use
0001D322                            ; ---------------------------------------------------------------------------
0001D322                            
0001D322                            DebugMode:				; XREF: Obj01; Obj09
0001D322 7000                       		moveq	#0,d0
0001D324 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D328 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D32C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D330                            ; ===========================================================================
0001D330 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D332 0000                       		dc.w Debug_Skip-Debug_Index
0001D334                            ; ===========================================================================
0001D334                            
0001D334                            Debug_Main:				; XREF: Debug_Index
0001D334 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D338 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D33E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D344 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D34A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D350 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D356 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D35C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D362 117C 0000 001A             		move.b	#0,$1A(a0)
0001D368 117C 0000 001C             		move.b	#0,$1C(a0)
0001D36E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D374 6600                       		bne.s	Debug_Zone	; if not, branch
0001D376 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D37C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D382 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D384 6000                       		bra.s	Debug_UseList
0001D386                            ; ===========================================================================
0001D386                            
0001D386                            Debug_Zone:
0001D386 7000                       		moveq	#0,d0
0001D388 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D38C                            
0001D38C                            Debug_UseList:
0001D38C 45F9 0000 0000             		lea	(DebugList).l,a2
0001D392 D040                       		add.w	d0,d0
0001D394 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D398 3C1A                       		move.w	(a2)+,d6
0001D39A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D39E 6200                       		bhi.s	loc_1CF9E
0001D3A0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D3A6                            
0001D3A6                            loc_1CF9E:
0001D3A6 6100 0000                  		bsr.w	Debug_ShowItem
0001D3AA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D3B0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D3B6                            
0001D3B6                            Debug_Skip:				; XREF: Debug_Index
0001D3B6 7006                       		moveq	#6,d0
0001D3B8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D3BE 6700                       		beq.s	loc_1CFBE
0001D3C0 7000                       		moveq	#0,d0
0001D3C2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D3C6                            
0001D3C6                            loc_1CFBE:
0001D3C6 45F9 0000 0000             		lea	(DebugList).l,a2
0001D3CC D040                       		add.w	d0,d0
0001D3CE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D3D2 3C1A                       		move.w	(a2)+,d6
0001D3D4 6100 0000                  		bsr.w	Debug_Control
0001D3D8 4EF9 0000 D5B0             		jmp	DisplaySprite
0001D3DE                            
0001D3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3DE                            
0001D3DE                            
0001D3DE                            Debug_Control:
0001D3DE 7800                       		moveq	#0,d4
0001D3E0 323C 0001                  		move.w	#1,d1
0001D3E4 1838 F605                  		move.b	($FFFFF605).w,d4
0001D3E8 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D3EC 6600                       		bne.s	loc_1D018	; if yes, branch
0001D3EE 1038 F604                  		move.b	($FFFFF604).w,d0
0001D3F2 0240 000F                  		andi.w	#$F,d0
0001D3F6 6600                       		bne.s	loc_1D000
0001D3F8 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D3FE 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D404 6000 0000                  		bra.w	Debug_BackItem
0001D408                            ; ===========================================================================
0001D408                            
0001D408                            loc_1D000:
0001D408 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D40C 6600                       		bne.s	loc_1D01C
0001D40E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D414 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D418 6600                       		bne.s	loc_1D018
0001D41A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D420                            
0001D420                            loc_1D018:
0001D420 1838 F604                  		move.b	($FFFFF604).w,d4
0001D424                            
0001D424                            loc_1D01C:
0001D424 7200                       		moveq	#0,d1
0001D426 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D42A 5241                       		addq.w	#1,d1
0001D42C 4841                       		swap	d1
0001D42E E881                       		asr.l	#4,d1
0001D430 2428 000C                  		move.l	$C(a0),d2
0001D434 2628 0008                  		move.l	8(a0),d3
0001D438 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D43C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D43E 9481                       		sub.l	d1,d2
0001D440 6400                       		bcc.s	loc_1D03C
0001D442 7400                       		moveq	#0,d2
0001D444                            
0001D444                            loc_1D03C:
0001D444 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D448 6700                       		beq.s	loc_1D052	; if not, branch
0001D44A D481                       		add.l	d1,d2
0001D44C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D452 6500                       		bcs.s	loc_1D052
0001D454 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D45A                            
0001D45A                            loc_1D052:
0001D45A 0804 0002                  		btst	#2,d4
0001D45E 6700                       		beq.s	loc_1D05E
0001D460 9681                       		sub.l	d1,d3
0001D462 6400                       		bcc.s	loc_1D05E
0001D464 7600                       		moveq	#0,d3
0001D466                            
0001D466                            loc_1D05E:
0001D466 0804 0003                  		btst	#3,d4
0001D46A 6700                       		beq.s	loc_1D066
0001D46C D681                       		add.l	d1,d3
0001D46E                            
0001D46E                            loc_1D066:
0001D46E 2142 000C                  		move.l	d2,$C(a0)
0001D472 2143 0008                  		move.l	d3,8(a0)
0001D476                            
0001D476                            Debug_BackItem:
0001D476 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D47C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D47E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D484 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D486 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D48A 6400                       		bcc.s	Debug_NoLoop
0001D48C DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D490 6000                       		bra.s	Debug_NoLoop
0001D492                            ; ===========================================================================
0001D492                            
0001D492                            Debug_NextItem:
0001D492 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D498 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D49A 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D49E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D4A2 6200                       		bhi.s	Debug_NoLoop
0001D4A4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D4AA                            
0001D4AA                            Debug_NoLoop:
0001D4AA 6000 0000                  		bra.w	Debug_ShowItem
0001D4AE                            ; ===========================================================================
0001D4AE                            
0001D4AE                            Debug_MakeItem:
0001D4AE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D4B4 6700                       		beq.s	Debug_Exit	; if not, branch
0001D4B6 4EB9 0000 DA36             		jsr	SingleObjLoad
0001D4BC 6600                       		bne.s	Debug_Exit
0001D4BE 3368 0008 0008             		move.w	8(a0),8(a1)
0001D4C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D4CA 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D4CE 1368 0001 0001             		move.b	1(a0),1(a1)
0001D4D4 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D4DA 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D4E0 7000                       		moveq	#0,d0
0001D4E2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D4E6 E748                       		lsl.w	#3,d0
0001D4E8 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D4EE 4E75                       		rts	
0001D4F0                            ; ===========================================================================
0001D4F0                            
0001D4F0                            Debug_Exit:
0001D4F0 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D4F6 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D4F8 7000                       		moveq	#0,d0
0001D4FA 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D4FE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D506 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D50C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D510 3140 000A                  		move.w	d0,$A(a0)
0001D514 3140 000E                  		move.w	d0,$E(a0)
0001D518 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D51E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D524 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D52A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D52C 4278 F780                  		clr.w	($FFFFF780).w
0001D530 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D536 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D53E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D544 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D54A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D550 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D556                            
0001D556                            Debug_DoNothing:
0001D556 4E75                       		rts	
0001D558                            ; End of function Debug_Control
0001D558                            
0001D558                            
0001D558                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D558                            
0001D558                            
0001D558                            Debug_ShowItem:				; XREF: Debug_Main
0001D558 7000                       		moveq	#0,d0
0001D55A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D55E E748                       		lsl.w	#3,d0
0001D560 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D566 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D56C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D572 4E75                       		rts	
0001D574                            ; End of function Debug_ShowItem
0001D574                            
0001D574                            ; ===========================================================================
0001D574                            ; ---------------------------------------------------------------------------
0001D574                            ; Debug	list pointers
0001D574                            ; ---------------------------------------------------------------------------
0001D574                            DebugList:
0001D574                            	include "_inc\Debug list pointers.asm"
0001D574                            ; ---------------------------------------------------------------------------
0001D574                            ; Debug	list pointers
0001D574                            ; ---------------------------------------------------------------------------
0001D574 0000                       	dc.w Debug_GHZ-DebugList
0001D576 0000                       	dc.w Debug_LZ-DebugList
0001D578 0000                       	dc.w Debug_MZ-DebugList
0001D57A 0000                       	dc.w Debug_SLZ-DebugList
0001D57C 0000                       	dc.w Debug_SYZ-DebugList
0001D57E 0000                       	dc.w Debug_SBZ-DebugList
0001D580 0000                       	dc.w Debug_Ending-DebugList
0001D580 0000                       	dc.w Debug_Ending-DebugList
0001D582                            
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            ; Debug	list - Green Hill
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            Debug_GHZ:
0001D582                            	include "_inc\Debug list - GHZ.asm"
0001D582                            ; ---------------------------------------------------------------------------
0001D582                            ; Debug	list - Green Hill
0001D582                            ; ---------------------------------------------------------------------------
0001D582 0010                       	dc.w $10			; number of items in list
0001D584 2500 9F60                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D588 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D58C 2600 A55E                  	dc.l Map_obj26+$26000000
0001D590 0000 0680                  	dc.b 0,	0, 6, $80
0001D594 1F00 972A                  	dc.l Map_obj1F+$1F000000
0001D598 0000 0400                  	dc.b 0,	0, 4, 0
0001D59C 2200 9A0A                  	dc.l Map_obj22+$22000000
0001D5A0 0000 0444                  	dc.b 0,	0, 4, $44
0001D5A4 2B00 AB9E                  	dc.l Map_obj2B+$2B000000
0001D5A8 0000 047B                  	dc.b 0,	0, 4, $7B
0001D5AC 3600 CF98                  	dc.l Map_obj36+$36000000
0001D5B0 0000 051B                  	dc.b 0,	0, 5, $1B
0001D5B4 1800 8128                  	dc.l Map_obj18+$18000000
0001D5B8 0000 4000                  	dc.b 0,	0, $40,	0
0001D5BC 3B00 D0BE                  	dc.l Map_obj3B+$3B000000
0001D5C0 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D5C4 4000 F73A                  	dc.l Map_obj40+$40000000
0001D5C8 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D5CC 4100 DCC4                  	dc.l Map_obj41+$41000000
0001D5D0 0000 0523                  	dc.b 0,	0, 5, $23
0001D5D4 4200 DEEA                  	dc.l Map_obj42+$42000000
0001D5D8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D5DC 4400 E1F8                  	dc.l Map_obj44+$44000000
0001D5E0 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D5E4 1900 8196                  	dc.l Map_obj48+$19000000
0001D5E8 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D5EC 7901 754E                  	dc.l Map_obj79+$79000000
0001D5F0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D5F4 4B00 9FA0                  	dc.l Map_obj4B+$4B000000
0001D5F8 0000 2400                  	dc.b 0,	0, $24,	0
0001D5FC 7D01 769E                  	dc.l Map_obj7D+$7D000000
0001D600 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D604                            	even
0001D604                            	even
0001D604                            
0001D604                            ; ---------------------------------------------------------------------------
0001D604                            ; Debug	list - Labyrinth
0001D604                            ; ---------------------------------------------------------------------------
0001D604                            Debug_LZ:
0001D604                            	include "_inc\Debug list - LZ.asm"
0001D604                            ; ---------------------------------------------------------------------------
0001D604                            ; Debug	list - Labyrinth
0001D604                            ; ---------------------------------------------------------------------------
0001D604 0019                       	dc.w $19
0001D606 2500 9F60                  	dc.l Map_obj25+$25000000
0001D60A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D60E 2600 A55E                  	dc.l Map_obj26+$26000000
0001D612 0000 0680                  	dc.b 0,	0, 6, $80
0001D616 4100 DCC4                  	dc.l Map_obj41+$41000000
0001D61A 0000 0523                  	dc.b 0,	0, 5, $23
0001D61E 2C00 AC44                  	dc.l Map_obj2C+$2C000000
0001D622 0800 2486                  	dc.b 8,	0, $24,	$86
0001D626 2D00 AE30                  	dc.l Map_obj2D+$2D000000
0001D62A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D62E 1601 1F16                  	dc.l Map_obj16+$16000000
0001D632 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D636 1601 1F16                  	dc.l Map_obj16+$16000000
0001D63A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D63E 3300 C2AE                  	dc.l Map_obj33+$33000000
0001D642 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D646 3200 BE6E                  	dc.l Map_obj32+$32000000
0001D64A 0000 0513                  	dc.b 0,	0, 5, $13
0001D64E 3600 CF98                  	dc.l Map_obj36+$36000000
0001D652 0000 051B                  	dc.b 0,	0, 5, $1B
0001D656 5201 0038                  	dc.l Map_obj52a+$52000000
0001D65A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D65E 6101 213E                  	dc.l Map_obj61+$61000000
0001D662 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D666 6101 213E                  	dc.l Map_obj61+$61000000
0001D66A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D66E 6101 213E                  	dc.l Map_obj61+$61000000
0001D672 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D676 6201 2292                  	dc.l Map_obj62+$62000000
0001D67A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D67E 6101 213E                  	dc.l Map_obj61+$61000000
0001D682 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D686 6101 213E                  	dc.l Map_obj61+$61000000
0001D68A 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D68E 6301 25F4                  	dc.l Map_obj63+$63000000
0001D692 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D696 6001 1E60                  	dc.l Map_obj60+$60000000
0001D69A 0000 0467                  	dc.b 0,	0, 4, $67
0001D69E 6401 2938                  	dc.l Map_obj64+$64000000
0001D6A2 8413 8348                  	dc.b $84, $13, $83, $48
0001D6A6 6501 2AC0                  	dc.l Map_obj65+$65000000
0001D6AA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D6AE 6501 2AC0                  	dc.l Map_obj65+$65000000
0001D6B2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D6B6 0B01 12B0                  	dc.l Map_obj0B+$B000000
0001D6BA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D6BE 0C01 1380                  	dc.l Map_obj0C+$C000000
0001D6C2 0200 4328                  	dc.b 2,	0, $43,	$28
0001D6C6 7901 754E                  	dc.l Map_obj79+$79000000
0001D6CA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D6CE                            	even
0001D6CE                            	even
0001D6CE                            
0001D6CE                            ; ---------------------------------------------------------------------------
0001D6CE                            ; Debug	list - Marble
0001D6CE                            ; ---------------------------------------------------------------------------
0001D6CE                            Debug_MZ:
0001D6CE                            	include "_inc\Debug list - MZ.asm"
0001D6CE                            ; ---------------------------------------------------------------------------
0001D6CE                            ; Debug	list - Marble
0001D6CE                            ; ---------------------------------------------------------------------------
0001D6CE 0012                       	dc.w $12
0001D6D0 2500 9F60                  	dc.l Map_obj25+$25000000
0001D6D4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D6D8 2600 A55E                  	dc.l Map_obj26+$26000000
0001D6DC 0000 0680                  	dc.b 0,	0, 6, $80
0001D6E0 2200 9A0A                  	dc.l Map_obj22+$22000000
0001D6E4 0000 0444                  	dc.b 0,	0, 4, $44
0001D6E8 3600 CF98                  	dc.l Map_obj36+$36000000
0001D6EC 0000 051B                  	dc.b 0,	0, 5, $1B
0001D6F0 4100 DCC4                  	dc.l Map_obj41+$41000000
0001D6F4 0000 0523                  	dc.b 0,	0, 5, $23
0001D6F8 1300 B33E                  	dc.l Map_obj14+$13000000
0001D6FC 0000 0345                  	dc.b 0,	0, 3, $45
0001D700 4600 E8AA                  	dc.l Map_obj46+$46000000
0001D704 0000 4000                  	dc.b 0,	0, $40,	0
0001D708 4C00 F1E6                  	dc.l Map_obj4C+$4C000000
0001D70C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D710 4E00 F4CA                  	dc.l Map_obj4E+$4E000000
0001D714 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D718 3300 C2AE                  	dc.l Map_obj33+$33000000
0001D71C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D720 5000 F8C8                  	dc.l Map_obj50+$50000000
0001D724 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D728 5100 FD6C                  	dc.l Map_obj51+$51000000
0001D72C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D730 5200 FFE2                  	dc.l Map_obj52+$52000000
0001D734 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D738 5300 872E                  	dc.l Map_obj53+$53000000
0001D73C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D740 5400 F1AC                  	dc.l Map_obj54+$54000000
0001D744 0000 8680                  	dc.b 0,	0, $86,	$80
0001D748 5501 01D6                  	dc.l Map_obj55+$55000000
0001D74C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D750 7801 71C8                  	dc.l Map_obj78+$78000000
0001D754 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D758 7901 754E                  	dc.l Map_obj79+$79000000
0001D75C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D760                            	even
0001D760                            	even
0001D760                            
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ; Debug	list - Star Light
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            Debug_SLZ:
0001D760                            	include "_inc\Debug list - SLZ.asm"
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ; Debug	list - Star Light
0001D760                            ; ---------------------------------------------------------------------------
0001D760 000F                       	dc.w $F
0001D762 2500 9F60                  	dc.l Map_obj25+$25000000
0001D766 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D76A 2600 A55E                  	dc.l Map_obj26+$26000000
0001D76E 0000 0680                  	dc.b 0,	0, 6, $80
0001D772 5901 0CD8                  	dc.l Map_obj59+$59000000
0001D776 0000 4000                  	dc.b 0,	0, $40,	0
0001D77A 5300 872E                  	dc.l Map_obj53+$53000000
0001D77E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D782 1800 8186                  	dc.l Map_obj18b+$18000000
0001D786 0000 4000                  	dc.b 0,	0, $40,	0
0001D78A 5A01 0E12                  	dc.l Map_obj5A+$5A000000
0001D78E 0000 4000                  	dc.b 0,	0, $40,	0
0001D792 5B01 0FCA                  	dc.l Map_obj5B+$5B000000
0001D796 0000 4000                  	dc.b 0,	0, $40,	0
0001D79A 5D01 159A                  	dc.l Map_obj5D+$5D000000
0001D79E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D7A2 5E01 192C                  	dc.l Map_obj5E+$5E000000
0001D7A6 0000 0374                  	dc.b 0,	0, 3, $74
0001D7AA 4100 DCC4                  	dc.l Map_obj41+$41000000
0001D7AE 0000 0523                  	dc.b 0,	0, 5, $23
0001D7B2 1300 B33E                  	dc.l Map_obj14+$13000000
0001D7B6 0000 0480                  	dc.b 0,	0, 4, $80
0001D7BA 1C00 883E                  	dc.l Map_obj1C+$1C000000
0001D7BE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D7C2 5F01 1BAA                  	dc.l Map_obj5F+$5F000000
0001D7C6 0000 0400                  	dc.b 0,	0, 4, 0
0001D7CA 6001 1E60                  	dc.l Map_obj60+$60000000
0001D7CE 0000 2429                  	dc.b 0,	0, $24,	$29
0001D7D2 7901 754E                  	dc.l Map_obj79+$79000000
0001D7D6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7DA                            	even
0001D7DA                            	even
0001D7DA                            
0001D7DA                            ; ---------------------------------------------------------------------------
0001D7DA                            ; Debug	list - Spring Yard
0001D7DA                            ; ---------------------------------------------------------------------------
0001D7DA                            Debug_SYZ:
0001D7DA                            	include "_inc\Debug list - SYZ.asm"
0001D7DA                            ; ---------------------------------------------------------------------------
0001D7DA                            ; Debug	list - Spring Yard
0001D7DA                            ; ---------------------------------------------------------------------------
0001D7DA 000F                       	dc.w $F
0001D7DC 2500 9F60                  	dc.l Map_obj25+$25000000
0001D7E0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D7E4 2600 A55E                  	dc.l Map_obj26+$26000000
0001D7E8 0000 0680                  	dc.b 0,	0, 6, $80
0001D7EC 3600 CF98                  	dc.l Map_obj36+$36000000
0001D7F0 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7F4 4100 DCC4                  	dc.l Map_obj41+$41000000
0001D7F8 0000 0523                  	dc.b 0,	0, 5, $23
0001D7FC 4300 E14A                  	dc.l Map_obj43+$43000000
0001D800 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D804 1200 E928                  	dc.l Map_obj12+$12000000
0001D808 0000 0000                  	dc.b 0,	0, 0, 0
0001D80C 4700 EAA4                  	dc.l Map_obj47+$47000000
0001D810 0000 0380                  	dc.b 0,	0, 3, $80
0001D814 1F00 972A                  	dc.l Map_obj1F+$1F000000
0001D818 0000 0400                  	dc.b 0,	0, 4, 0
0001D81C 2200 9A0A                  	dc.l Map_obj22+$22000000
0001D820 0000 0444                  	dc.b 0,	0, 4, $44
0001D824 5000 F8C8                  	dc.l Map_obj50+$50000000
0001D828 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D82C 1800 8174                  	dc.l Map_obj18a+$18000000
0001D830 0000 4000                  	dc.b 0,	0, $40,	0
0001D834 5601 0698                  	dc.l Map_obj56+$56000000
0001D838 0000 4000                  	dc.b 0,	0, $40,	0
0001D83C 3200 BE6E                  	dc.l Map_obj32+$32000000
0001D840 0000 0513                  	dc.b 0,	0, 5, $13
0001D844 7801 71C8                  	dc.l Map_obj78+$78000000
0001D848 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D84C 7901 754E                  	dc.l Map_obj79+$79000000
0001D850 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D854                            	even
0001D854                            	even
0001D854                            
0001D854                            ; ---------------------------------------------------------------------------
0001D854                            ; Debug	list - Scrap Brain
0001D854                            ; ---------------------------------------------------------------------------
0001D854                            Debug_SBZ:
0001D854                            	include "_inc\Debug list - SBZ.asm"
0001D854                            ; ---------------------------------------------------------------------------
0001D854                            ; Debug	list - Scrap Brain
0001D854                            ; ---------------------------------------------------------------------------
0001D854 001D                       	dc.w $1D
0001D856 2500 9F60                  	dc.l Map_obj25+$25000000
0001D85A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D85E 2600 A55E                  	dc.l Map_obj26+$26000000
0001D862 0000 0680                  	dc.b 0,	0, 6, $80
0001D866 5F01 1BAA                  	dc.l Map_obj5F+$5F000000
0001D86A 0000 0400                  	dc.b 0,	0, 4, 0
0001D86E 6001 1E60                  	dc.l Map_obj60+$60000000
0001D872 0000 0429                  	dc.b 0,	0, 4, $29
0001D876 7801 71C8                  	dc.l Map_obj78+$78000000
0001D87A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D87E 1501 0A34                  	dc.l Map_obj15b+$15000000
0001D882 0702 4391                  	dc.b 7,	2, $43,	$91
0001D886 6701 5AEC                  	dc.l Map_obj67+$67000000
0001D88A E000 C344                  	dc.b $E0, 0, $C3, $44
0001D88E 5200 FFE2                  	dc.l Map_obj52+$52000000
0001D892 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D896 3200 BE6E                  	dc.l Map_obj32+$32000000
0001D89A 0000 0513                  	dc.b 0,	0, 5, $13
0001D89E 6901 5D46                  	dc.l Map_obj69+$69000000
0001D8A2 0300 4492                  	dc.b 3,	0, $44,	$92
0001D8A6 6901 5DA0                  	dc.l Map_obj69a+$69000000
0001D8AA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D8AE 6A01 5FFE                  	dc.l Map_obj6A+$6A000000
0001D8B2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D8B6 5300 872E                  	dc.l Map_obj53+$53000000
0001D8BA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D8BE 5200 FFE2                  	dc.l Map_obj52+$52000000
0001D8C2 3903 4460                  	dc.b $39, 3, $44, $60
0001D8C6 6B01 63CE                  	dc.l Map_obj6B+$6B000000
0001D8CA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D8CE 2A00 89D4                  	dc.l Map_obj2A+$2A000000
0001D8D2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D8D6 6B01 63CE                  	dc.l Map_obj6B+$6B000000
0001D8DA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D8DE 6A01 5FFE                  	dc.l Map_obj6A+$6A000000
0001D8E2 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D8E6 6B01 63CE                  	dc.l Map_obj6B+$6B000000
0001D8EA 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D8EE 6A01 5FFE                  	dc.l Map_obj6A+$6A000000
0001D8F2 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D8F6 6B01 63CE                  	dc.l Map_obj6B+$6B000000
0001D8FA 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D8FE 6C01 6590                  	dc.l Map_obj6C+$6C000000
0001D902 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D906 6D00 E59A                  	dc.l Map_obj6D+$6D000000
0001D90A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D90E 6D00 E59A                  	dc.l Map_obj6D+$6D000000
0001D912 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D916 6E01 6646                  	dc.l Map_obj6E+$6E000000
0001D91A 0400 047E                  	dc.b 4,	0, 4, $7E
0001D91E 7001 6A8C                  	dc.l Map_obj70+$70000000
0001D922 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D926 7101 1440                  	dc.l Map_obj71+$71000000
0001D92A 1100 8680                  	dc.b $11, 0, $86, $80
0001D92E 1E00 8E42                  	dc.l Map_obj1E+$1E000000
0001D932 0400 2302                  	dc.b 4,	0, $23,	2
0001D936 7901 754E                  	dc.l Map_obj79+$79000000
0001D93A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D93E                            	even
0001D93E                            	even
0001D93E                            
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E                            ; Debug	list - ending sequence / special stage
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E                            Debug_Ending:
0001D93E                            	include "_inc\Debug list - Ending and SS.asm"
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E                            ; Debug	list - ending sequence / special stage
0001D93E                            ; ---------------------------------------------------------------------------
0001D93E 000D                       	dc.w $D
0001D940 2500 9F60                  	dc.l Map_obj25+$25000000
0001D944 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D948 4700 EAA4                  	dc.l Map_obj47+$47000000
0001D94C 0000 0380                  	dc.b 0,	0, 3, $80
0001D950 2800 945C                  	dc.l Map_obj28a+$28000000
0001D954 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D958 2800 945C                  	dc.l Map_obj28a+$28000000
0001D95C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D960 2800 945C                  	dc.l Map_obj28a+$28000000
0001D964 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D968 2800 9444                  	dc.l Map_obj28+$28000000
0001D96C 0D00 0553                  	dc.b $D, 0, 5, $53
0001D970 2800 9444                  	dc.l Map_obj28+$28000000
0001D974 0E00 0553                  	dc.b $E, 0, 5, $53
0001D978 2800 9444                  	dc.l Map_obj28+$28000000
0001D97C 0F00 0573                  	dc.b $F, 0, 5, $73
0001D980 2800 9444                  	dc.l Map_obj28+$28000000
0001D984 1000 0573                  	dc.b $10, 0, 5,	$73
0001D988 2800 945C                  	dc.l Map_obj28a+$28000000
0001D98C 1100 0585                  	dc.b $11, 0, 5,	$85
0001D990 2800 9474                  	dc.l Map_obj28b+$28000000
0001D994 1200 0593                  	dc.b $12, 0, 5,	$93
0001D998 2800 945C                  	dc.l Map_obj28a+$28000000
0001D99C 1300 0565                  	dc.b $13, 0, 5,	$65
0001D9A0 2800 9474                  	dc.l Map_obj28b+$28000000
0001D9A4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D9A8                            	even
0001D9A8                            	even
0001D9A8                            
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; Main level load blocks
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            MainLoadBlocks:
0001D9A8                            	include "_inc\Main level load blocks.asm"
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8                            ; Main level load blocks
0001D9A8                            ;
0001D9A8                            ; ===FORMAT===
0001D9A8                            ; level	patterns + (1st	PLC num	* 10^6)
0001D9A8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D9A8                            ; 256x256 mappings
0001D9A8                            ; blank, music (unused), pal index (unused), pal index
0001D9A8                            ; ---------------------------------------------------------------------------
0001D9A8 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D9AC 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D9B0 0000 0000                  	dc.l Blk256_GHZ
0001D9B4 0081 0404                  	dc.b 0,	$81, 4,	4
0001D9B8 0000 0000                  	dc.l Nem_LZ+$6000000
0001D9BC 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D9C0 0000 0000                  	dc.l Blk256_LZ
0001D9C4 0082 0505                  	dc.b 0,	$82, 5,	5
0001D9C8 0000 0000                  	dc.l Nem_MZ+$8000000
0001D9CC 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D9D0 0000 0000                  	dc.l Blk256_MZ
0001D9D4 0083 0606                  	dc.b 0,	$83, 6,	6
0001D9D8 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D9DC 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D9E0 0000 0000                  	dc.l Blk256_SLZ
0001D9E4 0084 0707                  	dc.b 0,	$84, 7,	7
0001D9E8 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D9EC 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D9F0 0000 0000                  	dc.l Blk256_SYZ
0001D9F4 0085 0808                  	dc.b 0,	$85, 8,	8
0001D9F8 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D9FC 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DA00 0000 0000                  	dc.l Blk256_SBZ
0001DA04 0086 0909                  	dc.b 0,	$86, 9,	9
0001DA08 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DA0C 0000 0000                  	dc.l Blk16_GHZ
0001DA10 0000 0000                  	dc.l Blk256_GHZ
0001DA14 0086 1313                  	dc.b 0,	$86, $13, $13
0001DA18                            	even
0001DA18                            	even
0001DA18                            
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            ; Pattern load cues
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            ArtLoadCues:
0001DA18                            	include "_inc\Pattern load cues.asm"
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18                            ; Pattern load cues - index
0001DA18                            ; ---------------------------------------------------------------------------
0001DA18 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DA1C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DA20 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DA24 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DA28 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DA2C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DA30 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DA34 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DA38 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DA3C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DA40 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DA44 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DA48 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DA4C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DA50 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DA54 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DA58                            ; ---------------------------------------------------------------------------
0001DA58                            ; Pattern load cues - standard block 1
0001DA58                            ; ---------------------------------------------------------------------------
0001DA58 0004                       PLC_Main:	dc.w 4
0001DA5A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DA5E D800                       		dc.w $D800
0001DA60 0000 0000                  		dc.l Nem_Hud		; HUD
0001DA64 D940                       		dc.w $D940
0001DA66 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DA6A FA80                       		dc.w $FA80
0001DA6C 0000 0000                  		dc.l Nem_Ring		; rings
0001DA70 F640                       		dc.w $F640
0001DA72 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DA76 F2E0                       		dc.w $F2E0
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78                            ; Pattern load cues - standard block 2
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78 0002                       PLC_Main2:	dc.w 2
0001DA7A 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DA7E D000                       		dc.w $D000
0001DA80 0000 0000                  		dc.l Nem_Shield		; shield
0001DA84 A820                       		dc.w $A820
0001DA86 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DA8A AB80                       		dc.w $AB80
0001DA8C                            ; ---------------------------------------------------------------------------
0001DA8C                            ; Pattern load cues - explosion
0001DA8C                            ; ---------------------------------------------------------------------------
0001DA8C 0000                       PLC_Explode:	dc.w 0
0001DA8E 0000 0000                  		dc.l Nem_Explode	; explosion
0001DA92 B400                       		dc.w $B400
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Pattern load cues - game/time	over
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94 0000                       PLC_GameOver:	dc.w 0
0001DA96 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DA9A ABC0                       		dc.w $ABC0
0001DA9C                            ; ---------------------------------------------------------------------------
0001DA9C                            ; Pattern load cues - Green Hill
0001DA9C                            ; ---------------------------------------------------------------------------
0001DA9C 000B                       PLC_GHZ:	dc.w $B
0001DA9E 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DAA2 0000                       		dc.w 0
0001DAA4 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DAA8 39A0                       		dc.w $39A0
0001DAAA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DAAE 6B00                       		dc.w $6B00
0001DAB0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DAB4 7A00                       		dc.w $7A00
0001DAB6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DABA 8000                       		dc.w $8000
0001DABC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DAC0 8880                       		dc.w $8880
0001DAC2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DAC6 8F60                       		dc.w $8F60
0001DAC8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DACC 9360                       		dc.w $9360
0001DACE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DAD2 9E00                       		dc.w $9E00
0001DAD4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DAD8 A360                       		dc.w $A360
0001DADA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DADE A460                       		dc.w $A460
0001DAE0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DAE4 A660                       		dc.w $A660
0001DAE6 0005                       PLC_GHZ2:	dc.w 5
0001DAE8 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DAEC 7000                       		dc.w $7000
0001DAEE 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DAF2 71C0                       		dc.w $71C0
0001DAF4 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DAF8 7300                       		dc.w $7300
0001DAFA 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DAFE 7540                       		dc.w $7540
0001DB00 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DB04 A1E0                       		dc.w $A1E0
0001DB06 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DB0A 6980                       		dc.w $6980
0001DB0C                            ; ---------------------------------------------------------------------------
0001DB0C                            ; Pattern load cues - Labyrinth
0001DB0C                            ; ---------------------------------------------------------------------------
0001DB0C 000B                       PLC_LZ:		dc.w $B
0001DB0E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DB12 0000                       		dc.w 0
0001DB14 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DB18 3C00                       		dc.w $3C00
0001DB1A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DB1E 3E00                       		dc.w $3E00
0001DB20 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DB24 4B20                       		dc.w $4B20
0001DB26 0000 0000                  		dc.l Nem_Water		; water	surface
0001DB2A 6000                       		dc.w $6000
0001DB2C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DB30 6200                       		dc.w $6200
0001DB32 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DB36 6500                       		dc.w $6500
0001DB38 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DB3C 6900                       		dc.w $6900
0001DB3E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DB42 7780                       		dc.w $7780
0001DB44 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DB48 7880                       		dc.w $7880
0001DB4A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DB4E 7980                       		dc.w $7980
0001DB50 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DB54 94C0                       		dc.w $94C0
0001DB56 000C                       PLC_LZ2:	dc.w $C
0001DB58 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DB5C 7BC0                       		dc.w $7BC0
0001DB5E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DB62 7CC0                       		dc.w $7CC0
0001DB64 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DB68 7EC0                       		dc.w $7EC0
0001DB6A 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DB6E 5D20                       		dc.w $5D20
0001DB70 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DB74 8800                       		dc.w $8800
0001DB76 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DB7A 89E0                       		dc.w $89E0
0001DB7C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DB80 8CE0                       		dc.w $8CE0
0001DB82 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DB86 90C0                       		dc.w $90C0
0001DB88 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DB8C A1E0                       		dc.w $A1E0
0001DB8E 0000 0000                  		dc.l Nem_Cork		; cork block
0001DB92 A000                       		dc.w $A000
0001DB94 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DB98 A360                       		dc.w $A360
0001DB9A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DB9E A460                       		dc.w $A460
0001DBA0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DBA4 A660                       		dc.w $A660
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6                            ; Pattern load cues - Marble
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6 0009                       PLC_MZ:		dc.w 9
0001DBA8 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DBAC 0000                       		dc.w 0
0001DBAE 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DBB2 6000                       		dc.w $6000
0001DBB4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DBB8 68A0                       		dc.w $68A0
0001DBBA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DBBE 7000                       		dc.w $7000
0001DBC0 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DBC4 71C0                       		dc.w $71C0
0001DBC6 0000 0000                  		dc.l Nem_Lava		; lava
0001DBCA 7500                       		dc.w $7500
0001DBCC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DBD0 8880                       		dc.w $8880
0001DBD2 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DBD6 8F60                       		dc.w $8F60
0001DBD8 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DBDC 9700                       		dc.w $9700
0001DBDE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DBE2 9FE0                       		dc.w $9FE0
0001DBE4 0004                       PLC_MZ2:	dc.w 4
0001DBE6 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DBEA A260                       		dc.w $A260
0001DBEC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DBF0 A360                       		dc.w $A360
0001DBF2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DBF6 A460                       		dc.w $A460
0001DBF8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DBFC A660                       		dc.w $A660
0001DBFE 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DC02 5700                       		dc.w $5700
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04                            ; Pattern load cues - Star Light
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04 0008                       PLC_SLZ:	dc.w 8
0001DC06 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DC0A 0000                       		dc.w 0
0001DC0C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DC10 8000                       		dc.w $8000
0001DC12 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DC16 8520                       		dc.w $8520
0001DC18 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DC1C 9000                       		dc.w $9000
0001DC1E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DC22 9C00                       		dc.w $9C00
0001DC24 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DC28 A260                       		dc.w $A260
0001DC2A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DC2E A360                       		dc.w $A360
0001DC30 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DC34 A460                       		dc.w $A460
0001DC36 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DC3A A660                       		dc.w $A660
0001DC3C 0005                       PLC_SLZ2:	dc.w 5
0001DC3E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DC42 6E80                       		dc.w $6E80
0001DC44 0000 0000                  		dc.l Nem_Fan		; fan
0001DC48 7400                       		dc.w $7400
0001DC4A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DC4E 7980                       		dc.w $7980
0001DC50 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DC54 7B80                       		dc.w $7B80
0001DC56 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DC5A 9B00                       		dc.w $9B00
0001DC5C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DC60 9E00                       		dc.w $9E00
0001DC62                            ; ---------------------------------------------------------------------------
0001DC62                            ; Pattern load cues - Spring Yard
0001DC62                            ; ---------------------------------------------------------------------------
0001DC62 0004                       PLC_SYZ:	dc.w 4
0001DC64 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DC68 0000                       		dc.w 0
0001DC6A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DC6E 8000                       		dc.w $8000
0001DC70 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DC74 8880                       		dc.w $8880
0001DC76 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DC7A 8F60                       		dc.w $8F60
0001DC7C 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DC80 9700                       		dc.w $9700
0001DC82 0007                       PLC_SYZ2:	dc.w 7
0001DC84 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DC88 7000                       		dc.w $7000
0001DC8A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DC8E 72C0                       		dc.w $72C0
0001DC90 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DC94 7740                       		dc.w $7740
0001DC96 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DC9A 9FE0                       		dc.w $9FE0
0001DC9C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DCA0 A1E0                       		dc.w $A1E0
0001DCA2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCA6 A360                       		dc.w $A360
0001DCA8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCAC A460                       		dc.w $A460
0001DCAE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCB2 A660                       		dc.w $A660
0001DCB4                            ; ---------------------------------------------------------------------------
0001DCB4                            ; Pattern load cues - Scrap Brain
0001DCB4                            ; ---------------------------------------------------------------------------
0001DCB4 000B                       PLC_SBZ:	dc.w $B
0001DCB6 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DCBA 0000                       		dc.w 0
0001DCBC 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DCC0 5800                       		dc.w $5800
0001DCC2 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DCC6 5D00                       		dc.w $5D00
0001DCC8 0000 0000                  		dc.l Nem_Girder		; girder
0001DCCC 5E00                       		dc.w $5E00
0001DCCE 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DCD2 6040                       		dc.w $6040
0001DCD4 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DCD8 6880                       		dc.w $6880
0001DCDA 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DCDE 6900                       		dc.w $6900
0001DCE0 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DCE4 7220                       		dc.w $7220
0001DCE6 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DCEA 76A0                       		dc.w $76A0
0001DCEC 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DCF0 7B20                       		dc.w $7B20
0001DCF2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DCF6 7EA0                       		dc.w $7EA0
0001DCF8 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DCFC 9860                       		dc.w $9860
0001DCFE 000C                       PLC_SBZ2:	dc.w $C
0001DD00 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DD04 5600                       		dc.w $5600
0001DD06 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DD0A 8000                       		dc.w $8000
0001DD0C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD10 8520                       		dc.w $8520
0001DD12 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DD16 8C00                       		dc.w $8C00
0001DD18 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DD1C 8DE0                       		dc.w $8DE0
0001DD1E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DD22 8FC0                       		dc.w $8FC0
0001DD24 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DD28 9240                       		dc.w $9240
0001DD2A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DD2E 7F20                       		dc.w $7F20
0001DD30 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DD34 9BE0                       		dc.w $9BE0
0001DD36 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD3A A1E0                       		dc.w $A1E0
0001DD3C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD40 A360                       		dc.w $A360
0001DD42 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD46 A460                       		dc.w $A460
0001DD48 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD4C A660                       		dc.w $A660
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E                            ; Pattern load cues - title card
0001DD4E                            ; ---------------------------------------------------------------------------
0001DD4E 0000                       PLC_TitleCard:	dc.w 0
0001DD50 0000 0000                  		dc.l Nem_TitleCard
0001DD54 B000                       		dc.w $B000
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56                            ; Pattern load cues - act 3 boss
0001DD56                            ; ---------------------------------------------------------------------------
0001DD56 0005                       PLC_Boss:	dc.w 5
0001DD58 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DD5C 8000                       		dc.w $8000
0001DD5E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DD62 8D80                       		dc.w $8D80
0001DD64 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DD68 93A0                       		dc.w $93A0
0001DD6A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DD6E A300                       		dc.w $A300
0001DD70 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DD74 A300                       		dc.w $A300
0001DD76 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DD7A A540                       		dc.w $A540
0001DD7C                            ; ---------------------------------------------------------------------------
0001DD7C                            ; Pattern load cues - act 1/2 signpost
0001DD7C                            ; ---------------------------------------------------------------------------
0001DD7C 0002                       PLC_Signpost:	dc.w 2
0001DD7E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DD82 D000                       		dc.w $D000
0001DD84 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DD88 96C0                       		dc.w $96C0
0001DD8A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DD8E 8C40                       		dc.w $8C40
0001DD90                            ; ---------------------------------------------------------------------------
0001DD90                            ; Pattern load cues - beta special stage warp effect
0001DD90                            ; ---------------------------------------------------------------------------
0001DD90 0000                       PLC_Warp:	dc.w 0
0001DD92 0000 0000                  		dc.l Nem_Warp
0001DD96 A820                       		dc.w $A820
0001DD98                            ; ---------------------------------------------------------------------------
0001DD98                            ; Pattern load cues - special stage
0001DD98                            ; ---------------------------------------------------------------------------
0001DD98 0010                       PLC_SpeStage:	dc.w $10
0001DD9A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DD9E 0000                       		dc.w 0
0001DDA0 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DDA4 0A20                       		dc.w $A20
0001DDA6 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DDAA 2840                       		dc.w $2840
0001DDAC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DDB0 4760                       		dc.w $4760
0001DDB2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DDB6 4A20                       		dc.w $4A20
0001DDB8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DDBC 4C60                       		dc.w $4C60
0001DDBE 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DDC2 5E00                       		dc.w $5E00
0001DDC4 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DDC8 6E00                       		dc.w $6E00
0001DDCA 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DDCE 7E00                       		dc.w $7E00
0001DDD0 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DDD4 8E00                       		dc.w $8E00
0001DDD6 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DDDA 9E00                       		dc.w $9E00
0001DDDC 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DDE0 AE00                       		dc.w $AE00
0001DDE2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DDE6 BE00                       		dc.w $BE00
0001DDE8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DDEC EE00                       		dc.w $EE00
0001DDEE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DDF2 F2E0                       		dc.w $F2E0
0001DDF4 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DDF8 F400                       		dc.w $F400
0001DDFA 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DDFE F520                       		dc.w $F520
0001DE00 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DE04 F2E0                       		dc.w $F2E0
0001DE06 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DE0A F400                       		dc.w $F400
0001DE0C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DE10 F520                       		dc.w $F520
0001DE12                            ; ---------------------------------------------------------------------------
0001DE12                            ; Pattern load cues - GHZ animals
0001DE12                            ; ---------------------------------------------------------------------------
0001DE12 0001                       PLC_GHZAnimals:	dc.w 1
0001DE14 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DE18 B000                       		dc.w $B000
0001DE1A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DE1E B240                       		dc.w $B240
0001DE20                            ; ---------------------------------------------------------------------------
0001DE20                            ; Pattern load cues - LZ animals
0001DE20                            ; ---------------------------------------------------------------------------
0001DE20 0001                       PLC_LZAnimals:	dc.w 1
0001DE22 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DE26 B000                       		dc.w $B000
0001DE28 0000 0000                  		dc.l Nem_Seal		; seal
0001DE2C B240                       		dc.w $B240
0001DE2E                            ; ---------------------------------------------------------------------------
0001DE2E                            ; Pattern load cues - MZ animals
0001DE2E                            ; ---------------------------------------------------------------------------
0001DE2E 0001                       PLC_MZAnimals:	dc.w 1
0001DE30 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DE34 B000                       		dc.w $B000
0001DE36 0000 0000                  		dc.l Nem_Seal		; seal
0001DE3A B240                       		dc.w $B240
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C                            ; Pattern load cues - SLZ animals
0001DE3C                            ; ---------------------------------------------------------------------------
0001DE3C 0001                       PLC_SLZAnimals:	dc.w 1
0001DE3E 0000 0000                  		dc.l Nem_Pig		; pig
0001DE42 B000                       		dc.w $B000
0001DE44 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DE48 B240                       		dc.w $B240
0001DE4A                            ; ---------------------------------------------------------------------------
0001DE4A                            ; Pattern load cues - SYZ animals
0001DE4A                            ; ---------------------------------------------------------------------------
0001DE4A 0001                       PLC_SYZAnimals:	dc.w 1
0001DE4C 0000 0000                  		dc.l Nem_Pig		; pig
0001DE50 B000                       		dc.w $B000
0001DE52 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DE56 B240                       		dc.w $B240
0001DE58                            ; ---------------------------------------------------------------------------
0001DE58                            ; Pattern load cues - SBZ animals
0001DE58                            ; ---------------------------------------------------------------------------
0001DE58 0001                       PLC_SBZAnimals:	dc.w 1
0001DE5A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DE5E B000                       		dc.w $B000
0001DE60 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DE64 B240                       		dc.w $B240
0001DE66                            ; ---------------------------------------------------------------------------
0001DE66                            ; Pattern load cues - special stage results screen
0001DE66                            ; ---------------------------------------------------------------------------
0001DE66 0001                       PLC_SpeStResult:dc.w 1
0001DE68 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DE6C A820                       		dc.w $A820
0001DE6E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DE72 AA20                       		dc.w $AA20
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74                            ; Pattern load cues - ending sequence
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74 000E                       PLC_Ending:	dc.w $E
0001DE76 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DE7A 0000                       		dc.w 0
0001DE7C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DE80 39A0                       		dc.w $39A0
0001DE82 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DE86 6B00                       		dc.w $6B00
0001DE88 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DE8C 7400                       		dc.w $7400
0001DE8E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DE92 78A0                       		dc.w $78A0
0001DE94 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DE98 7C20                       		dc.w $7C20
0001DE9A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DE9E A480                       		dc.w $A480
0001DEA0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DEA4 AA60                       		dc.w $AA60
0001DEA6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DEAA ACA0                       		dc.w $ACA0
0001DEAC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DEB0 AE60                       		dc.w $AE60
0001DEB2 0000 0000                  		dc.l Nem_Seal		; seal
0001DEB6 B0A0                       		dc.w $B0A0
0001DEB8 0000 0000                  		dc.l Nem_Pig		; pig
0001DEBC B260                       		dc.w $B260
0001DEBE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DEC2 B4A0                       		dc.w $B4A0
0001DEC4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DEC8 B660                       		dc.w $B660
0001DECA 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DECE B8A0                       		dc.w $B8A0
0001DED0                            ; ---------------------------------------------------------------------------
0001DED0                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DED0                            ; ---------------------------------------------------------------------------
0001DED0 0002                       PLC_TryAgain:	dc.w 2
0001DED2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DED6 78A0                       		dc.w $78A0
0001DED8 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DEDC 7C20                       		dc.w $7C20
0001DEDE 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DEE2 B400                       		dc.w $B400
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4                            ; Pattern load cues - Eggman on SBZ 2
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DEE6 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DEEA A300                       		dc.w $A300
0001DEEC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DEF0 8000                       		dc.w $8000
0001DEF2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEF6 9400                       		dc.w $9400
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8                            ; Pattern load cues - final boss
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8 0004                       PLC_FZBoss:	dc.w 4
0001DEFA 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DEFE 7400                       		dc.w $7400
0001DF00 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DF04 6000                       		dc.w $6000
0001DF06 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF0A 8000                       		dc.w $8000
0001DF0C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DF10 8E00                       		dc.w $8E00
0001DF12 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF16 A540                       		dc.w $A540
0001DF18                            		even
0001DF18                            		even
0001DF18                            
0001DF18                            		incbin	misc\padding.bin
0001E006                            		even
0001E006                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E468                            		even
0001E468                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E560                            		even
0001E560                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E674                            		even
0001E674                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F5A8 00                         		even
0001F5A8                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00020F76                            		even
00020F76                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00020FAA                            		even
00020FAA                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00021068                            		even
00021068                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00021510                            		even
00021510                            ; ---------------------------------------------------------------------------
00021510                            ; Sprite mappings - Sonic
00021510                            ; ---------------------------------------------------------------------------
00021510                            Map_Sonic:
00021510                            	include "_maps\Sonic.asm"
00021510                            Map_a24e:
00021510 0000                       Map_a24e_0: 	dc.w Map_a24e_BC-Map_a24e
00021512 0000                       Map_a24e_2: 	dc.w Map_a24e_BD-Map_a24e
00021514 0000                       Map_a24e_4: 	dc.w Map_a24e_C8-Map_a24e
00021516 0000                       Map_a24e_6: 	dc.w Map_a24e_D8-Map_a24e
00021518 0000                       Map_a24e_8: 	dc.w Map_a24e_E8-Map_a24e
0002151A 0000                       Map_a24e_A: 	dc.w Map_a24e_F8-Map_a24e
0002151C 0000                       Map_a24e_C: 	dc.w Map_a24e_103-Map_a24e
0002151E 0000                       Map_a24e_E: 	dc.w Map_a24e_118-Map_a24e
00021520 0000                       Map_a24e_10: 	dc.w Map_a24e_123-Map_a24e
00021522 0000                       Map_a24e_12: 	dc.w Map_a24e_12E-Map_a24e
00021524 0000                       Map_a24e_14: 	dc.w Map_a24e_143-Map_a24e
00021526 0000                       Map_a24e_16: 	dc.w Map_a24e_14E-Map_a24e
00021528 0000                       Map_a24e_18: 	dc.w Map_a24e_15E-Map_a24e
0002152A 0000                       Map_a24e_1A: 	dc.w Map_a24e_178-Map_a24e
0002152C 0000                       Map_a24e_1C: 	dc.w Map_a24e_197-Map_a24e
0002152E 0000                       Map_a24e_1E: 	dc.w Map_a24e_1AC-Map_a24e
00021530 0000                       Map_a24e_20: 	dc.w Map_a24e_1C6-Map_a24e
00021532 0000                       Map_a24e_22: 	dc.w Map_a24e_1DB-Map_a24e
00021534 0000                       Map_a24e_24: 	dc.w Map_a24e_1F5-Map_a24e
00021536 0000                       Map_a24e_26: 	dc.w Map_a24e_20A-Map_a24e
00021538 0000                       Map_a24e_28: 	dc.w Map_a24e_215-Map_a24e
0002153A 0000                       Map_a24e_2A: 	dc.w Map_a24e_220-Map_a24e
0002153C 0000                       Map_a24e_2C: 	dc.w Map_a24e_235-Map_a24e
0002153E 0000                       Map_a24e_2E: 	dc.w Map_a24e_240-Map_a24e
00021540 0000                       Map_a24e_30: 	dc.w Map_a24e_250-Map_a24e
00021542 0000                       Map_a24e_32: 	dc.w Map_a24e_26F-Map_a24e
00021544 0000                       Map_a24e_34: 	dc.w Map_a24e_28E-Map_a24e
00021546 0000                       Map_a24e_36: 	dc.w Map_a24e_2A3-Map_a24e
00021548 0000                       Map_a24e_38: 	dc.w Map_a24e_2BD-Map_a24e
0002154A 0000                       Map_a24e_3A: 	dc.w Map_a24e_2D2-Map_a24e
0002154C 0000                       Map_a24e_3C: 	dc.w Map_a24e_2EC-Map_a24e
0002154E 0000                       Map_a24e_3E: 	dc.w Map_a24e_2F7-Map_a24e
00021550 0000                       Map_a24e_40: 	dc.w Map_a24e_302-Map_a24e
00021552 0000                       Map_a24e_42: 	dc.w Map_a24e_30D-Map_a24e
00021554 0000                       Map_a24e_44: 	dc.w Map_a24e_318-Map_a24e
00021556 0000                       Map_a24e_46: 	dc.w Map_a24e_32D-Map_a24e
00021558 0000                       Map_a24e_48: 	dc.w Map_a24e_33D-Map_a24e
0002155A 0000                       Map_a24e_4A: 	dc.w Map_a24e_352-Map_a24e
0002155C 0000                       Map_a24e_4C: 	dc.w Map_a24e_362-Map_a24e
0002155E 0000                       Map_a24e_4E: 	dc.w Map_a24e_36D-Map_a24e
00021560 0000                       Map_a24e_50: 	dc.w Map_a24e_378-Map_a24e
00021562 0000                       Map_a24e_52: 	dc.w Map_a24e_383-Map_a24e
00021564 0000                       Map_a24e_54: 	dc.w Map_a24e_38E-Map_a24e
00021566 0000                       Map_a24e_56: 	dc.w Map_a24e_3A3-Map_a24e
00021568 0000                       Map_a24e_58: 	dc.w Map_a24e_3AE-Map_a24e
0002156A 0000                       Map_a24e_5A: 	dc.w Map_a24e_3C3-Map_a24e
0002156C 0000                       Map_a24e_5C: 	dc.w Map_a24e_3CE-Map_a24e
0002156E 0000                       Map_a24e_5E: 	dc.w Map_a24e_3D4-Map_a24e
00021570 0000                       Map_a24e_60: 	dc.w Map_a24e_3DA-Map_a24e
00021572 0000                       Map_a24e_62: 	dc.w Map_a24e_3E0-Map_a24e
00021574 0000                       Map_a24e_64: 	dc.w Map_a24e_3E6-Map_a24e
00021576 0000                       Map_a24e_66: 	dc.w Map_a24e_3EC-Map_a24e
00021578 0000                       Map_a24e_68: 	dc.w Map_a24e_3F7-Map_a24e
0002157A 0000                       Map_a24e_6A: 	dc.w Map_a24e_3FD-Map_a24e
0002157C 0000                       Map_a24e_6C: 	dc.w Map_a24e_408-Map_a24e
0002157E 0000                       Map_a24e_6E: 	dc.w Map_a24e_40E-Map_a24e
00021580 0000                       Map_a24e_70: 	dc.w Map_a24e_419-Map_a24e
00021582 0000                       Map_a24e_72: 	dc.w Map_a24e_42E-Map_a24e
00021584 0000                       Map_a24e_74: 	dc.w Map_a24e_443-Map_a24e
00021586 0000                       Map_a24e_76: 	dc.w Map_a24e_453-Map_a24e
00021588 0000                       Map_a24e_78: 	dc.w Map_a24e_463-Map_a24e
0002158A 0000                       Map_a24e_7A: 	dc.w Map_a24e_473-Map_a24e
0002158C 0000                       Map_a24e_7C: 	dc.w Map_a24e_47E-Map_a24e
0002158E 0000                       Map_a24e_7E: 	dc.w Map_a24e_48E-Map_a24e
00021590 0000                       Map_a24e_80: 	dc.w Map_a24e_49E-Map_a24e
00021592 0000                       Map_a24e_82: 	dc.w Map_a24e_4A9-Map_a24e
00021594 0000                       Map_a24e_84: 	dc.w Map_a24e_4BE-Map_a24e
00021596 0000                       Map_a24e_86: 	dc.w Map_a24e_4D3-Map_a24e
00021598 0000                       Map_a24e_88: 	dc.w Map_a24e_4ED-Map_a24e
0002159A 0000                       Map_a24e_8A: 	dc.w Map_a24e_507-Map_a24e
0002159C 0000                       Map_a24e_8C: 	dc.w Map_a24e_512-Map_a24e
0002159E 0000                       Map_a24e_8E: 	dc.w Map_a24e_522-Map_a24e
000215A0 0000                       Map_a24e_90: 	dc.w Map_a24e_52D-Map_a24e
000215A2 0000                       Map_a24e_92: 	dc.w Map_a24e_53D-Map_a24e
000215A4 0000                       Map_a24e_94: 	dc.w Map_a24e_548-Map_a24e
000215A6 0000                       Map_a24e_96: 	dc.w Map_a24e_558-Map_a24e
000215A8 0000                       Map_a24e_98: 	dc.w Map_a24e_568-Map_a24e
000215AA 0000                       Map_a24e_9A: 	dc.w Map_a24e_582-Map_a24e
000215AC 0000                       Map_a24e_9C: 	dc.w Map_a24e_59C-Map_a24e
000215AE 0000                       Map_a24e_9E: 	dc.w Map_a24e_5A7-Map_a24e
000215B0 0000                       Map_a24e_A0: 	dc.w Map_a24e_5B7-Map_a24e
000215B2 0000                       Map_a24e_A2: 	dc.w Map_a24e_5BD-Map_a24e
000215B4 0000                       Map_a24e_A4: 	dc.w Map_a24e_5C3-Map_a24e
000215B6 0000                       Map_a24e_A6: 	dc.w Map_a24e_5C9-Map_a24e
000215B8 0000                       Map_a24e_A8: 	dc.w Map_a24e_5D9-Map_a24e
000215BA 0000                       Map_a24e_AA: 	dc.w Map_a24e_5E9-Map_a24e
000215BC 0000                       Map_a24e_AC: 	dc.w Map_a24e_5F9-Map_a24e
000215BE 0000                       Map_a24e_AE: 	dc.w Map_a24e_609-Map_a24e
000215C0 0000                       Map_a24e_B0: 	dc.w Map_a24e_614-Map_a24e
000215C2 0000                       Map_a24e_B2: 	dc.w Map_a24e_61F-Map_a24e
000215C4 0000                       Map_a24e_B4: 	dc.w Map_a24e_62A-Map_a24e
000215C6 0000                       Map_a24e_B6: 	dc.w Map_a24e_635-Map_a24e
000215C8 0000                       Map_a24e_B8: 	dc.w Map_a24e_640-Map_a24e
000215CA 0000                       Map_a24e_BA: 	dc.w Map_a24e_64B-Map_a24e
000215CC 00                         Map_a24e_BC: 	dc.b $0
000215CD 02                         Map_a24e_BD: 	dc.b $2
000215CE EE0F 0000 F0               	dc.b $EE, $F, $0, $0, $F0
000215D3 0E0C 0010 F0               	dc.b $E, $C, $0, $10, $F0
000215D8 03                         Map_a24e_C8: 	dc.b $3
000215D9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000215DE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000215E3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000215E8 03                         Map_a24e_D8: 	dc.b $3
000215E9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000215EE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000215F3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000215F8 03                         Map_a24e_E8: 	dc.b $3
000215F9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000215FE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021603 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00021608 02                         Map_a24e_F8: 	dc.b $2
00021609 EF0D 0000 EB               	dc.b $EF, $D, $0, $0, $EB
0002160E FF0E 0008 F3               	dc.b $FF, $E, $0, $8, $F3
00021613 04                         Map_a24e_103: 	dc.b $4
00021614 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00021619 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
0002161E FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00021623 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00021628 02                         Map_a24e_118: 	dc.b $2
00021629 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
0002162E FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00021633 02                         Map_a24e_123: 	dc.b $2
00021634 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00021639 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
0002163E 04                         Map_a24e_12E: 	dc.b $4
0002163F EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00021644 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00021649 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
0002164E 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00021653 02                         Map_a24e_143: 	dc.b $2
00021654 EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00021659 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
0002165E 03                         Map_a24e_14E: 	dc.b $3
0002165F ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00021664 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00021669 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002166E 05                         Map_a24e_15E: 	dc.b $5
0002166F EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00021674 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00021679 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002167E 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00021683 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00021688 06                         Map_a24e_178: 	dc.b $6
00021689 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002168E EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00021693 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00021698 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002169D FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
000216A2 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000216A7 04                         Map_a24e_197: 	dc.b $4
000216A8 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000216AD ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000216B2 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000216B7 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000216BC 05                         Map_a24e_1AC: 	dc.b $5
000216BD EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000216C2 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000216C7 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000216CC 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000216D1 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000216D6 04                         Map_a24e_1C6: 	dc.b $4
000216D7 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000216DC EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000216E1 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000216E6 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000216EB 05                         Map_a24e_1DB: 	dc.b $5
000216EC ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000216F1 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000216F6 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000216FB FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00021700 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00021705 04                         Map_a24e_1F5: 	dc.b $4
00021706 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002170B EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00021710 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00021715 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002171A 02                         Map_a24e_20A: 	dc.b $2
0002171B F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00021720 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00021725 02                         Map_a24e_215: 	dc.b $2
00021726 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
0002172B F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00021730 04                         Map_a24e_220: 	dc.b $4
00021731 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00021736 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
0002173B FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00021740 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00021745 02                         Map_a24e_235: 	dc.b $2
00021746 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002174B F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00021750 03                         Map_a24e_240: 	dc.b $3
00021751 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00021756 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002175B F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00021760 06                         Map_a24e_250: 	dc.b $6
00021761 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00021766 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002176B F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00021770 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00021775 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002177A FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002177F 06                         Map_a24e_26F: 	dc.b $6
00021780 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00021785 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002178A EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002178F F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00021794 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00021799 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002179E 04                         Map_a24e_28E: 	dc.b $4
0002179F FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000217A4 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000217A9 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000217AE 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000217B3 05                         Map_a24e_2A3: 	dc.b $5
000217B4 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000217B9 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000217BE F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000217C3 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000217C8 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000217CD 04                         Map_a24e_2BD: 	dc.b $4
000217CE FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000217D3 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000217D8 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000217DD 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000217E2 05                         Map_a24e_2D2: 	dc.b $5
000217E3 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000217E8 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000217ED F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000217F2 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000217F7 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000217FC 02                         Map_a24e_2EC: 	dc.b $2
000217FD FC0E 0000 EC               	dc.b $FC, $E, $0, $0, $EC
00021802 EC09 000C F4               	dc.b $EC, $9, $0, $C, $F4
00021807 02                         Map_a24e_2F7: 	dc.b $2
00021808 FC0E 0000 EC               	dc.b $FC, $E, $0, $0, $EC
0002180D EC09 000C F4               	dc.b $EC, $9, $0, $C, $F4
00021812 02                         Map_a24e_302: 	dc.b $2
00021813 FC0E 0000 EC               	dc.b $FC, $E, $0, $0, $EC
00021818 EC09 000C F4               	dc.b $EC, $9, $0, $C, $F4
0002181D 02                         Map_a24e_30D: 	dc.b $2
0002181E FC0E 0000 EC               	dc.b $FC, $E, $0, $0, $EC
00021823 EC09 000C F4               	dc.b $EC, $9, $0, $C, $F4
00021828 04                         Map_a24e_318: 	dc.b $4
00021829 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002182E EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021833 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021838 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002183D 03                         Map_a24e_32D: 	dc.b $3
0002183E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021843 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021848 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002184D 04                         Map_a24e_33D: 	dc.b $4
0002184E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021853 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021858 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002185D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00021862 03                         Map_a24e_352: 	dc.b $3
00021863 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021868 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002186D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021872 02                         Map_a24e_362: 	dc.b $2
00021873 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021878 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002187D 02                         Map_a24e_36D: 	dc.b $2
0002187E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021883 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021888 02                         Map_a24e_378: 	dc.b $2
00021889 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002188E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021893 02                         Map_a24e_383: 	dc.b $2
00021894 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021899 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002189E 04                         Map_a24e_38E: 	dc.b $4
0002189F FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000218A4 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000218A9 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000218AE 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000218B3 02                         Map_a24e_3A3: 	dc.b $2
000218B4 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000218B9 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000218BE 04                         Map_a24e_3AE: 	dc.b $4
000218BF FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000218C4 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000218C9 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000218CE 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000218D3 02                         Map_a24e_3C3: 	dc.b $2
000218D4 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000218D9 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000218DE 01                         Map_a24e_3CE: 	dc.b $1
000218DF F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000218E4 01                         Map_a24e_3D4: 	dc.b $1
000218E5 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000218EA 01                         Map_a24e_3DA: 	dc.b $1
000218EB F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000218F0 01                         Map_a24e_3E0: 	dc.b $1
000218F1 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000218F6 01                         Map_a24e_3E6: 	dc.b $1
000218F7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000218FC 02                         Map_a24e_3EC: 	dc.b $2
000218FD F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00021902 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00021907 01                         Map_a24e_3F7: 	dc.b $1
00021908 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002190D 02                         Map_a24e_3FD: 	dc.b $2
0002190E EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00021913 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00021918 01                         Map_a24e_408: 	dc.b $1
00021919 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002191E 02                         Map_a24e_40E: 	dc.b $2
0002191F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00021924 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00021929 04                         Map_a24e_419: 	dc.b $4
0002192A ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002192F FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00021934 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00021939 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
0002193E 04                         Map_a24e_42E: 	dc.b $4
0002193F F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00021944 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00021949 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002194E 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00021953 03                         Map_a24e_443: 	dc.b $3
00021954 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00021959 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
0002195E F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00021963 03                         Map_a24e_453: 	dc.b $3
00021964 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00021969 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
0002196E 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00021973 03                         Map_a24e_463: 	dc.b $3
00021974 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00021979 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002197E 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00021983 02                         Map_a24e_473: 	dc.b $2
00021984 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00021989 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002198E 03                         Map_a24e_47E: 	dc.b $3
0002198F F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00021994 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00021999 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002199E 03                         Map_a24e_48E: 	dc.b $3
0002199F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000219A4 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
000219A9 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
000219AE 02                         Map_a24e_49E: 	dc.b $2
000219AF E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000219B4 0805 000C F8               	dc.b $8, $5, $0, $C, $F8
000219B9 04                         Map_a24e_4A9: 	dc.b $4
000219BA F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000219BF 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000219C4 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000219C9 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000219CE 04                         Map_a24e_4BE: 	dc.b $4
000219CF F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000219D4 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000219D9 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000219DE F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000219E3 05                         Map_a24e_4D3: 	dc.b $5
000219E4 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000219E9 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000219EE 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000219F3 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000219F8 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000219FD 05                         Map_a24e_4ED: 	dc.b $5
000219FE E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00021A03 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00021A08 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00021A0D 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00021A12 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00021A17 02                         Map_a24e_507: 	dc.b $2
00021A18 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00021A1D 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00021A22 03                         Map_a24e_512: 	dc.b $3
00021A23 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021A28 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021A2D 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00021A32 02                         Map_a24e_522: 	dc.b $2
00021A33 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00021A38 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00021A3D 03                         Map_a24e_52D: 	dc.b $3
00021A3E EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021A43 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021A48 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00021A4D 02                         Map_a24e_53D: 	dc.b $2
00021A4E EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021A53 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00021A58 03                         Map_a24e_548: 	dc.b $3
00021A59 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00021A5E 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00021A63 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00021A68 03                         Map_a24e_558: 	dc.b $3
00021A69 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021A6E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021A73 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00021A78 05                         Map_a24e_568: 	dc.b $5
00021A79 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021A7E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021A83 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00021A88 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00021A8D 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00021A92 05                         Map_a24e_582: 	dc.b $5
00021A93 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021A98 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021A9D F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00021AA2 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00021AA7 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00021AAC 02                         Map_a24e_59C: 	dc.b $2
00021AAD EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00021AB2 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00021AB7 03                         Map_a24e_5A7: 	dc.b $3
00021AB8 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00021ABD F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00021AC2 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00021AC7 01                         Map_a24e_5B7: 	dc.b $1
00021AC8 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00021ACD 01                         Map_a24e_5BD: 	dc.b $1
00021ACE F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00021AD3 01                         Map_a24e_5C3: 	dc.b $1
00021AD4 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00021AD9 03                         Map_a24e_5C9: 	dc.b $3
00021ADA F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00021ADF FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00021AE4 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00021AE9 03                         Map_a24e_5D9: 	dc.b $3
00021AEA F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
00021AEF FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00021AF4 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00021AF9 03                         Map_a24e_5E9: 	dc.b $3
00021AFA F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00021AFF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00021B04 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00021B09 03                         Map_a24e_5F9: 	dc.b $3
00021B0A EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00021B0F FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00021B14 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00021B19 02                         Map_a24e_609: 	dc.b $2
00021B1A F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00021B1F F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00021B24 02                         Map_a24e_614: 	dc.b $2
00021B25 F90E 0000 F0               	dc.b $F9, $E, $0, $0, $F0
00021B2A 1108 000C F0               	dc.b $11, $8, $0, $C, $F0
00021B2F 02                         Map_a24e_61F: 	dc.b $2
00021B30 F90E 0000 F0               	dc.b $F9, $E, $0, $0, $F0
00021B35 1108 000C F0               	dc.b $11, $8, $0, $C, $F0
00021B3A 02                         Map_a24e_62A: 	dc.b $2
00021B3B F90E 0000 F0               	dc.b $F9, $E, $0, $0, $F0
00021B40 1108 000C F0               	dc.b $11, $8, $0, $C, $F0
00021B45 02                         Map_a24e_635: 	dc.b $2
00021B46 F90E 0000 F0               	dc.b $F9, $E, $0, $0, $F0
00021B4B 1108 000C F0               	dc.b $11, $8, $0, $C, $F0
00021B50 02                         Map_a24e_640: 	dc.b $2
00021B51 F90E 0000 F0               	dc.b $F9, $E, $0, $0, $F0
00021B56 1108 000C F0               	dc.b $11, $8, $0, $C, $F0
00021B5B 02                         Map_a24e_64B: 	dc.b $2
00021B5C F90E 0000 F0               	dc.b $F9, $E, $0, $0, $F0
00021B61 1108 000C F0               	dc.b $11, $8, $0, $C, $F0
00021B66                            	even
00021B66                            	even
00021B66                            
00021B66                            ; ---------------------------------------------------------------------------
00021B66                            ; Uncompressed graphics	loading	array for Sonic
00021B66                            ; ---------------------------------------------------------------------------
00021B66                            SonicDynPLC:
00021B66                            	include "_inc\Sonic dynamic pattern load cues.asm"
00021B66                            DPLC_4e45:
00021B66 0000                       DPLC_4e45_0: 	dc.w DPLC_4e45_BC-DPLC_4e45
00021B68 0000                       DPLC_4e45_2: 	dc.w DPLC_4e45_BD-DPLC_4e45
00021B6A 0000                       DPLC_4e45_4: 	dc.w DPLC_4e45_C2-DPLC_4e45
00021B6C 0000                       DPLC_4e45_6: 	dc.w DPLC_4e45_C9-DPLC_4e45
00021B6E 0000                       DPLC_4e45_8: 	dc.w DPLC_4e45_D0-DPLC_4e45
00021B70 0000                       DPLC_4e45_A: 	dc.w DPLC_4e45_D7-DPLC_4e45
00021B72 0000                       DPLC_4e45_C: 	dc.w DPLC_4e45_DC-DPLC_4e45
00021B74 0000                       DPLC_4e45_E: 	dc.w DPLC_4e45_E5-DPLC_4e45
00021B76 0000                       DPLC_4e45_10: 	dc.w DPLC_4e45_EA-DPLC_4e45
00021B78 0000                       DPLC_4e45_12: 	dc.w DPLC_4e45_EF-DPLC_4e45
00021B7A 0000                       DPLC_4e45_14: 	dc.w DPLC_4e45_F8-DPLC_4e45
00021B7C 0000                       DPLC_4e45_16: 	dc.w DPLC_4e45_FD-DPLC_4e45
00021B7E 0000                       DPLC_4e45_18: 	dc.w DPLC_4e45_104-DPLC_4e45
00021B80 0000                       DPLC_4e45_1A: 	dc.w DPLC_4e45_10F-DPLC_4e45
00021B82 0000                       DPLC_4e45_1C: 	dc.w DPLC_4e45_11C-DPLC_4e45
00021B84 0000                       DPLC_4e45_1E: 	dc.w DPLC_4e45_125-DPLC_4e45
00021B86 0000                       DPLC_4e45_20: 	dc.w DPLC_4e45_130-DPLC_4e45
00021B88 0000                       DPLC_4e45_22: 	dc.w DPLC_4e45_139-DPLC_4e45
00021B8A 0000                       DPLC_4e45_24: 	dc.w DPLC_4e45_144-DPLC_4e45
00021B8C 0000                       DPLC_4e45_26: 	dc.w DPLC_4e45_14D-DPLC_4e45
00021B8E 0000                       DPLC_4e45_28: 	dc.w DPLC_4e45_152-DPLC_4e45
00021B90 0000                       DPLC_4e45_2A: 	dc.w DPLC_4e45_157-DPLC_4e45
00021B92 0000                       DPLC_4e45_2C: 	dc.w DPLC_4e45_160-DPLC_4e45
00021B94 0000                       DPLC_4e45_2E: 	dc.w DPLC_4e45_165-DPLC_4e45
00021B96 0000                       DPLC_4e45_30: 	dc.w DPLC_4e45_16C-DPLC_4e45
00021B98 0000                       DPLC_4e45_32: 	dc.w DPLC_4e45_179-DPLC_4e45
00021B9A 0000                       DPLC_4e45_34: 	dc.w DPLC_4e45_186-DPLC_4e45
00021B9C 0000                       DPLC_4e45_36: 	dc.w DPLC_4e45_18F-DPLC_4e45
00021B9E 0000                       DPLC_4e45_38: 	dc.w DPLC_4e45_19A-DPLC_4e45
00021BA0 0000                       DPLC_4e45_3A: 	dc.w DPLC_4e45_1A3-DPLC_4e45
00021BA2 0000                       DPLC_4e45_3C: 	dc.w DPLC_4e45_1AE-DPLC_4e45
00021BA4 0000                       DPLC_4e45_3E: 	dc.w DPLC_4e45_1B3-DPLC_4e45
00021BA6 0000                       DPLC_4e45_40: 	dc.w DPLC_4e45_1B8-DPLC_4e45
00021BA8 0000                       DPLC_4e45_42: 	dc.w DPLC_4e45_1BD-DPLC_4e45
00021BAA 0000                       DPLC_4e45_44: 	dc.w DPLC_4e45_1C2-DPLC_4e45
00021BAC 0000                       DPLC_4e45_46: 	dc.w DPLC_4e45_1CB-DPLC_4e45
00021BAE 0000                       DPLC_4e45_48: 	dc.w DPLC_4e45_1D2-DPLC_4e45
00021BB0 0000                       DPLC_4e45_4A: 	dc.w DPLC_4e45_1DB-DPLC_4e45
00021BB2 0000                       DPLC_4e45_4C: 	dc.w DPLC_4e45_1E2-DPLC_4e45
00021BB4 0000                       DPLC_4e45_4E: 	dc.w DPLC_4e45_1E7-DPLC_4e45
00021BB6 0000                       DPLC_4e45_50: 	dc.w DPLC_4e45_1EC-DPLC_4e45
00021BB8 0000                       DPLC_4e45_52: 	dc.w DPLC_4e45_1F1-DPLC_4e45
00021BBA 0000                       DPLC_4e45_54: 	dc.w DPLC_4e45_1F6-DPLC_4e45
00021BBC 0000                       DPLC_4e45_56: 	dc.w DPLC_4e45_1FF-DPLC_4e45
00021BBE 0000                       DPLC_4e45_58: 	dc.w DPLC_4e45_204-DPLC_4e45
00021BC0 0000                       DPLC_4e45_5A: 	dc.w DPLC_4e45_20D-DPLC_4e45
00021BC2 0000                       DPLC_4e45_5C: 	dc.w DPLC_4e45_212-DPLC_4e45
00021BC4 0000                       DPLC_4e45_5E: 	dc.w DPLC_4e45_215-DPLC_4e45
00021BC6 0000                       DPLC_4e45_60: 	dc.w DPLC_4e45_218-DPLC_4e45
00021BC8 0000                       DPLC_4e45_62: 	dc.w DPLC_4e45_21B-DPLC_4e45
00021BCA 0000                       DPLC_4e45_64: 	dc.w DPLC_4e45_21E-DPLC_4e45
00021BCC 0000                       DPLC_4e45_66: 	dc.w DPLC_4e45_221-DPLC_4e45
00021BCE 0000                       DPLC_4e45_68: 	dc.w DPLC_4e45_226-DPLC_4e45
00021BD0 0000                       DPLC_4e45_6A: 	dc.w DPLC_4e45_229-DPLC_4e45
00021BD2 0000                       DPLC_4e45_6C: 	dc.w DPLC_4e45_22E-DPLC_4e45
00021BD4 0000                       DPLC_4e45_6E: 	dc.w DPLC_4e45_231-DPLC_4e45
00021BD6 0000                       DPLC_4e45_70: 	dc.w DPLC_4e45_236-DPLC_4e45
00021BD8 0000                       DPLC_4e45_72: 	dc.w DPLC_4e45_23F-DPLC_4e45
00021BDA 0000                       DPLC_4e45_74: 	dc.w DPLC_4e45_248-DPLC_4e45
00021BDC 0000                       DPLC_4e45_76: 	dc.w DPLC_4e45_24F-DPLC_4e45
00021BDE 0000                       DPLC_4e45_78: 	dc.w DPLC_4e45_256-DPLC_4e45
00021BE0 0000                       DPLC_4e45_7A: 	dc.w DPLC_4e45_25D-DPLC_4e45
00021BE2 0000                       DPLC_4e45_7C: 	dc.w DPLC_4e45_260-DPLC_4e45
00021BE4 0000                       DPLC_4e45_7E: 	dc.w DPLC_4e45_267-DPLC_4e45
00021BE6 0000                       DPLC_4e45_80: 	dc.w DPLC_4e45_26E-DPLC_4e45
00021BE8 0000                       DPLC_4e45_82: 	dc.w DPLC_4e45_271-DPLC_4e45
00021BEA 0000                       DPLC_4e45_84: 	dc.w DPLC_4e45_27A-DPLC_4e45
00021BEC 0000                       DPLC_4e45_86: 	dc.w DPLC_4e45_283-DPLC_4e45
00021BEE 0000                       DPLC_4e45_88: 	dc.w DPLC_4e45_28E-DPLC_4e45
00021BF0 0000                       DPLC_4e45_8A: 	dc.w DPLC_4e45_299-DPLC_4e45
00021BF2 0000                       DPLC_4e45_8C: 	dc.w DPLC_4e45_29E-DPLC_4e45
00021BF4 0000                       DPLC_4e45_8E: 	dc.w DPLC_4e45_2A5-DPLC_4e45
00021BF6 0000                       DPLC_4e45_90: 	dc.w DPLC_4e45_2AA-DPLC_4e45
00021BF8 0000                       DPLC_4e45_92: 	dc.w DPLC_4e45_2B1-DPLC_4e45
00021BFA 0000                       DPLC_4e45_94: 	dc.w DPLC_4e45_2B6-DPLC_4e45
00021BFC 0000                       DPLC_4e45_96: 	dc.w DPLC_4e45_2BD-DPLC_4e45
00021BFE 0000                       DPLC_4e45_98: 	dc.w DPLC_4e45_2C4-DPLC_4e45
00021C00 0000                       DPLC_4e45_9A: 	dc.w DPLC_4e45_2CF-DPLC_4e45
00021C02 0000                       DPLC_4e45_9C: 	dc.w DPLC_4e45_2DA-DPLC_4e45
00021C04 0000                       DPLC_4e45_9E: 	dc.w DPLC_4e45_2DF-DPLC_4e45
00021C06 0000                       DPLC_4e45_A0: 	dc.w DPLC_4e45_2E6-DPLC_4e45
00021C08 0000                       DPLC_4e45_A2: 	dc.w DPLC_4e45_2E9-DPLC_4e45
00021C0A 0000                       DPLC_4e45_A4: 	dc.w DPLC_4e45_2EC-DPLC_4e45
00021C0C 0000                       DPLC_4e45_A6: 	dc.w DPLC_4e45_2EF-DPLC_4e45
00021C0E 0000                       DPLC_4e45_A8: 	dc.w DPLC_4e45_2F6-DPLC_4e45
00021C10 0000                       DPLC_4e45_AA: 	dc.w DPLC_4e45_2FD-DPLC_4e45
00021C12 0000                       DPLC_4e45_AC: 	dc.w DPLC_4e45_304-DPLC_4e45
00021C14 0000                       DPLC_4e45_AE: 	dc.w DPLC_4e45_30B-DPLC_4e45
00021C16 0000                       DPLC_4e45_B0: 	dc.w DPLC_4e45_310-DPLC_4e45
00021C18 0000                       DPLC_4e45_B2: 	dc.w DPLC_4e45_313-DPLC_4e45
00021C1A 0000                       DPLC_4e45_B4: 	dc.w DPLC_4e45_316-DPLC_4e45
00021C1C 0000                       DPLC_4e45_B6: 	dc.w DPLC_4e45_319-DPLC_4e45
00021C1E 0000                       DPLC_4e45_B8: 	dc.w DPLC_4e45_31C-DPLC_4e45
00021C20 0000                       DPLC_4e45_BA: 	dc.w DPLC_4e45_31F-DPLC_4e45
00021C22 00                         DPLC_4e45_BC: 	dc.b $0
00021C23 02                         DPLC_4e45_BD: 	dc.b $2
00021C24 F000                       	dc.b $F0, $0
00021C26 3010                       	dc.b $30, $10
00021C28 03                         DPLC_4e45_C2: 	dc.b $3
00021C29 5014                       	dc.b $50, $14
00021C2B 501A                       	dc.b $50, $1A
00021C2D 2020                       	dc.b $20, $20
00021C2F 03                         DPLC_4e45_C9: 	dc.b $3
00021C30 5023                       	dc.b $50, $23
00021C32 501A                       	dc.b $50, $1A
00021C34 2020                       	dc.b $20, $20
00021C36 03                         DPLC_4e45_D0: 	dc.b $3
00021C37 5023                       	dc.b $50, $23
00021C39 501A                       	dc.b $50, $1A
00021C3B 2029                       	dc.b $20, $29
00021C3D 02                         DPLC_4e45_D7: 	dc.b $2
00021C3E F02C                       	dc.b $F0, $2C
00021C40 303C                       	dc.b $30, $3C
00021C42 04                         DPLC_4e45_DC: 	dc.b $4
00021C43 7040                       	dc.b $70, $40
00021C45 5048                       	dc.b $50, $48
00021C47 504E                       	dc.b $50, $4E
00021C49 1054                       	dc.b $10, $54
00021C4B 02                         DPLC_4e45_E5: 	dc.b $2
00021C4C 7040                       	dc.b $70, $40
00021C4E B056                       	dc.b $B0, $56
00021C50 02                         DPLC_4e45_EA: 	dc.b $2
00021C51 5062                       	dc.b $50, $62
00021C53 8068                       	dc.b $80, $68
00021C55 04                         DPLC_4e45_EF: 	dc.b $4
00021C56 5062                       	dc.b $50, $62
00021C58 5071                       	dc.b $50, $71
00021C5A 5077                       	dc.b $50, $77
00021C5C 107D                       	dc.b $10, $7D
00021C5E 02                         DPLC_4e45_F8: 	dc.b $2
00021C5F 5062                       	dc.b $50, $62
00021C61 B07F                       	dc.b $B0, $7F
00021C63 03                         DPLC_4e45_FD: 	dc.b $3
00021C64 7040                       	dc.b $70, $40
00021C66 308B                       	dc.b $30, $8B
00021C68 508F                       	dc.b $50, $8F
00021C6A 05                         DPLC_4e45_104: 	dc.b $5
00021C6B 5095                       	dc.b $50, $95
00021C6D 509B                       	dc.b $50, $9B
00021C6F 20A1                       	dc.b $20, $A1
00021C71 50A4                       	dc.b $50, $A4
00021C73 00AA                       	dc.b $0, $AA
00021C75 06                         DPLC_4e45_10F: 	dc.b $6
00021C76 5095                       	dc.b $50, $95
00021C78 10AB                       	dc.b $10, $AB
00021C7A 30AD                       	dc.b $30, $AD
00021C7C 50B1                       	dc.b $50, $B1
00021C7E 30B7                       	dc.b $30, $B7
00021C80 00BB                       	dc.b $0, $BB
00021C82 04                         DPLC_4e45_11C: 	dc.b $4
00021C83 50BC                       	dc.b $50, $BC
00021C85 10C2                       	dc.b $10, $C2
00021C87 70C4                       	dc.b $70, $C4
00021C89 20CC                       	dc.b $20, $CC
00021C8B 05                         DPLC_4e45_125: 	dc.b $5
00021C8C 50CF                       	dc.b $50, $CF
00021C8E 30D5                       	dc.b $30, $D5
00021C90 70D9                       	dc.b $70, $D9
00021C92 20E1                       	dc.b $20, $E1
00021C94 10E4                       	dc.b $10, $E4
00021C96 04                         DPLC_4e45_130: 	dc.b $4
00021C97 50CF                       	dc.b $50, $CF
00021C99 10E6                       	dc.b $10, $E6
00021C9B 70E8                       	dc.b $70, $E8
00021C9D 20F0                       	dc.b $20, $F0
00021C9F 05                         DPLC_4e45_139: 	dc.b $5
00021CA0 5095                       	dc.b $50, $95
00021CA2 10AB                       	dc.b $10, $AB
00021CA4 00A1                       	dc.b $0, $A1
00021CA6 70F3                       	dc.b $70, $F3
00021CA8 20FB                       	dc.b $20, $FB
00021CAA 04                         DPLC_4e45_144: 	dc.b $4
00021CAB 70FE                       	dc.b $70, $FE
00021CAD 5106                       	dc.b $51, $6
00021CAF 110C                       	dc.b $11, $C
00021CB1 510E                       	dc.b $51, $E
00021CB3 02                         DPLC_4e45_14D: 	dc.b $2
00021CB4 70FE                       	dc.b $70, $FE
00021CB6 B114                       	dc.b $B1, $14
00021CB8 02                         DPLC_4e45_152: 	dc.b $2
00021CB9 5120                       	dc.b $51, $20
00021CBB 8126                       	dc.b $81, $26
00021CBD 04                         DPLC_4e45_157: 	dc.b $4
00021CBE 5120                       	dc.b $51, $20
00021CC0 512F                       	dc.b $51, $2F
00021CC2 1135                       	dc.b $11, $35
00021CC4 5137                       	dc.b $51, $37
00021CC6 02                         DPLC_4e45_160: 	dc.b $2
00021CC7 5120                       	dc.b $51, $20
00021CC9 B13D                       	dc.b $B1, $3D
00021CCB 03                         DPLC_4e45_165: 	dc.b $3
00021CCC 70FE                       	dc.b $70, $FE
00021CCE 0114                       	dc.b $1, $14
00021CD0 8149                       	dc.b $81, $49
00021CD2 06                         DPLC_4e45_16C: 	dc.b $6
00021CD3 5152                       	dc.b $51, $52
00021CD5 1158                       	dc.b $11, $58
00021CD7 115A                       	dc.b $11, $5A
00021CD9 815C                       	dc.b $81, $5C
00021CDB 0165                       	dc.b $1, $65
00021CDD 0166                       	dc.b $1, $66
00021CDF 06                         DPLC_4e45_179: 	dc.b $6
00021CE0 5152                       	dc.b $51, $52
00021CE2 2167                       	dc.b $21, $67
00021CE4 116A                       	dc.b $11, $6A
00021CE6 116C                       	dc.b $11, $6C
00021CE8 816E                       	dc.b $81, $6E
00021CEA 0165                       	dc.b $1, $65
00021CEC 04                         DPLC_4e45_186: 	dc.b $4
00021CED 5177                       	dc.b $51, $77
00021CEF 117D                       	dc.b $11, $7D
00021CF1 817F                       	dc.b $81, $7F
00021CF3 1188                       	dc.b $11, $88
00021CF5 05                         DPLC_4e45_18F: 	dc.b $5
00021CF6 518A                       	dc.b $51, $8A
00021CF8 2190                       	dc.b $21, $90
00021CFA 1193                       	dc.b $11, $93
00021CFC 7195                       	dc.b $71, $95
00021CFE 219D                       	dc.b $21, $9D
00021D00 04                         DPLC_4e45_19A: 	dc.b $4
00021D01 518A                       	dc.b $51, $8A
00021D03 11A0                       	dc.b $11, $A0
00021D05 81A2                       	dc.b $81, $A2
00021D07 11AB                       	dc.b $11, $AB
00021D09 05                         DPLC_4e45_1A3: 	dc.b $5
00021D0A 5152                       	dc.b $51, $52
00021D0C 81AD                       	dc.b $81, $AD
00021D0E 116C                       	dc.b $11, $6C
00021D10 11B6                       	dc.b $11, $B6
00021D12 0165                       	dc.b $1, $65
00021D14 02                         DPLC_4e45_1AE: 	dc.b $2
00021D15 F1B8                       	dc.b $F1, $B8
00021D17 11C8                       	dc.b $11, $C8
00021D19 02                         DPLC_4e45_1B3: 	dc.b $2
00021D1A F1CA                       	dc.b $F1, $CA
00021D1C 11DA                       	dc.b $11, $DA
00021D1E 02                         DPLC_4e45_1B8: 	dc.b $2
00021D1F F1DC                       	dc.b $F1, $DC
00021D21 11EC                       	dc.b $11, $EC
00021D23 02                         DPLC_4e45_1BD: 	dc.b $2
00021D24 F1EE                       	dc.b $F1, $EE
00021D26 11FE                       	dc.b $11, $FE
00021D28 04                         DPLC_4e45_1C2: 	dc.b $4
00021D29 5200                       	dc.b $52, $0
00021D2B 1206                       	dc.b $12, $6
00021D2D B208                       	dc.b $B2, $8
00021D2F 0214                       	dc.b $2, $14
00021D31 03                         DPLC_4e45_1CB: 	dc.b $3
00021D32 5215                       	dc.b $52, $15
00021D34 121B                       	dc.b $12, $1B
00021D36 B21D                       	dc.b $B2, $1D
00021D38 04                         DPLC_4e45_1D2: 	dc.b $4
00021D39 5200                       	dc.b $52, $0
00021D3B 1229                       	dc.b $12, $29
00021D3D B22B                       	dc.b $B2, $2B
00021D3F 0214                       	dc.b $2, $14
00021D41 03                         DPLC_4e45_1DB: 	dc.b $3
00021D42 5215                       	dc.b $52, $15
00021D44 121B                       	dc.b $12, $1B
00021D46 B237                       	dc.b $B2, $37
00021D48 02                         DPLC_4e45_1E2: 	dc.b $2
00021D49 5243                       	dc.b $52, $43
00021D4B B249                       	dc.b $B2, $49
00021D4D 02                         DPLC_4e45_1E7: 	dc.b $2
00021D4E 5120                       	dc.b $51, $20
00021D50 B255                       	dc.b $B2, $55
00021D52 02                         DPLC_4e45_1EC: 	dc.b $2
00021D53 5243                       	dc.b $52, $43
00021D55 B261                       	dc.b $B2, $61
00021D57 02                         DPLC_4e45_1F1: 	dc.b $2
00021D58 5120                       	dc.b $51, $20
00021D5A B26D                       	dc.b $B2, $6D
00021D5C 04                         DPLC_4e45_1F6: 	dc.b $4
00021D5D 5279                       	dc.b $52, $79
00021D5F 127F                       	dc.b $12, $7F
00021D61 B281                       	dc.b $B2, $81
00021D63 028D                       	dc.b $2, $8D
00021D65 02                         DPLC_4e45_1FF: 	dc.b $2
00021D66 728E                       	dc.b $72, $8E
00021D68 B296                       	dc.b $B2, $96
00021D6A 04                         DPLC_4e45_204: 	dc.b $4
00021D6B 5279                       	dc.b $52, $79
00021D6D 12A2                       	dc.b $12, $A2
00021D6F B2A4                       	dc.b $B2, $A4
00021D71 028D                       	dc.b $2, $8D
00021D73 02                         DPLC_4e45_20D: 	dc.b $2
00021D74 728E                       	dc.b $72, $8E
00021D76 B2B0                       	dc.b $B2, $B0
00021D78 01                         DPLC_4e45_212: 	dc.b $1
00021D79 F2BC                       	dc.b $F2, $BC
00021D7B 01                         DPLC_4e45_215: 	dc.b $1
00021D7C F2CC                       	dc.b $F2, $CC
00021D7E 01                         DPLC_4e45_218: 	dc.b $1
00021D7F F2DC                       	dc.b $F2, $DC
00021D81 01                         DPLC_4e45_21B: 	dc.b $1
00021D82 F2EC                       	dc.b $F2, $EC
00021D84 01                         DPLC_4e45_21E: 	dc.b $1
00021D85 F2FC                       	dc.b $F2, $FC
00021D87 02                         DPLC_4e45_221: 	dc.b $2
00021D88 B30C                       	dc.b $B3, $C
00021D8A 2318                       	dc.b $23, $18
00021D8C 01                         DPLC_4e45_226: 	dc.b $1
00021D8D F31B                       	dc.b $F3, $1B
00021D8F 02                         DPLC_4e45_229: 	dc.b $2
00021D90 B32B                       	dc.b $B3, $2B
00021D92 2337                       	dc.b $23, $37
00021D94 01                         DPLC_4e45_22E: 	dc.b $1
00021D95 F33A                       	dc.b $F3, $3A
00021D97 02                         DPLC_4e45_231: 	dc.b $2
00021D98 534A                       	dc.b $53, $4A
00021D9A B350                       	dc.b $B3, $50
00021D9C 04                         DPLC_4e45_236: 	dc.b $4
00021D9D 535C                       	dc.b $53, $5C
00021D9F 7362                       	dc.b $73, $62
00021DA1 136A                       	dc.b $13, $6A
00021DA3 036C                       	dc.b $3, $6C
00021DA5 04                         DPLC_4e45_23F: 	dc.b $4
00021DA6 136D                       	dc.b $13, $6D
00021DA8 736F                       	dc.b $73, $6F
00021DAA 2377                       	dc.b $23, $77
00021DAC 037A                       	dc.b $3, $7A
00021DAE 03                         DPLC_4e45_248: 	dc.b $3
00021DAF 237B                       	dc.b $23, $7B
00021DB1 237E                       	dc.b $23, $7E
00021DB3 F381                       	dc.b $F3, $81
00021DB5 03                         DPLC_4e45_24F: 	dc.b $3
00021DB6 B391                       	dc.b $B3, $91
00021DB8 739D                       	dc.b $73, $9D
00021DBA 007F                       	dc.b $0, $7F
00021DBC 03                         DPLC_4e45_256: 	dc.b $3
00021DBD 73A5                       	dc.b $73, $A5
00021DBF 33AD                       	dc.b $33, $AD
00021DC1 23B1                       	dc.b $23, $B1
00021DC3 01                         DPLC_4e45_25D: 	dc.b $1
00021DC4 83B4                       	dc.b $83, $B4
00021DC6 03                         DPLC_4e45_260: 	dc.b $3
00021DC7 73BD                       	dc.b $73, $BD
00021DC9 03C5                       	dc.b $3, $C5
00021DCB 33C6                       	dc.b $33, $C6
00021DCD 03                         DPLC_4e45_267: 	dc.b $3
00021DCE 73CA                       	dc.b $73, $CA
00021DD0 33D2                       	dc.b $33, $D2
00021DD2 23D6                       	dc.b $23, $D6
00021DD4 01                         DPLC_4e45_26E: 	dc.b $1
00021DD5 F3D9                       	dc.b $F3, $D9
00021DD7 04                         DPLC_4e45_271: 	dc.b $4
00021DD8 B3E9                       	dc.b $B3, $E9
00021DDA 33F5                       	dc.b $33, $F5
00021DDC 03F9                       	dc.b $3, $F9
00021DDE 03FA                       	dc.b $3, $FA
00021DE0 04                         DPLC_4e45_27A: 	dc.b $4
00021DE1 B3FB                       	dc.b $B3, $FB
00021DE3 3407                       	dc.b $34, $7
00021DE5 040B                       	dc.b $4, $B
00021DE7 040C                       	dc.b $4, $C
00021DE9 05                         DPLC_4e45_283: 	dc.b $5
00021DEA 840D                       	dc.b $84, $D
00021DEC 1416                       	dc.b $14, $16
00021DEE 5418                       	dc.b $54, $18
00021DF0 141E                       	dc.b $14, $1E
00021DF2 0420                       	dc.b $4, $20
00021DF4 05                         DPLC_4e45_28E: 	dc.b $5
00021DF5 8421                       	dc.b $84, $21
00021DF7 142A                       	dc.b $14, $2A
00021DF9 5418                       	dc.b $54, $18
00021DFB 141E                       	dc.b $14, $1E
00021DFD 0420                       	dc.b $4, $20
00021DFF 02                         DPLC_4e45_299: 	dc.b $2
00021E00 842C                       	dc.b $84, $2C
00021E02 7435                       	dc.b $74, $35
00021E04 03                         DPLC_4e45_29E: 	dc.b $3
00021E05 843D                       	dc.b $84, $3D
00021E07 2446                       	dc.b $24, $46
00021E09 1449                       	dc.b $14, $49
00021E0B 02                         DPLC_4e45_2A5: 	dc.b $2
00021E0C 844B                       	dc.b $84, $4B
00021E0E 7454                       	dc.b $74, $54
00021E10 03                         DPLC_4e45_2AA: 	dc.b $3
00021E11 843D                       	dc.b $84, $3D
00021E13 245C                       	dc.b $24, $5C
00021E15 145F                       	dc.b $14, $5F
00021E17 02                         DPLC_4e45_2B1: 	dc.b $2
00021E18 5461                       	dc.b $54, $61
00021E1A B467                       	dc.b $B4, $67
00021E1C 03                         DPLC_4e45_2B6: 	dc.b $3
00021E1D 8473                       	dc.b $84, $73
00021E1F 347C                       	dc.b $34, $7C
00021E21 0480                       	dc.b $4, $80
00021E23 03                         DPLC_4e45_2BD: 	dc.b $3
00021E24 7481                       	dc.b $74, $81
00021E26 1489                       	dc.b $14, $89
00021E28 B48B                       	dc.b $B4, $8B
00021E2A 05                         DPLC_4e45_2C4: 	dc.b $5
00021E2B 7497                       	dc.b $74, $97
00021E2D 149F                       	dc.b $14, $9F
00021E2F 54A1                       	dc.b $54, $A1
00021E31 34A7                       	dc.b $34, $A7
00021E33 04AB                       	dc.b $4, $AB
00021E35 05                         DPLC_4e45_2CF: 	dc.b $5
00021E36 74AC                       	dc.b $74, $AC
00021E38 149F                       	dc.b $14, $9F
00021E3A 54B4                       	dc.b $54, $B4
00021E3C 34A7                       	dc.b $34, $A7
00021E3E 04AB                       	dc.b $4, $AB
00021E40 02                         DPLC_4e45_2DA: 	dc.b $2
00021E41 24BA                       	dc.b $24, $BA
00021E43 F4BD                       	dc.b $F4, $BD
00021E45 03                         DPLC_4e45_2DF: 	dc.b $3
00021E46 24CD                       	dc.b $24, $CD
00021E48 B4D0                       	dc.b $B4, $D0
00021E4A 24DC                       	dc.b $24, $DC
00021E4C 01                         DPLC_4e45_2E6: 	dc.b $1
00021E4D B4DF                       	dc.b $B4, $DF
00021E4F 01                         DPLC_4e45_2E9: 	dc.b $1
00021E50 54EB                       	dc.b $54, $EB
00021E52 01                         DPLC_4e45_2EC: 	dc.b $1
00021E53 14F1                       	dc.b $14, $F1
00021E55 03                         DPLC_4e45_2EF: 	dc.b $3
00021E56 73A5                       	dc.b $73, $A5
00021E58 33AD                       	dc.b $33, $AD
00021E5A 23B1                       	dc.b $23, $B1
00021E5C 03                         DPLC_4e45_2F6: 	dc.b $3
00021E5D 73BD                       	dc.b $73, $BD
00021E5F 03C5                       	dc.b $3, $C5
00021E61 33C6                       	dc.b $33, $C6
00021E63 03                         DPLC_4e45_2FD: 	dc.b $3
00021E64 B4F3                       	dc.b $B4, $F3
00021E66 14FF                       	dc.b $14, $FF
00021E68 3501                       	dc.b $35, $1
00021E6A 03                         DPLC_4e45_304: 	dc.b $3
00021E6B 5505                       	dc.b $55, $5
00021E6D B50B                       	dc.b $B5, $B
00021E6F 107B                       	dc.b $10, $7B
00021E71 02                         DPLC_4e45_30B: 	dc.b $2
00021E72 F517                       	dc.b $F5, $17
00021E74 2527                       	dc.b $25, $27
00021E76 01                         DPLC_4e45_310: 	dc.b $1
00021E77 E52A                       	dc.b $E5, $2A
00021E79 01                         DPLC_4e45_313: 	dc.b $1
00021E7A E539                       	dc.b $E5, $39
00021E7C 01                         DPLC_4e45_316: 	dc.b $1
00021E7D E548                       	dc.b $E5, $48
00021E7F 01                         DPLC_4e45_319: 	dc.b $1
00021E80 E557                       	dc.b $E5, $57
00021E82 01                         DPLC_4e45_31C: 	dc.b $1
00021E83 E566                       	dc.b $E5, $66
00021E85 01                         DPLC_4e45_31F: 	dc.b $1
00021E86 E575                       	dc.b $E5, $75
00021E88                            	even
00021E88                            	even
00021E88                            
00021E88                            ; ---------------------------------------------------------------------------
00021E88                            ; Uncompressed graphics	- Sonic
00021E88                            ; ---------------------------------------------------------------------------
00021E88                            ; Vladikcomper: Spin Dash tiles were splited from Sonic art for not losing 
00021E88                            ;               them if Sonic's art is overwrited by art from a clear ROM.
00021E88                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002CF08                                            incbin  artunc\spindash.bin     ; Spin Dash Tiles
0002DBE8                            		even
0002DBE8                            ; ---------------------------------------------------------------------------
0002DBE8                            ; Compressed graphics - various
0002DBE8                            ; ---------------------------------------------------------------------------
0002DBE8                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002DCEC                            		even
0002DCEC                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002DD26                            		even
0002DD26                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002DEBC                            		even
0002DEBC                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002E004                            		even
0002E004                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002E10E                            		even
0002E10E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002E160                            		even
0002E160                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002E3A8                            		even
0002E3A8                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002E52E                            		even
0002E52E                            ; ---------------------------------------------------------------------------
0002E52E                            ; Sprite mappings - walls of the special stage
0002E52E                            ; ---------------------------------------------------------------------------
0002E52E                            Map_SSWalls:
0002E52E                            	include "_maps\SSwalls.asm"
0002E52E                            ; ---------------------------------------------------------------------------
0002E52E                            ; Sprite mappings - walls of the special stage
0002E52E                            ; ---------------------------------------------------------------------------
0002E52E 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002E532 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002E536 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002E53A 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002E53E 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002E542 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002E546 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002E54A 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002E54E 01                         byte_2C584:	dc.b 1
0002E54F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002E554 01                         byte_2C58A:	dc.b 1
0002E555 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002E55A 01                         byte_2C590:	dc.b 1
0002E55B F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002E560 01                         byte_2C596:	dc.b 1
0002E561 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002E566 01                         byte_2C59C:	dc.b 1
0002E567 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002E56C 01                         byte_2C5A2:	dc.b 1
0002E56D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002E572 01                         byte_2C5A8:	dc.b 1
0002E573 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002E578 01                         byte_2C5AE:	dc.b 1
0002E579 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002E57E 01                         byte_2C5B4:	dc.b 1
0002E57F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002E584 01                         byte_2C5BA:	dc.b 1
0002E585 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002E58A 01                         byte_2C5C0:	dc.b 1
0002E58B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002E590 01                         byte_2C5C6:	dc.b 1
0002E591 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002E596 01                         byte_2C5CC:	dc.b 1
0002E597 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002E59C 01                         byte_2C5D2:	dc.b 1
0002E59D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002E5A2 01                         byte_2C5D8:	dc.b 1
0002E5A3 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002E5A8 01                         byte_2C5DE:	dc.b 1
0002E5A9 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002E5AE                            		even
0002E5AE                            		even
0002E5AE                            ; ---------------------------------------------------------------------------
0002E5AE                            ; Compressed graphics - special stage
0002E5AE                            ; ---------------------------------------------------------------------------
0002E5AE                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002EEE6                            		even
0002EEE6                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002F01A                            		even
0002F01A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002FCAA                            		even
0002FCAA                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002FFAA                            		even
0002FFAA                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003049E                            		even
0003049E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003058C                            		even
0003058C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003065C                            		even
0003065C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00030752                            		even
00030752                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000307B0                            		even
000307B0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00030842                            		even
00030842                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00030904                            		even
00030904                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000309D2                            		even
000309D2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00030A9E                            		even
00030A9E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00030B66                            		even
00030B66                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00030C30                            		even
00030C30                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00030D00                            		even
00030D00                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00030EF4                            		even
00030EF4                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003105C                            		even
0003105C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003110C                            		even
0003110C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000311E6                            		even
000311E6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003126A                            		even
0003126A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000313E8                            		even
000313E8                            ; ---------------------------------------------------------------------------
000313E8                            ; Compressed graphics - GHZ stuff
000313E8                            ; ---------------------------------------------------------------------------
000313E8                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00031432                            		even
00031432                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003154C                            		even
0003154C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00031638                            		even
00031638                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00031680                            		even
00031680                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003181E                            		even
0003181E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003189A                            		even
0003189A                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00031AAE                            		even
00031AAE                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00031BDA                            		even
00031BDA                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00031D08                            		even
00031D08                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00031DA6                            		even
00031DA6                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00031E06                            		even
00031E06                            ; ---------------------------------------------------------------------------
00031E06                            ; Compressed graphics - LZ stuff
00031E06                            ; ---------------------------------------------------------------------------
00031E06                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00031F2A                            		even
00031F2A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003271E                            		even
0003271E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003289E                            		even
0003289E                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00032A08                            		even
00032A08                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003305E                            		even
0003305E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00033114                            		even
00033114                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000331B6                            		even
000331B6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00033312                            		even
00033312                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00033376                            		even
00033376                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000334C8                            		even
000334C8                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000339AA                            		even
000339AA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00033B1A                            		even
00033B1A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00033DD2                            		even
00033DD2                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00033F0A                            		even
00033F0A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00034034                            		even
00034034                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00034144                            		even
00034144                            ; ---------------------------------------------------------------------------
00034144                            ; Compressed graphics - MZ stuff
00034144                            ; ---------------------------------------------------------------------------
00034144                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000343D2                            		even
000343D2                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00034490                            		even
00034490                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00034548                            		even
00034548                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003459C                            		even
0003459C                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003487A                            		even
0003487A                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00035190                            		even
00035190                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000352F4                            		even
000352F4                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003537C                            		even
0003537C                            ; ---------------------------------------------------------------------------
0003537C                            ; Compressed graphics - SLZ stuff
0003537C                            ; ---------------------------------------------------------------------------
0003537C                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000355B8                            		even
000355B8                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000356FE                            		even
000356FE                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00035942                            		even
00035942                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000359A4                            		even
000359A4                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00035A86                            		even
00035A86                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00035C68                            		even
00035C68                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00035D74                            		even
00035D74                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00035E18                            		even
00035E18                            ; ---------------------------------------------------------------------------
00035E18                            ; Compressed graphics - SYZ stuff
00035E18                            ; ---------------------------------------------------------------------------
00035E18                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00035F82                            		even
00035F82                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00035FE4                            		even
00035FE4                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000360C6                            		even
000360C6                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00036354                            		even
00036354                            ; ---------------------------------------------------------------------------
00036354                            ; Compressed graphics - SBZ stuff
00036354                            ; ---------------------------------------------------------------------------
00036354                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000363A8                            		even
000363A8                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00036644                            		even
00036644                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00036848                            		even
00036848                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000369E6                            		even
000369E6                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00036D16                            		even
00036D16                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00036EF4                            		even
00036EF4                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00036F4C                            		even
00036F4C                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000370CC                            		even
000370CC                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000371CA                            		even
000371CA                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00037356                            		even
00037356                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000373A6                            		even
000373A6                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000373FE                            		even
000373FE                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000374FA                            		even
000374FA                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00037610                            		even
00037610                            ; ---------------------------------------------------------------------------
00037610                            ; Compressed graphics - enemies
00037610                            ; ---------------------------------------------------------------------------
00037610                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000379D0                            		even
000379D0                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00037EBE                            		even
00037EBE                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00038264                            		even
00038264                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003844C                            		even
0003844C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00038B36                            		even
00038B36                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00038D9E                            		even
00038D9E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039028                            		even
00039028                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003954C                            		even
0003954C                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000397D6                            		even
000397D6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00039DF4                            		even
00039DF4                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003A1DC                            		even
0003A1DC                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003A4D8                            		even
0003A4D8                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003A720                            		even
0003A720                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003A9B8                            		even
0003A9B8                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003AB96                            		even
0003AB96                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003AD24                            		even
0003AD24                            ; ---------------------------------------------------------------------------
0003AD24                            ; Compressed graphics - various
0003AD24                            ; ---------------------------------------------------------------------------
0003AD24                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003B332                            		even
0003B332                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003B464                            		even
0003B464                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003B55C                            		even
0003B55C                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003B650                            		even
0003B650                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003BAB0                            		even
0003BAB0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003C116                            		even
0003C116                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003C1C6                            		even
0003C1C6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003C358                            		even
0003C358                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003C45A                            		even
0003C45A                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003C536                            		even
0003C536                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003C9B2                            		even
0003C9B2                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003CA72                            		even
0003CA72                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003CBE6                            		even
0003CBE6                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003CEE8                            		even
0003CEE8                            ; ---------------------------------------------------------------------------
0003CEE8                            ; Compressed graphics - continue screen
0003CEE8                            ; ---------------------------------------------------------------------------
0003CEE8                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003D198                            		even
0003D198                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003D3D2                            		even
0003D3D2                            ; ---------------------------------------------------------------------------
0003D3D2                            ; Compressed graphics - animals
0003D3D2                            ; ---------------------------------------------------------------------------
0003D3D2                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003D52A                            		even
0003D52A                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003D686                            		even
0003D686                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003D802                            		even
0003D802                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003D91E                            		even
0003D91E                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003DA54                            		even
0003DA54                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003DB8E                            		even
0003DB8E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003DCEA                            		even
0003DCEA                            ; ---------------------------------------------------------------------------
0003DCEA                            ; Compressed graphics - primary patterns and block mappings
0003DCEA                            ; ---------------------------------------------------------------------------
0003DCEA                            Blk16_GHZ:	incbin	map16\ghz.bin
0003E600                            		even
0003E600                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003FC12                            		even
0003FC12                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00040FA6                            		even
00040FA6                            Blk256_GHZ:	incbin	map256\ghz.bin
00043414                            		even
00043414                            Blk16_LZ:	incbin	map16\lz.bin
0004373E                            		even
0004373E                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00045286                            		even
00045286                            Blk256_LZ:	incbin	map256\lz.bin
00047A76                            		even
00047A76                            Blk16_MZ:	incbin	map16\mz.bin
000481EC                            		even
000481EC                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004A940                            		even
0004A940                            Blk256_MZ:	incbin	map256\mz.bin
0004C0BE                            		even
0004C0BE                            Blk16_SLZ:	incbin	map16\slz.bin
0004C8A2                            		even
0004C8A2                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000503F6                            		even
000503F6                            Blk256_SLZ:	incbin	map256\slz.bin
00052826                            		even
00052826                            Blk16_SYZ:	incbin	map16\syz.bin
00053194                            		even
00053194                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000568C0                            		even
000568C0                            Blk256_SYZ:	incbin	map256\syz.bin
00058C70                            		even
00058C70                            Blk16_SBZ:	incbin	map16\sbz.bin
00059B0A                            		even
00059B0A                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005C2B6                            		even
0005C2B6                            Blk256_SBZ:	incbin	map256\sbz.bin
0005ED06                            		even
0005ED06                            ; ---------------------------------------------------------------------------
0005ED06                            ; Compressed graphics - bosses and ending sequence
0005ED06                            ; ---------------------------------------------------------------------------
0005ED06                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005F56A                            		even
0005F56A                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005F854                            		even
0005F854                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000600D8                            		even
000600D8                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00060904                            		even
00060904                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006106C                            		even
0006106C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000615EC                            		even
000615EC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006170C                            		even
0006170C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006190A                            		even
0006190A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00062AE8                            		even
00062AE8                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006342C                            		even
0006342C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00063802                            		even
00063802                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00063D92                            		even
00063D92                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006401A                            		even
0006401A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00064618                            		even
00064618                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000648A0                            		even
000648A0                            		incbin	misc\padding2.bin
000649A4                            		even
000649A4                            ; ---------------------------------------------------------------------------
000649A4                            ; Collision data
000649A4                            ; ---------------------------------------------------------------------------
000649A4                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00064AA4                            		even
00064AA4                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00065AA4                            		even
00065AA4                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00066AA4                            		even
00066AA4                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00066CB8                            		even
00066CB8                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00066D80                            		even
00066D80                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00066EF4                            		even
00066EF4                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000670E8                            		even
000670E8                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000672DC                            		even
000672DC                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00067534                            		even
00067534                            ; ---------------------------------------------------------------------------
00067534                            ; Special layouts
00067534                            ; ---------------------------------------------------------------------------
00067534                            SS_1:		incbin	sslayout\1.bin
000677AE                            		even
000677AE                            SS_2:		incbin	sslayout\2.bin
00067BC0                            		even
00067BC0                            SS_3:		incbin	sslayout\3.bin
00067F1C                            		even
00067F1C                            SS_4:		incbin	sslayout\4.bin
000683F6                            		even
000683F6                            SS_5:		incbin	sslayout\5.bin
000688C8                            		even
000688C8                            SS_6:		incbin	sslayout\6.bin
00068BD8                            		even
00068BD8                            ; ---------------------------------------------------------------------------
00068BD8                            ; Animated uncompressed graphics
00068BD8                            ; ---------------------------------------------------------------------------
00068BD8                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00068DD8                            		even
00068DD8                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000691D8                            		even
000691D8                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00069658                            		even
00069658                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00069958                            		even
00069958                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00069F58                            		even
00069F58                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006A258                            		even
0006A258                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006ACD8                            		even
0006ACD8                            
0006ACD8                            ; ---------------------------------------------------------------------------
0006ACD8                            ; Level	layout index
0006ACD8                            ; ---------------------------------------------------------------------------
0006ACD8 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006ACDE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006ACE4 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006ACEA 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006ACF0 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006ACF6 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006ACFC 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006AD02 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006AD08 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006AD0E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006AD14 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006AD1A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006AD20 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006AD26 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006AD2C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006AD32 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006AD38 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006AD3E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006AD44 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006AD4A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006AD50 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006AD56 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006AD5C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006AD62 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006AD68 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006AD6E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006AD74 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006AD7A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006AD80                            
0006AD80                            Level_GHZ1:	incbin	levels\ghz1.bin
0006AF02                            		even
0006AF02 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006AF06                            Level_GHZ2:	incbin	levels\ghz2.bin
0006AFCE                            		even
0006AFCE 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006AFD2                            Level_GHZ3:	incbin	levels\ghz3.bin
0006B0F4                            		even
0006B0F4                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006B116                            		even
0006B116 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006B11A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006B11E                            
0006B11E                            Level_LZ1:	incbin	levels\lz1.bin
0006B220                            		even
0006B220                            Level_LZbg:	incbin	levels\lzbg.bin
0006B322                            		even
0006B322 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006B326                            Level_LZ2:	incbin	levels\lz2.bin
0006B3C0                            		even
0006B3C0 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006B3C4                            Level_LZ3:	incbin	levels\lz3.bin
0006B4DE                            		even
0006B4DE 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006B4E2                            Level_SBZ3:	incbin	levels\sbz3.bin
0006B59C                            		even
0006B59C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006B5A0                            
0006B5A0                            Level_MZ1:	incbin	levels\mz1.bin
0006B63E                            		even
0006B63E                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006B6B8                            		even
0006B6B8                            Level_MZ2:	incbin	levels\mz2.bin
0006B75C                            		even
0006B75C                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006B7EE                            		even
0006B7EE 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006B7F2                            Level_MZ3:	incbin	levels\mz3.bin
0006B8D4                            		even
0006B8D4                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006B978                            		even
0006B978 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006B97C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006B980                            
0006B980                            Level_SLZ1:	incbin	levels\slz1.bin
0006BA92                            		even
0006BA92                            Level_SLZbg:	incbin	levels\slzbg.bin
0006BB0C                            		even
0006BB0C                            Level_SLZ2:	incbin	levels\slz2.bin
0006BBFC                            		even
0006BBFC                            Level_SLZ3:	incbin	levels\slz3.bin
0006BD16                            		even
0006BD16 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006BD1A                            
0006BD1A                            Level_SYZ1:	incbin	levels\syz1.bin
0006BDD6                            		even
0006BDD6                            Level_SYZbg:	incbin	levels\syzbg.bin
0006BE10                            		even
0006BE10 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006BE14                            Level_SYZ2:	incbin	levels\syz2.bin
0006BF18                            		even
0006BF18 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006BF1C                            Level_SYZ3:	incbin	levels\syz3.bin
0006C076                            		even
0006C076 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006C07A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006C07E                            
0006C07E                            Level_SBZ1:	incbin	levels\sbz1.bin
0006C1A0                            		even
0006C1A0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006C1DE                            		even
0006C1DE                            Level_SBZ2:	incbin	levels\sbz2.bin
0006C320                            		even
0006C320                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006C48A                            		even
0006C48A 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006C48E 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006C492                            Level_End:	incbin	levels\ending.bin
0006C4C2 00                         		even
0006C4C2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006C4C6                            
0006C4C6                            ; ---------------------------------------------------------------------------
0006C4C6                            ; Animated uncompressed giant ring graphics
0006C4C6                            ; ---------------------------------------------------------------------------
0006C4C6                            Art_BigRing:	incbin	artunc\bigring.bin
0006D106                            		even
0006D106                            
0006D106                            		incbin	misc\padding3.bin
0006D1A2                            		even
0006D1A2                            
0006D1A2                            ; ---------------------------------------------------------------------------
0006D1A2                            ; Sprite locations index
0006D1A2                            ; ---------------------------------------------------------------------------
0006D1A2 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1A6 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1AA 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1AE 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1B2 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1B6 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1BA 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1BE 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1C2 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1C6 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1CA 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1CE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1D2 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1D6 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1DA 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1DE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1E2 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1E6 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1EA 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1EE 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1F2 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1F6 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1FA 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D1FE 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D202 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D206 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D20A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D20E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006D212 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006D216 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006D21A 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006D21E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006D222 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006D226 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006D22A 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006D22E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006D232 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006D238                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006D814                            		even
0006D814                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006DCE2                            		even
0006DCE2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006E39C                            		even
0006E39C                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006E80A                            		even
0006E80A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006EB4C                            		even
0006EB4C                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006F12E                            		even
0006F12E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006F5C6                            		even
0006F5C6                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006F5F8                            		even
0006F5F8                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006F62A                            		even
0006F62A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006F65C                            		even
0006F65C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006F68E                            		even
0006F68E                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006F6D8                            		even
0006F6D8                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006F716                            		even
0006F716                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006FA82                            		even
0006FA82                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006FF2C                            		even
0006FF2C                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000704A2                            		even
000704A2                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000709E2                            		even
000709E2                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00070E4A                            		even
00070E4A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007142C                            		even
0007142C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000718B8                            		even
000718B8                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00071E22                            		even
00071E22                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00072428                            		even
00072428                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00072B66                            		even
00072B66                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00073244                            		even
00073244                            ObjPos_FZ:	incbin	objpos\fz.bin
00073256                            		even
00073256                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00073288                            		even
00073288                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000732BA                            		even
000732BA                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000732EC                            		even
000732EC                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007331E                            		even
0007331E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00073350                            		even
00073350                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00073388                            		even
00073388                            ObjPos_End:	incbin	objpos\ending.bin
000734E4                            		even
000734E4 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000734EA                            ; ---------------------------------------------------------------------------
000734EA                            		incbin	misc\padding4.bin
00073B14                            		even
00073B14                            
00073B14 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00073B18 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00073B1C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00073B20 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00073B24 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00073B28 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00073B2C                            ; ---------------------------------------------------------------------------
00073B2C                            ; PSG instruments used in music
00073B2C                            ; ---------------------------------------------------------------------------
00073B2C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00073B38 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00073B44 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00073B50                            PSG1:		incbin	sound\psg1.bin
00073B67                            PSG2:		incbin	sound\psg2.bin
00073B6E                            PSG3:		incbin	sound\psg3.bin
00073B7F                            PSG4:		incbin	sound\psg4.bin
00073B8A                            PSG6:		incbin	sound\psg6.bin
00073B99                            PSG5:		incbin	sound\psg5.bin
00073BC3                            PSG7:		incbin	sound\psg7.bin
00073BDF                            PSG8:		incbin	sound\psg8.bin
00073C07                            PSG9:		incbin	sound\psg9.bin
00073C18                            
00073C18 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00073C20                            ; ---------------------------------------------------------------------------
00073C20                            ; Music	Pointers
00073C20                            ; ---------------------------------------------------------------------------
00073C20 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00073C28 0000 0000 0000 0000        		dc.l Music83, Music84
00073C30 0000 0000 0000 0000        		dc.l Music85, Music86
00073C38 0000 0000 0000 0000        		dc.l Music87, Music88
00073C40 0000 0000 0000 0000        		dc.l Music89, Music8A
00073C48 0000 0000 0000 0000        		dc.l Music8B, Music8C
00073C50 0000 0000 0000 0000        		dc.l Music8D, Music8E
00073C58 0000 0000 0000 0000        		dc.l Music8F, Music90
00073C60 0000 0000 0000 0000        		dc.l Music91, Music92
00073C68 0000 0000 0000 0000        		dc.l Music93, Music94
00073C70 0000 0000 0000 0000        		dc.l Music95, Music96
00073C78 0000 0000 0000 0000        		dc.l Music97, Music98
00073C80 0000 0000 0000 0000        		dc.l Music99, Music9A
00073C88 0000 0000 0000 0000        		dc.l Music9B, Music9C
00073C90 0000 0000 0000 0000        		dc.l Music9D, Music9E
00073C98 0000 0000                                  dc.l Music9F
00073C9C                            ; ---------------------------------------------------------------------------
00073C9C                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00073C9C                            ; ---------------------------------------------------------------------------
00073C9C 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00073CAC 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00073CBC 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00073CCC 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00073CDC 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00073CEC 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00073CFC 9090 9090                  		dc.b $90, $90, $90, $90
00073D00                            
00073D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073D00                            
00073D00                            
00073D00                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00073D00 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00073D08 4E71                       		nop	
00073D0A 4E71                       		nop	
00073D0C 4E71                       		nop	
00073D0E                            
00073D0E                            loc_71B5A:
00073D0E 0839 0000 00A1 1100        		btst	#0,($A11100).l
00073D16 66F6                       		bne.s	loc_71B5A
00073D18                            
00073D18                            		
00073D18                            ; ===========================================================================
00073D18                            
00073D18                            loc_71B82:
00073D18 4DF9 00FF F000             		lea	($FFF000).l,a6
00073D1E 422E 000E                  		clr.b	$E(a6)
00073D22 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00073D26 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00073D2A 532E 0001                  		subq.b	#1,1(a6)
00073D2E 6600                       		bne.s	loc_71B9E
00073D30 4EBA 0000                  		jsr	sub_7260C(pc)
00073D34                            
00073D34                            loc_71B9E:
00073D34 102E 0004                  		move.b	4(a6),d0
00073D38 6700                       		beq.s	loc_71BA8
00073D3A 4EBA 0000                  		jsr	sub_72504(pc)
00073D3E                            
00073D3E                            loc_71BA8:
00073D3E 4A2E 0024                  		tst.b	$24(a6)
00073D42 6700                       		beq.s	loc_71BB2
00073D44 4EBA 0000                  		jsr	sub_7267C(pc)
00073D48                            
00073D48                            loc_71BB2:
00073D48 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00073D4C 6700                       		beq.s	loc_71BBC	; if not, branch
00073D4E 4EBA 0000                  		jsr	Sound_Play(pc)
00073D52                            
00073D52                            loc_71BBC:
00073D52 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00073D58 6700                       		beq.s	loc_71BC8
00073D5A 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00073D5E                            
00073D5E                            loc_71BC8:
00073D5E 4BEE 0040                  		lea	$40(a6),a5
00073D62 4A15                       		tst.b	(a5)
00073D64 6A00                       		bpl.s	loc_71BD4
00073D66 4EBA 0000                  		jsr	sub_71C4E(pc)
00073D6A                            
00073D6A                            loc_71BD4:
00073D6A 422E 0008                  		clr.b	8(a6)
00073D6E 7E05                       		moveq	#5,d7
00073D70                            
00073D70                            loc_71BDA:
00073D70 DAFC 0030                  		adda.w	#$30,a5
00073D74 4A15                       		tst.b	(a5)
00073D76 6A00                       		bpl.s	loc_71BE6
00073D78 4EBA 0000                  		jsr	sub_71CCA(pc)
00073D7C                            
00073D7C                            loc_71BE6:
00073D7C 51CF FFF2                  		dbf	d7,loc_71BDA
00073D80                            
00073D80 7E02                       		moveq	#2,d7
00073D82                            
00073D82                            loc_71BEC:
00073D82 DAFC 0030                  		adda.w	#$30,a5
00073D86 4A15                       		tst.b	(a5)
00073D88 6A00                       		bpl.s	loc_71BF8
00073D8A 4EBA 0000                  		jsr	sub_72850(pc)
00073D8E                            
00073D8E                            loc_71BF8:
00073D8E 51CF FFF2                  		dbf	d7,loc_71BEC
00073D92                            
00073D92 1D7C 0080 000E             		move.b	#$80,$E(a6)
00073D98 7E02                       		moveq	#2,d7
00073D9A                            
00073D9A                            loc_71C04:
00073D9A DAFC 0030                  		adda.w	#$30,a5
00073D9E 4A15                       		tst.b	(a5)
00073DA0 6A00                       		bpl.s	loc_71C10
00073DA2 4EBA 0000                  		jsr	sub_71CCA(pc)
00073DA6                            
00073DA6                            loc_71C10:
00073DA6 51CF FFF2                  		dbf	d7,loc_71C04
00073DAA                            
00073DAA 7E02                       		moveq	#2,d7
00073DAC                            
00073DAC                            loc_71C16:
00073DAC DAFC 0030                  		adda.w	#$30,a5
00073DB0 4A15                       		tst.b	(a5)
00073DB2 6A00                       		bpl.s	loc_71C22
00073DB4 4EBA 0000                  		jsr	sub_72850(pc)
00073DB8                            
00073DB8                            loc_71C22:
00073DB8 51CF FFF2                  		dbf	d7,loc_71C16
00073DBC 1D7C 0040 000E             		move.b	#$40,$E(a6)
00073DC2 DAFC 0030                  		adda.w	#$30,a5
00073DC6 4A15                       		tst.b	(a5)
00073DC8 6A00                       		bpl.s	loc_71C38
00073DCA 4EBA 0000                  		jsr	sub_71CCA(pc)
00073DCE                            
00073DCE                            loc_71C38:
00073DCE DAFC 0030                  		adda.w	#$30,a5
00073DD2 4A15                       		tst.b	(a5)
00073DD4 6A00                       		bpl.s	loc_71C44
00073DD6 4EBA 0000                  		jsr	sub_72850(pc)
00073DDA                            
00073DDA                            loc_71C44:
00073DDA 1439 00A0 4000                             move.b    ($A04000).l,d2
00073DE0 0802 0007                                  btst    #7,d2
00073DE4 66F4                                       bne.s    loc_71C44
00073DE6 13FC 002A 00A0 4000                        move.b    #$2A,($A04000).l
00073DEE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00073DF6 4E75                       		rts	
00073DF8                            ; End of function sub_71B4C
00073DF8                            
00073DF8                            
00073DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073DF8                            
00073DF8                            
00073DF8                            sub_71C4E:				; XREF: sub_71B4C
00073DF8 532D 000E                  		subq.b	#1,$E(a5)
00073DFC 6600                       		bne.s	locret_71CAA
00073DFE 1D7C 0080 0008             		move.b	#$80,8(a6)
00073E04 286D 0004                  		movea.l	4(a5),a4
00073E08                            
00073E08                            loc_71C5E:
00073E08 7A00                       		moveq	#0,d5
00073E0A 1A1C                       		move.b	(a4)+,d5
00073E0C 0C05 00E0                  		cmpi.b	#-$20,d5
00073E10 6500                       		bcs.s	loc_71C6E
00073E12 4EBA 0000                  		jsr	sub_72A5A(pc)
00073E16 60F0                       		bra.s	loc_71C5E
00073E18                            ; ===========================================================================
00073E18                            
00073E18                            loc_71C6E:
00073E18 4A05                       		tst.b	d5
00073E1A 6A00                       		bpl.s	loc_71C84
00073E1C 1B45 0010                  		move.b	d5,$10(a5)
00073E20 1A1C                       		move.b	(a4)+,d5
00073E22 6A00                       		bpl.s	loc_71C84
00073E24 534C                       		subq.w	#1,a4
00073E26 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00073E2C 6000                       		bra.s	loc_71C88
00073E2E                            ; ===========================================================================
00073E2E                            
00073E2E                            loc_71C84:
00073E2E 4EBA 0000                  		jsr	sub_71D40(pc)
00073E32                            
00073E32                            loc_71C88:
00073E32 2B4C 0004                  		move.l	a4,4(a5)
00073E36 0815 0002                  		btst	#2,(a5)
00073E3A 6600                       		bne.s	locret_71CAA
00073E3C 7000                       		moveq	#0,d0
00073E3E 102D 0010                  		move.b	$10(a5),d0
00073E42 0C00 0080                  		cmpi.b	#$80,d0
00073E46 6700                       		beq.s	locret_71CAA
00073E48 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00073E4E                            
00073E4E                            locret_71CAA:
00073E4E 4E75                       		rts	
00073E50                            ; ===========================================================================
00073E50                            
00073E50                            loc_71CAC:
00073E50 0400 0088                  		subi.b	#$88,d0
00073E54 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00073E58 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00073E5E 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00073E66 4E75                       		rts	
00073E68                            ; End of function sub_71C4E
00073E68                            
00073E68                            ; ===========================================================================
00073E68 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00073E6E                            
00073E6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073E6E                            
00073E6E                            
00073E6E                            sub_71CCA:				; XREF: sub_71B4C
00073E6E 532D 000E                  		subq.b	#1,$E(a5)
00073E72 6600                       		bne.s	loc_71CE0
00073E74 0895 0004                  		bclr	#4,(a5)
00073E78 4EBA 0000                  		jsr	sub_71CEC(pc)
00073E7C 4EBA 0000                  		jsr	sub_71E18(pc)
00073E80 6000 0000                  		bra.w	loc_726E2
00073E84                            ; ===========================================================================
00073E84                            
00073E84                            loc_71CE0:
00073E84 4EBA 0000                  		jsr	sub_71D9E(pc)
00073E88 4EBA 0000                  		jsr	sub_71DC6(pc)
00073E8C 6000 0000                  		bra.w	loc_71E24
00073E90                            ; End of function sub_71CCA
00073E90                            
00073E90                            
00073E90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073E90                            
00073E90                            
00073E90                            sub_71CEC:				; XREF: sub_71CCA
00073E90 286D 0004                  		movea.l	4(a5),a4
00073E94 0895 0001                  		bclr	#1,(a5)
00073E98                            
00073E98                            loc_71CF4:
00073E98 7A00                       		moveq	#0,d5
00073E9A 1A1C                       		move.b	(a4)+,d5
00073E9C 0C05 00E0                  		cmpi.b	#-$20,d5
00073EA0 6500                       		bcs.s	loc_71D04
00073EA2 4EBA 0000                  		jsr	sub_72A5A(pc)
00073EA6 60F0                       		bra.s	loc_71CF4
00073EA8                            ; ===========================================================================
00073EA8                            
00073EA8                            loc_71D04:
00073EA8 4EBA 0000                  		jsr	sub_726FE(pc)
00073EAC 4A05                       		tst.b	d5
00073EAE 6A00                       		bpl.s	loc_71D1A
00073EB0 4EBA 0000                  		jsr	sub_71D22(pc)
00073EB4 1A1C                       		move.b	(a4)+,d5
00073EB6 6A00                       		bpl.s	loc_71D1A
00073EB8 534C                       		subq.w	#1,a4
00073EBA 6000 0000                  		bra.w	sub_71D60
00073EBE                            ; ===========================================================================
00073EBE                            
00073EBE                            loc_71D1A:
00073EBE 4EBA 0000                  		jsr	sub_71D40(pc)
00073EC2 6000 0000                  		bra.w	sub_71D60
00073EC6                            ; End of function sub_71CEC
00073EC6                            
00073EC6                            
00073EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073EC6                            
00073EC6                            
00073EC6                            sub_71D22:				; XREF: sub_71CEC
00073EC6 0405 0080                  		subi.b	#$80,d5
00073ECA 6700                       		beq.s	loc_71D58
00073ECC DA2D 0008                  		add.b	8(a5),d5
00073ED0 0245 007F                  		andi.w	#$7F,d5
00073ED4 E34D                       		lsl.w	#1,d5
00073ED6 41FA 0000                  		lea	word_72790(pc),a0
00073EDA 3C30 5000                  		move.w	(a0,d5.w),d6
00073EDE 3B46 0010                  		move.w	d6,$10(a5)
00073EE2 4E75                       		rts	
00073EE4                            ; End of function sub_71D22
00073EE4                            
00073EE4                            
00073EE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073EE4                            
00073EE4                            
00073EE4                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00073EE4 1005                       		move.b	d5,d0
00073EE6 122D 0002                  		move.b	2(a5),d1
00073EEA                            
00073EEA                            loc_71D46:
00073EEA 5301                       		subq.b	#1,d1
00073EEC 6700                       		beq.s	loc_71D4E
00073EEE D005                       		add.b	d5,d0
00073EF0 60F8                       		bra.s	loc_71D46
00073EF2                            ; ===========================================================================
00073EF2                            
00073EF2                            loc_71D4E:
00073EF2 1B40 000F                  		move.b	d0,$F(a5)
00073EF6 1B40 000E                  		move.b	d0,$E(a5)
00073EFA 4E75                       		rts	
00073EFC                            ; End of function sub_71D40
00073EFC                            
00073EFC                            ; ===========================================================================
00073EFC                            
00073EFC                            loc_71D58:				; XREF: sub_71D22
00073EFC 08D5 0001                  		bset	#1,(a5)
00073F00 426D 0010                  		clr.w	$10(a5)
00073F04                            
00073F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073F04                            
00073F04                            
00073F04                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00073F04 2B4C 0004                  		move.l	a4,4(a5)
00073F08 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00073F0E 0815 0004                  		btst	#4,(a5)
00073F12 6600                       		bne.s	locret_71D9C
00073F14 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00073F1A 422D 000C                  		clr.b	$C(a5)
00073F1E 0815 0003                  		btst	#3,(a5)
00073F22 6700                       		beq.s	locret_71D9C
00073F24 206D 0014                  		movea.l	$14(a5),a0
00073F28 1B58 0018                  		move.b	(a0)+,$18(a5)
00073F2C 1B58 0019                  		move.b	(a0)+,$19(a5)
00073F30 1B58 001A                  		move.b	(a0)+,$1A(a5)
00073F34 1018                       		move.b	(a0)+,d0
00073F36 E208                       		lsr.b	#1,d0
00073F38 1B40 001B                  		move.b	d0,$1B(a5)
00073F3C 426D 001C                  		clr.w	$1C(a5)
00073F40                            
00073F40                            locret_71D9C:
00073F40 4E75                       		rts	
00073F42                            ; End of function sub_71D60
00073F42                            
00073F42                            
00073F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073F42                            
00073F42                            
00073F42                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00073F42 4A2D 0012                  		tst.b	$12(a5)
00073F46 6700                       		beq.s	locret_71DC4
00073F48 532D 0012                  		subq.b	#1,$12(a5)
00073F4C 6600                       		bne.s	locret_71DC4
00073F4E 08D5 0001                  		bset	#1,(a5)
00073F52 4A2D 0001                  		tst.b	1(a5)
00073F56 6B00 0000                  		bmi.w	loc_71DBE
00073F5A 4EBA 0000                  		jsr	sub_726FE(pc)
00073F5E 584F                       		addq.w	#4,sp
00073F60 4E75                       		rts	
00073F62                            ; ===========================================================================
00073F62                            
00073F62                            loc_71DBE:
00073F62 4EBA 0000                  		jsr	sub_729A0(pc)
00073F66 584F                       		addq.w	#4,sp
00073F68                            
00073F68                            locret_71DC4:
00073F68 4E75                       		rts	
00073F6A                            ; End of function sub_71D9E
00073F6A                            
00073F6A                            
00073F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073F6A                            
00073F6A                            
00073F6A                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00073F6A 584F                       		addq.w	#4,sp
00073F6C 0815 0003                  		btst	#3,(a5)
00073F70 6700                       		beq.s	locret_71E16
00073F72 4A2D 0018                  		tst.b	$18(a5)
00073F76 6700                       		beq.s	loc_71DDA
00073F78 532D 0018                  		subq.b	#1,$18(a5)
00073F7C 4E75                       		rts	
00073F7E                            ; ===========================================================================
00073F7E                            
00073F7E                            loc_71DDA:
00073F7E 532D 0019                  		subq.b	#1,$19(a5)
00073F82 6700                       		beq.s	loc_71DE2
00073F84 4E75                       		rts	
00073F86                            ; ===========================================================================
00073F86                            
00073F86                            loc_71DE2:
00073F86 206D 0014                  		movea.l	$14(a5),a0
00073F8A 1B68 0001 0019             		move.b	1(a0),$19(a5)
00073F90 4A2D 001B                  		tst.b	$1B(a5)
00073F94 6600                       		bne.s	loc_71DFE
00073F96 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00073F9C 442D 001A                  		neg.b	$1A(a5)
00073FA0 4E75                       		rts	
00073FA2                            ; ===========================================================================
00073FA2                            
00073FA2                            loc_71DFE:
00073FA2 532D 001B                  		subq.b	#1,$1B(a5)
00073FA6 1C2D 001A                  		move.b	$1A(a5),d6
00073FAA 4886                       		ext.w	d6
00073FAC DC6D 001C                  		add.w	$1C(a5),d6
00073FB0 3B46 001C                  		move.w	d6,$1C(a5)
00073FB4 DC6D 0010                  		add.w	$10(a5),d6
00073FB8 594F                       		subq.w	#4,sp
00073FBA                            
00073FBA                            locret_71E16:
00073FBA 4E75                       		rts	
00073FBC                            ; End of function sub_71DC6
00073FBC                            
00073FBC                            
00073FBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073FBC                            
00073FBC                            
00073FBC                            sub_71E18:				; XREF: sub_71CCA
00073FBC 0815 0001                  		btst	#1,(a5)
00073FC0 6600                       		bne.s	locret_71E48
00073FC2 3C2D 0010                  		move.w	$10(a5),d6
00073FC6 6700                       		beq.s	loc_71E4A
00073FC8                            
00073FC8                            loc_71E24:				; XREF: sub_71CCA
00073FC8 102D 001E                  		move.b	$1E(a5),d0
00073FCC 4880                       		ext.w	d0
00073FCE DC40                       		add.w	d0,d6
00073FD0 0815 0002                  		btst	#2,(a5)
00073FD4 6600                       		bne.s	locret_71E48
00073FD6 3206                       		move.w	d6,d1
00073FD8 E049                       		lsr.w	#8,d1
00073FDA 103C 00A4                  		move.b	#-$5C,d0
00073FDE 4EBA 0000                  		jsr	sub_72722(pc)
00073FE2 1206                       		move.b	d6,d1
00073FE4 103C 00A0                  		move.b	#-$60,d0
00073FE8 4EBA 0000                  		jsr	sub_72722(pc)
00073FEC                            
00073FEC                            locret_71E48:
00073FEC 4E75                       		rts	
00073FEE                            ; ===========================================================================
00073FEE                            
00073FEE                            loc_71E4A:
00073FEE 08D5 0001                  		bset	#1,(a5)
00073FF2 4E75                       		rts	
00073FF4                            ; End of function sub_71E18
00073FF4                            
00073FF4                            ; ===========================================================================
00073FF4                            
00073FF4                            loc_71E50:				; XREF: sub_71B4C
00073FF4 6B00                       		bmi.s	loc_71E94
00073FF6 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00073FFC 6700 0000                  		beq.w	loc_71EFE
00074000 1D7C 0002 0003             		move.b	#2,3(a6)
00074006 7602                       		moveq	#2,d3
00074008 103C 00B4                  		move.b	#-$4C,d0
0007400C 7200                       		moveq	#0,d1
0007400E                            
0007400E                            loc_71E6A:
0007400E 4EBA 0000                  		jsr	sub_7272E(pc)
00074012 4EBA 0000                  		jsr	sub_72764(pc)
00074016 5200                       		addq.b	#1,d0
00074018 51CB FFF4                  		dbf	d3,loc_71E6A
0007401C                            
0007401C 7602                       		moveq	#2,d3
0007401E 7028                       		moveq	#$28,d0
00074020                            
00074020                            loc_71E7C:
00074020 1203                       		move.b	d3,d1
00074022 4EBA 0000                  		jsr	sub_7272E(pc)
00074026 5801                       		addq.b	#4,d1
00074028 4EBA 0000                  		jsr	sub_7272E(pc)
0007402C 51CB FFF2                  		dbf	d3,loc_71E7C
00074030                            
00074030 4EBA 0000                  		jsr	sub_729B6(pc)
00074034 13FC 007F 00A0 1FFF                        move.b    #$7F,($A01FFF).l; pause DAC
0007403C 6000 FD9C                  		bra.w	loc_71C44
00074040                            ; ===========================================================================
00074040                            
00074040                            loc_71E94:				; XREF: loc_71E50
00074040 422E 0003                  		clr.b	3(a6)
00074044 7630                       		moveq	#$30,d3
00074046 4BEE 0040                  		lea	$40(a6),a5
0007404A 7806                       		moveq	#6,d4
0007404C                            
0007404C                            loc_71EA0:
0007404C 0815 0007                  		btst	#7,(a5)
00074050 6700                       		beq.s	loc_71EB8
00074052 0815 0002                  		btst	#2,(a5)
00074056 6600                       		bne.s	loc_71EB8
00074058 103C 00B4                  		move.b	#-$4C,d0
0007405C 122D 000A                  		move.b	$A(a5),d1
00074060 4EBA 0000                  		jsr	sub_72722(pc)
00074064                            
00074064                            loc_71EB8:
00074064 DAC3                       		adda.w	d3,a5
00074066 51CC FFE4                  		dbf	d4,loc_71EA0
0007406A                            
0007406A 4BEE 0220                  		lea	$220(a6),a5
0007406E 7802                       		moveq	#2,d4
00074070                            
00074070                            loc_71EC4:
00074070 0815 0007                  		btst	#7,(a5)
00074074 6700                       		beq.s	loc_71EDC
00074076 0815 0002                  		btst	#2,(a5)
0007407A 6600                       		bne.s	loc_71EDC
0007407C 103C 00B4                  		move.b	#-$4C,d0
00074080 122D 000A                  		move.b	$A(a5),d1
00074084 4EBA 0000                  		jsr	sub_72722(pc)
00074088                            
00074088                            loc_71EDC:
00074088 DAC3                               adda.w    d3,a5
0007408A 51CC FFE4                          dbf    d4,loc_71EC4
0007408E                             
0007408E 4BEE 0340                          lea    $340(a6),a5
00074092 0815 0007                          btst    #7,(a5)
00074096 6700                               beq.s    @UnpauseDAC
00074098 0815 0002                          btst    #2,(a5)
0007409C 6600                               bne.s    @UnpauseDAC
0007409E 103C 00B4                          move.b    #-$4C,d0
000740A2 122D 000A                          move.b    $A(a5),d1
000740A6 4EBA 0000                          jsr    sub_72722(pc)
000740AA                             
000740AA                            @UnpauseDAC:
000740AA 13FC 0000 00A0 1FFF                move.b    #0,($A01FFF).l    ; unpause DAC
000740B2                            loc_71EFE:
000740B2 6000 FD26                  		bra.w	loc_71C44
000740B6                            
000740B6                            ; ---------------------------------------------------------------------------
000740B6                            ; Subroutine to	play a sound or	music track
000740B6                            ; ---------------------------------------------------------------------------
000740B6                            
000740B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000740B6                            
000740B6                            
000740B6                            Sound_Play:				; XREF: sub_71B4C
000740B6 2079 0007 3B14             		movea.l	(Go_SoundTypes).l,a0
000740BC 43EE 000A                  		lea	$A(a6),a1	; load music track number
000740C0 1616                       		move.b	0(a6),d3
000740C2 7802                       		moveq	#2,d4
000740C4                            
000740C4                            loc_71F12:
000740C4 1011                       		move.b	(a1),d0		; move track number to d0
000740C6 1200                       		move.b	d0,d1
000740C8 4219                       		clr.b	(a1)+
000740CA 0400 0081                  		subi.b	#$81,d0
000740CE 6500                       		bcs.s	loc_71F3E
000740D0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000740D6 6700                       		beq.s	loc_71F2C
000740D8 1D41 000A                  		move.b	d1,$A(a6)
000740DC 6000                       		bra.s	loc_71F3E
000740DE                            ; ===========================================================================
000740DE                            
000740DE                            loc_71F2C:
000740DE 0240 007F                  		andi.w	#$7F,d0
000740E2 1430 0000                  		move.b	(a0,d0.w),d2
000740E6 B403                       		cmp.b	d3,d2
000740E8 6500                       		bcs.s	loc_71F3E
000740EA 1602                       		move.b	d2,d3
000740EC 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000740F0                            
000740F0                            loc_71F3E:
000740F0 51CC FFD2                  		dbf	d4,loc_71F12
000740F4                            
000740F4 4A03                       		tst.b	d3
000740F6 6B00                       		bmi.s	locret_71F4A
000740F8 1C83                       		move.b	d3,0(a6)
000740FA                            
000740FA                            locret_71F4A:
000740FA 4E75                       		rts	
000740FC                            ; End of function Sound_Play
000740FC                            
000740FC                            
000740FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000740FC                            
000740FC                            
000740FC                            Sound_ChkValue:				; XREF: sub_71B4C
000740FC 7E00                       		moveq	#0,d7
000740FE 1E2E 0009                  		move.b	9(a6),d7
00074102 6700 0000                  		beq.w	Sound_E4
00074106 6A00                       		bpl.s	locret_71F8C
00074108 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007410E 0C07 009F                  		cmpi.b	#$9F,d7
00074112 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00074116 0C07 00A0                  		cmpi.b	#$A0,d7
0007411A 6500 0000                  		bcs.w	locret_71F8C
0007411E 0C07 00CF                  		cmpi.b	#$CF,d7
00074122 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00074126 0C07 00D0                  		cmpi.b	#$D0,d7
0007412A 6500 0000                  		bcs.w	locret_71F8C
0007412E 0C07 00D1                  		cmpi.b	#$D1,d7         ; changed from #$E0
00074132 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0
00074136 0C07 00DF                  		cmp.b	#$DF,d7             ; own cmp
0007413A 6F00 0000                  		ble	Sound_D1toDF        ; own
0007413E 0C07 00E4                  		cmpi.b	#$E4,d7
00074142 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00074144                            
00074144                            locret_71F8C:
00074144 4E75                       		rts	
00074146                            ; ===========================================================================
00074146                            
00074146                            Sound_E0toE4:				; XREF: Sound_ChkValue
00074146 0407 00E0                  		subi.b	#$E0,d7
0007414A E54F                       		lsl.w	#2,d7
0007414C 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00074150                            ; ===========================================================================
00074150                            
00074150                            Sound_ExIndex:
00074150 6000 0000                  		bra.w	Sound_E0
00074154                            ; ===========================================================================
00074154 6000 0000                  		bra.w	Sound_E1
00074158                            ; ===========================================================================
00074158 6000 0000                  		bra.w	Sound_E2
0007415C                            ; ===========================================================================
0007415C 6000 0000                  		bra.w	Sound_E3
00074160                            ; ===========================================================================
00074160 6000 0000                  		bra.w	Sound_E4
00074164                            ; ===========================================================================
00074164                            ; ---------------------------------------------------------------------------
00074164                            ; Play "Say-gaa" PCM sound
00074164                            ; ---------------------------------------------------------------------------
00074164                            
00074164                            Sound_E1:				  
00074164 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007416A 263C 0000 6978             		move.l	#$6978,d3			; Load the size of the SEGA PCM sample into d3 
00074170 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00074178                            PlayPCM_Loop:	  
00074178 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007417E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00074182 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00074186 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00074188 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007418A 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007418E 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00074194 4EB8 1122                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00074198 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007419E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000741A0 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000741A2                            return_PlayPCM: 
000741A2 584F                       		addq.w	#4,sp 
000741A4 4E75                       		rts
000741A6                            ; ===========================================================================
000741A6                            ; ---------------------------------------------------------------------------
000741A6                            ; Play music track $81-$9F
000741A6                            ; ---------------------------------------------------------------------------
000741A6                            
000741A6                            Sound_81to9F:				; XREF: Sound_ChkValue
000741A6 0C07 009F                  		cmpi.b	#$9F,d7		; is "extra life" music	played?
000741AA 6600                       		bne.s	loc_72024	; if not, branch
000741AC 4A2E 0027                  		tst.b	$27(a6)
000741B0 6600 0000                  		bne.w	loc_721B6
000741B4 4BEE 0040                  		lea	$40(a6),a5
000741B8 7009                       		moveq	#9,d0
000741BA                            
000741BA                            loc_71FE6:
000741BA 0895 0002                  		bclr	#2,(a5)
000741BE DAFC 0030                  		adda.w	#$30,a5
000741C2 51C8 FFF6                  		dbf	d0,loc_71FE6
000741C6                            
000741C6 4BEE 0220                  		lea	$220(a6),a5
000741CA 7005                       		moveq	#5,d0
000741CC                            
000741CC                            loc_71FF8:
000741CC 0895 0007                  		bclr	#7,(a5)
000741D0 DAFC 0030                  		adda.w	#$30,a5
000741D4 51C8 FFF6                  		dbf	d0,loc_71FF8
000741D8 4216                       		clr.b	0(a6)
000741DA 204E                       		movea.l	a6,a0
000741DC 43EE 03A0                  		lea	$3A0(a6),a1
000741E0 303C 0087                  		move.w	#$87,d0
000741E4                            
000741E4                            loc_72012:
000741E4 22D8                       		move.l	(a0)+,(a1)+
000741E6 51C8 FFFC                  		dbf	d0,loc_72012
000741EA                            
000741EA 1D7C 0080 0027             		move.b	#$80,$27(a6)
000741F0 4216                       		clr.b	0(a6)
000741F2 6000                       		bra.s	loc_7202C
000741F4                            ; ===========================================================================
000741F4                            
000741F4                            loc_72024:
000741F4 422E 0027                  		clr.b	$27(a6)
000741F8 422E 0026                  		clr.b	$26(a6)
000741FC                            
000741FC                            loc_7202C:
000741FC 4EBA 0000                  		jsr	sub_725CA(pc)
00074200 2879 0007 3B24             		movea.l	(off_719A0).l,a4
00074206 0407 0081                  		subi.b	#$81,d7
0007420A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00074210 2879 0007 3B1C             		movea.l	(Go_MusicIndex).l,a4
00074216 E54F                       		lsl.w	#2,d7
00074218 2874 7000                  		movea.l	(a4,d7.w),a4
0007421C 7000                       		moveq	#0,d0
0007421E 3014                       		move.w	(a4),d0
00074220 D08C                       		add.l	a4,d0
00074222 2D40 0018                  		move.l	d0,$18(a6)
00074226 102C 0005                  		move.b	5(a4),d0
0007422A 1D40 0028                  		move.b	d0,$28(a6)
0007422E 4A2E 002A                  		tst.b	$2A(a6)
00074232 6700                       		beq.s	loc_72068
00074234 102E 0029                  		move.b	$29(a6),d0
00074238                            
00074238                            loc_72068:
00074238 1D40 0002                  		move.b	d0,2(a6)
0007423C 1D40 0001                  		move.b	d0,1(a6)
00074240 7200                       		moveq	#0,d1
00074242 264C                       		movea.l	a4,a3
00074244 5C4C                       		addq.w	#6,a4
00074246 7E00                       		moveq	#0,d7
00074248 1E2B 0002                  		move.b	2(a3),d7
0007424C 6700 0000                  		beq.w	loc_72114
00074250 5307                       		subq.b	#1,d7
00074252 123C 00C0                  		move.b	#-$40,d1
00074256 182B 0004                  		move.b	4(a3),d4
0007425A 7C30                       		moveq	#$30,d6
0007425C 1A3C 0001                  		move.b	#1,d5
00074260 43EE 0040                  		lea	$40(a6),a1
00074264 45FA 0000                  		lea	byte_721BA(pc),a2
00074268                            
00074268                            loc_72098:
00074268 08D1 0007                  		bset	#7,(a1)
0007426C 135A 0001                  		move.b	(a2)+,1(a1)
00074270 1344 0002                  		move.b	d4,2(a1)
00074274 1346 000D                  		move.b	d6,$D(a1)
00074278 1341 000A                  		move.b	d1,$A(a1)
0007427C 1345 000E                  		move.b	d5,$E(a1)
00074280 7000                       		moveq	#0,d0
00074282 301C                       		move.w	(a4)+,d0
00074284 D08B                       		add.l	a3,d0
00074286 2340 0004                  		move.l	d0,4(a1)
0007428A 335C 0008                  		move.w	(a4)+,8(a1)
0007428E D2C6                       		adda.w	d6,a1
00074290 51CF FFD6                  		dbf	d7,loc_72098
00074294 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007429A 6600                       		bne.s	loc_720D8
0007429C 702B                       		moveq	#$2B,d0
0007429E 7200                       		moveq	#0,d1
000742A0 4EBA 0000                  		jsr	sub_7272E(pc)
000742A4 6000 0000                  		bra.w	loc_72114
000742A8                            ; ===========================================================================
000742A8                            
000742A8                            loc_720D8:
000742A8 7028                       		moveq	#$28,d0
000742AA 7206                       		moveq	#6,d1
000742AC 4EBA 0000                  		jsr	sub_7272E(pc)
000742B0 103C 0042                  		move.b	#$42,d0
000742B4 727F                       		moveq	#$7F,d1
000742B6 4EBA 0000                  		jsr	sub_72764(pc)
000742BA 103C 004A                  		move.b	#$4A,d0
000742BE 727F                       		moveq	#$7F,d1
000742C0 4EBA 0000                  		jsr	sub_72764(pc)
000742C4 103C 0046                  		move.b	#$46,d0
000742C8 727F                       		moveq	#$7F,d1
000742CA 4EBA 0000                  		jsr	sub_72764(pc)
000742CE 103C 004E                  		move.b	#$4E,d0
000742D2 727F                       		moveq	#$7F,d1
000742D4 4EBA 0000                  		jsr	sub_72764(pc)
000742D8 103C 00B6                  		move.b	#-$4A,d0
000742DC 123C 00C0                  		move.b	#-$40,d1
000742E0 4EBA 0000                  		jsr	sub_72764(pc)
000742E4                            
000742E4                            loc_72114:
000742E4 7E00                       		moveq	#0,d7
000742E6 1E2B 0003                  		move.b	3(a3),d7
000742EA 6700                       		beq.s	loc_72154
000742EC 5307                       		subq.b	#1,d7
000742EE 43EE 0190                  		lea	$190(a6),a1
000742F2 45FA 0000                  		lea	byte_721C2(pc),a2
000742F6                            
000742F6                            loc_72126:
000742F6 08D1 0007                  		bset	#7,(a1)
000742FA 135A 0001                  		move.b	(a2)+,1(a1)
000742FE 1344 0002                  		move.b	d4,2(a1)
00074302 1346 000D                  		move.b	d6,$D(a1)
00074306 1345 000E                  		move.b	d5,$E(a1)
0007430A 7000                       		moveq	#0,d0
0007430C 301C                       		move.w	(a4)+,d0
0007430E D08B                       		add.l	a3,d0
00074310 2340 0004                  		move.l	d0,4(a1)
00074314 335C 0008                  		move.w	(a4)+,8(a1)
00074318 101C                       		move.b	(a4)+,d0
0007431A 135C 000B                  		move.b	(a4)+,$B(a1)
0007431E D2C6                       		adda.w	d6,a1
00074320 51CF FFD4                  		dbf	d7,loc_72126
00074324                            
00074324                            loc_72154:
00074324 43EE 0220                  		lea	$220(a6),a1
00074328 7E05                       		moveq	#5,d7
0007432A                            
0007432A                            loc_7215A:
0007432A 4A11                       		tst.b	(a1)
0007432C 6A00 0000                  		bpl.w	loc_7217C
00074330 7000                       		moveq	#0,d0
00074332 1029 0001                  		move.b	1(a1),d0
00074336 6B00                       		bmi.s	loc_7216E
00074338 5500                       		subq.b	#2,d0
0007433A E508                       		lsl.b	#2,d0
0007433C 6000                       		bra.s	loc_72170
0007433E                            ; ===========================================================================
0007433E                            
0007433E                            loc_7216E:
0007433E E608                       		lsr.b	#3,d0
00074340                            
00074340                            loc_72170:
00074340 41FA 0000                  		lea	dword_722CC(pc),a0
00074344 2070 0000                  		movea.l	(a0,d0.w),a0
00074348 08D0 0002                  		bset	#2,(a0)
0007434C                            
0007434C                            loc_7217C:
0007434C D2C6                       		adda.w	d6,a1
0007434E 51CF FFDA                  		dbf	d7,loc_7215A
00074352                            
00074352 4A6E 0340                  		tst.w	$340(a6)
00074356 6A00                       		bpl.s	loc_7218E
00074358 08EE 0002 0100             		bset	#2,$100(a6)
0007435E                            
0007435E                            loc_7218E:
0007435E 4A6E 0370                  		tst.w	$370(a6)
00074362 6A00                       		bpl.s	loc_7219A
00074364 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007436A                            
0007436A                            loc_7219A:
0007436A 4BEE 0070                  		lea	$70(a6),a5
0007436E 7805                       		moveq	#5,d4
00074370                            
00074370                            loc_721A0:
00074370 4EBA 0000                  		jsr	sub_726FE(pc)
00074374 DAC6                       		adda.w	d6,a5
00074376 51CC FFF8                  		dbf	d4,loc_721A0
0007437A 7802                       		moveq	#2,d4
0007437C                            
0007437C                            loc_721AC:
0007437C 4EBA 0000                  		jsr	sub_729A0(pc)
00074380 DAC6                       		adda.w	d6,a5
00074382 51CC FFF8                  		dbf	d4,loc_721AC
00074386                            
00074386                            loc_721B6:
00074386 584F                       		addq.w	#4,sp
00074388 4E75                       		rts	
0007438A                            ; ===========================================================================
0007438A 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00074392                            		even
00074392 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00074396                            		even
00074396                            ; ===========================================================================
00074396                            ; ---------------------------------------------------------------------------
00074396                            ; Play normal sound effect
00074396                            ; ---------------------------------------------------------------------------
00074396                            
00074396                            		
00074396                            Sound_D1toDF:                               ; own routine
00074396 4A2E 0027                  		tst.b	$27(a6)
0007439A 6600 0000                  		bne.w	loc_722C6
0007439E 4A2E 0004                  		tst.b	4(a6)
000743A2 6600 0000                  		bne.w	loc_722C6
000743A6 4A2E 0024                  		tst.b	$24(a6)
000743AA 6600 0000                  		bne.w	loc_722C6
000743AE 2079 0007 3B20             		movea.l	(Go_SoundIndex).l,a0
000743B4 0407 00A1                  		sub.b	#$A1,d7    ; A0???
000743B8 6000 0000                  		bra	SoundEffects_Common
000743BC                            
000743BC                            Sound_A0toCF:				; XREF: Sound_ChkValue
000743BC 4A2E 0027                  		tst.b	$27(a6)
000743C0 6600 0000                  		bne.w	loc_722C6
000743C4 4A2E 0004                  		tst.b	4(a6)
000743C8 6600 0000                  		bne.w	loc_722C6
000743CC 4A2E 0024                  		tst.b	$24(a6)
000743D0 6600 0000                  		bne.w	loc_722C6
000743D4 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000743D8 6600                       		bne.s	Sound_notB5	; if not, branch
000743DA 4A2E 002B                  		tst.b	$2B(a6)
000743DE 6600                       		bne.s	loc_721EE
000743E0 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000743E4                            		
000743E4                            loc_721EE:
000743E4 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000743EA                            
000743EA                            Sound_notB5:
000743EA 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000743EE 6600                       		bne.s	Sound_notA7	; if not, branch
000743F0 4A2E 002C                  		tst.b	$2C(a6)
000743F4 6600 0000                  		bne.w	locret_722C4
000743F8 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000743FE                            
000743FE                            Sound_notA7:
000743FE 2079 0007 3B20             		movea.l	(Go_SoundIndex).l,a0
00074404 0407 00A0                  		subi.b	#$A0,d7 ; not A1
00074408                            		
00074408                            SoundEffects_Common:                     ; own label
00074408 E54F                       		lsl.w	#2,d7
0007440A 2670 7000                  		movea.l	(a0,d7.w),a3
0007440E 224B                       		movea.l	a3,a1
00074410 7200                       		moveq	#0,d1
00074412 3219                       		move.w	(a1)+,d1
00074414 D28B                       		add.l	a3,d1
00074416 1A19                       		move.b	(a1)+,d5
00074418 1E19                       		move.b	(a1)+,d7
0007441A 5307                       		subq.b	#1,d7
0007441C 7C30                       		moveq	#$30,d6
0007441E                            
0007441E                            loc_72228:
0007441E 7600                       		moveq	#0,d3
00074420 1629 0001                  		move.b	1(a1),d3
00074424 1803                       		move.b	d3,d4
00074426 6B00                       		bmi.s	loc_72244
00074428 5543                       		subq.w	#2,d3
0007442A E54B                       		lsl.w	#2,d3
0007442C 4BFA 0000                  		lea	dword_722CC(pc),a5
00074430 2A75 3000                  		movea.l	(a5,d3.w),a5
00074434 08D5 0002                  		bset	#2,(a5)
00074438 6000                       		bra.s	loc_7226E
0007443A                            ; ===========================================================================
0007443A                            
0007443A                            
0007443A                            loc_72244:
0007443A E64B                       		lsr.w	#3,d3
0007443C 4BFA 0000                  		lea	dword_722CC(pc),a5
00074440 2A75 3000                  		movea.l	(a5,d3.w),a5
00074444 08D5 0002                  		bset	#2,(a5)
00074448 0C04 00C0                  		cmpi.b	#$C0,d4
0007444C 6600                       		bne.s	loc_7226E
0007444E 1004                       		move.b	d4,d0
00074450 0000 001F                  		ori.b	#$1F,d0
00074454 13C0 00C0 0011             		move.b	d0,($C00011).l
0007445A 0840 0005                  		bchg	#5,d0
0007445E 13C0 00C0 0011             		move.b	d0,($C00011).l
00074464                            
00074464                            loc_7226E:
00074464 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00074468 244D                       		movea.l	a5,a2
0007446A 700B                       		moveq	#$B,d0
0007446C                            
0007446C                            loc_72276:
0007446C 429A                       		clr.l	(a2)+
0007446E 51C8 FFFC                  		dbf	d0,loc_72276
00074472                            
00074472 3A99                       		move.w	(a1)+,(a5)
00074474 1B45 0002                  		move.b	d5,2(a5)
00074478 7000                       		moveq	#0,d0
0007447A 3019                       		move.w	(a1)+,d0
0007447C D08B                       		add.l	a3,d0
0007447E 2B40 0004                  		move.l	d0,4(a5)
00074482 3B59 0008                  		move.w	(a1)+,8(a5)
00074486 1B7C 0001 000E             		move.b	#1,$E(a5)
0007448C 1B46 000D                  		move.b	d6,$D(a5)
00074490 4A04                       		tst.b	d4
00074492 6B00                       		bmi.s	loc_722A8
00074494 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007449A 2B41 0020                  		move.l	d1,$20(a5)
0007449E                            
0007449E                            loc_722A8:
0007449E 51CF FF7E                  		dbf	d7,loc_72228
000744A2                            
000744A2 4A2E 0250                  		tst.b	$250(a6)
000744A6 6A00                       		bpl.s	loc_722B8
000744A8 08EE 0002 0340             		bset	#2,$340(a6)
000744AE                            
000744AE                            loc_722B8:
000744AE 4A2E 0310                  		tst.b	$310(a6)
000744B2 6A00                       		bpl.s	locret_722C4
000744B4 08EE 0002 0370             		bset	#2,$370(a6)
000744BA                            
000744BA                            locret_722C4:
000744BA 4E75                       		rts	
000744BC                            ; ===========================================================================
000744BC                            
000744BC                            loc_722C6:
000744BC 4216                       		clr.b	0(a6)
000744BE 4E75                       		rts	
000744C0                            ; ===========================================================================
000744C0 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000744C4 0000 0000                  		dc.l 0
000744C8 00FF F100                  		dc.l $FFF100
000744CC 00FF F130                  		dc.l $FFF130
000744D0 00FF F190                  		dc.l $FFF190
000744D4 00FF F1C0                  		dc.l $FFF1C0
000744D8 00FF F1F0                  		dc.l $FFF1F0
000744DC 00FF F1F0                  		dc.l $FFF1F0
000744E0 00FF F220                  dword_722EC:	dc.l $FFF220
000744E4 0000 0000                  		dc.l 0
000744E8 00FF F250                  		dc.l $FFF250
000744EC 00FF F280                  		dc.l $FFF280
000744F0 00FF F2B0                  		dc.l $FFF2B0
000744F4 00FF F2E0                  		dc.l $FFF2E0
000744F8 00FF F310                  		dc.l $FFF310
000744FC 00FF F310                  		dc.l $FFF310
00074500                            ; ===========================================================================
00074500                            ; ---------------------------------------------------------------------------
00074500                            ; Play GHZ waterfall sound
00074500                            ; ---------------------------------------------------------------------------
00074500                            
00074500                            Sound_D0toDF:				; XREF: Sound_ChkValue
00074500 4A2E 0027                  		tst.b	$27(a6)
00074504 6600 0000                  		bne.w	locret_723C6
00074508 4A2E 0004                  		tst.b	4(a6)
0007450C 6600 0000                  		bne.w	locret_723C6
00074510 4A2E 0024                  		tst.b	$24(a6)
00074514 6600 0000                  		bne.w	locret_723C6
00074518 2079 0007 3B18             		movea.l	(Go_SoundD0).l,a0
0007451E 0407 00D0                  		subi.b	#$D0,d7
00074522 E54F                       		lsl.w	#2,d7
00074524 2670 7000                  		movea.l	(a0,d7.w),a3
00074528 224B                       		movea.l	a3,a1
0007452A 7000                       		moveq	#0,d0
0007452C 3019                       		move.w	(a1)+,d0
0007452E D08B                       		add.l	a3,d0
00074530 2D40 0020                  		move.l	d0,$20(a6)
00074534 1A19                       		move.b	(a1)+,d5
00074536 1E19                       		move.b	(a1)+,d7
00074538 5307                       		subq.b	#1,d7
0007453A 7C30                       		moveq	#$30,d6
0007453C                            
0007453C                            loc_72348:
0007453C 1829 0001                  		move.b	1(a1),d4
00074540 6B00                       		bmi.s	loc_7235A
00074542 08EE 0002 0100             		bset	#2,$100(a6)
00074548 4BEE 0340                  		lea	$340(a6),a5
0007454C 6000                       		bra.s	loc_72364
0007454E                            ; ===========================================================================
0007454E                            
0007454E                            loc_7235A:
0007454E 08EE 0002 01F0             		bset	#2,$1F0(a6)
00074554 4BEE 0370                  		lea	$370(a6),a5
00074558                            
00074558                            loc_72364:
00074558 244D                       		movea.l	a5,a2
0007455A 700B                       		moveq	#$B,d0
0007455C                            
0007455C                            loc_72368:
0007455C 429A                       		clr.l	(a2)+
0007455E 51C8 FFFC                  		dbf	d0,loc_72368
00074562                            
00074562 3A99                       		move.w	(a1)+,(a5)
00074564 1B45 0002                  		move.b	d5,2(a5)
00074568 7000                       		moveq	#0,d0
0007456A 3019                       		move.w	(a1)+,d0
0007456C D08B                       		add.l	a3,d0
0007456E 2B40 0004                  		move.l	d0,4(a5)
00074572 3B59 0008                  		move.w	(a1)+,8(a5)
00074576 1B7C 0001 000E             		move.b	#1,$E(a5)
0007457C 1B46 000D                  		move.b	d6,$D(a5)
00074580 4A04                       		tst.b	d4
00074582 6B00                       		bmi.s	loc_72396
00074584 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007458A                            
0007458A                            loc_72396:
0007458A 51CF FFB0                  		dbf	d7,loc_72348
0007458E                            
0007458E 4A2E 0250                  		tst.b	$250(a6)
00074592 6A00                       		bpl.s	loc_723A6
00074594 08EE 0002 0340             		bset	#2,$340(a6)
0007459A                            
0007459A                            loc_723A6:
0007459A 4A2E 0310                  		tst.b	$310(a6)
0007459E 6A00                       		bpl.s	locret_723C6
000745A0 08EE 0002 0370             		bset	#2,$370(a6)
000745A6 0004 001F                  		ori.b	#$1F,d4
000745AA 13C4 00C0 0011             		move.b	d4,($C00011).l
000745B0 0844 0005                  		bchg	#5,d4
000745B4 13C4 00C0 0011             		move.b	d4,($C00011).l
000745BA                            
000745BA                            locret_723C6:
000745BA 4E75                       		rts
000745BC                            		              
000745BC                            	
000745BC                            ; End of function Sound_ChkValue
000745BC                            
000745BC                            ; ===========================================================================
000745BC 00FF F100                  		dc.l $FFF100
000745C0 00FF F1F0                  		dc.l $FFF1F0
000745C4 00FF F250                  		dc.l $FFF250
000745C8 00FF F310                  		dc.l $FFF310
000745CC 00FF F340                  		dc.l $FFF340
000745D0 00FF F370                  		dc.l $FFF370
000745D4                            
000745D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000745D4                            
000745D4                            
000745D4                            Snd_FadeOut1:				; XREF: Sound_E0
000745D4 4216                       		clr.b	0(a6)
000745D6 4BEE 0220                  		lea	$220(a6),a5
000745DA 7E05                       		moveq	#5,d7
000745DC                            
000745DC                            loc_723EA:
000745DC 4A15                       		tst.b	(a5)
000745DE 6A00 0000                  		bpl.w	loc_72472
000745E2 0895 0007                  		bclr	#7,(a5)
000745E6 7600                       		moveq	#0,d3
000745E8 162D 0001                  		move.b	1(a5),d3
000745EC 6B00                       		bmi.s	loc_7243C
000745EE 4EBA 0000                  		jsr	sub_726FE(pc)
000745F2 0C03 0004                  		cmpi.b	#4,d3
000745F6 6600                       		bne.s	loc_72416
000745F8 4A2E 0340                  		tst.b	$340(a6)
000745FC 6A00                       		bpl.s	loc_72416
000745FE 4BEE 0340                  		lea	$340(a6),a5
00074602 226E 0020                  		movea.l	$20(a6),a1
00074606 6000                       		bra.s	loc_72428
00074608                            ; ===========================================================================
00074608                            
00074608                            loc_72416:
00074608 5503                       		subq.b	#2,d3
0007460A E50B                       		lsl.b	#2,d3
0007460C 41FA FEB2                  		lea	dword_722CC(pc),a0
00074610 264D                       		movea.l	a5,a3
00074612 2A70 3000                  		movea.l	(a0,d3.w),a5
00074616 226E 0018                  		movea.l	$18(a6),a1
0007461A                            
0007461A                            loc_72428:
0007461A 0895 0002                  		bclr	#2,(a5)
0007461E 08D5 0001                  		bset	#1,(a5)
00074622 102D 000B                  		move.b	$B(a5),d0
00074626 4EBA 0000                  		jsr	sub_72C4E(pc)
0007462A 2A4B                       		movea.l	a3,a5
0007462C 6000                       		bra.s	loc_72472
0007462E                            ; ===========================================================================
0007462E                            
0007462E                            loc_7243C:
0007462E 4EBA 0000                  		jsr	sub_729A0(pc)
00074632 41EE 0370                  		lea	$370(a6),a0
00074636 0C03 00E0                  		cmpi.b	#$E0,d3
0007463A 6700                       		beq.s	loc_7245A
0007463C 0C03 00C0                  		cmpi.b	#$C0,d3
00074640 6700                       		beq.s	loc_7245A
00074642 E60B                       		lsr.b	#3,d3
00074644 41FA FE7A                  		lea	dword_722CC(pc),a0
00074648 2070 3000                  		movea.l	(a0,d3.w),a0
0007464C                            
0007464C                            loc_7245A:
0007464C 0890 0002                  		bclr	#2,(a0)
00074650 08D0 0001                  		bset	#1,(a0)
00074654 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007465A 6600                       		bne.s	loc_72472
0007465C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00074664                            
00074664                            loc_72472:
00074664 DAFC 0030                  		adda.w	#$30,a5
00074668 51CF FF72                  		dbf	d7,loc_723EA
0007466C                            
0007466C 4E75                       		rts	
0007466E                            ; End of function Snd_FadeOut1
0007466E                            
0007466E                            
0007466E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007466E                            
0007466E                            
0007466E                            Snd_FadeOut2:				; XREF: Sound_E0
0007466E 4BEE 0340                  		lea	$340(a6),a5
00074672 4A15                       		tst.b	(a5)
00074674 6A00                       		bpl.s	loc_724AE
00074676 0895 0007                  		bclr	#7,(a5)
0007467A 0815 0002                  		btst	#2,(a5)
0007467E 6600                       		bne.s	loc_724AE
00074680 4EBA 0000                  		jsr	loc_7270A(pc)
00074684 4BEE 0100                  		lea	$100(a6),a5
00074688 0895 0002                  		bclr	#2,(a5)
0007468C 08D5 0001                  		bset	#1,(a5)
00074690 4A15                       		tst.b	(a5)
00074692 6A00                       		bpl.s	loc_724AE
00074694 226E 0018                  		movea.l	$18(a6),a1
00074698 102D 000B                  		move.b	$B(a5),d0
0007469C 4EBA 0000                  		jsr	sub_72C4E(pc)
000746A0                            
000746A0                            loc_724AE:
000746A0 4BEE 0370                  		lea	$370(a6),a5
000746A4 4A15                       		tst.b	(a5)
000746A6 6A00                       		bpl.s	locret_724E4
000746A8 0895 0007                  		bclr	#7,(a5)
000746AC 0815 0002                  		btst	#2,(a5)
000746B0 6600                       		bne.s	locret_724E4
000746B2 4EBA 0000                  		jsr	loc_729A6(pc)
000746B6 4BEE 01F0                  		lea	$1F0(a6),a5
000746BA 0895 0002                  		bclr	#2,(a5)
000746BE 08D5 0001                  		bset	#1,(a5)
000746C2 4A15                       		tst.b	(a5)
000746C4 6A00                       		bpl.s	locret_724E4
000746C6 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000746CC 6600                       		bne.s	locret_724E4
000746CE 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000746D6                            
000746D6                            locret_724E4:
000746D6 4E75                       		rts	
000746D8                            ; End of function Snd_FadeOut2
000746D8                            
000746D8                            ; ===========================================================================
000746D8                            ; ---------------------------------------------------------------------------
000746D8                            ; Fade out music
000746D8                            ; ---------------------------------------------------------------------------
000746D8                            
000746D8                            Sound_E0:				; XREF: Sound_ExIndex
000746D8 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000746DC 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000746E0 1D7C 0003 0006             		move.b	#3,6(a6)
000746E6 1D7C 0028 0004             		move.b	#$28,4(a6)
000746EC 422E 0040                  		clr.b	$40(a6)
000746F0 422E 002A                  		clr.b	$2A(a6)
000746F4 4E75                       		rts	
000746F6                            
000746F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000746F6                            
000746F6                            
000746F6                            sub_72504:				; XREF: sub_71B4C
000746F6 102E 0006                  		move.b	6(a6),d0
000746FA 6700                       		beq.s	loc_72510
000746FC 532E 0006                  		subq.b	#1,6(a6)
00074700 4E75                       		rts	
00074702                            ; ===========================================================================
00074702                            
00074702                            loc_72510:
00074702 532E 0004                  		subq.b	#1,4(a6)
00074706 6700 0000                  		beq.w	Sound_E4
0007470A 1D7C 0003 0006             		move.b	#3,6(a6)
00074710 4BEE 0070                  		lea	$70(a6),a5
00074714 7E05                       		moveq	#5,d7
00074716                            
00074716                            loc_72524:
00074716 4A15                       		tst.b	(a5)
00074718 6A00                       		bpl.s	loc_72538
0007471A 522D 0009                  		addq.b	#1,9(a5)
0007471E 6A00                       		bpl.s	loc_72534
00074720 0895 0007                  		bclr	#7,(a5)
00074724 6000                       		bra.s	loc_72538
00074726                            ; ===========================================================================
00074726                            
00074726                            loc_72534:
00074726 4EBA 0000                  		jsr	sub_72CB4(pc)
0007472A                            
0007472A                            loc_72538:
0007472A DAFC 0030                  		adda.w	#$30,a5
0007472E 51CF FFE6                  		dbf	d7,loc_72524
00074732                            
00074732 7E02                       		moveq	#2,d7
00074734                            
00074734                            loc_72542:
00074734 4A15                       		tst.b	(a5)
00074736 6A00                       		bpl.s	loc_72560
00074738 522D 0009                  		addq.b	#1,9(a5)
0007473C 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00074742 6500                       		bcs.s	loc_72558
00074744 0895 0007                  		bclr	#7,(a5)
00074748 6000                       		bra.s	loc_72560
0007474A                            ; ===========================================================================
0007474A                            
0007474A                            loc_72558:
0007474A 1C2D 0009                  		move.b	9(a5),d6
0007474E 4EBA 0000                  		jsr	sub_7296A(pc)
00074752                            
00074752                            loc_72560:
00074752 DAFC 0030                  		adda.w	#$30,a5
00074756 51CF FFDC                  		dbf	d7,loc_72542
0007475A                            
0007475A 4E75                       		rts	
0007475C                            ; End of function sub_72504
0007475C                            
0007475C                            
0007475C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007475C                            
0007475C                            
0007475C                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007475C 7602                       		moveq	#2,d3
0007475E 7028                       		moveq	#$28,d0
00074760                            
00074760                            loc_7256E:
00074760 1203                       		move.b	d3,d1
00074762 4EBA 0000                  		jsr	sub_7272E(pc)
00074766 5801                       		addq.b	#4,d1
00074768 4EBA 0000                  		jsr	sub_7272E(pc)
0007476C 51CB FFF2                  		dbf	d3,loc_7256E
00074770                            
00074770 7040                       		moveq	#$40,d0
00074772 727F                       		moveq	#$7F,d1
00074774 7802                       		moveq	#2,d4
00074776                            
00074776                            loc_72584:
00074776 7603                       		moveq	#3,d3
00074778                            
00074778                            loc_72586:
00074778 4EBA 0000                  		jsr	sub_7272E(pc)
0007477C 4EBA 0000                  		jsr	sub_72764(pc)
00074780 5840                       		addq.w	#4,d0
00074782 51CB FFF4                  		dbf	d3,loc_72586
00074786                            
00074786 0400 000F                  		subi.b	#$F,d0
0007478A 51CC FFEA                  		dbf	d4,loc_72584
0007478E                            
0007478E 4E75                       		rts	
00074790                            ; End of function sub_7256A
00074790                            
00074790                            ; ===========================================================================
00074790                            ; ---------------------------------------------------------------------------
00074790                            ; Stop music
00074790                            ; ---------------------------------------------------------------------------
00074790                            
00074790                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00074790 702B                       		moveq	#$2B,d0
00074792 123C 0080                  		move.b	#$80,d1
00074796 4EBA 0000                  		jsr	sub_7272E(pc)
0007479A 7027                       		moveq	#$27,d0
0007479C 7200                       		moveq	#0,d1
0007479E 4EBA 0000                  		jsr	sub_7272E(pc)
000747A2 204E                       		movea.l	a6,a0
000747A4 303C 00E3                  		move.w	#$E3,d0
000747A8                            
000747A8                            loc_725B6:
000747A8 4298                       		clr.l	(a0)+
000747AA 51C8 FFFC                  		dbf	d0,loc_725B6
000747AE                            
000747AE 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000747B4 4EBA FFA6                  		jsr	sub_7256A(pc)
000747B8 13FC 0080 00A0 1FFF                        move.b    #$80,($A01FFF).l ; stop DAC playback
000747C0 6000 0000                  		bra.w	sub_729B6
000747C4                            
000747C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000747C4                            
000747C4                            
000747C4                            sub_725CA:				; XREF: Sound_ChkValue
000747C4 204E                       		movea.l	a6,a0
000747C6 1216                       		move.b	0(a6),d1
000747C8 142E 0027                  		move.b	$27(a6),d2
000747CC 162E 002A                  		move.b	$2A(a6),d3
000747D0 182E 0026                  		move.b	$26(a6),d4
000747D4 3A2E 000A                  		move.w	$A(a6),d5
000747D8 303C 0087                  		move.w	#$87,d0
000747DC                            
000747DC                            loc_725E4:
000747DC 4298                       		clr.l	(a0)+
000747DE 51C8 FFFC                  		dbf	d0,loc_725E4
000747E2                            
000747E2 1C81                       		move.b	d1,0(a6)
000747E4 1D42 0027                  		move.b	d2,$27(a6)
000747E8 1D43 002A                  		move.b	d3,$2A(a6)
000747EC 1D44 0026                  		move.b	d4,$26(a6)
000747F0 3D45 000A                  		move.w	d5,$A(a6)
000747F4 1D7C 0080 0009             		move.b	#$80,9(a6)
000747FA 4EBA FF60                  		jsr	sub_7256A(pc)
000747FE 6000 0000                  		bra.w	sub_729B6
00074802                            ; End of function sub_725CA
00074802                            
00074802                            
00074802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074802                            
00074802                            
00074802                            sub_7260C:				; XREF: sub_71B4C
00074802 1D6E 0002 0001             		move.b	2(a6),1(a6)
00074808 41EE 004E                  		lea	$4E(a6),a0
0007480C 7030                       		moveq	#$30,d0
0007480E 7209                       		moveq	#9,d1
00074810                            
00074810                            loc_7261A:
00074810 5210                       		addq.b	#1,(a0)
00074812 D0C0                       		adda.w	d0,a0
00074814 51C9 FFFA                  		dbf	d1,loc_7261A
00074818                            
00074818 4E75                       		rts	
0007481A                            ; End of function sub_7260C
0007481A                            
0007481A                            ; ===========================================================================
0007481A                            ; ---------------------------------------------------------------------------
0007481A                            ; Speed	up music
0007481A                            ; ---------------------------------------------------------------------------
0007481A                            
0007481A                            Sound_E2:				; XREF: Sound_ExIndex
0007481A 4A2E 0027                  		tst.b	$27(a6)
0007481E 6600                       		bne.s	loc_7263E
00074820 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00074826 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007482C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00074832 4E75                       		rts	
00074834                            ; ===========================================================================
00074834                            
00074834                            loc_7263E:
00074834 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007483A 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00074840 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00074846 4E75                       		rts	
00074848                            ; ===========================================================================
00074848                            ; ---------------------------------------------------------------------------
00074848                            ; Change music back to normal speed
00074848                            ; ---------------------------------------------------------------------------
00074848                            
00074848                            Sound_E3:				; XREF: Sound_ExIndex
00074848 4A2E 0027                  		tst.b	$27(a6)
0007484C 6600                       		bne.s	loc_7266A
0007484E 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00074854 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007485A 422E 002A                  		clr.b	$2A(a6)
0007485E 4E75                       		rts	
00074860                            ; ===========================================================================
00074860                            
00074860                            loc_7266A:
00074860 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00074866 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007486C 422E 03CA                  		clr.b	$3CA(a6)
00074870 4E75                       		rts	
00074872                            
00074872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074872                            
00074872                            
00074872                            sub_7267C:				; XREF: sub_71B4C
00074872 4A2E 0025                  		tst.b	$25(a6)
00074876 6700                       		beq.s	loc_72688
00074878 532E 0025                  		subq.b	#1,$25(a6)
0007487C 4E75                       		rts	
0007487E                            ; ===========================================================================
0007487E                            
0007487E                            loc_72688:
0007487E 4A2E 0026                  		tst.b	$26(a6)
00074882 6700                       		beq.s	loc_726D6
00074884 532E 0026                  		subq.b	#1,$26(a6)
00074888 1D7C 0002 0025             		move.b	#2,$25(a6)
0007488E 4BEE 0070                  		lea	$70(a6),a5
00074892 7E05                       		moveq	#5,d7
00074894                            
00074894                            loc_7269E:
00074894 4A15                       		tst.b	(a5)
00074896 6A00                       		bpl.s	loc_726AA
00074898 532D 0009                  		subq.b	#1,9(a5)
0007489C 4EBA 0000                  		jsr	sub_72CB4(pc)
000748A0                            
000748A0                            loc_726AA:
000748A0 DAFC 0030                  		adda.w	#$30,a5
000748A4 51CF FFEE                  		dbf	d7,loc_7269E
000748A8 7E02                       		moveq	#2,d7
000748AA                            
000748AA                            loc_726B4:
000748AA 4A15                       		tst.b	(a5)
000748AC 6A00                       		bpl.s	loc_726CC
000748AE 532D 0009                  		subq.b	#1,9(a5)
000748B2 1C2D 0009                  		move.b	9(a5),d6
000748B6 0C06 0010                  		cmpi.b	#$10,d6
000748BA 6500                       		bcs.s	loc_726C8
000748BC 7C0F                       		moveq	#$F,d6
000748BE                            
000748BE                            loc_726C8:
000748BE 4EBA 0000                  		jsr	sub_7296A(pc)
000748C2                            
000748C2                            loc_726CC:
000748C2 DAFC 0030                  		adda.w	#$30,a5
000748C6 51CF FFE2                  		dbf	d7,loc_726B4
000748CA 4E75                       		rts	
000748CC                            ; ===========================================================================
000748CC                            
000748CC                            loc_726D6:
000748CC 08AE 0002 0040             		bclr	#2,$40(a6)
000748D2 422E 0024                  		clr.b	$24(a6)
000748D6 4E75                       		rts	
000748D8                            ; End of function sub_7267C
000748D8                            
000748D8                            ; ===========================================================================
000748D8                            
000748D8                            loc_726E2:				; XREF: sub_71CCA
000748D8 0815 0001                  		btst	#1,(a5)
000748DC 6600                       		bne.s	locret_726FC
000748DE 0815 0002                  		btst	#2,(a5)
000748E2 6600                       		bne.s	locret_726FC
000748E4 7028                       		moveq	#$28,d0
000748E6 122D 0001                  		move.b	1(a5),d1
000748EA 0001 00F0                  		ori.b	#-$10,d1
000748EE 6000 0000                  		bra.w	sub_7272E
000748F2                            ; ===========================================================================
000748F2                            
000748F2                            locret_726FC:
000748F2 4E75                       		rts	
000748F4                            
000748F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000748F4                            
000748F4                            
000748F4                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000748F4 0815 0004                  		btst	#4,(a5)
000748F8 6600                       		bne.s	locret_72714
000748FA 0815 0002                  		btst	#2,(a5)
000748FE 6600                       		bne.s	locret_72714
00074900                            
00074900                            loc_7270A:				; XREF: Snd_FadeOut2
00074900 7028                       		moveq	#$28,d0
00074902 122D 0001                  		move.b	1(a5),d1
00074906 6000 0000                  		bra.w	sub_7272E
0007490A                            ; ===========================================================================
0007490A                            
0007490A                            locret_72714:
0007490A 4E75                       		rts	
0007490C                            ; End of function sub_726FE
0007490C                            
0007490C                            ; ===========================================================================
0007490C                            
0007490C                            loc_72716:				; XREF: sub_72A5A
0007490C 0815 0002                  		btst	#2,(a5)
00074910 6600                       		bne.s	locret_72720
00074912 6000 0000                  		bra.w	sub_72722
00074916                            ; ===========================================================================
00074916                            
00074916                            locret_72720:
00074916 4E75                       		rts	
00074918                            
00074918                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074918                            
00074918                            
00074918                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00074918 082D 0002 0001             		btst	#2,1(a5)
0007491E 6600                       		bne.s	loc_7275A
00074920 D02D 0001                  		add.b	1(a5),d0
00074924                            ; End of function sub_72722
00074924                            
00074924                            
00074924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074924                            
00074924                            
00074924                            sub_7272E:				; XREF: loc_71E6A
00074924 1439 00A0 4000             		move.b	($A04000).l,d2
0007492A 0802 0007                  		btst	#7,d2
0007492E 66F4                       		bne.s	sub_7272E
00074930 13C0 00A0 4000             		move.b	d0,($A04000).l
00074936 4E71                       		nop	
00074938 4E71                       		nop	
0007493A 4E71                       		nop	
0007493C                            
0007493C                            loc_72746:
0007493C 1439 00A0 4000             		move.b	($A04000).l,d2
00074942 0802 0007                  		btst	#7,d2
00074946 66F4                       		bne.s	loc_72746
00074948                            
00074948 13C1 00A0 4001             		move.b	d1,($A04001).l
0007494E 4E75                       		rts	
00074950                            ; End of function sub_7272E
00074950                            
00074950                            ; ===========================================================================
00074950                            
00074950                            loc_7275A:				; XREF: sub_72722
00074950 142D 0001                  		move.b	1(a5),d2
00074954 0882 0002                  		bclr	#2,d2
00074958 D002                       		add.b	d2,d0
0007495A                            
0007495A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007495A                            
0007495A                            
0007495A                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007495A 1439 00A0 4000             		move.b	($A04000).l,d2
00074960 0802 0007                  		btst	#7,d2
00074964 66F4                       		bne.s	sub_72764
00074966 13C0 00A0 4002             		move.b	d0,($A04002).l
0007496C 4E71                       		nop	
0007496E 4E71                       		nop	
00074970 4E71                       		nop	
00074972                            
00074972                            loc_7277C:
00074972 1439 00A0 4000             		move.b	($A04000).l,d2
00074978 0802 0007                  		btst	#7,d2
0007497C 66F4                       		bne.s	loc_7277C
0007497E                            
0007497E 13C1 00A0 4003             		move.b	d1,($A04003).l
00074984 4E75                       		rts	
00074986                            ; End of function sub_72764
00074986                            
00074986                            ; ===========================================================================
00074986 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00074998 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000749AA 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000749BA 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000749CA 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000749DA 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000749EA 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000749FA 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00074A0A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00074A1A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00074A2A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00074A3A 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00074A46                            
00074A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074A46                            
00074A46                            
00074A46                            sub_72850:				; XREF: sub_71B4C
00074A46 532D 000E                  		subq.b	#1,$E(a5)
00074A4A 6600                       		bne.s	loc_72866
00074A4C 0895 0004                  		bclr	#4,(a5)
00074A50 4EBA 0000                  		jsr	sub_72878(pc)
00074A54 4EBA 0000                  		jsr	sub_728DC(pc)
00074A58 6000 0000                  		bra.w	loc_7292E
00074A5C                            ; ===========================================================================
00074A5C                            
00074A5C                            loc_72866:
00074A5C 4EBA F4E4                  		jsr	sub_71D9E(pc)
00074A60 4EBA 0000                  		jsr	sub_72926(pc)
00074A64 4EBA F504                  		jsr	sub_71DC6(pc)
00074A68 4EBA 0000                  		jsr	sub_728E2(pc)
00074A6C 4E75                       		rts	
00074A6E                            ; End of function sub_72850
00074A6E                            
00074A6E                            
00074A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074A6E                            
00074A6E                            
00074A6E                            sub_72878:				; XREF: sub_72850
00074A6E 0895 0001                  		bclr	#1,(a5)
00074A72 286D 0004                  		movea.l	4(a5),a4
00074A76                            
00074A76                            loc_72880:
00074A76 7A00                       		moveq	#0,d5
00074A78 1A1C                       		move.b	(a4)+,d5
00074A7A 0C05 00E0                  		cmpi.b	#$E0,d5
00074A7E 6500                       		bcs.s	loc_72890
00074A80 4EBA 0000                  		jsr	sub_72A5A(pc)
00074A84 60F0                       		bra.s	loc_72880
00074A86                            ; ===========================================================================
00074A86                            
00074A86                            loc_72890:
00074A86 4A05                       		tst.b	d5
00074A88 6A00                       		bpl.s	loc_728A4
00074A8A 4EBA 0000                  		jsr	sub_728AC(pc)
00074A8E 1A1C                       		move.b	(a4)+,d5
00074A90 4A05                       		tst.b	d5
00074A92 6A00                       		bpl.s	loc_728A4
00074A94 534C                       		subq.w	#1,a4
00074A96 6000 F46C                  		bra.w	sub_71D60
00074A9A                            ; ===========================================================================
00074A9A                            
00074A9A                            loc_728A4:
00074A9A 4EBA F448                  		jsr	sub_71D40(pc)
00074A9E 6000 F464                  		bra.w	sub_71D60
00074AA2                            ; End of function sub_72878
00074AA2                            
00074AA2                            
00074AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074AA2                            
00074AA2                            
00074AA2                            sub_728AC:				; XREF: sub_72878
00074AA2 0405 0081                  		subi.b	#$81,d5
00074AA6 6500                       		bcs.s	loc_728CA
00074AA8 DA2D 0008                  		add.b	8(a5),d5
00074AAC 0245 007F                  		andi.w	#$7F,d5
00074AB0 E34D                       		lsl.w	#1,d5
00074AB2 41FA 0000                  		lea	word_729CE(pc),a0
00074AB6 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00074ABC 6000 F446                  		bra.w	sub_71D60
00074AC0                            ; ===========================================================================
00074AC0                            
00074AC0                            loc_728CA:
00074AC0 08D5 0001                  		bset	#1,(a5)
00074AC4 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00074ACA 4EBA F438                  		jsr	sub_71D60(pc)
00074ACE 6000 0000                  		bra.w	sub_729A0
00074AD2                            ; End of function sub_728AC
00074AD2                            
00074AD2                            
00074AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074AD2                            
00074AD2                            
00074AD2                            sub_728DC:				; XREF: sub_72850
00074AD2 3C2D 0010                  		move.w	$10(a5),d6
00074AD6 6B00                       		bmi.s	loc_72920
00074AD8                            ; End of function sub_728DC
00074AD8                            
00074AD8                            
00074AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074AD8                            
00074AD8                            
00074AD8                            sub_728E2:				; XREF: sub_72850
00074AD8 102D 001E                  		move.b	$1E(a5),d0
00074ADC 4880                       		ext.w	d0
00074ADE DC40                       		add.w	d0,d6
00074AE0 0815 0002                  		btst	#2,(a5)
00074AE4 6600                       		bne.s	locret_7291E
00074AE6 0815 0001                  		btst	#1,(a5)
00074AEA 6600                       		bne.s	locret_7291E
00074AEC 102D 0001                  		move.b	1(a5),d0
00074AF0 0C00 00E0                  		cmpi.b	#$E0,d0
00074AF4 6600                       		bne.s	loc_72904
00074AF6 103C 00C0                  		move.b	#$C0,d0
00074AFA                            
00074AFA                            loc_72904:
00074AFA 3206                       		move.w	d6,d1
00074AFC 0201 000F                  		andi.b	#$F,d1
00074B00 8001                       		or.b	d1,d0
00074B02 E84E                       		lsr.w	#4,d6
00074B04 0206 003F                  		andi.b	#$3F,d6
00074B08 13C0 00C0 0011             		move.b	d0,($C00011).l
00074B0E 13C6 00C0 0011             		move.b	d6,($C00011).l
00074B14                            
00074B14                            locret_7291E:
00074B14 4E75                       		rts	
00074B16                            ; End of function sub_728E2
00074B16                            
00074B16                            ; ===========================================================================
00074B16                            
00074B16                            loc_72920:				; XREF: sub_728DC
00074B16 08D5 0001                  		bset	#1,(a5)
00074B1A 4E75                       		rts	
00074B1C                            
00074B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074B1C                            
00074B1C                            
00074B1C                            sub_72926:				; XREF: sub_72850
00074B1C 4A2D 000B                  		tst.b	$B(a5)
00074B20 6700 0000                  		beq.w	locret_7298A
00074B24                            
00074B24                            loc_7292E:				; XREF: sub_72850
00074B24 1C2D 0009                  		move.b	9(a5),d6
00074B28 7000                       		moveq	#0,d0
00074B2A 102D 000B                  		move.b	$B(a5),d0
00074B2E 6700                       		beq.s	sub_7296A
00074B30 2079 0007 3B28             		movea.l	(Go_PSGIndex).l,a0
00074B36 5340                       		subq.w	#1,d0
00074B38 E548                       		lsl.w	#2,d0
00074B3A 2070 0000                  		movea.l	(a0,d0.w),a0
00074B3E 102D 000C                  		move.b	$C(a5),d0
00074B42 1030 0000                  		move.b	(a0,d0.w),d0
00074B46 522D 000C                  		addq.b	#1,$C(a5)
00074B4A 0800 0007                  		btst	#7,d0
00074B4E 6700                       		beq.s	loc_72960
00074B50 0C00 0080                  		cmpi.b	#$80,d0
00074B54 6700                       		beq.s	loc_7299A
00074B56                            
00074B56                            loc_72960:
00074B56 DC40                       		add.w	d0,d6
00074B58 0C06 0010                  		cmpi.b	#$10,d6
00074B5C 6500                       		bcs.s	sub_7296A
00074B5E 7C0F                       		moveq	#$F,d6
00074B60                            ; End of function sub_72926
00074B60                            
00074B60                            
00074B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074B60                            
00074B60                            
00074B60                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00074B60 0815 0001                  		btst	#1,(a5)
00074B64 6600                       		bne.s	locret_7298A
00074B66 0815 0002                  		btst	#2,(a5)
00074B6A 6600                       		bne.s	locret_7298A
00074B6C 0815 0004                  		btst	#4,(a5)
00074B70 6600                       		bne.s	loc_7298C
00074B72                            
00074B72                            loc_7297C:
00074B72 8C2D 0001                  		or.b	1(a5),d6
00074B76 0606 0010                  		addi.b	#$10,d6
00074B7A 13C6 00C0 0011             		move.b	d6,($C00011).l
00074B80                            
00074B80                            locret_7298A:
00074B80 4E75                       		rts	
00074B82                            ; ===========================================================================
00074B82                            
00074B82                            loc_7298C:
00074B82 4A2D 0013                  		tst.b	$13(a5)
00074B86 67EA                       		beq.s	loc_7297C
00074B88 4A2D 0012                  		tst.b	$12(a5)
00074B8C 66E4                       		bne.s	loc_7297C
00074B8E 4E75                       		rts	
00074B90                            ; End of function sub_7296A
00074B90                            
00074B90                            ; ===========================================================================
00074B90                            
00074B90                            loc_7299A:				; XREF: sub_72926
00074B90 532D 000C                  		subq.b	#1,$C(a5)
00074B94 4E75                       		rts	
00074B96                            
00074B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074B96                            
00074B96                            
00074B96                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00074B96 0815 0002                  		btst	#2,(a5)
00074B9A 6600                       		bne.s	locret_729B4
00074B9C                            
00074B9C                            loc_729A6:				; XREF: Snd_FadeOut2
00074B9C 102D 0001                  		move.b	1(a5),d0
00074BA0 0000 001F                  		ori.b	#$1F,d0
00074BA4 13C0 00C0 0011             		move.b	d0,($C00011).l
00074BAA                            
00074BAA                            locret_729B4:
00074BAA 4E75                       		rts	
00074BAC                            ; End of function sub_729A0
00074BAC                            
00074BAC                            
00074BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074BAC                            
00074BAC                            
00074BAC                            sub_729B6:				; XREF: loc_71E7C
00074BAC 41F9 00C0 0011             		lea	($C00011).l,a0
00074BB2 10BC 009F                  		move.b	#$9F,(a0)
00074BB6 10BC 00BF                  		move.b	#$BF,(a0)
00074BBA 10BC 00DF                  		move.b	#$DF,(a0)
00074BBE 10BC 00FF                  		move.b	#$FF,(a0)
00074BC2 4E75                       		rts	
00074BC4                            ; End of function sub_729B6
00074BC4                            
00074BC4                            ; ===========================================================================
00074BC4 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00074BD6 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00074BE8 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00074BFC 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00074C10 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00074C24 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00074C38 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00074C4C 0011 0000                  		dc.w $11, 0
00074C50                            
00074C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074C50                            
00074C50                            
00074C50                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074C50 0445 00E0                  		subi.w	#$E0,d5
00074C54 E54D                       		lsl.w	#2,d5
00074C56 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00074C5A                            ; End of function sub_72A5A
00074C5A                            
00074C5A                            ; ===========================================================================
00074C5A                            
00074C5A                            loc_72A64:
00074C5A 6000 0000                  		bra.w	loc_72ACC
00074C5E                            ; ===========================================================================
00074C5E 6000 0000                  		bra.w	loc_72AEC
00074C62                            ; ===========================================================================
00074C62 6000 0000                  		bra.w	loc_72AF2
00074C66                            ; ===========================================================================
00074C66 6000 0000                  		bra.w	loc_72AF8
00074C6A                            ; ===========================================================================
00074C6A 6000 0000                  		bra.w	loc_72B14
00074C6E                            ; ===========================================================================
00074C6E 6000 0000                  		bra.w	loc_72B9E
00074C72                            ; ===========================================================================
00074C72 6000 0000                  		bra.w	loc_72BA4
00074C76                            ; ===========================================================================
00074C76 6000 0000                  		bra.w	loc_72BAE
00074C7A                            ; ===========================================================================
00074C7A 6000 0000                  		bra.w	loc_72BB4
00074C7E                            ; ===========================================================================
00074C7E 6000 0000                  		bra.w	loc_72BBE
00074C82                            ; ===========================================================================
00074C82 6000 0000                  		bra.w	loc_72BC6
00074C86                            ; ===========================================================================
00074C86 6000 0000                  		bra.w	loc_72BD0
00074C8A                            ; ===========================================================================
00074C8A 6000 0000                  		bra.w	loc_72BE6
00074C8E                            ; ===========================================================================
00074C8E 6000 0000                  		bra.w	loc_72BEE
00074C92                            ; ===========================================================================
00074C92 6000 0000                  		bra.w	loc_72BF4
00074C96                            ; ===========================================================================
00074C96 6000 0000                  		bra.w	loc_72C26
00074C9A                            ; ===========================================================================
00074C9A 6000 0000                  		bra.w	loc_72D30
00074C9E                            ; ===========================================================================
00074C9E 6000 0000                  		bra.w	loc_72D52
00074CA2                            ; ===========================================================================
00074CA2 6000 0000                  		bra.w	loc_72D58
00074CA6                            ; ===========================================================================
00074CA6 6000 0000                  		bra.w	loc_72E06
00074CAA                            ; ===========================================================================
00074CAA 6000 0000                  		bra.w	loc_72E20
00074CAE                            ; ===========================================================================
00074CAE 6000 0000                  		bra.w	loc_72E26
00074CB2                            ; ===========================================================================
00074CB2 6000 0000                  		bra.w	loc_72E2C
00074CB6                            ; ===========================================================================
00074CB6 6000 0000                  		bra.w	loc_72E38
00074CBA                            ; ===========================================================================
00074CBA 6000 0000                  		bra.w	loc_72E52
00074CBE                            ; ===========================================================================
00074CBE 6000 0000                  		bra.w	loc_72E64
00074CC2                            ; ===========================================================================
00074CC2                            
00074CC2                            loc_72ACC:				; XREF: loc_72A64
00074CC2 121C                       		move.b	(a4)+,d1
00074CC4 4A2D 0001                  		tst.b	1(a5)
00074CC8 6B00                       		bmi.s	locret_72AEA
00074CCA 102D 000A                  		move.b	$A(a5),d0
00074CCE 0200 0037                  		andi.b	#$37,d0
00074CD2 8200                       		or.b	d0,d1
00074CD4 1B41 000A                  		move.b	d1,$A(a5)
00074CD8 103C 00B4                  		move.b	#$B4,d0
00074CDC 6000 FC2E                  		bra.w	loc_72716
00074CE0                            ; ===========================================================================
00074CE0                            
00074CE0                            locret_72AEA:
00074CE0 4E75                       		rts	
00074CE2                            ; ===========================================================================
00074CE2                            
00074CE2                            loc_72AEC:				; XREF: loc_72A64
00074CE2 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00074CE6 4E75                       		rts	
00074CE8                            ; ===========================================================================
00074CE8                            
00074CE8                            loc_72AF2:				; XREF: loc_72A64
00074CE8 1D5C 0007                  		move.b	(a4)+,7(a6)
00074CEC 4E75                       		rts	
00074CEE                            ; ===========================================================================
00074CEE                            
00074CEE                            loc_72AF8:				; XREF: loc_72A64
00074CEE 7000                       		moveq	#0,d0
00074CF0 102D 000D                  		move.b	$D(a5),d0
00074CF4 2875 0000                  		movea.l	(a5,d0.w),a4
00074CF8 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00074D00 544C                       		addq.w	#2,a4
00074D02 5800                       		addq.b	#4,d0
00074D04 1B40 000D                  		move.b	d0,$D(a5)
00074D08 4E75                       		rts	
00074D0A                            ; ===========================================================================
00074D0A                            
00074D0A                            loc_72B14:				; XREF: loc_72A64
00074D0A 204E                       		movea.l	a6,a0
00074D0C 43EE 03A0                  		lea	$3A0(a6),a1
00074D10 303C 0087                  		move.w	#$87,d0
00074D14                            
00074D14                            loc_72B1E:
00074D14 20D9                       		move.l	(a1)+,(a0)+
00074D16 51C8 FFFC                  		dbf	d0,loc_72B1E
00074D1A                            
00074D1A 08EE 0002 0040             		bset	#2,$40(a6)
00074D20 264D                       		movea.l	a5,a3
00074D22 1C3C 0028                  		move.b	#$28,d6
00074D26 9C2E 0026                  		sub.b	$26(a6),d6
00074D2A 7E05                       		moveq	#5,d7
00074D2C 4BEE 0070                  		lea	$70(a6),a5
00074D30                            
00074D30                            loc_72B3A:
00074D30 0815 0007                  		btst	#7,(a5)
00074D34 6700                       		beq.s	loc_72B5C
00074D36 08D5 0001                  		bset	#1,(a5)
00074D3A DD2D 0009                  		add.b	d6,9(a5)
00074D3E 0815 0002                  		btst	#2,(a5)
00074D42 6600                       		bne.s	loc_72B5C
00074D44 7000                       		moveq	#0,d0
00074D46 102D 000B                  		move.b	$B(a5),d0
00074D4A 226E 0018                  		movea.l	$18(a6),a1
00074D4E 4EBA 0000                  		jsr	sub_72C4E(pc)
00074D52                            
00074D52                            loc_72B5C:
00074D52 DAFC 0030                  		adda.w	#$30,a5
00074D56 51CF FFD8                  		dbf	d7,loc_72B3A
00074D5A                            
00074D5A 7E02                       		moveq	#2,d7
00074D5C                            
00074D5C                            loc_72B66:
00074D5C 0815 0007                  		btst	#7,(a5)
00074D60 6700                       		beq.s	loc_72B78
00074D62 08D5 0001                  		bset	#1,(a5)
00074D66 4EBA FE2E                  		jsr	sub_729A0(pc)
00074D6A DD2D 0009                  		add.b	d6,9(a5)
00074D6E                            
00074D6E                            loc_72B78:
00074D6E DAFC 0030                  		adda.w	#$30,a5
00074D72 51CF FFE8                  		dbf	d7,loc_72B66
00074D76 2A4B                       		movea.l	a3,a5
00074D78 1D7C 0080 0024             		move.b	#$80,$24(a6)
00074D7E 1D7C 0028 0026             		move.b	#$28,$26(a6)
00074D84 422E 0027                  		clr.b	$27(a6)
00074D88 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00074D90 504F                       		addq.w	#8,sp
00074D92 4E75                       		rts	
00074D94                            ; ===========================================================================
00074D94                            
00074D94                            loc_72B9E:				; XREF: loc_72A64
00074D94 1B5C 0002                  		move.b	(a4)+,2(a5)
00074D98 4E75                       		rts	
00074D9A                            ; ===========================================================================
00074D9A                            
00074D9A                            loc_72BA4:				; XREF: loc_72A64
00074D9A 101C                       		move.b	(a4)+,d0
00074D9C D12D 0009                  		add.b	d0,9(a5)
00074DA0 6000 0000                  		bra.w	sub_72CB4
00074DA4                            ; ===========================================================================
00074DA4                            
00074DA4                            loc_72BAE:				; XREF: loc_72A64
00074DA4 08D5 0004                  		bset	#4,(a5)
00074DA8 4E75                       		rts	
00074DAA                            ; ===========================================================================
00074DAA                            
00074DAA                            loc_72BB4:				; XREF: loc_72A64
00074DAA 1B54 0012                  		move.b	(a4),$12(a5)
00074DAE 1B5C 0013                  		move.b	(a4)+,$13(a5)
00074DB2 4E75                       		rts	
00074DB4                            ; ===========================================================================
00074DB4                            
00074DB4                            loc_72BBE:				; XREF: loc_72A64
00074DB4 101C                       		move.b	(a4)+,d0
00074DB6 D12D 0008                  		add.b	d0,8(a5)
00074DBA 4E75                       		rts	
00074DBC                            ; ===========================================================================
00074DBC                            
00074DBC                            loc_72BC6:				; XREF: loc_72A64
00074DBC 1D54 0002                  		move.b	(a4),2(a6)
00074DC0 1D5C 0001                  		move.b	(a4)+,1(a6)
00074DC4 4E75                       		rts	
00074DC6                            ; ===========================================================================
00074DC6                            
00074DC6                            loc_72BD0:				; XREF: loc_72A64
00074DC6 41EE 0040                  		lea	$40(a6),a0
00074DCA 101C                       		move.b	(a4)+,d0
00074DCC 7230                       		moveq	#$30,d1
00074DCE 7409                       		moveq	#9,d2
00074DD0                            
00074DD0                            loc_72BDA:
00074DD0 1140 0002                  		move.b	d0,2(a0)
00074DD4 D0C1                       		adda.w	d1,a0
00074DD6 51CA FFF8                  		dbf	d2,loc_72BDA
00074DDA                            
00074DDA 4E75                       		rts	
00074DDC                            ; ===========================================================================
00074DDC                            
00074DDC                            loc_72BE6:				; XREF: loc_72A64
00074DDC 101C                       		move.b	(a4)+,d0
00074DDE D12D 0009                  		add.b	d0,9(a5)
00074DE2 4E75                       		rts	
00074DE4                            ; ===========================================================================
00074DE4                            
00074DE4                            loc_72BEE:				; XREF: loc_72A64
00074DE4 422E 002C                  		clr.b	$2C(a6)
00074DE8 4E75                       		rts	
00074DEA                            ; ===========================================================================
00074DEA                            
00074DEA                            loc_72BF4:				; XREF: loc_72A64
00074DEA 0895 0007                  		bclr	#7,(a5)
00074DEE 0895 0004                  		bclr	#4,(a5)
00074DF2 4EBA FB00                  		jsr	sub_726FE(pc)
00074DF6 4A2E 0250                  		tst.b	$250(a6)
00074DFA 6B00                       		bmi.s	loc_72C22
00074DFC 264D                       		movea.l	a5,a3
00074DFE 4BEE 0100                  		lea	$100(a6),a5
00074E02 226E 0018                  		movea.l	$18(a6),a1
00074E06 0895 0002                  		bclr	#2,(a5)
00074E0A 08D5 0001                  		bset	#1,(a5)
00074E0E 102D 000B                  		move.b	$B(a5),d0
00074E12 4EBA 0000                  		jsr	sub_72C4E(pc)
00074E16 2A4B                       		movea.l	a3,a5
00074E18                            
00074E18                            loc_72C22:
00074E18 504F                       		addq.w	#8,sp
00074E1A 4E75                       		rts	
00074E1C                            ; ===========================================================================
00074E1C                            
00074E1C                            loc_72C26:				; XREF: loc_72A64
00074E1C 7000                       		moveq	#0,d0
00074E1E 101C                       		move.b	(a4)+,d0
00074E20 1B40 000B                  		move.b	d0,$B(a5)
00074E24 0815 0002                  		btst	#2,(a5)
00074E28 6600 0000                  		bne.w	locret_72CAA
00074E2C 226E 0018                  		movea.l	$18(a6),a1
00074E30 4A2E 000E                  		tst.b	$E(a6)
00074E34 6700                       		beq.s	sub_72C4E
00074E36 226D 0020                  		movea.l	$20(a5),a1
00074E3A 4A2E 000E                  		tst.b	$E(a6)
00074E3E 6B00                       		bmi.s	sub_72C4E
00074E40 226E 0020                  		movea.l	$20(a6),a1
00074E44                            
00074E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E44                            
00074E44                            
00074E44                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00074E44 5340                       		subq.w	#1,d0
00074E46 6B00                       		bmi.s	loc_72C5C
00074E48 323C 0019                  		move.w	#$19,d1
00074E4C                            
00074E4C                            loc_72C56:
00074E4C D2C1                       		adda.w	d1,a1
00074E4E 51C8 FFFC                  		dbf	d0,loc_72C56
00074E52                            
00074E52                            loc_72C5C:
00074E52 1219                       		move.b	(a1)+,d1
00074E54 1B41 001F                  		move.b	d1,$1F(a5)
00074E58 1801                       		move.b	d1,d4
00074E5A 103C 00B0                  		move.b	#$B0,d0
00074E5E 4EBA FAB8                  		jsr	sub_72722(pc)
00074E62 45FA 0000                  		lea	byte_72D18(pc),a2
00074E66 7613                       		moveq	#$13,d3
00074E68                            
00074E68                            loc_72C72:
00074E68 101A                       		move.b	(a2)+,d0
00074E6A 1219                       		move.b	(a1)+,d1
00074E6C 4EBA FAAA                  		jsr	sub_72722(pc)
00074E70 51CB FFF6                  		dbf	d3,loc_72C72
00074E74 7A03                       		moveq	#3,d5
00074E76 0244 0007                  		andi.w	#7,d4
00074E7A 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00074E7E 162D 0009                  		move.b	9(a5),d3
00074E82                            
00074E82                            loc_72C8C:
00074E82 101A                       		move.b	(a2)+,d0
00074E84 1219                       		move.b	(a1)+,d1
00074E86 E20C                       		lsr.b	#1,d4
00074E88 6400                       		bcc.s	loc_72C96
00074E8A D203                       		add.b	d3,d1
00074E8C                            
00074E8C                            loc_72C96:
00074E8C 4EBA FA8A                  		jsr	sub_72722(pc)
00074E90 51CD FFF0                  		dbf	d5,loc_72C8C
00074E94 103C 00B4                  		move.b	#$B4,d0
00074E98 122D 000A                  		move.b	$A(a5),d1
00074E9C 4EBA FA7A                  		jsr	sub_72722(pc)
00074EA0                            
00074EA0                            locret_72CAA:
00074EA0 4E75                       		rts	
00074EA2                            ; End of function sub_72C4E
00074EA2                            
00074EA2                            ; ===========================================================================
00074EA2 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00074EAA                            
00074EAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074EAA                            
00074EAA                            
00074EAA                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00074EAA 0815 0002                  		btst	#2,(a5)
00074EAE 6600                       		bne.s	locret_72D16
00074EB0 7000                       		moveq	#0,d0
00074EB2 102D 000B                  		move.b	$B(a5),d0
00074EB6 226E 0018                  		movea.l	$18(a6),a1
00074EBA 4A2E 000E                  		tst.b	$E(a6)
00074EBE 6700                       		beq.s	loc_72CD8
00074EC0 226E 0020                  		movea.l	$20(a6),a1
00074EC4 4A2E 000E                  		tst.b	$E(a6)
00074EC8 6B00                       		bmi.s	loc_72CD8
00074ECA 226E 0020                  		movea.l	$20(a6),a1
00074ECE                            
00074ECE                            loc_72CD8:
00074ECE 5340                       		subq.w	#1,d0
00074ED0 6B00                       		bmi.s	loc_72CE6
00074ED2 323C 0019                  		move.w	#$19,d1
00074ED6                            
00074ED6                            loc_72CE0:
00074ED6 D2C1                       		adda.w	d1,a1
00074ED8 51C8 FFFC                  		dbf	d0,loc_72CE0
00074EDC                            
00074EDC                            loc_72CE6:
00074EDC D2FC 0015                  		adda.w	#$15,a1
00074EE0 45FA 0000                  		lea	byte_72D2C(pc),a2
00074EE4 102D 001F                  		move.b	$1F(a5),d0
00074EE8 0240 0007                  		andi.w	#7,d0
00074EEC 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00074EF0 162D 0009                  		move.b	9(a5),d3
00074EF4 6B00                       		bmi.s	locret_72D16
00074EF6 7A03                       		moveq	#3,d5
00074EF8                            
00074EF8                            loc_72D02:
00074EF8 101A                       		move.b	(a2)+,d0
00074EFA 1219                       		move.b	(a1)+,d1
00074EFC E20C                       		lsr.b	#1,d4
00074EFE 6400                       		bcc.s	loc_72D12
00074F00 D203                       		add.b	d3,d1
00074F02 6500                       		bcs.s	loc_72D12
00074F04 4EBA FA12                  		jsr	sub_72722(pc)
00074F08                            
00074F08                            loc_72D12:
00074F08 51CD FFEE                  		dbf	d5,loc_72D02
00074F0C                            
00074F0C                            locret_72D16:
00074F0C 4E75                       		rts	
00074F0E                            ; End of function sub_72CB4
00074F0E                            
00074F0E                            ; ===========================================================================
00074F0E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00074F18 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00074F22 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00074F26                            ; ===========================================================================
00074F26                            
00074F26                            loc_72D30:				; XREF: loc_72A64
00074F26 08D5 0003                  		bset	#3,(a5)
00074F2A 2B4C 0014                  		move.l	a4,$14(a5)
00074F2E 1B5C 0018                  		move.b	(a4)+,$18(a5)
00074F32 1B5C 0019                  		move.b	(a4)+,$19(a5)
00074F36 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00074F3A 101C                       		move.b	(a4)+,d0
00074F3C E208                       		lsr.b	#1,d0
00074F3E 1B40 001B                  		move.b	d0,$1B(a5)
00074F42 426D 001C                  		clr.w	$1C(a5)
00074F46 4E75                       		rts	
00074F48                            ; ===========================================================================
00074F48                            
00074F48                            loc_72D52:				; XREF: loc_72A64
00074F48 08D5 0003                  		bset	#3,(a5)
00074F4C 4E75                       		rts	
00074F4E                            ; ===========================================================================
00074F4E                            
00074F4E                            loc_72D58:				; XREF: loc_72A64
00074F4E 0895 0007                  		bclr	#7,(a5)
00074F52 0895 0004                  		bclr	#4,(a5)
00074F56 4A2D 0001                  		tst.b	1(a5)
00074F5A 6B00                       		bmi.s	loc_72D74
00074F5C 4A2E 0008                  		tst.b	8(a6)
00074F60 6B00 0000                  		bmi.w	loc_72E02
00074F64 4EBA F98E                  		jsr	sub_726FE(pc)
00074F68 6000                       		bra.s	loc_72D78
00074F6A                            ; ===========================================================================
00074F6A                            
00074F6A                            loc_72D74:
00074F6A 4EBA FC2A                  		jsr	sub_729A0(pc)
00074F6E                            
00074F6E                            loc_72D78:
00074F6E 4A2E 000E                  		tst.b	$E(a6)
00074F72 6A00 0000                  		bpl.w	loc_72E02
00074F76 4216                       		clr.b	0(a6)
00074F78 7000                       		moveq	#0,d0
00074F7A 102D 0001                  		move.b	1(a5),d0
00074F7E 6B00                       		bmi.s	loc_72DCC
00074F80 41FA F53E                  		lea	dword_722CC(pc),a0
00074F84 264D                       		movea.l	a5,a3
00074F86 0C00 0004                  		cmpi.b	#4,d0
00074F8A 6600                       		bne.s	loc_72DA8
00074F8C 4A2E 0340                  		tst.b	$340(a6)
00074F90 6A00                       		bpl.s	loc_72DA8
00074F92 4BEE 0340                  		lea	$340(a6),a5
00074F96 226E 0020                  		movea.l	$20(a6),a1
00074F9A 6000                       		bra.s	loc_72DB8
00074F9C                            ; ===========================================================================
00074F9C                            
00074F9C                            loc_72DA8:
00074F9C 5500                       		subq.b	#2,d0
00074F9E E508                       		lsl.b	#2,d0
00074FA0 2A70 0000                  		movea.l	(a0,d0.w),a5
00074FA4 4A15                       		tst.b	(a5)
00074FA6 6A00                       		bpl.s	loc_72DC8
00074FA8 226E 0018                  		movea.l	$18(a6),a1
00074FAC                            
00074FAC                            loc_72DB8:
00074FAC 0895 0002                  		bclr	#2,(a5)
00074FB0 08D5 0001                  		bset	#1,(a5)
00074FB4 102D 000B                  		move.b	$B(a5),d0
00074FB8 4EBA FE8A                  		jsr	sub_72C4E(pc)
00074FBC                            
00074FBC                            loc_72DC8:
00074FBC 2A4B                       		movea.l	a3,a5
00074FBE 6000                       		bra.s	loc_72E02
00074FC0                            ; ===========================================================================
00074FC0                            
00074FC0                            loc_72DCC:
00074FC0 41EE 0370                  		lea	$370(a6),a0
00074FC4 4A10                       		tst.b	(a0)
00074FC6 6A00                       		bpl.s	loc_72DE0
00074FC8 0C00 00E0                  		cmpi.b	#$E0,d0
00074FCC 6700                       		beq.s	loc_72DEA
00074FCE 0C00 00C0                  		cmpi.b	#$C0,d0
00074FD2 6700                       		beq.s	loc_72DEA
00074FD4                            
00074FD4                            loc_72DE0:
00074FD4 41FA F4EA                  		lea	dword_722CC(pc),a0
00074FD8 E608                       		lsr.b	#3,d0
00074FDA 2070 0000                  		movea.l	(a0,d0.w),a0
00074FDE                            
00074FDE                            loc_72DEA:
00074FDE 0890 0002                  		bclr	#2,(a0)
00074FE2 08D0 0001                  		bset	#1,(a0)
00074FE6 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00074FEC 6600                       		bne.s	loc_72E02
00074FEE 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00074FF6                            
00074FF6                            loc_72E02:
00074FF6 504F                       		addq.w	#8,sp
00074FF8 4E75                       		rts	
00074FFA                            ; ===========================================================================
00074FFA                            
00074FFA                            loc_72E06:				; XREF: loc_72A64
00074FFA 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00075000 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00075004 0815 0002                  		btst	#2,(a5)
00075008 6600                       		bne.s	locret_72E1E
0007500A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00075012                            
00075012                            locret_72E1E:
00075012 4E75                       		rts	
00075014                            ; ===========================================================================
00075014                            
00075014                            loc_72E20:				; XREF: loc_72A64
00075014 0895 0003                  		bclr	#3,(a5)
00075018 4E75                       		rts	
0007501A                            ; ===========================================================================
0007501A                            
0007501A                            loc_72E26:				; XREF: loc_72A64
0007501A 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007501E 4E75                       		rts	
00075020                            ; ===========================================================================
00075020                            
00075020                            loc_72E2C:				; XREF: loc_72A64
00075020 101C                       		move.b	(a4)+,d0
00075022 E148                       		lsl.w	#8,d0
00075024 101C                       		move.b	(a4)+,d0
00075026 D8C0                       		adda.w	d0,a4
00075028 534C                       		subq.w	#1,a4
0007502A 4E75                       		rts	
0007502C                            ; ===========================================================================
0007502C                            
0007502C                            loc_72E38:				; XREF: loc_72A64
0007502C 7000                       		moveq	#0,d0
0007502E 101C                       		move.b	(a4)+,d0
00075030 121C                       		move.b	(a4)+,d1
00075032 4A35 0024                  		tst.b	$24(a5,d0.w)
00075036 6600                       		bne.s	loc_72E48
00075038 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007503C                            
0007503C                            loc_72E48:
0007503C 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00075040 66DE                       		bne.s	loc_72E2C
00075042 544C                       		addq.w	#2,a4
00075044 4E75                       		rts	
00075046                            ; ===========================================================================
00075046                            
00075046                            loc_72E52:				; XREF: loc_72A64
00075046 7000                       		moveq	#0,d0
00075048 102D 000D                  		move.b	$D(a5),d0
0007504C 5900                       		subq.b	#4,d0
0007504E 2B8C 0000                  		move.l	a4,(a5,d0.w)
00075052 1B40 000D                  		move.b	d0,$D(a5)
00075056 60C8                       		bra.s	loc_72E2C
00075058                            ; ===========================================================================
00075058                            
00075058                            loc_72E64:				; XREF: loc_72A64
00075058 103C 0088                  		move.b	#$88,d0
0007505C 123C 000F                  		move.b	#$F,d1
00075060 4EBA F8C2                  		jsr	sub_7272E(pc)
00075064 103C 008C                  		move.b	#$8C,d0
00075068 123C 000F                  		move.b	#$F,d1
0007506C 6000 F8B6                  		bra.w	sub_7272E
00075070                            ; ===========================================================================
00075070                            Kos_Z80:        include 'MegaPCM.asm'
00075070                            
00075070                            ; ===============================================================
00075070                            ; Mega PCM Driver Include File
00075070                            ; (c) 2012, Vladikcomper
00075070                            ; ===============================================================
00075070                            
00075070                            ; ---------------------------------------------------------------
00075070                            ; Variables used in DAC table
00075070                            ; ---------------------------------------------------------------
00075070                            
00075070                            ; flags
00075070 =000000C0                  panLR	= $C0
00075070 =00000080                  panL	= $80
00075070 =00000040                  panR	= $40
00075070 =00000000                  pcm	= 0
00075070 =00000004                  dpcm	= 4
00075070 =00000002                  loop	= 2
00075070 =00000001                  pri	= 1
00075070                            
00075070                            ; ---------------------------------------------------------------
00075070                            ; Macros
00075070                            ; ---------------------------------------------------------------
00075070                            
00075070                            z80word macro Value
00075070                            	dc.w	((\Value)&$FF)<<8|((\Value)&$FF00)>>8
00075070                            	endm
00075070                            
00075070                            DAC_Entry macro Pitch,Offset,Flags
00075070                            	dc.b	\Flags			; 00h	- Flags
00075070                            	dc.b	\Pitch			; 01h	- Pitch
00075070                            	dc.b	(\Offset>>15)&$FF	; 02h	- Start Bank
00075070                            	dc.b	(\Offset\_End>>15)&$FF	; 03h	- End Bank
00075070                            	z80word	(\Offset)|$8000		; 04h	- Start Offset (in Start bank)
00075070                            	z80word	(\Offset\_End-1)|$8000	; 06h	- End Offset (in End bank)
00075070                            	endm
00075070                            	
00075070                            IncludeDAC macro Name,Extension
00075070                            \Name:
00075070                            	if strcmp('\extension','wav')
00075070                            		incbin	'dac/\Name\.\Extension\',$3A
00075070                            	else
00075070                            		incbin	'dac/\Name\.\Extension\'
00075070                            	endc
00075070                            \Name\_End:
00075070                            	endm
00075070                            
00075070                            ; ---------------------------------------------------------------
00075070                            ; Driver's code
00075070                            ; ---------------------------------------------------------------
00075070                            
00075070                            MegaPCM:
00075070                            	incbin	'MegaPCM.z80'
00075280                            
00075280                            ; ---------------------------------------------------------------
00075280                            ; DAC Samples Table
00075280                            ; ---------------------------------------------------------------
00075280                            
00075280 0408 0000 0000 0000        	DAC_Entry	$08, Kick, dpcm			; $81	- Kick
00075288 040A 0000 0000 0000        	DAC_Entry	$0A, Snare, dpcm		; $82	- Snare
00075290 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $83	- Timpani
00075298 0409 0000 0000 0000        	DAC_Entry	$09, Clap, dpcm		        ; $84	- Clap  from s2
000752A0 0409 0000 0000 0000        	DAC_Entry	$09, Crash_Cymbal, dpcm		; $85	- Crash Cymbal from s3k
000752A8 0000 0000 0000 0000        	dc.l	0,0					; $86	- <Free>
000752B0 0000 0000 0000 0000        	dc.l	0,0					; $87	- <Free>
000752B8 0412 0000 0000 0000        	DAC_Entry	$12, Timpani, dpcm		; $88	- Hi-Timpani
000752C0 0415 0000 0000 0000        	DAC_Entry	$15, Timpani, dpcm		; $89	- Mid-Timpani
000752C8 041B 0000 0000 0000        	DAC_Entry	$1B, Timpani, dpcm		; $8A	- Mid-Low-Timpani
000752D0 041D 0000 0000 0000        	DAC_Entry	$1D, Timpani, dpcm		; $8B	- Low-Timpani
000752D8                            
000752D8                            MegaPCM_End:
000752D8                            
000752D8                            ; ---------------------------------------------------------------
000752D8                            ; DAC Samples Files
000752D8                            ; ---------------------------------------------------------------
000752D8                            
000780EC                            	even
000780EC                            
000780EC                            
000780EC                            		even
000780EC                            Music81:	include	sound\music81.asm
000780EC                            Mus81_GHZ_Header:
000780EC =00000001                  smpsHeaderStartSong = 1
000780EC 0000                       	smpsHeaderVoice     Mus81_GHZ_Voices
000780EE 0603                       	smpsHeaderChan      $06, $03
000780F0 0103                       	smpsHeaderTempo     $01, $03
000780F2                            
000780F6 0000 F412                  	smpsHeaderFM        Mus81_GHZ_FM1,	$F4, $12
000780FA 0000 000B                  	smpsHeaderFM        Mus81_GHZ_FM2,	$00, $0B
000780FE 0000 F414                  	smpsHeaderFM        Mus81_GHZ_FM3,	$F4, $14
00078102 0000 F408                  	smpsHeaderFM        Mus81_GHZ_FM4,	$F4, $08
00078106 0000 F420                  	smpsHeaderFM        Mus81_GHZ_FM5,	$F4, $20
0007810A 0000 D001 0003             	smpsHeaderPSG       Mus81_GHZ_PSG1,	$D0, $01, $00, fTone_03
00078110 0000 DC05 0003             	smpsHeaderPSG       Mus81_GHZ_PSG2,	$DC, $05, $00, fTone_03
00078116 0000 0003 0004             	smpsHeaderPSG       Mus81_GHZ_PSG3,	$00, $03, $00, fTone_04
0007811C                            
0007811C                            ; FM1 Data
0007811C                            Mus81_GHZ_FM1:
0007811E E040                       	smpsPan             panRight, $00
00078120 F800 00                    	smpsCall            Mus81_GHZ_Call02
00078123 E0C0                       	smpsPan             panCenter, $00
00078125                            
00078125                            Mus81_GHZ_Loop0E:
00078125 E080                       	smpsPan             panLeft, $00
00078127 D904                       	dc.b	nE7, $04
00078129 E040                       	smpsPan             panRight, $00
0007812B D5                         	dc.b	nC7
0007812C E601                       	smpsAlterVol        $01
0007812E F700 0DFF F3               	smpsLoop            $00, $0D, Mus81_GHZ_Loop0E
00078133 D904 8014                  	dc.b	nE7, $04, nRst, $14
00078137 E6ED                       	smpsAlterVol        $ED
00078139 E0C0                       	smpsPan             panCenter, $00
0007813B 8040 8080 8080 80          	dc.b	nRst, $40, nRst, nRst, nRst, nRst, nRst
00078142                            
00078142                            Mus81_GHZ_Jump04:
00078144 F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
00078149                            	;smpsAlterPitch      $F4
00078149 8020                       	dc.b	nRst, $20
0007814B F800 00                    	smpsCall            Mus81_GHZ_Call07
0007814E C938                       	dc.b	nC6, $38
00078150 F800 00                    	smpsCall            Mus81_GHZ_Call07
00078153 C908 08CD                  	dc.b	nC6, $08, $08, nE6
00078157                            	;smpsAlterPitch      $0C
00078159                            	;smpsAlterPitch      $F4
00078159 CB34 E734 C908 CBCD 38E7+  	dc.b	nD6, $34, smpsNoAttack, $34, nC6, $08, nD6, nE6, $38, smpsNoAttack, $38, nC6
00078165 08C9 CDCC 34E7 34C9 08CC+  	dc.b	$08, nC6, nE6, nEb6, $34, smpsNoAttack, $34, nC6, $08, nEb6, nD6, $1C
00078171 E71C                       	dc.b	smpsNoAttack, $1C
00078173                            	;smpsSetvoice        $05
00078173                            	;smpsAlterPitch      $F4
00078173                            	;smpsAlterVol        $0A
00078173 8008 D90C 8004             	dc.b	nRst, $08, nE7, $0C, nRst, $04
00078179 E80B                       	smpsNoteFill        $0B
0007817B D908 DAD9 DC               	dc.b	nE7, $08, nF7, nE7, nG7
00078180 E814                       	smpsNoteFill        $14
00078182 D910                       	dc.b	nE7, $10
00078184 E80B                       	smpsNoteFill        $0B
00078186 D508                       	dc.b	nC7, $08
00078188 E800                       	smpsNoteFill        $00
0007818A                            	;smpsAlterVol        $F6
0007818A                            	;smpsAlterPitch      $18
0007818A F6FF B6                    	smpsJump            Mus81_GHZ_Jump04
0007818D                            
0007818D                            Mus81_GHZ_Call02:
0007818D D204 CED2 CED4 D0D4 D0D5+  	dc.b	nA6, $04, nF6, nA6, nF6, nB6, nG6, nB6, nG6, nC7, nA6, nC7
00078199 D2D7 D4D7 D4               	dc.b	nA6, nD7, nB6, nD7, nB6
0007819E E3                         	smpsReturn
0007819F                            
0007819F                            Mus81_GHZ_Call07:
0007819F D508 D210 D508 D410 D508+  	dc.b	nC7, $08, nA6, $10, nC7, $08, nB6, $10, nC7, $08, nB6, $10
000781AB D030 D208 D9D7 10D5 08D4+  	dc.b	nG6, $30, nA6, $08, nE7, nD7, $10, nC7, $08, nB6, $10, nC7
000781B7 08D4 10D0 38D5 08D2 10D5+  	dc.b	$08, nB6, $10, nG6, $38, nC7, $08, nA6, $10, nC7, $08, nB6
000781C3 10D5 08D4 10D0 30D2 0808+  	dc.b	$10, nC7, $08, nB6, $10, nG6, $30, nA6, $08, $08, nF6, $10
000781CF D208 D010 D208 D010        	dc.b	nA6, $08, nG6, $10, nA6, $08, nG6, $10
000781D7 E3                         	smpsReturn
000781D8                            
000781D8                            ; FM2 Data
000781D8                            Mus81_GHZ_FM2:
000781DA E201                       	smpsNop             $01
000781DC 8008 A2AE A2A3 AFA4 B0     	dc.b	nRst, $08, nA2, nA3, nA2, nBb2, nBb3, nB2, nB3
000781E5 E804                       	smpsNoteFill        $04
000781E9                            
000781E9                            Mus81_GHZ_Loop0C:
000781E9 A508                       	dc.b	nC3, $08
000781EB F700 18FF FA               	smpsLoop            $00, $18, Mus81_GHZ_Loop0C
000781F0 E800                       	smpsNoteFill        $00
000781F2 A504 80A5 08A2 0480 A208+  	dc.b	nC3, $04, nRst, nC3, $08, nA2, $04, nRst, nA2, $08, nBb2, $04
000781FE 80A3 08A4 0480 A408        	dc.b	nRst, nBb2, $08, nB2, $04, nRst, nB2, $08
00078206 E804                       	smpsNoteFill        $04
00078208                            
00078208                            Mus81_GHZ_Loop0D:
00078208 A508                       	dc.b	nC3, $08
0007820A F700 1DFF FA               	smpsLoop            $00, $1D, Mus81_GHZ_Loop0D
0007820F E800                       	smpsNoteFill        $00
00078211 A5A7 A9                    	dc.b	nC3, nD3, nE3
00078214                            
00078214                            Mus81_GHZ_Jump03:
00078216 F800 00                    	smpsCall            Mus81_GHZ_Call05
00078219 F800 00                    	smpsCall            Mus81_GHZ_Call06
0007821C E800                       	smpsNoteFill        $00
0007821E A5A7 A9                    	dc.b	nC3, nD3, nE3
00078221 F800 00                    	smpsCall            Mus81_GHZ_Call05
00078224 F800 00                    	smpsCall            Mus81_GHZ_Call06
00078227 A5A5 A5                    	dc.b	nC3, nC3, nC3
0007822A E800                       	smpsNoteFill        $00
0007822E A318 A2A0 9E9D 0880 9B80+  	dc.b	nBb2, $18, nA2, nG2, nF2, nE2, $08, nRst, nD2, nRst, nA2, $18
0007823A A4A5 A7A9 0880 AE80 AD18+  	dc.b	nB2, nC3, nD3, nE3, $08, nRst, nA3, nRst, nAb3, $18, nG3, nF3
00078246 A8A7 0880 A580 A018 A7A0+  	dc.b	nEb3, nD3, $08, nRst, nC3, nRst, nG2, $18, nD3, nG2, nG3, $08
00078252 9DA9 9EAA A0AC             	dc.b	nE2, nE3, nF2, nF3, nG2, nG3
00078258 E804                       	smpsNoteFill        $04
0007825A E201                       	smpsNop             $01
0007825C F6FF B6                    	smpsJump            Mus81_GHZ_Jump03
0007825F                            
0007825F                            Mus81_GHZ_Call05:
0007825F E804                       	smpsNoteFill        $04
00078261 AA08 AAAA AAAA AAAA        	dc.b	nF3, $08, nF3, nF3, nF3, nF3, nF3, nF3
00078269 E800                       	smpsNoteFill        $00
0007826B AA                         	dc.b	nF3
0007826C E804                       	smpsNoteFill        $04
0007826E A9A9 A9A9 A9               	dc.b	nE3, nE3, nE3, nE3, nE3
00078273 E800                       	smpsNoteFill        $00
00078275 A5A7 A9                    	dc.b	nC3, nD3, nE3
00078278 E804                       	smpsNoteFill        $04
0007827A AAAA AAAA AAAA AA          	dc.b	nF3, nF3, nF3, nF3, nF3, nF3, nF3
00078281 E800                       	smpsNoteFill        $00
00078283 AA                         	dc.b	nF3
00078284 E804                       	smpsNoteFill        $04
00078286 A9A9 A9A9 A9               	dc.b	nE3, nE3, nE3, nE3, nE3
0007828B E800                       	smpsNoteFill        $00
0007828D A5A7 A9                    	dc.b	nC3, nD3, nE3
00078290 E3                         	smpsReturn
00078291                            
00078291                            Mus81_GHZ_Call06:
00078291 E804                       	smpsNoteFill        $04
00078293 AAAA AAAA AAAA AA          	dc.b	nF3, nF3, nF3, nF3, nF3, nF3, nF3
0007829A E800                       	smpsNoteFill        $00
0007829C AA                         	dc.b	nF3
0007829D E804                       	smpsNoteFill        $04
0007829F A9A9 A9A9 A9A9 A9          	dc.b	nE3, nE3, nE3, nE3, nE3, nE3, nE3
000782A6 E800                       	smpsNoteFill        $00
000782A8 A9                         	dc.b	nE3
000782A9 E804                       	smpsNoteFill        $04
000782AB A7A7 A7A7 A7A7 A7          	dc.b	nD3, nD3, nD3, nD3, nD3, nD3, nD3
000782B2 E800                       	smpsNoteFill        $00
000782B4 A7                         	dc.b	nD3
000782B5 E804                       	smpsNoteFill        $04
000782B7 A5A5 A5A5 A5               	dc.b	nC3, nC3, nC3, nC3, nC3
000782BC E3                         	smpsReturn
000782BD                            
000782BD                            ; FM3 Data
000782BD                            Mus81_GHZ_FM3:
000782BF E080                       	smpsPan             panLeft, $00
000782C1 F8FE CA                    	smpsCall            Mus81_GHZ_Call02
000782C6 E0C0                       	smpsPan             panCenter, $00
000782C8 E9E8                       	smpsAlterPitch      $E8
000782CA E6FE                       	smpsAlterVol        $FE
000782CC 8001                       	dc.b	nRst, $01
000782CE                            
000782CE                            Mus81_GHZ_Loop0A:
000782CE C901 E7C8 0F80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0F, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $0F
000782DA 8008                       	dc.b	nRst, $08
000782DC F700 02FF EE               	smpsLoop            $00, $02, Mus81_GHZ_Loop0A
000782E1 C901 E7C8 0780 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $07, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $07
000782ED 8008 CA01 E7C9 0F80 08C9+  	dc.b	nRst, $08, nCs6, $01, smpsNoAttack, nC6, $0F, nRst, $08, nC6, $01, smpsNoAttack
000782F9 C80F 8008 C701 E7C6 10E7+  	dc.b	nB5, $0F, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $10, smpsNoAttack, $3B, nRst
00078305 04                         	dc.b	$04
00078306                            
00078306                            Mus81_GHZ_Loop0B:
00078306 C701 E7C6 0F80 08C9 01E7+  	dc.b	nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nC6, $01, smpsNoAttack, nB5, $0F
00078312 8008 CA01 E7C9 0780 08     	dc.b	nRst, $08, nCs6, $01, smpsNoAttack, nC6, $07, nRst, $08
0007831B F700 02FF E7               	smpsLoop            $00, $02, Mus81_GHZ_Loop0B
00078320 CA01 E7C9 0F80 08C9 01E7+  	dc.b	nCs6, $01, smpsNoAttack, nC6, $0F, nRst, $08, nC6, $01, smpsNoAttack, nB5, $28
0007832C E73E                       	dc.b	smpsNoAttack, $3E
0007832E E602                       	smpsAlterVol        $02
00078330 E918                       	smpsAlterPitch      $18
00078332                            
00078332                            Mus81_GHZ_Jump02:
00078334 E9E8                       	smpsAlterPitch      $E8
00078336 F800 00                    	smpsCall            Mus81_GHZ_Call03
00078339 D2                         	dc.b	nA6
0007833A F800 00                    	smpsCall            Mus81_GHZ_Call03
0007833D D9                         	dc.b	nE7
0007833E F800 00                    	smpsCall            Mus81_GHZ_Call03
00078341 D280 2480 D504 800C D210+  	dc.b	nA6, nRst, $24, nRst, nC7, $04, nRst, $0C, nA6, $10, nG6, $04
0007834D 80D2 80D5 80               	dc.b	nRst, nA6, nRst, nC7, nRst
00078352 F4                         	smpsModOff
00078355 F800 00                    	smpsCall            Mus81_GHZ_Call04
00078358 D004 D2D5 08D2             	dc.b	nG6, $04, nA6, nC7, $08, nA6
0007835E F800 00                    	smpsCall            Mus81_GHZ_Call04
00078361 D004 D2D5 08D9             	dc.b	nG6, $04, nA6, nC7, $08, nE7
00078367 F800 00                    	smpsCall            Mus81_GHZ_Call04
0007836A D004 D2D5 08D2             	dc.b	nG6, $04, nA6, nC7, $08, nA6
00078370 E606                       	smpsAlterVol        $06
00078372 BDBA 0480 1680             	dc.b	nC5, nA4, $04, nRst, $16, nRst
00078378 E6FA                       	smpsAlterVol        $FA
0007837A D908 80D5 80D2 D2D2 0480+  	dc.b	nE7, $08, nRst, nC7, nRst, nA6, nA6, nA6, $04, nRst, nC7, nRst
00078386 D980                       	dc.b	nE7, nRst
00078388 E918                       	smpsAlterPitch      $18
0007838C E0C0                       	smpsPan             panCenter, $00
0007838E E81E                       	smpsNoteFill        $1E
00078390 E606                       	smpsAlterVol        $06
00078392 C218 1818 1808 80C2 80C1+  	dc.b	nF5, $18, $18, $18, $18, $08, nRst, nF5, nRst, nE5, $18, $18
0007839E 1818 0880 C180 C018 1818+  	dc.b	$18, $18, $08, nRst, nE5, nRst, nEb5, $18, $18, $18, $18, $08
000783AA 80C0 80C6 1818 1818 0880+  	dc.b	nRst, nEb5, nRst, nA5, $18, $18, $18, $18, $08, nRst, nA5, nRst
000783B6 E6FA                       	smpsAlterVol        $FA
000783B8 E800                       	smpsNoteFill        $00
000783BA F6FF 76                    	smpsJump            Mus81_GHZ_Jump02
000783BD                            
000783BD                            Mus81_GHZ_Call03:
000783BD 8034 80D0 04D2 D508        	dc.b	nRst, $34, nRst, nG6, $04, nA6, nC7, $08
000783C5 E3                         	smpsReturn
000783C6                            
000783C6                            Mus81_GHZ_Call04:
000783C6 E606                       	smpsAlterVol        $06
000783C8 C108 BD04 8012 80C1 08BD+  	dc.b	nE5, $08, nC5, $04, nRst, $12, nRst, nE5, $08, nC5, $04, nRst
000783D4 BF08 BC04 800E 80          	dc.b	nD5, $08, nB4, $04, nRst, $0E, nRst
000783DB E6FA                       	smpsAlterVol        $FA
000783DD E3                         	smpsReturn
000783DE                            
000783DE                            ; FM4 Data
000783DE                            Mus81_GHZ_FM4:
000783E0 8020 80                    	dc.b	nRst, $20, nRst
000783E3 E080                       	smpsPan             panLeft, $00
000783E5 E9E8                       	smpsAlterPitch      $E8
000783E7 E60A                       	smpsAlterVol        $0A
000783E9                            
000783E9                            Mus81_GHZ_Loop08:
000783E9 C501 E7C4 0F80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0F, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $0F
000783F5 8008                       	dc.b	nRst, $08
000783F7 F700 02FF EE               	smpsLoop            $00, $02, Mus81_GHZ_Loop08
000783FC C501 E7C4 0780 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $07, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $07
00078408 8008 C701 E7C6 0F80 08C5+  	dc.b	nRst, $08, nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nAb5, $01, smpsNoAttack
00078414 C40F 8008 C301 E7C2 10E7+  	dc.b	nG5, $0F, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $10, smpsNoAttack, $3C, nRst
00078420 04                         	dc.b	$04
00078421                            
00078421                            Mus81_GHZ_Loop09:
00078421 C301 E7C2 0F80 08C5 01E7+  	dc.b	nFs5, $01, smpsNoAttack, nF5, $0F, nRst, $08, nAb5, $01, smpsNoAttack, nG5, $0F
0007842D 8008 C701 E7C6 0780 08     	dc.b	nRst, $08, nBb5, $01, smpsNoAttack, nA5, $07, nRst, $08
00078436 F700 02FF E7               	smpsLoop            $00, $02, Mus81_GHZ_Loop09
0007843B C701 E7C6 0F80 08C5 01E7+  	dc.b	nBb5, $01, smpsNoAttack, nA5, $0F, nRst, $08, nAb5, $01, smpsNoAttack, nG5, $28
00078447 E73F                       	dc.b	smpsNoAttack, $3F
00078449 E6F6                       	smpsAlterVol        $F6
0007844B E918                       	smpsAlterPitch      $18
0007844D F4                         	smpsModOff
0007844E                            
0007844E                            Mus81_GHZ_Jump01:
00078450 E9E8                       	smpsAlterPitch      $E8
00078452 E618                       	smpsAlterVol        $18
00078454 E080                       	smpsPan             panLeft, $00
00078456 E6FD                       	smpsAlterVol        $FD
00078458 F800 00                    	smpsCall            Mus81_GHZ_Call01
0007845B BFBF C1C1 BDBD BABA B6B6+  	dc.b	nD5, nD5, nE5, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5
00078467 BCBC B8B8 BFBF             	dc.b	nB4, nB4, nG4, nG4, nD5, nD5
0007846D F800 00                    	smpsCall            Mus81_GHZ_Call01
00078470 B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
0007847C E603                       	smpsAlterVol        $03
0007847E E918                       	smpsAlterPitch      $18
00078480 E9F4                       	smpsAlterPitch      $F4
00078484 D010 D2D4                  	dc.b	nG6, $10, nA6, nB6
00078488 E6F9                       	smpsAlterVol        $F9
0007848A D528 E728 D710 D4D0 D528+  	dc.b	nC7, $28, smpsNoAttack, $28, nD7, $10, nB6, nG6, nC7, $28, smpsNoAttack, $28
00078496 D410 D0D4 D528 E728 D710+  	dc.b	nB6, $10, nG6, nB6, nC7, $28, smpsNoAttack, $28, nD7, $10, nB6, nG6
000784A2 D540 E740                  	dc.b	nC7, $40, smpsNoAttack, $40
000784A6 E90C                       	smpsAlterPitch      $0C
000784A8 E607                       	smpsAlterVol        $07
000784AA E6E8                       	smpsAlterVol        $E8
000784AE E81E                       	smpsNoteFill        $1E
000784B0 E0C0                       	smpsPan             panCenter, $00
000784B2 E612                       	smpsAlterVol        $12
000784B4 BF18 1818 1808 80BF 80BD+  	dc.b	nD5, $18, $18, $18, $18, $08, nRst, nD5, nRst, nC5, $18, $18
000784C0 1818 0880 BD80 BD18 1818+  	dc.b	$18, $18, $08, nRst, nC5, nRst, nC5, $18, $18, $18, $18, $08
000784CC 80BD 80C2 1818 1818 0880+  	dc.b	nRst, nC5, nRst, nF5, $18, $18, $18, $18, $08, nRst, nF5, nRst
000784D8 E6EE                       	smpsAlterVol        $EE
000784DA E800                       	smpsNoteFill        $00
000784DC F6FF 70                    	smpsJump            Mus81_GHZ_Jump01
000784DF                            
000784DF                            Mus81_GHZ_Call01:
000784DF C108 C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $08, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000784EB BCB8 B8                    	dc.b	nB4, nG4, nG4
000784EE E3                         	smpsReturn
000784EF                            
000784EF                            ; FM5 Data
000784EF                            Mus81_GHZ_FM5:
000784F1 8020 80                    	dc.b	nRst, $20, nRst
000784F6 E040                       	smpsPan             panRight, $00
000784F8 E9E8                       	smpsAlterPitch      $E8
000784FA E6F2                       	smpsAlterVol        $F2
000784FC                            
000784FC                            Mus81_GHZ_Loop02:
000784FC C201 E7C1 0F80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0F, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $0F
00078508 8008                       	dc.b	nRst, $08
0007850A F700 02FF EE               	smpsLoop            $00, $02, Mus81_GHZ_Loop02
0007850F C201 E7C1 0780 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $07, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $07
0007851B 8008 C301 E7C2 0F80 08C2+  	dc.b	nRst, $08, nFs5, $01, smpsNoAttack, nF5, $0F, nRst, $08, nF5, $01, smpsNoAttack
00078527 C10F 8008 C001 E7BF 10E7+  	dc.b	nE5, $0F, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $10, smpsNoAttack, $3C, nRst
00078533 04                         	dc.b	$04
00078534                            
00078534                            Mus81_GHZ_Loop03:
00078534 C001 E7BF 0F80 08C2 01E7+  	dc.b	nEb5, $01, smpsNoAttack, nD5, $0F, nRst, $08, nF5, $01, smpsNoAttack, nE5, $0F
00078540 8008 C301 E7C2 0780 08     	dc.b	nRst, $08, nFs5, $01, smpsNoAttack, nF5, $07, nRst, $08
00078549 F700 02FF E7               	smpsLoop            $00, $02, Mus81_GHZ_Loop03
0007854E C301 E7C2 0F80 08C2 01E7+  	dc.b	nFs5, $01, smpsNoAttack, nF5, $0F, nRst, $08, nF5, $01, smpsNoAttack, nE5, $28
0007855A E73F                       	dc.b	smpsNoAttack, $3F
0007855C E918                       	smpsAlterPitch      $18
0007855E E60E                       	smpsAlterVol        $0E
00078560                            
00078560                            Mus81_GHZ_Jump00:
00078562 E9E8                       	smpsAlterPitch      $E8
00078564 E040                       	smpsPan             panRight, $00
00078566 E6FD                       	smpsAlterVol        $FD
00078568 F800 00                    	smpsCall            Mus81_GHZ_Call00
0007856B BFBF C1C1 BDBD BABA B6B6+  	dc.b	nD5, nD5, nE5, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5
00078577 BCBC B8B8 BFBF             	dc.b	nB4, nB4, nG4, nG4, nD5, nD5
0007857D F800 00                    	smpsCall            Mus81_GHZ_Call00
00078580 B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
0007858C E918                       	smpsAlterPitch      $18
0007858E E603                       	smpsAlterVol        $03
00078590 E9F4                       	smpsAlterPitch      $F4
00078594 E102                       	smpsAlterNote       $02
00078596 D010 D2D4                  	dc.b	nG6, $10, nA6, nB6
0007859A E6F9                       	smpsAlterVol        $F9
0007859C D528 E728 D710 D4D0 D528+  	dc.b	nC7, $28, smpsNoAttack, $28, nD7, $10, nB6, nG6, nC7, $28, smpsNoAttack, $28
000785A8 D410 D0D4 D528 E728 D710+  	dc.b	nB6, $10, nG6, nB6, nC7, $28, smpsNoAttack, $28, nD7, $10, nB6, nG6
000785B4 D540 E740                  	dc.b	nC7, $40, smpsNoAttack, $40
000785B8 E90C                       	smpsAlterPitch      $0C
000785BA E100                       	smpsAlterNote       $00
000785BE E9F4                       	smpsAlterPitch      $F4
000785C0 E6FA                       	smpsAlterVol        $FA
000785C2                            
000785C2                            Mus81_GHZ_Loop04:
000785C2 D308 CED7 CED3 CED7 CE     	dc.b	nBb6, $08, nF6, nD7, nF6, nBb6, nF6, nD7, nF6
000785CB F700 02FF F3               	smpsLoop            $00, $02, Mus81_GHZ_Loop04
000785D0                            
000785D0                            Mus81_GHZ_Loop05:
000785D0 D2CD D5CD D2CD D5CD        	dc.b	nA6, nE6, nC7, nE6, nA6, nE6, nC7, nE6
000785D8 F700 02FF F4               	smpsLoop            $00, $02, Mus81_GHZ_Loop05
000785DD                            
000785DD                            Mus81_GHZ_Loop06:
000785DD D1CC D5CC D1CC D5CC        	dc.b	nAb6, nEb6, nC7, nEb6, nAb6, nEb6, nC7, nEb6
000785E5 F700 02FF F4               	smpsLoop            $00, $02, Mus81_GHZ_Loop06
000785EA                            
000785EA                            Mus81_GHZ_Loop07:
000785EA D5D2 D9D2 D5D2 D9D2        	dc.b	nC7, nA6, nE7, nA6, nC7, nA6, nE7, nA6
000785F2 F700 02FF F4               	smpsLoop            $00, $02, Mus81_GHZ_Loop07
000785F7 E60D                       	smpsAlterVol        $0D
000785F9 E90C                       	smpsAlterPitch      $0C
000785FB F6FF 63                    	smpsJump            Mus81_GHZ_Jump00
000785FE                            
000785FE                            Mus81_GHZ_Call00:
000785FE C108 C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $08, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
0007860A BCB8 B8                    	dc.b	nB4, nG4, nG4
0007860D E3                         	smpsReturn
0007860E                            
0007860E                            ; PSG1 Data
0007860E                            Mus81_GHZ_PSG1:
0007860E F505                       	smpsPSGvoice        fTone_05
00078610 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
00078615 8040                       	dc.b	nRst, $40
00078617 E810                       	smpsNoteFill        $10
00078619 C118 BFC1 BFC1 0880 BF80+  	dc.b	nE5, $18, nD5, nE5, nD5, nE5, $08, nRst, nD5, nRst, nF5, $18
00078625 C1                         	dc.b	nE5
00078626 E800                       	smpsNoteFill        $00
00078628 BF28 E728                  	dc.b	nD5, $28, smpsNoAttack, $28
0007862C E810                       	smpsNoteFill        $10
0007862E BF18 C1C2 10BF 18C1 C210+  	dc.b	nD5, $18, nE5, nF5, $10, nD5, $18, nE5, nF5, $10, $18
00078639 E800                       	smpsNoteFill        $00
0007863B C134 E734                  	dc.b	nE5, $34, smpsNoAttack, $34
0007863F F4                         	smpsModOff
00078640                            
00078640                            Mus81_GHZ_Loop13:
00078640 F501                       	smpsPSGvoice        fTone_01
00078642                            
00078642                            Mus81_GHZ_Loop12:
00078642 8010 C904 8014 C908 8020+  	dc.b	nRst, $10, nC6, $04, nRst, $14, nC6, $08, nRst, $20, nB5, $04
0007864E 8014 C808 8010             	dc.b	nRst, $14, nB5, $08, nRst, $10
00078654 F701 03FF EA               	smpsLoop            $01, $03, Mus81_GHZ_Loop12
00078659 8010 C604 8014 C608 8020+  	dc.b	nRst, $10, nA5, $04, nRst, $14, nA5, $08, nRst, $20, nG5, $04
00078665 8014 C408 8010             	dc.b	nRst, $14, nG5, $08, nRst, $10
0007866B F700 02FF D1               	smpsLoop            $00, $02, Mus81_GHZ_Loop13
00078670 F505                       	smpsPSGvoice        fTone_05
00078672 D318 D2D0 CECD 0880 CB80+  	dc.b	nBb6, $18, nA6, nG6, nF6, nE6, $08, nRst, nD6, nRst, nA5, $18
0007867E C8C9 CBCD 0880 D280 D118+  	dc.b	nB5, nC6, nD6, nE6, $08, nRst, nA6, nRst, nAb6, $18, nG6, nF6
0007868A CCCB 10C9 0880 8008 D0D2+  	dc.b	nEb6, nD6, $10, nC6, $08, nRst, nRst, $08, nG6, nA6, nG6, $10
00078696 08D2 8010                  	dc.b	$08, nA6, nRst, $10
0007869A EC01                       	smpsPSGAlterVol     $01
0007869C C618 0880 C680             	dc.b	nA5, $18, $08, nRst, nA5, nRst
000786A2 ECFF                       	smpsPSGAlterVol     $FF
000786A4 F503                       	smpsPSGvoice        fTone_03
000786A6 F6FF 98                    	smpsJump            Mus81_GHZ_Loop13
000786A9                            
000786A9                            ; PSG2 Data
000786A9                            Mus81_GHZ_PSG2:
000786A9 8040                       	dc.b	nRst, $40
000786AB ECFE                       	smpsPSGAlterVol     $FE
000786AD                            
000786AD                            Mus81_GHZ_Loop0F:
000786AD E806                       	smpsNoteFill        $06
000786AF D508 D4D2 D0D5 D4D2 D0     	dc.b	nC7, $08, nB6, nA6, nG6, nC7, nB6, nA6, nG6
000786B8 F700 08FF F1               	smpsLoop            $00, $08, Mus81_GHZ_Loop0F
000786BD E800                       	smpsNoteFill        $00
000786BF                            
000786BF                            Mus81_GHZ_Loop11:
000786BF F501                       	smpsPSGvoice        fTone_01
000786C1                            
000786C1                            Mus81_GHZ_Loop10:
000786C1 8010 CD04 8014 CD08 8020+  	dc.b	nRst, $10, nE6, $04, nRst, $14, nE6, $08, nRst, $20, nD6, $04
000786CD 8014 CB08 8010             	dc.b	nRst, $14, nD6, $08, nRst, $10
000786D3 F701 03FF EA               	smpsLoop            $01, $03, Mus81_GHZ_Loop10
000786D8 8010 C904 8014 C908 8020+  	dc.b	nRst, $10, nC6, $04, nRst, $14, nC6, $08, nRst, $20, nB5, $04
000786E4 8014 C808 8010             	dc.b	nRst, $14, nB5, $08, nRst, $10
000786EA F700 02FF D1               	smpsLoop            $00, $02, Mus81_GHZ_Loop11
000786EF CB34 E734 C908 CBCD 38E7+  	dc.b	nD6, $34, smpsNoAttack, $34, nC6, $08, nD6, nE6, $38, smpsNoAttack, $38, nC6
000786FB 08C9 CDCC 34E7 34C9 08CC+  	dc.b	$08, nC6, nE6, nEb6, $34, smpsNoAttack, $34, nC6, $08, nEb6, nD6
00078706 F505                       	smpsPSGvoice        fTone_05
00078708 BD18 1818 1808 80BD 80     	dc.b	nC5, $18, $18, $18, $18, $08, nRst, nC5, nRst
00078711 F503                       	smpsPSGvoice        fTone_03
00078713 F6FF AA                    	smpsJump            Mus81_GHZ_Loop11
00078716                            
00078716                            
00078716                            ; PSG3 Data
00078716                            Mus81_GHZ_PSG3:
00078716 F3E7                       	smpsPSGform         $E7
00078718 E806                       	smpsNoteFill        $06
0007871A C610 1010                  	dc.b	nA5, $10, $10, $10
0007871E                            
0007871E                            Mus81_GHZ_Jump05:
0007871E 08                         	dc.b	$08
0007871F F6FF FD                    	smpsJump            Mus81_GHZ_Jump05
00078722                            
00078722                            ; DAC Data
00078722                            Mus81_GHZ_DAC:
00078722 8008 8182 8181 8282 82     	dc.b	nRst, $08, dKick, dSnare, dKick, dKick, dSnare, dSnare, dSnare
0007872B                            
0007872B                            Mus81_GHZ_Loop00:
0007872B 8110 8208 8110 0882 10     	dc.b	dKick, $10, dSnare, $08, dKick, $10, $08, dSnare, $10
00078734 F700 07FF F3               	smpsLoop            $00, $07, Mus81_GHZ_Loop00
00078739 8110 8208 8110 8208 0808   	dc.b	dKick, $10, dSnare, $08, dKick, $10, dSnare, $08, $08, $08
00078743                            
00078743                            Mus81_GHZ_Loop01:
00078743 8110 8208 8110 0882 10     	dc.b	dKick, $10, dSnare, $08, dKick, $10, $08, dSnare, $10
0007874C F700 07FF F3               	smpsLoop            $00, $07, Mus81_GHZ_Loop01
00078751 8110 8208 8110 8208 0808   	dc.b	dKick, $10, dSnare, $08, dKick, $10, dSnare, $08, $08, $08
0007875B F701 02FF E4               	smpsLoop            $01, $02, Mus81_GHZ_Loop01
00078760 F6FF E1                    	smpsJump            Mus81_GHZ_Loop01
00078763                            
00078763                            Mus81_GHZ_Voices:
00078763                            ;	Voice $00
00078763                            ;	$08
00078763                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
00078763                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
00078763                            	smpsVcAlgorithm     $00
00078763                            	smpsVcFeedback      $01
00078763                            	smpsVcUnusedBits    $00
00078763                            	smpsVcDetune        $00, $03, $07, $00
00078763                            	smpsVcCoarseFreq    $00, $00, $00, $0A
00078763                            	smpsVcRateScale     $01, $01, $00, $00
00078763                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00078763                            	smpsVcAmpMod        $00, $00, $00, $00
00078763                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
00078763                            	smpsVcDecayRate2    $03, $04, $04, $00
00078763                            	smpsVcDecayLevel    $02, $02, $02, $02
00078763                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00078763 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
0007877C                            
0007877C                            ;	Voice $01
0007877C                            ;	$3C
0007877C                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $0D, $12, $05
0007877C                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
0007877C                            	smpsVcAlgorithm     $04
0007877C                            	smpsVcFeedback      $07
0007877C                            	smpsVcUnusedBits    $00
0007877C                            	smpsVcDetune        $00, $00, $00, $00
0007877C                            	smpsVcCoarseFreq    $00, $00, $00, $01
0007877C                            	smpsVcRateScale     $00, $00, $00, $00
0007877C                            	smpsVcAttackRate    $1F, $15, $1F, $1F
0007877C                            	smpsVcAmpMod        $00, $00, $00, $00
0007877C                            	smpsVcDecayRate1    $05, $12, $0D, $11
0007877C                            	smpsVcDecayRate2    $02, $09, $04, $07
0007877C                            	smpsVcDecayLevel    $01, $02, $03, $05
0007877C                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0007877C 3C01 0000 001F 1F15 1F11+  	smpsVcTotalLevel    $00, $07, $00, $1A
00078795                            
00078795                            ;	Voice $02
00078795                            ;	$36
00078795                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
00078795                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
00078795                            	smpsVcAlgorithm     $06
00078795                            	smpsVcFeedback      $06
00078795                            	smpsVcUnusedBits    $00
00078795                            	smpsVcDetune        $00, $00, $00, $00
00078795                            	smpsVcCoarseFreq    $01, $01, $01, $0F
00078795                            	smpsVcRateScale     $00, $00, $00, $00
00078795                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00078795                            	smpsVcAmpMod        $00, $00, $00, $00
00078795                            	smpsVcDecayRate1    $00, $0E, $11, $12
00078795                            	smpsVcDecayRate2    $09, $07, $0A, $00
00078795                            	smpsVcDecayLevel    $00, $01, $00, $0F
00078795                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00078795 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000787AE                            
000787AE                            ;	Voice $03
000787AE                            ;	$3D
000787AE                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000787AE                            ;	$00, $0D, $0D, $0D, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000787AE                            	smpsVcAlgorithm     $05
000787AE                            	smpsVcFeedback      $07
000787AE                            	smpsVcUnusedBits    $00
000787AE                            	smpsVcDetune        $00, $00, $00, $00
000787AE                            	smpsVcCoarseFreq    $02, $02, $02, $01
000787AE                            	smpsVcRateScale     $00, $02, $00, $00
000787AE                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000787AE                            	smpsVcAmpMod        $00, $00, $00, $00
000787AE                            	smpsVcDecayRate1    $05, $02, $05, $08
000787AE                            	smpsVcDecayRate2    $0D, $0D, $0D, $00
000787AE                            	smpsVcDecayLevel    $01, $01, $01, $01
000787AE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000787AE 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000787C7                            
000787C7                            ;	Voice $04
000787C7                            ;	$2C
000787C7                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000787C7                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000787C7                            	smpsVcAlgorithm     $04
000787C7                            	smpsVcFeedback      $05
000787C7                            	smpsVcUnusedBits    $00
000787C7                            	smpsVcDetune        $03, $03, $07, $07
000787C7                            	smpsVcCoarseFreq    $04, $04, $08, $02
000787C7                            	smpsVcRateScale     $00, $00, $00, $00
000787C7                            	smpsVcAttackRate    $12, $1F, $12, $1F
000787C7                            	smpsVcAmpMod        $00, $00, $00, $00
000787C7                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000787C7                            	smpsVcDecayRate2    $00, $00, $00, $00
000787C7                            	smpsVcDecayLevel    $01, $00, $01, $00
000787C7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000787C7 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000787E0                            
000787E0                            ;	Voice $05
000787E0                            ;	$2C
000787E0                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000787E0                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000787E0                            	smpsVcAlgorithm     $04
000787E0                            	smpsVcFeedback      $05
000787E0                            	smpsVcUnusedBits    $00
000787E0                            	smpsVcDetune        $03, $03, $07, $07
000787E0                            	smpsVcCoarseFreq    $04, $04, $04, $04
000787E0                            	smpsVcRateScale     $00, $00, $00, $00
000787E0                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000787E0                            	smpsVcAmpMod        $00, $00, $00, $00
000787E0                            	smpsVcDecayRate1    $00, $00, $00, $00
000787E0                            	smpsVcDecayRate2    $01, $00, $01, $00
000787E0                            	smpsVcDecayLevel    $03, $00, $03, $00
000787E0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000787E0 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000787F9                            
000787F9                            
000787F9                            ;	Voice $07
000787F9                            ;	$34
000787F9                            ;	$00, $02, $01, $01, 	$1F, $1F, $1F, $1F, 	$10, $06, $06, $06
000787F9                            ;	$01, $06, $06, $06, 	$35, $1A, $15, $1A, 	$10, $00, $18, $00
000787F9                            	smpsVcAlgorithm     $04
000787F9                            	smpsVcFeedback      $06
000787F9                            	smpsVcUnusedBits    $00
000787F9                            	smpsVcDetune        $00, $00, $00, $00
000787F9                            	smpsVcCoarseFreq    $01, $01, $02, $00
000787F9                            	smpsVcRateScale     $00, $00, $00, $00
000787F9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000787F9                            	smpsVcAmpMod        $00, $00, $00, $00
000787F9                            	smpsVcDecayRate1    $06, $06, $06, $10
000787F9                            	smpsVcDecayRate2    $06, $06, $06, $01
000787F9                            	smpsVcDecayLevel    $01, $01, $01, $03
000787F9                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000787F9 3400 0201 011F 1F1F 1F10+  	smpsVcTotalLevel    $00, $18, $00, $10
00078812                            
00078812                            
00078812                            ;	Voice $07
00078812                            ;	$3D
00078812                            ;	$01, $02, $02, $02, 	$10, $50, $50, $50, 	$07, $08, $08, $08
00078812                            ;	$01, $00, $00, $00, 	$20, $17, $17, $17, 	$1C, $80, $80, $80
00078812                            	smpsVcAlgorithm     $05
00078812                            	smpsVcFeedback      $07
00078812                            	smpsVcUnusedBits    $00
00078812                            	smpsVcDetune        $00, $00, $00, $00
00078812                            	smpsVcCoarseFreq    $02, $02, $02, $01
00078812                            	smpsVcRateScale     $01, $01, $01, $00
00078812                            	smpsVcAttackRate    $10, $10, $10, $10
00078812                            	smpsVcAmpMod        $00, $00, $00, $00
00078812                            	smpsVcDecayRate1    $08, $08, $08, $07
00078812                            	smpsVcDecayRate2    $00, $00, $00, $01
00078812                            	smpsVcDecayLevel    $01, $01, $01, $02
00078812                            	smpsVcReleaseRate   $07, $07, $07, $00
00078812 3D01 0202 0210 5050 5007+  	smpsVcTotalLevel    $00, $00, $00, $1C
0007882B                            
0007882B                            ;	Voice $08
0007882B                            ;	$2C
0007882B                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
0007882B                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
0007882B                            	smpsVcAlgorithm     $04
0007882B                            	smpsVcFeedback      $05
0007882B                            	smpsVcUnusedBits    $00
0007882B                            	smpsVcDetune        $03, $03, $07, $07
0007882B                            	smpsVcCoarseFreq    $04, $04, $04, $04
0007882B                            	smpsVcRateScale     $00, $00, $00, $00
0007882B                            	smpsVcAttackRate    $1F, $1F, $12, $1F
0007882B                            	smpsVcAmpMod        $00, $00, $00, $00
0007882B                            	smpsVcDecayRate1    $07, $00, $07, $00
0007882B                            	smpsVcDecayRate2    $07, $00, $07, $00
0007882B                            	smpsVcDecayLevel    $03, $00, $03, $00
0007882B                            	smpsVcReleaseRate   $08, $00, $08, $00
0007882B 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
00078844                            
00078844                            
00078844                            		even
00078844                            Music82:	incbin	sound\music82.bin
0007A456 00                         		even
0007A456                            Music83:	incbin	sound\music83.bin
0007A9A2                            		even
0007A9A2                            Music84:	incbin	sound\music84.bin
0007AC02                            		even
0007AC02                            Music85:	incbin	sound\music85.bin
0007C770 00                         		even
0007C770                            Music86:	incbin	sound\music86.bin
0007CBC0                            		even
0007CBC0                            Music87:	incbin	sound\music87.bin
0007E50A                            		even
0007E50A                            Music88:	incbin	sound\music88.bin
0007E968                            		even
0007E968                            Music89:	incbin	sound\music89.bin
0007EDC6                            		even
0007EDC6                            Music8A:	incbin	sound\music8A.bin
0007F50E                            		even
0007F50E                            Music8B:	incbin	sound\music8B.bin
0007F97C                            		even
0007F97C                            Music8C:	incbin	sound\music8C.bin
0007FDEA                            		even
0007FDEA                            Music8D:	incbin	sound\music8D.bin
00080236                            		even
00080236                            Music8E:	incbin	sound\music8E.bin
00080682                            		even
00080682                            Music8F:	incbin	sound\music8F.bin
00080ACE                            		even
00080ACE                            Music90:	incbin	sound\music90.bin
0008101E                            		even
0008101E                            Music91:	incbin	sound\music91.bin
0008156E                            		even
0008156E                            Music92:	incbin	sound\music92.bin
00081ABE                            		even
00081ABE                            Music93:	incbin	sound\music93.bin
00081CDA                            		even
00081CDA                            ; Vladikcomper: Here goes extra music slots to fit 3 different songs per zone
00081CDA                            Music94:	incbin	sound\music94.bin
00081E56 00                         		even
00081E56                            Music95:	incbin	sound\music95.bin
00082182                            		even	
00082182                            Music96:	incbin	sound\music96.bin
00082250                            		even
00082250                            Music97:	incbin	sound\music97.bin
000824EA                            		even	
000824EA                            Music98:	incbin  sound\music98.bin
00082A18                            		even	
00082A18                            Music99:	incbin	sound\music99.bin
00082B86 00                         		even	
00082B86                            Music9A:	incbin	sound\music9A.bin
00082CB0                            		even	
00082CB0                            Music9B:	include	sound\sonis.asm
00082CB0                            sonis_Header:
00082CB0 =00000001                  smpsHeaderStartSong = 1
00082CB0 0000                       	smpsHeaderVoice     sonis_Voices
00082CB2 0602                       	smpsHeaderChan      $06, $02
00082CB4 0205                       	smpsHeaderTempo     $02, $05
00082CB6                            
00082CBA 0000 000C                  	smpsHeaderFM        sonis_FM1,	$00, $0C
00082CBE 0000 0009                  	smpsHeaderFM        sonis_FM2,	$00, $09
00082CC2 0000 000D                  	smpsHeaderFM        sonis_FM3,	$00, $0D
00082CC6 0000 000C                  	smpsHeaderFM        sonis_FM4,	$00, $0C
00082CCA 0000 000E                  	smpsHeaderFM        sonis_FM5,	$00, $0E
00082CCE 0000 0000 0003             	smpsHeaderPSG       sonis_PSG1,	$00, $00, $00, fTone_03
00082CD4 0000 0002 0003             	smpsHeaderPSG       sonis_PSG2,	$00, $02, $00, fTone_03
00082CDA                            
00082CDA                            ; DAC Data
00082CDA                            sonis_DAC:
00082CDA E0C0                       	smpsPan             panCenter, $00
00082CDC 8106 8282 8204 02          	dc.b	dKick, $06, dSnare, dSnare, dSnare, $04, $02
00082CE3                            
00082CE3                            sonis_Loop00:
00082CE3 8106 82                    	dc.b	dKick, $06, dSnare
00082CE6 F700 07FF F9               	smpsLoop            $00, $07, sonis_Loop00
00082CEB 8104 8201 0105 1C09 0685+  	dc.b	dKick, $04, dSnare, $01, $01, $05, $1C, $09, $06, $85, $4E
00082CF6 E0C0                       	smpsPan             panCenter, $00
00082CF8 F2                         	smpsStop
00082CF9                            
00082CF9                            ; FM1 Data
00082CF9                            sonis_FM1:
00082CF9 E0C0                       	smpsPan             panCenter, $00
00082CFD 801E BE0B 8001 BE03 80BF+  	dc.b	nRst, $1E, nCs5, $0B, nRst, $01, nCs5, $03, nRst, nD5, $08, nRst
00082D09 01BC 0C80 03BE 80BE 80BE+  	dc.b	$01, nB4, $0C, nRst, $03, nCs5, nRst, nCs5, nRst, nCs5, nRst, nA4
00082D15 80B8 0880 01BC 0680 09BA+  	dc.b	nRst, nG4, $08, nRst, $01, nB4, $06, nRst, $09, nA4, $03, nA5
00082D21 02C4 03C1 C0BF 0280 01BD+  	dc.b	$02, nG5, $03, nE5, nEb5, nD5, $02, nRst, $01, nC5, $02, nRst
00082D2D 01BA 07C5 09C6 0380 51     	dc.b	$01, nA4, $07, nAb5, $09, nA5, $03, nRst, $51
00082D36 E0C0                       	smpsPan             panCenter, $00
00082D3A F2                         	smpsStop
00082D3B                            
00082D3B                            ; FM2 Data
00082D3B                            sonis_FM2:
00082D3B E0C0                       	smpsPan             panCenter, $00
00082D3F 8018 A203 80A2 809D 809D+  	dc.b	nRst, $18, nA2, $03, nRst, nA2, nRst, nE2, nRst, nE2, nRst, nG2
00082D4B 09A4 A706 A203 80A2 809D+  	dc.b	$09, nB2, nD3, $06, nA2, $03, nRst, nA2, nRst, nE2, nRst, nE2
00082D57 80A7 09A6 A406 A203 AE02+  	dc.b	nRst, nD3, $09, nCs3, nB2, $06, nA2, $03, nA3, $02, nG3, $03
00082D63 A9A8 A702 8001 A502 8001+  	dc.b	nE3, nEb3, nD3, $02, nRst, $01, nC3, $02, nRst, $01, nA2, $09
00082D6F A105 A202 8006 9636 8018   	dc.b	nAb2, $05, nA2, $02, nRst, $06, nA1, $36, nRst, $18
00082D79 E0C0                       	smpsPan             panCenter, $00
00082D7D F2                         	smpsStop
00082D7E                            
00082D7E                            ; FM3 Data
00082D7E                            sonis_FM3:
00082D7E E0C0                       	smpsPan             panCenter, $00
00082D82 8018 C103 80C1 80BE 80BE+  	dc.b	nRst, $18, nE5, $03, nRst, nE5, nRst, nCs5, nRst, nCs5, nRst, nD5
00082D8E 0880 01BF 0C80 03C1 80C1+  	dc.b	$08, nRst, $01, nD5, $0C, nRst, $03, nE5, nRst, nE5, nRst, nCs5
00082D9A 80BE 80C4 0880 01C4 0C80+  	dc.b	nRst, nCs5, nRst, nG5, $08, nRst, $01, nG5, $0C, nRst, $1E, nEb5
00082DA6 09C1 06                    	dc.b	$09, nE5, $06
00082DAB E6FD                       	smpsAlterVol        $FD
00082DAD E103                               smpsAlterNote       $03
00082DAF 9636 8018                  	dc.b	nA1, $36, nRst, $18
00082DB3 E0C0                       	smpsPan             panCenter, $00
00082DB7 F2                         	smpsStop
00082DB8                            
00082DB8                            ; FM4 Data
00082DB8                            sonis_FM4:
00082DB8 E0C0                       	smpsPan             panCenter, $00
00082DBC F000 0102 04               	smpsModSet          $00, $01, $02, $04
00082DC1 F1                         	smpsModOn
00082DC2 F1                         	smpsModOn
00082DC3 F1                         	smpsModOn
00082DC4 F1                         	smpsModOn
00082DC5 8018 BE03 80BE 80BA 80BA+  	dc.b	nRst, $18, nCs5, $03, nRst, nCs5, nRst, nA4, nRst, nA4, nRst, nB4
00082DD1 0880 01BC 0C80 03BE 80BE+  	dc.b	$08, nRst, $01, nB4, $0C, nRst, $03, nCs5, nRst, nCs5, nRst, nA4
00082DDD 80BA 80BF 0880 01BF 0C80+  	dc.b	nRst, nA4, nRst, nD5, $08, nRst, $01, nD5, $0C, nRst, $1E, nC5
00082DE9 09BE 06                    	dc.b	$09, nCs5, $06
00082DEE E6FD                       	smpsAlterVol        $FD
00082DF0 9636 8018                  	dc.b	nA1, $36, nRst, $18
00082DF4 E0C0                       	smpsPan             panCenter, $00
00082DF8 F1                         	smpsModOn
00082DF9 F1                         	smpsModOn
00082DFA F1                         	smpsModOn
00082DFB F2                         	smpsStop
00082DFC                            
00082DFC                            ; FM5 Data
00082DFC                            sonis_FM5:
00082DFC E0C0                       	smpsPan             panCenter, $00
00082E00 E103                               smpsAlterNote       $03
00082E02 801E BE0B 8001 BE03 80BF+  	dc.b	nRst, $1E, nCs5, $0B, nRst, $01, nCs5, $03, nRst, nD5, $08, nRst
00082E0E 01BC 0C80 03BE 80BE 80BE+  	dc.b	$01, nB4, $0C, nRst, $03, nCs5, nRst, nCs5, nRst, nCs5, nRst, nA4
00082E1A 80B8 0880 01BC 0680 09BA+  	dc.b	nRst, nG4, $08, nRst, $01, nB4, $06, nRst, $09, nA4, $03, nA5
00082E26 02C4 03C1 C0BF 0280 01BD+  	dc.b	$02, nG5, $03, nE5, nEb5, nD5, $02, nRst, $01, nC5, $02, nRst
00082E32 01BA 07C5 09C6 0380 51     	dc.b	$01, nA4, $07, nAb5, $09, nA5, $03, nRst, $51
00082E3B E0C0                       	smpsPan             panCenter, $00
00082E3F F2                         	smpsStop
00082E40                            
00082E40                            sonis_PSG1:
00082E40 F2                                    smpsStop
00082E41                            sonis_PSG2:
00082E41 F2                                    smpsStop
00082E42                            sonis_Voices:
00082E42                            ;	Voice $00
00082E42                            ;	$3A
00082E42                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
00082E42                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
00082E42                            	smpsVcAlgorithm     $02
00082E42                            	smpsVcFeedback      $07
00082E42                            	smpsVcUnusedBits    $00
00082E42                            	smpsVcDetune        $00, $05, $00, $05
00082E42                            	smpsVcCoarseFreq    $02, $01, $08, $01
00082E42                            	smpsVcRateScale     $00, $00, $00, $00
00082E42                            	smpsVcAttackRate    $10, $1E, $1E, $1E
00082E42                            	smpsVcAmpMod        $00, $00, $00, $00
00082E42                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
00082E42                            	smpsVcDecayRate2    $02, $00, $00, $00
00082E42                            	smpsVcDecayLevel    $01, $00, $00, $00
00082E42                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00082E42 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
00082E5B                            
00082E5B                            ;	Voice $01
00082E5B                            ;	$20
00082E5B                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
00082E5B                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
00082E5B                            	smpsVcAlgorithm     $00
00082E5B                            	smpsVcFeedback      $04
00082E5B                            	smpsVcUnusedBits    $00
00082E5B                            	smpsVcDetune        $03, $03, $03, $03
00082E5B                            	smpsVcCoarseFreq    $01, $00, $05, $06
00082E5B                            	smpsVcRateScale     $02, $02, $03, $03
00082E5B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00082E5B                            	smpsVcAmpMod        $00, $00, $00, $00
00082E5B                            	smpsVcDecayRate1    $06, $09, $06, $07
00082E5B                            	smpsVcDecayRate2    $08, $06, $06, $07
00082E5B                            	smpsVcDecayLevel    $0F, $01, $01, $02
00082E5B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00082E5B 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
00082E74                            
00082E74                            ;	Voice $02
00082E74                            ;	$3A
00082E74                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00082E74                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00082E74                            	smpsVcAlgorithm     $02
00082E74                            	smpsVcFeedback      $07
00082E74                            	smpsVcUnusedBits    $00
00082E74                            	smpsVcDetune        $00, $00, $00, $00
00082E74                            	smpsVcCoarseFreq    $01, $01, $07, $01
00082E74                            	smpsVcRateScale     $01, $02, $02, $02
00082E74                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00082E74                            	smpsVcAmpMod        $00, $00, $00, $00
00082E74                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00082E74                            	smpsVcDecayRate2    $00, $00, $00, $00
00082E74                            	smpsVcDecayLevel    $00, $01, $0F, $01
00082E74                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00082E74 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00082E8D                            
00082E8D                            
00082E8D                            ;	Voice $03
00082E8D                            ;	$39
00082E8D                            ;	$06, $60, $30, $01, 	$3F, $3F, $5F, $5F, 	$11, $0F, $13, $09
00082E8D                            ;	$05, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$27, $2C, $97, $80
00082E8D                            	smpsVcAlgorithm     $01
00082E8D                            	smpsVcFeedback      $07
00082E8D                            	smpsVcUnusedBits    $00
00082E8D                            	smpsVcDetune        $00, $03, $06, $00
00082E8D                            	smpsVcCoarseFreq    $01, $00, $00, $06
00082E8D                            	smpsVcRateScale     $01, $01, $00, $00
00082E8D                            	smpsVcAttackRate    $1F, $1F, $3F, $3F
00082E8D                            	smpsVcAmpMod        $00, $00, $00, $00
00082E8D                            	smpsVcDecayRate1    $09, $13, $0F, $11
00082E8D                            	smpsVcDecayRate2    $03, $04, $04, $05
00082E8D                            	smpsVcDecayLevel    $02, $02, $02, $02
00082E8D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00082E8D 3906 6030 013F 3F5F 5F11+  	smpsVcTotalLevel    $00, $97, $2C, $27
00082EA6                            
00082EA6                            
00082EA6                            		even	
00082EA6                            Music9C:	incbin	sound\music9C.bin
00085FB0 00                         		even	
00085FB0                            Music9D:	incbin	sound\music9D.bin
0008727E                            		even	
0008727E                            Music9E:	incbin	sound\music9E.bin
00087416                            		even		
00087416                            Music9F:	incbin	sound\music9F.bin
00087504                            		even		
00087504                            
00087504                            ; ---------------------------------------------------------------------------
00087504                            ; Sound	effect pointers
00087504                            ; ---------------------------------------------------------------------------
00087504 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00087510 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0008751C 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00087528 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00087534 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00087540 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0008754C 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00087558 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00087564 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00087570 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0008757C 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00087588 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00087594 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000875A0 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000875AC 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000875B8 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000875C4 0000 0000                  		dc.l SoundD1
000875C8 0000 0000                  SoundD0Index:	dc.l SoundD0
000875CC                            SoundA0:	incbin	sound\soundA0.bin
000875E2                            		even
000875E2                            SoundA1:	incbin	sound\soundA1.bin
0008760C                            		even
0008760C                            SoundA2:	incbin	sound\soundA2.bin
0008762C                            		even
0008762C                            SoundA3:	incbin	sound\soundA3.bin
0008765E                            		even
0008765E                            SoundA4:	incbin	sound\soundA4.bin
00087694                            		even
00087694                            SoundA5:	incbin	sound\soundA5.bin
000876C0                            		even
000876C0                            SoundA6:	incbin	sound\soundA6.bin
000876F0                            		even
000876F0                            SoundA7:	incbin	sound\soundA7.bin
00087720                            		even
00087720                            SoundA8:	incbin	sound\soundA8.bin
00087754                            		even
00087754                            SoundA9:	incbin	sound\soundA9.bin
00087766                            		even
00087766                            SoundAA:	incbin	sound\soundAA.bin
000877A8                            		even
000877A8                            SoundAB:	incbin	sound\soundAB.bin
000877C8                            		even
000877C8                            SoundAC:	incbin	sound\soundAC.bin
000877FC                            		even
000877FC                            SoundAD:	incbin	sound\soundAD.bin
00087832                            		even
00087832                            SoundAE:	incbin	sound\soundAE.bin
0008787C                            		even
0008787C                            SoundAF:	incbin	sound\soundAF.bin
000878AA                            		even
000878AA                            SoundB0:	incbin	sound\soundB0.bin
000878DC                            		even
000878DC                            SoundB1:	incbin	sound\soundB1.bin
00087908                            		even
00087908                            SoundB2:	incbin	sound\soundB2.bin
00087958                            		even
00087958                            SoundB3:	incbin	sound\soundB3.bin
000879A2                            		even
000879A2                            SoundB4:	incbin	sound\soundB4.bin
000879FE                            		even
000879FE                            SoundB5:	incbin	sound\soundB5.bin
00087A2C                            		even
00087A2C                            SoundB6:	incbin	sound\soundB6.bin
00087A4A                            		even
00087A4A                            SoundB7:	incbin	sound\soundB7.bin
00087A86                            		even
00087A86                            SoundB8:	incbin	sound\soundB8.bin
00087AA4                            		even
00087AA4                            SoundB9:	incbin	sound\soundB9.bin
00087B08                            		even
00087B08                            SoundBA:	incbin	sound\soundBA.bin
00087B30                            		even
00087B30                            SoundBB:	incbin	sound\soundBB.bin
00087B5C                            		even
00087B5C                            SoundBC:	incbin	sound\soundBC.bin
00087B9E                            		even
00087B9E                            SoundBD:	incbin	sound\soundBD.bin
00087BF2                            		even
00087BF2                            SoundBE:	incbin	sound\soundBE.bin
00087C2C                            		even
00087C2C                            SoundBF:	incbin	sound\soundBF.bin
00087C9E                            		even
00087C9E                            SoundC0:	incbin	sound\soundC0.bin
00087CCC                            		even
00087CCC                            SoundC1:	incbin	sound\soundC1.bin
00087D06                            		even
00087D06                            SoundC2:	incbin	sound\soundC2.bin
00087D30                            		even
00087D30                            SoundC3:	incbin	sound\soundC3.bin
00087DAA                            		even
00087DAA                            SoundC4:	incbin	sound\soundC4.bin
00087DD2                            		even
00087DD2                            SoundC5:	incbin	sound\soundC5.bin
00087E3A                            		even
00087E3A                            SoundC6:	incbin	sound\soundC6.bin
00087E7C                            		even
00087E7C                            SoundC7:	incbin	sound\soundC7.bin
00087EAA                            		even
00087EAA                            SoundC8:	incbin	sound\soundC8.bin
00087EBC                            		even
00087EBC                            SoundC9:	incbin	sound\soundC9.bin
00087EEA                            		even
00087EEA                            SoundCA:	incbin	sound\soundCA.bin
00087F18                            		even
00087F18                            SoundCB:	incbin	sound\soundCB.bin
00087F64                            		even
00087F64                            SoundCC:	incbin	sound\soundCC.bin
00087F9E                            		even
00087F9E                            SoundCD:	incbin	sound\soundCD.bin
00087FAC                            		even
00087FAC                            SoundCE:	incbin	sound\soundCE.bin
00087FDA                            		even
00087FDA                            SoundCF:	incbin	sound\soundCF.bin
00088012                            		even
00088012                            SoundD0:	incbin	sound\soundD0.bin
0008804C                            		even
0008804C                            SoundD1:	incbin	sound\soundD1.bin
00088088                            		even
00088088                            SegaPCM:	incbin	sound\segapcm.bin
0008EA00                            		even
0008EA00                            Art_Dust	incbin	artunc\spindust.bin
00090340                            
00090340                            ; end of 'ROM'
00090340                            EndOfRom:
00090340                            
00090340                            
